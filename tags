!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
#	.\vim73\indent\dictconf.vim	/^inoremap <buffer> # X#$/;"	m
#	.\vim73\indent\dictdconf.vim	/^inoremap <buffer> # X#$/;"	m
$	.\vim73\tutor\tutor.cs	/^		$ (do konce øádku), atd.$/;"	m	signature:(do konce øádku)
$TUTOR	.\vim73\tutor\tutor.vim	/^  let $TUTOR = $VIMRUNTIME . s:tutorfile$/;"	v
$TUTOR	.\vim73\tutor\tutor.vim	/^  let $TUTOR = s:tutorxx$/;"	v
%	.\vim73\macros\less.vim	/^noremap <script> % %<SID>L$/;"	m
%	.\vim73\macros\matchit.vim	/^nnoremap <silent> %  :<C-U>call <SID>Match_wrapper('',1,'n') <CR>$/;"	m
%	.\vim73\macros\matchit.vim	/^onoremap <silent> %  v:<C-U>call <SID>Match_wrapper('',1,'o') <CR>$/;"	m
%	.\vim73\macros\matchit.vim	/^vnoremap <silent> %  :<C-U>call <SID>Match_wrapper('',1,'v') <CR>m'gv``$/;"	m
&	.\vim73\macros\life\life.vim	/^map & :%s\/^\\(-[ A-Z]*-\\)\\(-[ A-Z]*-\\)\\(-[.]*-\\)$\/\\2\\3\\3\/$/;"	m
&Edit.&Find\.\.\.		y:promptfind	.\vim73\menu.vim	/^  vnoremenu <silent>	 &Edit.&Find\\.\\.\\.		y:promptfind <C-R>=<SID>FixFText()<CR><CR>$/;"	m
&Edit.&Paste<Tab>"+gP		<C-R>+	.\vim73\menu.vim	/^cnoremenu	 &Edit.&Paste<Tab>"+gP		<C-R>+$/;"	m
&Edit.Find\	.\vim73\menu.vim	/^  vnoremenu	 &Edit.Find\\ and\\ Rep&lace<Tab>:s	:s\/$/;"	m
&Edit.Find\	.\vim73\menu.vim	/^  vnoremenu <silent>	 &Edit.Find\\ and\\ Rep&lace\\.\\.\\. y:promptrepl <C-R>=<SID>FixFText()<CR><CR>$/;"	m
&Edit.Put\	.\vim73\menu.vim	/^inoremenu	 &Edit.Put\\ &After<Tab>]p	<C-O>]p$/;"	m
&Edit.Put\	.\vim73\menu.vim	/^inoremenu	 &Edit.Put\\ &Before<Tab>[p	<C-O>[p$/;"	m
&File.&Print			:hardcopy<CR>	.\vim73\menu.vim	/^  vnoremenu &File.&Print			:hardcopy<CR>$/;"	m
&File.&Print			:w	.\vim73\menu.vim	/^  vnoremenu &File.&Print			:w !lpr<CR>$/;"	m
&Tools.&Diff.&Get\	.\vim73\menu.vim	/^  vnoremenu &Tools.&Diff.&Get\\ Block		:diffget<CR>$/;"	m
&Tools.&Diff.&Put\	.\vim73\menu.vim	/^  vnoremenu &Tools.&Diff.&Put\\ Block		:diffput<CR>$/;"	m
&Tools.&Jump\	.\vim73\menu.vim	/^vnoremenu &Tools.&Jump\\ to\\ this\\ tag<Tab>g^]	g<C-]>$/;"	m
(	.\vim73\macros\life\life.vim	/^map ( ,s,i,X0i?^#A $/;"	m
)0	.\vim73\macros\life\life.vim	/^map )0 o-                    --....................--....................-$/;"	m
)1	.\vim73\macros\life\life.vim	/^map )1 o-        VIM         --....................--....................-$/;"	m
)2	.\vim73\macros\life\life.vim	/^map )2 o-       LIVES        --....................--....................-$/;"	m
*	.\vim73\macros\urm\urm.vim	/^map * 1G\/INIT$/;"	m
+	.\vim73\macros\life\life.vim	/^map + <1C<2$/;"	m
,!	.\vim73\macros\life\life.vim	/^map ,! "byy$/;"	m
,#	.\vim73\macros\life\life.vim	/^map ,# "bP$/;"	m
,$	.\vim73\macros\life\life.vim	/^map ,$ dd$/;"	m
,%	.\vim73\macros\life\life.vim	/^map ,% "cp$/;"	m
,&	.\vim73\macros\life\life.vim	/^map ,& 0"gd\$$/;"	m
,*	.\vim73\macros\life\life.vim	/^map ,* @g$/;"	m
,-	.\vim73\macros\life\life.vim	/^map ,- :s\/.\/-\/g$/;"	m
,1	.\vim73\macros\life\life.vim	/^map ,1 y G$p$/;"	m
,2	.\vim73\macros\life\life.vim	/^map ,2 2y G$p$/;"	m
,3	.\vim73\macros\life\life.vim	/^map ,3 3y G$p$/;"	m
,@	.\vim73\macros\life\life.vim	/^map ,@ "cyy$/;"	m
,IIN	.\vim73\macros\life\life.vim	/^map ,IIN G?^top$/;"	m
,Iaa	.\vim73\macros\life\life.vim	/^map ,Iaa o=AB =BC =CD =DE =EF =FG =GH =HI =IJ =JK =KL =LM =MN =NO =OP =PQ =QR$/;"	m
,Iab	.\vim73\macros\life\life.vim	/^map ,Iab o=RS =ST =TU =UV =VW =WX =XY =YZ =Z $/;"	m
,Id0	.\vim73\macros\life\life.vim	/^map ,Id0 o#  .`a22lr $/;"	m
,Id1	.\vim73\macros\life\life.vim	/^map ,Id1 o# X .`a22lr $/;"	m
,Id2	.\vim73\macros\life\life.vim	/^map ,Id2 o# XX .`a22lr $/;"	m
,Id3	.\vim73\macros\life\life.vim	/^map ,Id3 o# XXX .`a22lrA$/;"	m
,Id4	.\vim73\macros\life\life.vim	/^map ,Id4 o# XXXX .`a22lr $/;"	m
,Id5	.\vim73\macros\life\life.vim	/^map ,Id5 o# XXXXX .`a22lr $/;"	m
,Id6	.\vim73\macros\life\life.vim	/^map ,Id6 o# XXXXXX .`a22lr $/;"	m
,Id7	.\vim73\macros\life\life.vim	/^map ,Id7 o# XXXXXXX .`a22lr $/;"	m
,Id8	.\vim73\macros\life\life.vim	/^map ,Id8 o# XXXXXXXX .`a22lr $/;"	m
,Il0	.\vim73\macros\life\life.vim	/^map ,Il0 o#XX .`a22lr $/;"	m
,Il1	.\vim73\macros\life\life.vim	/^map ,Il1 o#XXX .`a22lr $/;"	m
,Il2	.\vim73\macros\life\life.vim	/^map ,Il2 o#XXXX .,a$/;"	m
,Il3	.\vim73\macros\life\life.vim	/^map ,Il3 o#XXXXX .,a$/;"	m
,Il4	.\vim73\macros\life\life.vim	/^map ,Il4 o#XXXXXX .`a22lr $/;"	m
,Il5	.\vim73\macros\life\life.vim	/^map ,Il5 o#XXXXXXX .`a22lr $/;"	m
,Il6	.\vim73\macros\life\life.vim	/^map ,Il6 o#XXXXXXXX .`a22lr $/;"	m
,Il7	.\vim73\macros\life\life.vim	/^map ,Il7 o#XXXXXXXXX .`a22lr $/;"	m
,Il8	.\vim73\macros\life\life.vim	/^map ,Il8 O#XXXXXXXXXX .`a22lr $/;"	m
,R	.\vim73\macros\life\life.vim	/^map ,R 03stop$/;"	m
,X	.\vim73\macros\life\life.vim	/^map ,X :.g\/[A-Z]\/s\/\/X\/g$/;"	m
,Y	.\vim73\macros\life\life.vim	/^map ,Y "qy$@q$/;"	m
,^	.\vim73\macros\life\life.vim	/^map ,^ AiC$/;"	m
,a	.\vim73\macros\life\life.vim	/^map ,a `a,jGi?=,ma$/;"	m
,c	.\vim73\macros\life\life.vim	/^map ,c c$$/;"	m
,d	.\vim73\macros\life\life.vim	/^map ,d "qd$@q$/;"	m
,gq	.\vim73\macros\justify.vim	/^nmap ,gq :%s\/\\s\\+\/ \/g<CR>gq1G$/;"	m
,gq	.\vim73\macros\justify.vim	/^vmap ,gq :s\/\\s\\+\/ \/g<CR>gvgq$/;"	m
,i	.\vim73\macros\life\life.vim	/^map ,i `ay GP$/;"	m
,j	.\vim73\macros\life\life.vim	/^map ,j y $/;"	m
,m	.\vim73\macros\life\life.vim	/^map ,m p$/;"	m
,n	.\vim73\macros\life\life.vim	/^map ,n x$/;"	m
,o	.\vim73\macros\life\life.vim	/^map ,o oPut 'X's in the left box, then hit 'C' or 'R'$/;"	m
,r	.\vim73\macros\life\life.vim	/^map ,r makh,2`akF-l,1`ah,2`aF-l,1`ajh,2`ajF-l,1($/;"	m
,s	.\vim73\macros\life\life.vim	/^map ,s :.g\/ \/s\/\/\/g$/;"	m
/	.\vim73\macros\less.vim	/^noremap <script> \/ H$:call <SID>Forward()<CR>\/$/;"	m
0	.\vim73\syntax\hitest.vim	/^normal 0$/;"	m
1.100	.\vim73\menu.vim	/^cnoremenu <script> <silent> 1.100 PopUp.Select\\ &All	<C-U>call <SID>SelectAll()<CR>$/;"	m
1.100	.\vim73\menu.vim	/^inoremenu <script> <silent> 1.100 PopUp.Select\\ &All	<C-O>:call <SID>SelectAll()<CR>$/;"	m
1.100	.\vim73\menu.vim	/^noremenu  <script> <silent> 1.100 PopUp.Select\\ &All	:<C-U>call <SID>SelectAll()<CR>$/;"	m
1.20	.\vim73\menu.vim	/^vnoremenu 1.20 PopUp.Cu&t		"+x$/;"	m
1.30	.\vim73\menu.vim	/^cnoremenu 1.30 PopUp.&Copy		<C-Y>$/;"	m
1.30	.\vim73\menu.vim	/^vnoremenu 1.30 PopUp.&Copy		"+y$/;"	m
1.40	.\vim73\menu.vim	/^cnoremenu 1.40 PopUp.&Paste		<C-R>+$/;"	m
1.40	.\vim73\menu.vim	/^nnoremenu 1.40 PopUp.&Paste		"+gP$/;"	m
1.50	.\vim73\menu.vim	/^vnoremenu 1.50 PopUp.&Delete		x$/;"	m
1.60	.\vim73\menu.vim	/^vnoremenu 1.60 PopUp.Select\\ Blockwise	<C-V>$/;"	m
1.70	.\vim73\menu.vim	/^  vnoremenu 1.70 ToolBar.Cut		"+x$/;"	m
1.70	.\vim73\menu.vim	/^cnoremenu 1.70 PopUp.Select\\ &Word	<C-C>vaw$/;"	m
1.70	.\vim73\menu.vim	/^inoremenu 1.70 PopUp.Select\\ &Word	<C-O>vaw$/;"	m
1.70	.\vim73\menu.vim	/^nnoremenu 1.70 PopUp.Select\\ &Word	vaw$/;"	m
1.70	.\vim73\menu.vim	/^onoremenu 1.70 PopUp.Select\\ &Word	aw$/;"	m
1.70	.\vim73\menu.vim	/^vnoremenu 1.70 PopUp.Select\\ &Word	<C-C>vaw$/;"	m
1.73	.\vim73\menu.vim	/^cnoremenu 1.73 PopUp.Select\\ &Sentence	<C-C>vas$/;"	m
1.73	.\vim73\menu.vim	/^inoremenu 1.73 PopUp.Select\\ &Sentence	<C-O>vas$/;"	m
1.73	.\vim73\menu.vim	/^nnoremenu 1.73 PopUp.Select\\ &Sentence	vas$/;"	m
1.73	.\vim73\menu.vim	/^onoremenu 1.73 PopUp.Select\\ &Sentence	as$/;"	m
1.73	.\vim73\menu.vim	/^vnoremenu 1.73 PopUp.Select\\ &Sentence	<C-C>vas$/;"	m
1.77	.\vim73\menu.vim	/^cnoremenu 1.77 PopUp.Select\\ Pa&ragraph	<C-C>vap$/;"	m
1.77	.\vim73\menu.vim	/^inoremenu 1.77 PopUp.Select\\ Pa&ragraph	<C-O>vap$/;"	m
1.77	.\vim73\menu.vim	/^nnoremenu 1.77 PopUp.Select\\ Pa&ragraph	vap$/;"	m
1.77	.\vim73\menu.vim	/^onoremenu 1.77 PopUp.Select\\ Pa&ragraph	ap$/;"	m
1.77	.\vim73\menu.vim	/^vnoremenu 1.77 PopUp.Select\\ Pa&ragraph	<C-C>vap$/;"	m
1.80	.\vim73\menu.vim	/^  cnoremenu 1.80 ToolBar.Copy		<C-Y>$/;"	m
1.80	.\vim73\menu.vim	/^  vnoremenu 1.80 ToolBar.Copy		"+y$/;"	m
1.80	.\vim73\menu.vim	/^cnoremenu 1.80 PopUp.Select\\ &Line	<C-C>V$/;"	m
1.80	.\vim73\menu.vim	/^inoremenu 1.80 PopUp.Select\\ &Line	<C-O>V$/;"	m
1.80	.\vim73\menu.vim	/^nnoremenu 1.80 PopUp.Select\\ &Line	V$/;"	m
1.80	.\vim73\menu.vim	/^onoremenu 1.80 PopUp.Select\\ &Line	<C-C>V$/;"	m
1.80	.\vim73\menu.vim	/^vnoremenu 1.80 PopUp.Select\\ &Line	<C-C>V$/;"	m
1.90	.\vim73\menu.vim	/^  nnoremenu 1.90 ToolBar.Paste		"+gP$/;"	m
1.90	.\vim73\menu.vim	/^cnoremenu 1.90 PopUp.Select\\ &Block	<C-C><C-V>$/;"	m
1.90	.\vim73\menu.vim	/^inoremenu 1.90 PopUp.Select\\ &Block	<C-O><C-V>$/;"	m
1.90	.\vim73\menu.vim	/^nnoremenu 1.90 PopUp.Select\\ &Block	<C-V>$/;"	m
1.90	.\vim73\menu.vim	/^onoremenu 1.90 PopUp.Select\\ &Block	<C-C><C-V>$/;"	m
1.90	.\vim73\menu.vim	/^vnoremenu 1.90 PopUp.Select\\ &Block	<C-C><C-V>$/;"	m
20.340	.\vim73\menu.vim	/^vnoremenu 20.340 &Edit.Cu&t<Tab>"+x		"+x$/;"	m
20.350	.\vim73\menu.vim	/^cnoremenu 20.350 &Edit.&Copy<Tab>"+y		<C-Y>$/;"	m
20.350	.\vim73\menu.vim	/^vnoremenu 20.350 &Edit.&Copy<Tab>"+y		"+y$/;"	m
20.360	.\vim73\menu.vim	/^nnoremenu 20.360 &Edit.&Paste<Tab>"+gP		"+gP$/;"	m
20.370	.\vim73\menu.vim	/^nnoremenu 20.370 &Edit.Put\\ &Before<Tab>[p	[p$/;"	m
20.380	.\vim73\menu.vim	/^nnoremenu 20.380 &Edit.Put\\ &After<Tab>]p	]p$/;"	m
20.390	.\vim73\menu.vim	/^  vnoremenu 20.390 &Edit.&Delete<Tab>x		x$/;"	m
20.400	.\vim73\menu.vim	/^cnoremenu <script> <silent> 20.400 &Edit.&Select\\ All<Tab>ggVG	<C-U>call <SID>SelectAll()<CR>$/;"	m
20.400	.\vim73\menu.vim	/^inoremenu <script> <silent> 20.400 &Edit.&Select\\ All<Tab>ggVG	<C-O>:call <SID>SelectAll()<CR>$/;"	m
20.400	.\vim73\menu.vim	/^noremenu  <script> <silent> 20.400 &Edit.&Select\\ All<Tab>ggVG	:<C-U>call <SID>SelectAll()<CR>$/;"	m
40.340.220	.\vim73\menu.vim	/^  vnoremenu 40.340.220 &Tools.&Folding.Create\\ &Fold<Tab>zf	zf$/;"	m
<	.\vim73\ftplugin\cobol.vim	/^        nnoremap <silent> <buffer> < :set opfunc=<SID>DecreaseFunc<CR>g@$/;"	m
<	.\vim73\ftplugin\cobol.vim	/^    vnoremap <silent> <buffer> < :call CobolIndentBlock(-v:count1)<CR>$/;"	m
<	.\vim73\macros\less.vim	/^map < g$/;"	m
<1	.\vim73\macros\life\life.vim	/^map <1 G?^top$/;"	m
<2	.\vim73\macros\life\life.vim	/^map <2 G?^top$/;"	m
<2-LeftMouse>	<2-RightMouse>	.\vim73\macros\swapmous.vim	/^noremap	 <2-LeftMouse>	<2-RightMouse>$/;"	m
<2-RightMouse>	<2-LeftMouse>	.\vim73\macros\swapmous.vim	/^noremap	 <2-RightMouse>	<2-LeftMouse>$/;"	m
<3-LeftMouse>	<3-RightMouse>	.\vim73\macros\swapmous.vim	/^noremap	 <3-LeftMouse>	<3-RightMouse>$/;"	m
<3-RightMouse>	<3-LeftMouse>	.\vim73\macros\swapmous.vim	/^noremap	 <3-RightMouse>	<3-LeftMouse>$/;"	m
<4-LeftMouse>	<4-RightMouse>	.\vim73\macros\swapmous.vim	/^noremap	 <4-LeftMouse>	<4-RightMouse>$/;"	m
<4-RightMouse>	<4-LeftMouse>	.\vim73\macros\swapmous.vim	/^noremap	 <4-RightMouse>	<4-LeftMouse>$/;"	m
<<	.\vim73\ftplugin\cobol.vim	/^    nnoremap <silent> <buffer> << :call CobolIndentBlock(-1)<CR>$/;"	m
<<	.\vim73\macros\life\life.vim	/^map << :r!date$/;"	m
<BS>	.\vim73\mswin.vim	/^vnoremap <BS> d$/;"	m
<C-A>	.\vim73\mswin.vim	/^cnoremap <C-A> <C-C>gggH<C-O>G$/;"	m
<C-A>	.\vim73\mswin.vim	/^inoremap <C-A> <C-O>gg<C-O>gH<C-O>G$/;"	m
<C-A>	.\vim73\mswin.vim	/^noremap <C-A> gggH<C-O>G$/;"	m
<C-A>	.\vim73\mswin.vim	/^onoremap <C-A> <C-C>gggH<C-O>G$/;"	m
<C-B>	.\vim73\macros\less.vim	/^map <C-B> b$/;"	m
<C-C>	.\vim73\mswin.vim	/^vnoremap <C-C> "+y$/;"	m
<C-D>	.\vim73\ftplugin\cobol.vim	/^    inoremap <silent> <buffer> <C-D> <C-R>=<SID>DecreaseIndent()<CR><C-R>=<SID>RestoreShiftwidth()<CR>$/;"	m
<C-D>	.\vim73\macros\less.vim	/^map <C-D> d$/;"	m
<C-E>	.\vim73\macros\less.vim	/^map <C-E> <CR>$/;"	m
<C-F4>	.\vim73\mswin.vim	/^cnoremap <C-F4> <C-C><C-W>c$/;"	m
<C-F4>	.\vim73\mswin.vim	/^inoremap <C-F4> <C-O><C-W>c$/;"	m
<C-F4>	.\vim73\mswin.vim	/^noremap <C-F4> <C-W>c$/;"	m
<C-F4>	.\vim73\mswin.vim	/^onoremap <C-F4> <C-C><C-W>c$/;"	m
<C-F>	.\vim73\evim.vim	/^cnoremap <silent> <C-F> <C-C>:promptfind<CR>$/;"	m
<C-F>	.\vim73\evim.vim	/^inoremap <silent> <C-F> <C-O>:promptfind<CR>$/;"	m
<C-F>	.\vim73\evim.vim	/^noremap <silent> <C-F> :promptfind<CR>$/;"	m
<C-F>	.\vim73\evim.vim	/^onoremap <silent> <C-F> <C-C>:promptfind<CR>$/;"	m
<C-F>	.\vim73\evim.vim	/^vnoremap <silent> <C-F> y:promptfind <C-R>"<CR>$/;"	m
<C-F>	.\vim73\macros\less.vim	/^map <C-F> <Space>$/;"	m
<C-Insert>	.\vim73\mswin.vim	/^vnoremap <C-Insert> "+y$/;"	m
<C-J>	.\vim73\macros\less.vim	/^map <C-J> <CR>$/;"	m
<C-K>	.\vim73\macros\less.vim	/^map <C-K> k$/;"	m
<C-N>	.\vim73\ftplugin\ada.vim	/^      inoremap <unique> <buffer> <C-N> <C-R>=ada#Completion("\\<lt>C-N>")<cr>$/;"	m
<C-N>	.\vim73\macros\less.vim	/^map <C-N> <CR>$/;"	m
<C-P>	.\vim73\ftplugin\ada.vim	/^      inoremap <unique> <buffer> <C-P> <C-R>=ada#Completion("\\<lt>C-P>")<cr>$/;"	m
<C-P>	.\vim73\macros\less.vim	/^map <C-P> k$/;"	m
<C-Q>		<C-V>	.\vim73\mswin.vim	/^noremap <C-Q>		<C-V>$/;"	m
<C-R>	.\vim73\macros\less.vim	/^noremap <script> <C-R> <C-L><SID>L$/;"	m
<C-S>		:update<CR>	.\vim73\mswin.vim	/^noremap <C-S>		:update<CR>$/;"	m
<C-S>		<C-C>:update<CR>	.\vim73\mswin.vim	/^vnoremap <C-S>		<C-C>:update<CR>$/;"	m
<C-S>		<C-O>:update<CR>	.\vim73\mswin.vim	/^inoremap <C-S>		<C-O>:update<CR>$/;"	m
<C-T>	.\vim73\ftplugin\cobol.vim	/^    inoremap <silent> <buffer> <C-T> <C-R>=<SID>IncreaseIndent()<CR><C-R>=<SID>RestoreShiftwidth()<CR>$/;"	m
<C-T>	.\vim73\ftplugin\pdf.vim	/^nnoremap <silent><buffer> <C-T> :if len(b:pdf_tagstack) > 0 <Bar> call setpos('.',remove(b:pdf_tagstack, -1)) <Bar> else <Bar> exe "norm! \\<Lt>C-T>" <Bar> endif<CR>$/;"	m
<C-Tab>	.\vim73\mswin.vim	/^cnoremap <C-Tab> <C-C><C-W>w$/;"	m
<C-Tab>	.\vim73\mswin.vim	/^inoremap <C-Tab> <C-O><C-W>w$/;"	m
<C-Tab>	.\vim73\mswin.vim	/^noremap <C-Tab> <C-W>w$/;"	m
<C-Tab>	.\vim73\mswin.vim	/^onoremap <C-Tab> <C-C><C-W>w$/;"	m
<C-U>	.\vim73\macros\less.vim	/^noremap <script> <C-U> <C-U><SID>L$/;"	m
<C-U>	.\vim73\vimrc_example.vim	/^inoremap <C-U> <C-G>u<C-U>$/;"	m
<C-V>		"+gP	.\vim73\mswin.vim	/^map <C-V>		"+gP$/;"	m
<C-V>		<C-R>+	.\vim73\mswin.vim	/^cmap <C-V>		<C-R>+$/;"	m
<C-V>	.\vim73\macros\less.vim	/^map <C-V> <Space>$/;"	m
<C-W><C-]>	.\vim73\ftplugin\cucumber.vim	/^  nmap <silent><buffer> <C-W><C-]>  :<C-U>exe <SID>jump('split',v:count)<CR>$/;"	m
<C-W><C-]>	.\vim73\ftplugin\ruby.vim	/^    nnoremap <silent> <buffer> <C-W><C-]>  :<C-U>exe v:count1."stag <C-R>=RubyCursorIdentifier()<CR>"<CR>$/;"	m
<C-W>]	.\vim73\ftplugin\cucumber.vim	/^  nmap <silent><buffer> <C-W>]      :<C-U>exe <SID>jump('split',v:count)<CR>$/;"	m
<C-W>]	.\vim73\ftplugin\ruby.vim	/^    nnoremap <silent> <buffer> <C-W>]      :<C-U>exe v:count1."stag <C-R>=RubyCursorIdentifier()<CR>"<CR>$/;"	m
<C-W>g<C-]>	.\vim73\ftplugin\ruby.vim	/^    nnoremap <silent> <buffer> <C-W>g<C-]> :<C-U>exe        "stjump <C-R>=RubyCursorIdentifier()<CR>"<CR>$/;"	m
<C-W>g]	.\vim73\ftplugin\ruby.vim	/^    nnoremap <silent> <buffer> <C-W>g]     :<C-U>exe      "stselect <C-R>=RubyCursorIdentifier()<CR>"<CR>$/;"	m
<C-W>g}	.\vim73\ftplugin\ruby.vim	/^    nnoremap <silent> <buffer> <C-W>g}     :<C-U>exe        "ptjump <C-R>=RubyCursorIdentifier()<CR>"<CR>$/;"	m
<C-W>}	.\vim73\ftplugin\cucumber.vim	/^  nmap <silent><buffer> <C-W>}      :<C-U>exe <SID>jump('pedit',v:count)<CR>$/;"	m
<C-W>}	.\vim73\ftplugin\ruby.vim	/^    nnoremap <silent> <buffer> <C-W>}      :<C-U>exe          "ptag <C-R>=RubyCursorIdentifier()<CR>"<CR>$/;"	m
<C-X>	.\vim73\mswin.vim	/^vnoremap <C-X> "+x$/;"	m
<C-X><C-]>	.\vim73\ftplugin\ada.vim	/^      inoremap <unique> <buffer> <C-X><C-]> <C-R>=<SID>ada#Completion("\\<lt>C-X>\\<lt>C-]>")<cr>$/;"	m
<C-Y>	.\vim73\macros\less.vim	/^map <C-Y> k$/;"	m
<C-Y>	.\vim73\mswin.vim	/^inoremap <C-Y> <C-O><C-R>$/;"	m
<C-Y>	.\vim73\mswin.vim	/^noremap <C-Y> <C-R>$/;"	m
<C-Z>	.\vim73\mswin.vim	/^inoremap <C-Z> <C-O>u$/;"	m
<C-Z>	.\vim73\mswin.vim	/^noremap <C-Z> u$/;"	m
<C-]>	.\vim73\ftplugin\ada.vim	/^	 nnoremap <unique> <buffer> <C-]>    :call ada#Jump_Tag ('', 'tjump')<cr>$/;"	m
<C-]>	.\vim73\ftplugin\ada.vim	/^	 nnoremap <unique> <buffer> <C-]>    :call ada#List_Tag ()<cr>$/;"	m
<C-]>	.\vim73\ftplugin\cucumber.vim	/^  nmap <silent><buffer> <C-]>       :<C-U>exe <SID>jump('edit',v:count)<CR>$/;"	m
<C-]>	.\vim73\ftplugin\pdf.vim	/^nnoremap <silent><buffer> <C-]> :call <SID>Tag()<CR>$/;"	m
<C-]>	.\vim73\ftplugin\ruby.vim	/^    nnoremap <silent> <buffer> <C-]>       :<C-U>exe  v:count1."tag <C-R>=RubyCursorIdentifier()<CR>"<CR>$/;"	m
<CR>	.\vim73\macros\less.vim	/^noremap <script> <CR> <C-E><SID>L$/;"	m
<CR>	.\vim73\optwin.vim	/^inoremap <silent> <buffer> <CR> <Esc>:call <SID>CR()<CR>$/;"	m
<CR>	.\vim73\optwin.vim	/^noremap <silent> <buffer> <CR> <C-\\><C-N>:call <SID>CR()<CR>$/;"	m
<D-S-s>	.\vim73\macmap.vim	/^cmap <special> <D-S-s> <C-C><D-s>$/;"	m
<D-S-s>	.\vim73\macmap.vim	/^imap <special> <D-S-s> <C-O><D-s>$/;"	m
<D-S-s>	.\vim73\macmap.vim	/^nnoremap <special> <D-S-s> :browse confirm saveas<CR>$/;"	m
<D-S-s>	.\vim73\macmap.vim	/^omap <special> <D-S-s> <Esc><D-s>$/;"	m
<D-S-s>	.\vim73\macmap.vim	/^vmap <special> <D-S-s> <Esc><D-s>gv$/;"	m
<D-a>	.\vim73\macmap.vim	/^cmap <special> <D-a> <C-C><D-a>$/;"	m
<D-a>	.\vim73\macmap.vim	/^imap <special> <D-a> <Esc><D-a>$/;"	m
<D-a>	.\vim73\macmap.vim	/^nnoremap <silent> <special> <D-a> :if &slm != ""<Bar>exe ":norm gggH<C-O>G"<Bar> else<Bar>exe ":norm ggVG"<Bar>endif<CR>$/;"	m
<D-a>	.\vim73\macmap.vim	/^omap <special> <D-a> <Esc><D-a>$/;"	m
<D-a>	.\vim73\macmap.vim	/^vmap <special> <D-a> <Esc><D-a>$/;"	m
<D-c>	.\vim73\macmap.vim	/^cnoremap <special> <D-c> <C-Y>$/;"	m
<D-c>	.\vim73\macmap.vim	/^vnoremap <special> <D-c> "+y$/;"	m
<D-f>	.\vim73\macmap.vim	/^cmap <special> <D-f> <C-C><D-f>$/;"	m
<D-f>	.\vim73\macmap.vim	/^imap <special> <D-f> <Esc><D-f>$/;"	m
<D-f>	.\vim73\macmap.vim	/^nnoremap <special> <D-f> \/$/;"	m
<D-f>	.\vim73\macmap.vim	/^omap <special> <D-f> <Esc><D-f>$/;"	m
<D-f>	.\vim73\macmap.vim	/^vmap <special> <D-f> <Esc><D-f>$/;"	m
<D-g>	.\vim73\macmap.vim	/^cmap <special> <D-g> <C-C><D-g>$/;"	m
<D-g>	.\vim73\macmap.vim	/^imap <special> <D-g> <C-O><D-g>$/;"	m
<D-g>	.\vim73\macmap.vim	/^nnoremap <special> <D-g> n$/;"	m
<D-g>	.\vim73\macmap.vim	/^omap <special> <D-g> <Esc><D-g>$/;"	m
<D-g>	.\vim73\macmap.vim	/^vmap <special> <D-g> <Esc><D-g>$/;"	m
<D-n>	.\vim73\macmap.vim	/^cmap <special> <D-n> <C-C><D-n>$/;"	m
<D-n>	.\vim73\macmap.vim	/^imap <special> <D-n> <C-O><D-n>$/;"	m
<D-n>	.\vim73\macmap.vim	/^nnoremap <special> <D-n> :confirm enew<CR>$/;"	m
<D-n>	.\vim73\macmap.vim	/^omap <special> <D-n> <Esc><D-n>$/;"	m
<D-n>	.\vim73\macmap.vim	/^vmap <special> <D-n> <Esc><D-n>gv$/;"	m
<D-o>	.\vim73\macmap.vim	/^cmap <special> <D-o> <C-C><D-o>$/;"	m
<D-o>	.\vim73\macmap.vim	/^imap <special> <D-o> <C-O><D-o>$/;"	m
<D-o>	.\vim73\macmap.vim	/^nnoremap <special> <D-o> :browse confirm e<CR>$/;"	m
<D-o>	.\vim73\macmap.vim	/^omap <special> <D-o> <Esc><D-o>$/;"	m
<D-o>	.\vim73\macmap.vim	/^vmap <special> <D-o> <Esc><D-o>gv$/;"	m
<D-s>	.\vim73\macmap.vim	/^cmap <special> <D-s> <C-C><D-s>$/;"	m
<D-s>	.\vim73\macmap.vim	/^imap <special> <D-s> <C-O><D-s>$/;"	m
<D-s>	.\vim73\macmap.vim	/^nnoremap <silent> <special> <D-s> :if expand("%") == ""<Bar>browse confirm w<Bar> else<Bar>confirm w<Bar>endif<CR>$/;"	m
<D-s>	.\vim73\macmap.vim	/^omap <special> <D-s> <Esc><D-s>$/;"	m
<D-s>	.\vim73\macmap.vim	/^vmap <special> <D-s> <Esc><D-s>gv$/;"	m
<D-v>	.\vim73\macmap.vim	/^cnoremap <special> <D-v> <C-R>+$/;"	m
<D-v>	.\vim73\macmap.vim	/^nnoremap <special> <D-v> "+gP$/;"	m
<D-w>	.\vim73\macmap.vim	/^cmap <special> <D-w> <C-C><D-w>$/;"	m
<D-w>	.\vim73\macmap.vim	/^imap <special> <D-w> <C-O><D-w>$/;"	m
<D-w>	.\vim73\macmap.vim	/^nnoremap <silent> <special> <D-w> :if winheight(2) < 0 <Bar> confirm enew <Bar> else <Bar> confirm close <Bar> endif<CR>$/;"	m
<D-w>	.\vim73\macmap.vim	/^omap <special> <D-w> <Esc><D-w>$/;"	m
<D-w>	.\vim73\macmap.vim	/^vmap <special> <D-w> <Esc><D-w>gv$/;"	m
<D-x>	.\vim73\macmap.vim	/^vnoremap <special> <D-x> "+x$/;"	m
<D-z>	.\vim73\macmap.vim	/^cmap <special> <D-z> <C-C><D-z>$/;"	m
<D-z>	.\vim73\macmap.vim	/^imap <special> <D-z> <C-O><D-z>$/;"	m
<D-z>	.\vim73\macmap.vim	/^nnoremap <special> <D-z> u$/;"	m
<D-z>	.\vim73\macmap.vim	/^omap <special> <D-z> <Esc><D-z>$/;"	m
<D-z>	.\vim73\macmap.vim	/^vmap <special> <D-z> <Esc><D-z>gv$/;"	m
<Down>	.\vim73\evim.vim	/^inoremap <silent> <Down> <C-R>=pumvisible() ? "\\<lt>Down>" : "\\<lt>C-O>gj"<CR>$/;"	m
<Down>	.\vim73\ftplugin\flexwiki.vim	/^      imap <buffer> <Down>   <C-o>gj$/;"	m
<Down>	.\vim73\ftplugin\flexwiki.vim	/^  nmap <buffer> <Down> gj$/;"	m
<Down>	.\vim73\ftplugin\flexwiki.vim	/^  vmap <buffer> <Down> gj$/;"	m
<Esc><	.\vim73\macros\less.vim	/^map <Esc>< g$/;"	m
<Esc><Space>	.\vim73\macros\less.vim	/^map <Esc><Space> <Space>$/;"	m
<Esc>>	.\vim73\macros\less.vim	/^map <Esc>> G$/;"	m
<Esc>v	.\vim73\macros\less.vim	/^map <Esc>v b$/;"	m
<Leader>K	.\vim73\ftplugin\man.vim	/^  nmap <Leader>K :call <SID>PreGetPage(0)<CR>$/;"	m
<Leader>o	.\vim73\ftplugin\changelog.vim	/^    noremap <buffer> <silent> <Leader>o <Esc>:call <SID>new_changelog_entry()<CR>$/;"	m
<Leader>o	.\vim73\ftplugin\changelog.vim	/^  nnoremap <silent> <Leader>o :call <SID>open_changelog()<CR>$/;"	m
<LeftDrag>	<RightDrag>	.\vim73\macros\swapmous.vim	/^noremap	 <LeftDrag>	<RightDrag>$/;"	m
<LeftDrag>	<RightDrag>	.\vim73\macros\swapmous.vim	/^noremap! <LeftDrag>	<RightDrag>$/;"	m
<LeftMouse>	<RightMouse>	.\vim73\macros\swapmous.vim	/^noremap	 <LeftMouse>	<RightMouse>$/;"	m
<LeftMouse>	<RightMouse>	.\vim73\macros\swapmous.vim	/^noremap! <LeftMouse>	<RightMouse>$/;"	m
<LeftRelease>	<RightRelease>	.\vim73\macros\swapmous.vim	/^noremap	 <LeftRelease>	<RightRelease>$/;"	m
<LeftRelease>	<RightRelease>	.\vim73\macros\swapmous.vim	/^noremap! <LeftRelease>	<RightRelease>$/;"	m
<LocalLeader><LocalLeader>	.\vim73\ftplugin\abaqus.vim	/^noremap <silent><buffer> <LocalLeader><LocalLeader> $/;"	m
<LocalLeader>C	.\vim73\ftplugin\lprolog.vim	/^    nmap <buffer> <LocalLeader>C <Plug>LUncomOff$/;"	m
<LocalLeader>C	.\vim73\ftplugin\lprolog.vim	/^    vmap <buffer> <LocalLeader>C <Plug>BUncomOff$/;"	m
<LocalLeader>C	.\vim73\ftplugin\ocaml.vim	/^    nmap <buffer> <LocalLeader>C <Plug>LUncomOff$/;"	m
<LocalLeader>C	.\vim73\ftplugin\ocaml.vim	/^    vmap <buffer> <LocalLeader>C <Plug>BUncomOff$/;"	m
<LocalLeader>S	.\vim73\ftplugin\ocaml.vim	/^  map <LocalLeader>S :call OCaml_switch(1)<CR>$/;"	m
<LocalLeader>c	.\vim73\ftplugin\lprolog.vim	/^    nmap <buffer> <LocalLeader>c <Plug>LUncomOn$/;"	m
<LocalLeader>c	.\vim73\ftplugin\lprolog.vim	/^    vmap <buffer> <LocalLeader>c <Plug>BUncomOn$/;"	m
<LocalLeader>c	.\vim73\ftplugin\ocaml.vim	/^    nmap <buffer> <LocalLeader>c <Plug>LUncomOn$/;"	m
<LocalLeader>c	.\vim73\ftplugin\ocaml.vim	/^    vmap <buffer> <LocalLeader>c <Plug>BUncomOn$/;"	m
<LocalLeader>c	.\vim73\ftplugin\spec.vim	/^		map <buffer> <LocalLeader>c <Plug>SpecChangelog$/;"	m
<LocalLeader>h	.\vim73\ftplugin\man.vim	/^      nmap <buffer> <LocalLeader>h <Plug>ManBS$/;"	m
<LocalLeader>q	.\vim73\ftplugin\mail.vim	/^    nmap <buffer> <LocalLeader>q <Plug>MailQuote$/;"	m
<LocalLeader>q	.\vim73\ftplugin\mail.vim	/^    vmap <buffer> <LocalLeader>q <Plug>MailQuote$/;"	m
<LocalLeader>s	.\vim73\ftplugin\ocaml.vim	/^  map <LocalLeader>s :call OCaml_switch(0)<CR>$/;"	m
<LocalLeader>t	.\vim73\ftplugin\ocaml.vim	/^  map  <silent> <LocalLeader>t :call Ocaml_print_type("normal")<CR>$/;"	m
<LocalLeader>t	.\vim73\ftplugin\ocaml.vim	/^  vmap <silent> <LocalLeader>t :<C-U>call Ocaml_print_type("visual")<CR>`<$/;"	m
<M-Space>	.\vim73\mswin.vim	/^  cnoremap <M-Space> <C-C>:simalt ~<CR>$/;"	m
<M-Space>	.\vim73\mswin.vim	/^  inoremap <M-Space> <C-O>:simalt ~<CR>$/;"	m
<M-Space>	.\vim73\mswin.vim	/^  noremap <M-Space> :simalt ~<CR>$/;"	m
<Plug>BUncomOff	.\vim73\ftplugin\lprolog.vim	/^  vnoremap <buffer> <Plug>BUncomOff <ESC>:'<,'><CR>`<dd`>dd`<$/;"	m
<Plug>BUncomOff	.\vim73\ftplugin\ocaml.vim	/^  vnoremap <buffer> <Plug>BUncomOff <ESC>:'<,'><CR>`<dd`>dd`<$/;"	m
<Plug>BUncomOn	.\vim73\ftplugin\lprolog.vim	/^  vnoremap <buffer> <Plug>BUncomOn <ESC>:'<,'><CR>`<O<ESC>0i\/*<ESC>`>o<ESC>0i*\/<ESC>`<$/;"	m
<Plug>BUncomOn	.\vim73\ftplugin\ocaml.vim	/^  vnoremap <buffer> <Plug>BUncomOn <ESC>:'<,'><CR>`<O<ESC>0i(*<ESC>`>o<ESC>0i*)<ESC>`<$/;"	m
<Plug>Comment	.\vim73\ftplugin\cobol.vim	/^    noremap <silent> <buffer> <Plug>Comment          :call <SID>Comment('c')<CR>$/;"	m
<Plug>DeComment	.\vim73\ftplugin\cobol.vim	/^    noremap <silent> <buffer> <Plug>DeComment        :call <SID>Comment('u')<CR>$/;"	m
<Plug>LUncomOff	.\vim73\ftplugin\lprolog.vim	/^  nnoremap <buffer> <Plug>LUncomOff <ESC>:s\/^\\\/\\* \\(.*\\) \\*\\\/\/\\1\/<CR>$/;"	m
<Plug>LUncomOff	.\vim73\ftplugin\ocaml.vim	/^  nnoremap <buffer> <Plug>LUncomOff :s\/^(\\* \\(.*\\) \\*)\/\\1\/<CR>:noh<CR>$/;"	m
<Plug>LUncomOn	.\vim73\ftplugin\lprolog.vim	/^  nnoremap <buffer> <Plug>LUncomOn mz0i\/* <ESC>$A *\/<ESC>`z$/;"	m
<Plug>LUncomOn	.\vim73\ftplugin\ocaml.vim	/^  nnoremap <buffer> <Plug>LUncomOn mz0i(* <ESC>$A *)<ESC>`z$/;"	m
<Plug>MailQuote	.\vim73\ftplugin\mail.vim	/^  nnoremap <buffer> <Plug>MailQuote :.,$s\/^\/> \/<CR>:noh<CR>``$/;"	m
<Plug>MailQuote	.\vim73\ftplugin\mail.vim	/^  vnoremap <buffer> <Plug>MailQuote :s\/^\/> \/<CR>:noh<CR>``$/;"	m
<Plug>ManBS	.\vim73\ftplugin\man.vim	/^    nnoremap <buffer> <Plug>ManBS :%s\/.\\b\/\/g<CR>:setl nomod<CR>''$/;"	m
<Plug>NetrwBrowseX	.\vim73\plugin\netrwPlugin.vim	/^ nno <silent> <Plug>NetrwBrowseX :call netrw#NetrwBrowseX(expand("<cWORD>"),0)<cr>$/;"	m
<Plug>SpecChangelog	.\vim73\ftplugin\spec.vim	/^noremap <buffer> <unique> <script> <Plug>SpecChangelog :call <SID>SpecChangelog("")<CR>$/;"	m
<Plug>Traditional	.\vim73\ftplugin\cobol.vim	/^    noremap <silent> <buffer> <Plug>Traditional      :call <SID>Comment('t')<CR>$/;"	m
<Plug>VisualComment	.\vim73\ftplugin\cobol.vim	/^    noremap <silent> <buffer> <Plug>VisualComment     :'<,'>call <SID>Comment('c')<CR>$/;"	m
<Plug>VisualDeComment	.\vim73\ftplugin\cobol.vim	/^    noremap <silent> <buffer> <Plug>VisualDeComment   :'<,'>call <SID>Comment('u')<CR>$/;"	m
<Plug>VisualTraditional	.\vim73\ftplugin\cobol.vim	/^    noremap <silent> <buffer> <Plug>VisualTraditional :'<,'>call <SID>Comment('t')<CR>$/;"	m
<Plug>snipMateBack	.\vimfiles\bundle\vim-snipmate\plugin\snipMate.vim	/^inoremap <silent> <Plug>snipMateBack           <C-R>=snipMate#BackwardsSnippet()<CR>$/;"	m
<Plug>snipMateNextOrTrigger	.\vimfiles\bundle\vim-snipmate\plugin\snipMate.vim	/^inoremap <silent> <Plug>snipMateNextOrTrigger  <C-R>=snipMate#TriggerSnippet()<CR>$/;"	m
<Plug>snipMateShow	.\vimfiles\bundle\vim-snipmate\plugin\snipMate.vim	/^inoremap <silent> <Plug>snipMateShow           <C-R>=snipMate#ShowAvailableSnips()<CR>$/;"	m
<RightDrag>	<LeftDrag>	.\vim73\macros\swapmous.vim	/^noremap	 <RightDrag>	<LeftDrag>$/;"	m
<RightDrag>	<LeftDrag>	.\vim73\macros\swapmous.vim	/^noremap! <RightDrag>	<LeftDrag>$/;"	m
<RightMouse>	<LeftMouse>	.\vim73\macros\swapmous.vim	/^noremap	 <RightMouse>	<LeftMouse>$/;"	m
<RightMouse>	<LeftMouse>	.\vim73\macros\swapmous.vim	/^noremap! <RightMouse>	<LeftMouse>$/;"	m
<RightRelease>	<LeftRelease>	.\vim73\macros\swapmous.vim	/^noremap	 <RightRelease>	<LeftRelease>$/;"	m
<RightRelease>	<LeftRelease>	.\vim73\macros\swapmous.vim	/^noremap! <RightRelease>	<LeftRelease>$/;"	m
<S-Del>	.\vim73\mswin.vim	/^vnoremap <S-Del> "+x$/;"	m
<S-Down>	.\vim73\ftplugin\flexwiki.vim	/^  imap <buffer> <S-Down>   <C-o>gj$/;"	m
<S-Insert>		"+gP	.\vim73\mswin.vim	/^map <S-Insert>		"+gP$/;"	m
<S-Insert>		<C-R>+	.\vim73\mswin.vim	/^cmap <S-Insert>		<C-R>+$/;"	m
<S-Insert>		<C-V>	.\vim73\mswin.vim	/^imap <S-Insert>		<C-V>$/;"	m
<S-Insert>		<C-V>	.\vim73\mswin.vim	/^vmap <S-Insert>		<C-V>$/;"	m
<S-Insert>	.\vim73\gvimrc_example.vim	/^map <S-Insert> <MiddleMouse>$/;"	m
<S-Insert>	.\vim73\gvimrc_example.vim	/^map! <S-Insert> <MiddleMouse>$/;"	m
<S-Up>	.\vim73\ftplugin\flexwiki.vim	/^  imap <buffer> <S-Up>     <C-o>gk$/;"	m
<SID>L	.\vim73\macros\less.vim	/^  noremap <SID>L L0:redraw<CR>:file<CR>$/;"	m
<SID>L	.\vim73\macros\less.vim	/^  noremap <SID>L Lg0:redraw<CR>:file<CR>$/;"	m
<Space>	.\vim73\macros\less.vim	/^noremap <script> <Space> :call <SID>NextPage()<CR><SID>L$/;"	m
<Space>	.\vim73\optwin.vim	/^noremap <silent> <buffer> <Space> :call <SID>Space()<CR>$/;"	m
<Tab>	.\vim73\ftplugin\cobol.vim	/^        inoremap <silent> <buffer> <Tab> <C-R>=<SID>Tab()<CR><C-R>=<SID>RestoreShiftwidth()<CR>$/;"	m
<Up>	.\vim73\evim.vim	/^inoremap <silent> <Up> <C-R>=pumvisible() ? "\\<lt>Up>" : "\\<lt>C-O>gk"<CR>$/;"	m
<Up>	.\vim73\ftplugin\flexwiki.vim	/^      imap <buffer> <Up>     <C-o>gk$/;"	m
<Up>	.\vim73\ftplugin\flexwiki.vim	/^  nmap <buffer> <Up>   gk$/;"	m
<Up>	.\vim73\ftplugin\flexwiki.vim	/^  vmap <buffer> <Up>   gk$/;"	m
<bs>	.\vim73\ftplugin\ada.vim	/^      inoremap <silent> <unique> <buffer> <bs> <C-R>=ada#Insert_Backspace ()<cr>$/;"	m
<c-]>	.\vim73\ftplugin\man.vim	/^    nnoremap <buffer> <c-]> :call <SID>PreGetPage(v:count)<CR>$/;"	m
<c-t>	.\vim73\ftplugin\man.vim	/^    nnoremap <buffer> <c-t> :call <SID>PopPage()<CR>$/;"	m
<char-166><char-201><char-161>	.\vim73\keymap\tamil_tscii.vim	/^no     <char-166><char-201><char-161>$/;"	m
<char-167><char-201><char-161>	.\vim73\keymap\tamil_tscii.vim	/^noo    <char-167><char-201><char-161>$/;"	m
<cr>	.\vimfiles\bundle\vim-snipmate\ftplugin\snippet.vim	/^vnoremap <buffer> <cr> :RetabSnip<cr>$/;"	m
=	.\vim73\macros\urm\urm.vim	/^map = 'kf,$/;"	m
>	.\vim73\ftplugin\cobol.vim	/^        nnoremap <silent> <buffer> > :set opfunc=<SID>IncreaseFunc<CR>g@$/;"	m
>	.\vim73\ftplugin\cobol.vim	/^    vnoremap <silent> <buffer> > :call CobolIndentBlock(v:count1)<CR>$/;"	m
>	.\vim73\macros\less.vim	/^map > G$/;"	m
>	.\vim73\macros\life\life.vim	/^map > 0 LWWWWWWWWWWWWWWWWWW,rj$/;"	m
>>	.\vim73\ftplugin\cobol.vim	/^    nnoremap <silent> <buffer> >> :call CobolIndentBlock(1)<CR>$/;"	m
?	.\vim73\macros\less.vim	/^  noremap <script> ? H0:call <SID>Backward()<CR>?$/;"	m
?	.\vim73\macros\less.vim	/^  noremap <script> ? Hg0:call <SID>Backward()<CR>?$/;"	m
A	.\vim73\macros\hanoi\hanoi.vim	/^map A "fyl$/;"	m
A	.\vim73\macros\maze\maze.c	/^char*M,A,Z,E=40,J[40],T[40];main(C){for(*J=A=scanf(M="%d",&C);$/;"	v
A	.\vim73\macros\maze\mazeansi.c	/^char*M,A,Z,E=40,J[80],T[3];main(C){for(M=J+E,*J=A=scanf("%d",&$/;"	v
A	.\vim73\macros\maze\mazeclean.c	/^char *M, A, Z, E = 40, line[80], T[3];$/;"	v
ACCESS_COUNT	.\ctags58\c.c	/^	ACCESS_COUNT$/;"	e	enum:eVisibilityType	file:
ACCESS_DEFAULT	.\ctags58\c.c	/^	ACCESS_DEFAULT,      \/* Java-specific *\/$/;"	e	enum:eVisibilityType	file:
ACCESS_LOCAL	.\ctags58\c.c	/^	ACCESS_LOCAL,$/;"	e	enum:eVisibilityType	file:
ACCESS_PRIVATE	.\ctags58\c.c	/^	ACCESS_PRIVATE,$/;"	e	enum:eVisibilityType	file:
ACCESS_PROTECTED	.\ctags58\c.c	/^	ACCESS_PROTECTED,$/;"	e	enum:eVisibilityType	file:
ACCESS_PUBLIC	.\ctags58\c.c	/^	ACCESS_PUBLIC,$/;"	e	enum:eVisibilityType	file:
ACCESS_UNDEFINED	.\ctags58\c.c	/^	ACCESS_UNDEFINED,$/;"	e	enum:eVisibilityType	file:
ALNUM	.\ctags58\php.c	59;"	d	file:
ALNUM	.\ctags58\php.c	62;"	d	file:
ALPHA	.\ctags58\php.c	58;"	d	file:
ALPHA	.\ctags58\php.c	61;"	d	file:
ANCHOR	.\ctags58\gnu_regex\regex_internal.h	/^  ANCHOR = EPSILON_BIT | 4,$/;"	e	enum:__anon29
ANCHOR_BUF_SIZE	.\ctags58\main.c	47;"	d	file:
ANCHOR_SIZE	.\ctags58\main.c	48;"	d	file:
ARG_ARGV	.\ctags58\args.h	/^typedef enum { ARG_NONE, ARG_STRING, ARG_ARGV, ARG_FILE } argType;$/;"	e	enum:__anon1
ARG_FILE	.\ctags58\args.h	/^typedef enum { ARG_NONE, ARG_STRING, ARG_ARGV, ARG_FILE } argType;$/;"	e	enum:__anon1
ARG_NONE	.\ctags58\args.h	/^typedef enum { ARG_NONE, ARG_STRING, ARG_ARGV, ARG_FILE } argType;$/;"	e	enum:__anon1
ARG_STRING	.\ctags58\args.h	/^typedef enum { ARG_NONE, ARG_STRING, ARG_ARGV, ARG_FILE } argType;$/;"	e	enum:__anon1
AS	.\ctags58\mk_qdos.mak	/^AS  = $(P)as68$/;"	m
ASFLAGS	.\ctags58\mk_qdos.mak	/^ASFLAGS  = -V$/;"	m
ASM	.\ctags58\mk_qdos.mak	/^ASM = $(P)qmac$/;"	m
ASMFLAGS	.\ctags58\mk_qdos.mak	/^ASMFLAGS = -nolist$/;"	m
AUTHOR	.\ctags58\ctags.html	/^<a name="AUTHOR"><\/a>$/;"	a
AUTHOR_EMAIL	.\ctags58\ctags.h	24;"	d
AUTHOR_NAME	.\ctags58\ctags.h	23;"	d
Abaqus_ToggleComment	.\vim73\ftplugin\abaqus.vim	/^function! <SID>Abaqus_ToggleComment() range$/;"	f
Accents	.\vim73\syntax\tex.vim	/^   fun! s:Accents(chr,...)$/;"	f
Add	.\vim73\syntax\cucumber.vim	/^function! s:Add(name)$/;"	f
Add	.\vimfiles\bundle\tlib_vim\spec\tlib\list.vim	/^fun! Add(a,b)$/;"	f
Add	.\vimfiles\bundle\tlib_vim\test\tlib.vim	/^fun! Add(a,b)$/;"	f
Add	.\vimfiles\bundle\vim-snipmate\autoload\snipMate_python_demo.vim	/^fun! s:Add(dict, line, source, trigger)$/;"	f
AddEntry	.\vim73\ftplugin\debchangelog.vim	/^function AddEntry()$/;"	f
AddScopeAliases	.\vimfiles\bundle\vim-snipmate\autoload\snipMate.vim	/^fun! s:AddScopeAliases(list)$/;"	f
Ancestors	.\ctags58\fortran.c	/^} Ancestors = { 0, 0, NULL };$/;"	v	typeref:struct:__anon21	file:
AnonymousID	.\ctags58\c.c	/^static int AnonymousID = 0;$/;"	v	file:
AntParser	.\ctags58\ant.c	/^extern parserDefinition* AntParser ()$/;"	f
AntSyntaxScript	.\vim73\syntax\ant.vim	/^    fun AntSyntaxScript(tagname, synfilename)$/;"	f
AppLog	.\vimfiles\bundle\command-t\vendor\vimball\vimball.rb	/^    class AppLog$/;"	c	class:Vimball
AppLog	.\vimfiles\bundle\command-t\vendor\vimscriptuploader\vimscriptdef.rb	/^    class AppLog$/;"	c	class:VimScriptDef
AppLog	.\vimfiles\bundle\command-t\vendor\vimscriptuploader\vimscriptuploader.rb	/^    class AppLog$/;"	c	class:VimScriptUploader
AppendPropCarefully	.\vim73\tools\xcmdsrv_client.c	/^AppendPropCarefully(dpy, window, property, value, length)$/;"	f	file:
AppendPropCarefully	.\vim73\tools\xcmdsrv_client.c	/^static int	AppendPropCarefully __ARGS((Display *display,$/;"	p	file:	signature:(Display *display, Window window, Atom property, char *value, int length)
Arguments	.\ctags58\args.h	/^} Arguments;$/;"	t	typeref:struct:sArgs
AsmKeywords	.\ctags58\asm.c	/^static const asmKeyword AsmKeywords [] = {$/;"	v	file:
AsmKind	.\ctags58\asm.c	/^} AsmKind;$/;"	t	typeref:enum:__anon3	file:
AsmKinds	.\ctags58\asm.c	/^static kindOption AsmKinds [] = {$/;"	v	file:
AsmParser	.\ctags58\asm.c	/^extern parserDefinition* AsmParser (void)$/;"	f	signature:(void)
AspKinds	.\ctags58\asp.c	/^static kindOption AspKinds [] = {$/;"	v	file:
AspParser	.\ctags58\asp.c	/^extern parserDefinition* AspParser (void)$/;"	f	signature:(void)
Assert	.\ctags58\debug.h	32;"	d
Assert	.\ctags58\debug.h	36;"	d
AwkKinds	.\ctags58\awk.c	/^static kindOption AwkKinds [] = {$/;"	v	file:
AwkParser	.\ctags58\awk.c	/^extern parserDefinition* AwkParser ()$/;"	f
B	.\vim73\macros\hanoi\hanoi.vim	/^map B "hyl$/;"	m
B	.\vim73\macros\life\life.vim	/^map B ,%k>,\$$/;"	m
BACKSLASH	.\ctags58\read.h	/^	BACKSLASH     = '\\\\',$/;"	e	enum:eCharacters
BACK_REFERENCE_COUNT	.\ctags58\lregex.c	45;"	d	file:
BACK_SLASH	.\ctags58\gnu_regex\regex_internal.h	/^  BACK_SLASH$/;"	e	enum:__anon29
BCC	.\ctags58\mk_bc5.mak	/^BCC = bcc32$/;"	m
BCCLOC	.\ctags58\mk_bc3.mak	/^BCCLOC  = c:\\borlandc$/;"	m
BE	.\ctags58\gnu_regex\regex_internal.h	101;"	d
BE	.\ctags58\gnu_regex\regex_internal.h	99;"	d
BIN_TREE_STORAGE_SIZE	.\ctags58\gnu_regex\regex_internal.h	460;"	d
BITSET_WORDS	.\ctags58\gnu_regex\regex_internal.h	143;"	d
BITSET_WORD_BITS	.\ctags58\gnu_regex\regex_internal.h	141;"	d
BITSET_WORD_MAX	.\ctags58\gnu_regex\regex_internal.h	139;"	d
BMAdd	.\vim73\menu.vim	/^func! s:BMAdd()$/;"	f
BMFilename	.\vim73\menu.vim	/^func! s:BMFilename(name, num)$/;"	f
BMHash	.\vim73\menu.vim	/^func! s:BMHash(name)$/;"	f
BMHash2	.\vim73\menu.vim	/^func! s:BMHash2(name)$/;"	f
BMMunge	.\vim73\menu.vim	/^func! s:BMMunge(fname, bnum)$/;"	f
BMRU_Push	.\vimfiles\bundle\tlib_vim\autoload\tlib\buffer.vim	/^function! s:BMRU_Push(bnr) "{{{3$/;"	f
BMRemove	.\vim73\menu.vim	/^func! s:BMRemove()$/;"	f
BMShow	.\vim73\menu.vim	/^func! s:BMShow(...)$/;"	f
BMTruncName	.\vim73\menu.vim	/^func! s:BMTruncName(fname)$/;"	f
BRACKET_NAME_BUF_SIZE	.\ctags58\gnu_regex\regcomp.c	2563;"	d	file:
BUF_FIRST	.\ctags58\gnu_regex\regex_internal.h	/^  BUF_FIRST = PREV_BEGBUF_CONSTRAINT,$/;"	e	enum:__anon27
BUF_LAST	.\ctags58\gnu_regex\regex_internal.h	/^  BUF_LAST = NEXT_ENDBUF_CONSTRAINT,$/;"	e	enum:__anon27
BUGS	.\ctags58\ctags.html	/^<a name="BUGS"><\/a>$/;"	a
BUILD_CHARCLASS_LOOP	.\ctags58\gnu_regex\regcomp.c	3495;"	d	file:
BUILD_MPW_TOOL	.\ctags58\e_mac.h	18;"	d
Backward	.\vim73\macros\less.vim	/^fun! s:Backward()$/;"	f
BackwardSnippet	.\vimfiles\bundle\vim-snipmate\plugin\snipMate.vim	/^fun! BackwardSnippet()$/;"	f
BasePath	.\vim73\tools\ccfilter.c	/^char	       BasePath[1024];$/;"	v
BasicKind	.\ctags58\basic.c	/^} BasicKind;$/;"	t	typeref:enum:__anon8	file:
BasicKinds	.\ctags58\basic.c	/^static kindOption BasicKinds[] = {$/;"	v	file:
BasicParser	.\ctags58\basic.c	/^parserDefinition *BasicParser (void)$/;"	f	signature:(void)
BetaKinds	.\ctags58\beta.c	/^static kindOption BetaKinds [] = {$/;"	v	file:
BetaParser	.\ctags58\beta.c	/^extern parserDefinition* BetaParser (void)$/;"	f	signature:(void)
BinOptionG	.\vim73\optwin.vim	/^fun! <SID>BinOptionG(name, val)$/;"	f
BinOptionL	.\vim73\optwin.vim	/^fun! <SID>BinOptionL(name)$/;"	f
BindzoneCheck	.\vim73\filetype.vim	/^func! s:BindzoneCheck(default)$/;"	f
BitwiseComparison	.\vimfiles\bundle\tlib_vim\autoload\tlib\bitwise.vim	/^function! s:BitwiseComparison(num1, num2, rtype, expr) "{{{3$/;"	f
Block_pattern	.\vim73\ftplugin\ocaml.vim	/^    function! s:Block_pattern(lin1,lin2,col1,col2)$/;"	f
BooleanOptions	.\ctags58\options.c	/^static booleanOption BooleanOptions [] = {$/;"	v	file:
BraceFormat	.\ctags58\get.c	/^static boolean BraceFormat = FALSE;$/;"	v	file:
BrowserMaps	.\vim73\autoload\netrw.vim	/^fun! s:BrowserMaps(islocal)$/;"	f
Buffer	.\vimfiles\bundle\command-t\spec\spec_helper.rb	/^  class Buffer; end$/;"	c
BufferFinder	.\vimfiles\bundle\command-t\ruby\command-t\finder\buffer_finder.rb	/^  class BufferFinder < Finder$/;"	c	class:CommandT
BufferScanner	.\vimfiles\bundle\command-t\ruby\command-t\scanner\buffer_scanner.rb	/^  class BufferScanner < Scanner$/;"	c	class:CommandT
BuildCaseTable	.\vim73\tools\unicode.vim	/^func! BuildCaseTable(name, index)$/;"	f
BuildCombiningTable	.\vim73\tools\unicode.vim	/^func! BuildCombiningTable()$/;"	f
BuildContextStack	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\namespaces.vim	/^function! s:BuildContextStack(namespaces, szCurrentScope)$/;"	f
BuildFoldTable	.\vim73\tools\unicode.vim	/^func! BuildFoldTable()$/;"	f
BuildItem	.\vimfiles\bundle\tlib_vim\autoload\tlib\input.vim	/^function! s:BuildItem(menu, def) "{{{3$/;"	f
BuildMenu	.\vimfiles\bundle\tlib_vim\autoload\tlib\input.vim	/^function! s:BuildMenu(world) "{{{3$/;"	f
BuildTabStops	.\vimfiles\bundle\vim-snipmate\autoload\snipMate.vim	/^fun! s:BuildTabStops(snip, lnum, col, indent)$/;"	f
BuildWidthTable	.\vim73\tools\unicode.vim	/^func! BuildWidthTable(pattern, tableName)$/;"	f
BuiltInParsers	.\ctags58\parse.c	/^static parserDefinitionFunc* BuiltInParsers[] = { PARSER_LIST };$/;"	v	file:
Builtin	.\vim73\syntax\reva.vim	/^com! -nargs=+ Builtin syn keyword revaBuiltin <args>$/;"	c
Builtins.cd	.\vim73\macros\shellmenu.vim	/^imenu Builtins.cd cd$/;"	m
Builtins.echo	.\vim73\macros\shellmenu.vim	/^imenu Builtins.echo echo$/;"	m
Builtins.eval	.\vim73\macros\shellmenu.vim	/^imenu Builtins.eval eval$/;"	m
Builtins.exec	.\vim73\macros\shellmenu.vim	/^imenu Builtins.exec exec$/;"	m
Builtins.export	.\vim73\macros\shellmenu.vim	/^imenu Builtins.export export$/;"	m
Builtins.getopts	.\vim73\macros\shellmenu.vim	/^imenu Builtins.getopts getopts$/;"	m
Builtins.hash	.\vim73\macros\shellmenu.vim	/^imenu Builtins.hash hash$/;"	m
Builtins.newgrp	.\vim73\macros\shellmenu.vim	/^imenu Builtins.newgrp newgrp$/;"	m
Builtins.pwd	.\vim73\macros\shellmenu.vim	/^imenu Builtins.pwd pwd$/;"	m
Builtins.read	.\vim73\macros\shellmenu.vim	/^imenu Builtins.read read$/;"	m
Builtins.readonly	.\vim73\macros\shellmenu.vim	/^imenu Builtins.readonly readonly$/;"	m
Builtins.return	.\vim73\macros\shellmenu.vim	/^imenu Builtins.return return$/;"	m
Builtins.times	.\vim73\macros\shellmenu.vim	/^imenu Builtins.times times$/;"	m
Builtins.type	.\vim73\macros\shellmenu.vim	/^imenu Builtins.type type$/;"	m
Builtins.umask	.\vim73\macros\shellmenu.vim	/^imenu Builtins.umask umask$/;"	m
Builtins.wait	.\vim73\macros\shellmenu.vim	/^imenu Builtins.wait wait$/;"	m
Bundle	.\vimfiles\bundle\vundle\autoload\vundle.vim	/^com! -nargs=+         Bundle$/;"	c
BundleClean	.\vimfiles\bundle\vundle\autoload\vundle.vim	/^com! -nargs=? -bang   BundleClean$/;"	c
BundleDocs	.\vimfiles\bundle\vundle\autoload\vundle.vim	/^com! -nargs=0         BundleDocs $/;"	c
BundleInstall	.\vimfiles\bundle\vundle\autoload\vundle.vim	/^com! -nargs=? -bang -complete=custom,vundle#scripts#complete BundleInstall$/;"	c
BundleList	.\vimfiles\bundle\vundle\autoload\vundle.vim	/^com! -nargs=0 -bang BundleList$/;"	c
BundleSearch	.\vimfiles\bundle\vundle\autoload\vundle.vim	/^com! -nargs=? -bang -complete=custom,vundle#scripts#complete BundleSearch$/;"	c
BundleUpdate	.\vimfiles\bundle\vundle\autoload\vundle.vim	/^com! BundleUpdate BundleInstall!$/;"	c
Bundles	.\vimfiles\bundle\vundle\autoload\vundle.vim	/^com! -nargs=? -bang -complete=custom,vundle#scripts#complete Bundles$/;"	c
C	.\vim73\macros\hanoi\hanoi.vim	/^map C "fp$/;"	m
C	.\vim73\macros\life\life.vim	/^map C T>>>>>>>>B&$/;"	m
CASE_INSENSITIVE_FILENAMES	.\ctags58\e_djgpp.h	14;"	d
CASE_INSENSITIVE_FILENAMES	.\ctags58\e_msoft.h	19;"	d
CASE_INSENSITIVE_FILENAMES	.\ctags58\e_os2.h	15;"	d
CASE_INSENSITIVE_FILENAMES	.\ctags58\e_vms.h	14;"	d
CAVEATS	.\ctags58\ctags.html	/^<a name="CAVEATS"><\/a>$/;"	a
CC	.\ctags58\mk_bc3.mak	/^CC	= $(BCCLOC)\\bin\\bcc$/;"	m
CC	.\ctags58\mk_manx.mak	/^CC = cc$/;"	m
CC	.\ctags58\mk_mingw.mak	/^CC = gcc$/;"	m
CC	.\ctags58\mk_mpw.mak	/^CC			= mwcppc$/;"	m
CC	.\ctags58\mk_qdos.mak	/^CC  = $(P)cc$/;"	m
CCFLAGS	.\ctags58\mk_qdos.mak	/^CCFLAGS  = -tmp$(T) -v -Y$(P) -I$(P)include_ -O$/;"	m
CFLAGS	.\ctags58\mk_bc3.mak	/^CFLAGS	= -DMSDOS -ml -d -w-ccc -w-par -w-pia -w-rch -w-sus $(INC)$/;"	m
CFLAGS	.\ctags58\mk_bc5.mak	/^CFLAGS = -d -DSTRICT -lTpe -lap$/;"	m
CFLAGS	.\ctags58\mk_djg.mak	/^CFLAGS	= -O2 -Wall -DMSDOS$/;"	m
CFLAGS	.\ctags58\mk_manx.mak	/^CFLAGS = $(OPTIONS) -wapruq -ps -qf -DAMIGA -Dconst=$/;"	m
CFLAGS	.\ctags58\mk_mingw.mak	/^CFLAGS = -Wall$/;"	m
CFLAGS	.\ctags58\mk_sas.mak	/^CFLAGS= def AMIGA opt parm r sint$/;"	m
CHARACTER	.\ctags58\gnu_regex\regex_internal.h	/^  CHARACTER = 1,$/;"	e	enum:__anon29
CHAR_CLASS	.\ctags58\gnu_regex\regex_internal.h	/^  CHAR_CLASS$/;"	e	enum:__anon38
CHAR_SYMBOL	.\ctags58\read.h	/^	CHAR_SYMBOL   = ('C' + 0x80)$/;"	e	enum:eCharacters
CK_CLASS	.\ctags58\c.c	/^	CK_CLASS, CK_DEFINE, CK_ENUMERATOR, CK_FUNCTION,$/;"	e	enum:__anon12	file:
CK_DEFINE	.\ctags58\c.c	/^	CK_CLASS, CK_DEFINE, CK_ENUMERATOR, CK_FUNCTION,$/;"	e	enum:__anon12	file:
CK_ENUMERATION	.\ctags58\c.c	/^	CK_ENUMERATION, CK_LOCAL, CK_MEMBER, CK_NAMESPACE, CK_PROTOTYPE,$/;"	e	enum:__anon12	file:
CK_ENUMERATOR	.\ctags58\c.c	/^	CK_CLASS, CK_DEFINE, CK_ENUMERATOR, CK_FUNCTION,$/;"	e	enum:__anon12	file:
CK_EXTERN_VARIABLE	.\ctags58\c.c	/^	CK_EXTERN_VARIABLE$/;"	e	enum:__anon12	file:
CK_FUNCTION	.\ctags58\c.c	/^	CK_CLASS, CK_DEFINE, CK_ENUMERATOR, CK_FUNCTION,$/;"	e	enum:__anon12	file:
CK_LOCAL	.\ctags58\c.c	/^	CK_ENUMERATION, CK_LOCAL, CK_MEMBER, CK_NAMESPACE, CK_PROTOTYPE,$/;"	e	enum:__anon12	file:
CK_MEMBER	.\ctags58\c.c	/^	CK_ENUMERATION, CK_LOCAL, CK_MEMBER, CK_NAMESPACE, CK_PROTOTYPE,$/;"	e	enum:__anon12	file:
CK_NAMESPACE	.\ctags58\c.c	/^	CK_ENUMERATION, CK_LOCAL, CK_MEMBER, CK_NAMESPACE, CK_PROTOTYPE,$/;"	e	enum:__anon12	file:
CK_PROTOTYPE	.\ctags58\c.c	/^	CK_ENUMERATION, CK_LOCAL, CK_MEMBER, CK_NAMESPACE, CK_PROTOTYPE,$/;"	e	enum:__anon12	file:
CK_STRUCT	.\ctags58\c.c	/^	CK_STRUCT, CK_TYPEDEF, CK_UNION, CK_VARIABLE,$/;"	e	enum:__anon12	file:
CK_TYPEDEF	.\ctags58\c.c	/^	CK_STRUCT, CK_TYPEDEF, CK_UNION, CK_VARIABLE,$/;"	e	enum:__anon12	file:
CK_UNDEFINED	.\ctags58\c.c	/^	CK_UNDEFINED = -1,$/;"	e	enum:__anon12	file:
CK_UNION	.\ctags58\c.c	/^	CK_STRUCT, CK_TYPEDEF, CK_UNION, CK_VARIABLE,$/;"	e	enum:__anon12	file:
CK_VARIABLE	.\ctags58\c.c	/^	CK_STRUCT, CK_TYPEDEF, CK_UNION, CK_VARIABLE,$/;"	e	enum:__anon12	file:
CKinds	.\ctags58\c.c	/^static kindOption CKinds [] = {$/;"	v	file:
CLOCKS_PER_SEC	.\ctags58\main.c	404;"	d	file:
CLOCKS_PER_SEC	.\ctags58\main.c	408;"	d	file:
CLOCK_AVAILABLE	.\ctags58\main.c	402;"	d	file:
CLOCK_AVAILABLE	.\ctags58\main.c	407;"	d	file:
CMakeGetIndent	.\vim73\indent\cmake.vim	/^fun! CMakeGetIndent(lnum)$/;"	f
COLL_ELEM_LEN_MAX	.\ctags58\gnu_regex\regex_internal.h	108;"	d
COLL_SYM	.\ctags58\gnu_regex\regex_internal.h	/^  COLL_SYM,$/;"	e	enum:__anon38
COMMENT_C	.\ctags58\get.c	/^typedef enum { COMMENT_NONE, COMMENT_C, COMMENT_CPLUS } Comment;$/;"	e	enum:__anon24	file:
COMMENT_CPLUS	.\ctags58\get.c	/^typedef enum { COMMENT_NONE, COMMENT_C, COMMENT_CPLUS } Comment;$/;"	e	enum:__anon24	file:
COMMENT_NONE	.\ctags58\get.c	/^typedef enum { COMMENT_NONE, COMMENT_C, COMMENT_CPLUS } Comment;$/;"	e	enum:__anon24	file:
COMPILER_AIX	.\vim73\tools\ccfilter.c	37;"	d	file:
COMPILER_ATT	.\vim73\tools\ccfilter.c	38;"	d	file:
COMPILER_DEFAULT	.\vim73\tools\ccfilter.c	57;"	d	file:
COMPILER_DEFAULT	.\vim73\tools\ccfilter.c	59;"	d	file:
COMPILER_DEFAULT	.\vim73\tools\ccfilter.c	61;"	d	file:
COMPILER_DEFAULT	.\vim73\tools\ccfilter.c	63;"	d	file:
COMPILER_DEFAULT	.\vim73\tools\ccfilter.c	65;"	d	file:
COMPILER_DEFAULT	.\vim73\tools\ccfilter.c	67;"	d	file:
COMPILER_DEFAULT	.\vim73\tools\ccfilter.c	69;"	d	file:
COMPILER_GCC	.\vim73\tools\ccfilter.c	36;"	d	file:
COMPILER_HPUX	.\vim73\tools\ccfilter.c	41;"	d	file:
COMPILER_IRIX	.\vim73\tools\ccfilter.c	39;"	d	file:
COMPILER_Names	.\vim73\tools\ccfilter.c	/^char	*COMPILER_Names[][2] =$/;"	v
COMPILER_QTY	.\vim73\tools\ccfilter.c	54;"	d	file:
COMPILER_SOLARIS	.\vim73\tools\ccfilter.c	40;"	d	file:
COMPILER_UNKNOWN	.\vim73\tools\ccfilter.c	35;"	d	file:
COMPLEX_BRACKET	.\ctags58\gnu_regex\regex_internal.h	/^  COMPLEX_BRACKET = 6,$/;"	e	enum:__anon29
CONCAT	.\ctags58\gnu_regex\regex_internal.h	/^  CONCAT = 16,$/;"	e	enum:__anon29
CONST_FILE	.\ctags58\read.h	15;"	d
CONST_FILE	.\ctags58\read.h	17;"	d
CONST_OPTION	.\ctags58\options.h	15;"	d
CONST_OPTION	.\ctags58\options.h	17;"	d
CONTEXT_BEGBUF	.\ctags58\gnu_regex\regex_internal.h	472;"	d
CONTEXT_ENDBUF	.\ctags58\gnu_regex\regex_internal.h	473;"	d
CONTEXT_NEWLINE	.\ctags58\gnu_regex\regex_internal.h	471;"	d
CONTEXT_WORD	.\ctags58\gnu_regex\regex_internal.h	470;"	d
COptions	.\ctags58\mk_mpw.mak	/^COptions	= -nodefaults -i : -i- -i {CIncludes} -opt full$/;"	m
CParser	.\ctags58\c.c	/^extern parserDefinition* CParser (void)$/;"	f	signature:(void)
CR	.\vim73\optwin.vim	/^fun! <SID>CR()$/;"	f
CREDITS	.\ctags58\ctags.html	/^<a name="CREDITS"><\/a>$/;"	a
CRETURN	.\ctags58\read.h	/^	CRETURN       = '\\r',$/;"	e	enum:eCharacters
CSH	.\vim73\filetype.vim	/^func! s:CSH()$/;"	f
CSK_CLASS	.\ctags58\c.c	/^	CSK_CLASS, CSK_DEFINE, CSK_ENUMERATOR, CSK_EVENT, CSK_FIELD,$/;"	e	enum:__anon13	file:
CSK_DEFINE	.\ctags58\c.c	/^	CSK_CLASS, CSK_DEFINE, CSK_ENUMERATOR, CSK_EVENT, CSK_FIELD,$/;"	e	enum:__anon13	file:
CSK_ENUMERATION	.\ctags58\c.c	/^	CSK_ENUMERATION, CSK_INTERFACE, CSK_LOCAL, CSK_METHOD,$/;"	e	enum:__anon13	file:
CSK_ENUMERATOR	.\ctags58\c.c	/^	CSK_CLASS, CSK_DEFINE, CSK_ENUMERATOR, CSK_EVENT, CSK_FIELD,$/;"	e	enum:__anon13	file:
CSK_EVENT	.\ctags58\c.c	/^	CSK_CLASS, CSK_DEFINE, CSK_ENUMERATOR, CSK_EVENT, CSK_FIELD,$/;"	e	enum:__anon13	file:
CSK_FIELD	.\ctags58\c.c	/^	CSK_CLASS, CSK_DEFINE, CSK_ENUMERATOR, CSK_EVENT, CSK_FIELD,$/;"	e	enum:__anon13	file:
CSK_INTERFACE	.\ctags58\c.c	/^	CSK_ENUMERATION, CSK_INTERFACE, CSK_LOCAL, CSK_METHOD,$/;"	e	enum:__anon13	file:
CSK_LOCAL	.\ctags58\c.c	/^	CSK_ENUMERATION, CSK_INTERFACE, CSK_LOCAL, CSK_METHOD,$/;"	e	enum:__anon13	file:
CSK_METHOD	.\ctags58\c.c	/^	CSK_ENUMERATION, CSK_INTERFACE, CSK_LOCAL, CSK_METHOD,$/;"	e	enum:__anon13	file:
CSK_NAMESPACE	.\ctags58\c.c	/^	CSK_NAMESPACE, CSK_PROPERTY, CSK_STRUCT, CSK_TYPEDEF$/;"	e	enum:__anon13	file:
CSK_PROPERTY	.\ctags58\c.c	/^	CSK_NAMESPACE, CSK_PROPERTY, CSK_STRUCT, CSK_TYPEDEF$/;"	e	enum:__anon13	file:
CSK_STRUCT	.\ctags58\c.c	/^	CSK_NAMESPACE, CSK_PROPERTY, CSK_STRUCT, CSK_TYPEDEF$/;"	e	enum:__anon13	file:
CSK_TYPEDEF	.\ctags58\c.c	/^	CSK_NAMESPACE, CSK_PROPERTY, CSK_STRUCT, CSK_TYPEDEF$/;"	e	enum:__anon13	file:
CSK_UNDEFINED	.\ctags58\c.c	/^	CSK_UNDEFINED = -1,$/;"	e	enum:__anon13	file:
CSS1	.\vim73\syntax\2html.vim	/^function! s:CSS1(id)$/;"	f
CTAGS_ENVIRONMENT	.\ctags58\options.c	35;"	d	file:
CTAGS_FILE	.\ctags58\options.c	38;"	d	file:
CWD	.\vim73\tools\ccfilter.c	/^char	       CWD[1024];$/;"	v
CanUseOmnicompletion	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\maycomplete.vim	/^function! s:CanUseOmnicompletion()$/;"	f
CdlAsignment	.\vim73\indent\cdl.vim	/^fun! CdlAsignment(lnum, line)$/;"	f
CdlGetIndent	.\vim73\indent\cdl.vim	/^fun! CdlGetIndent(lnum)$/;"	f
CfHiLink	.\vim73\syntax\cf.vim	/^command -nargs=+ CfHiLink hi def link <args>$/;"	c
CheckAgentReturnValue	.\vimfiles\bundle\tlib_vim\autoload\tlib\input.vim	/^function! s:CheckAgentReturnValue(name, value) "{{{3$/;"	f
CheckFile	.\ctags58\options.c	/^static const char *CheckFile;$/;"	v	file:
CheckToIgnoreRightParan	.\vim73\indent\sqlanywhere.vim	/^function s:CheckToIgnoreRightParan( prev_lnum, num_levels )$/;"	f
Check_inp	.\vim73\filetype.vim	/^func! s:Check_inp()$/;"	f
ChgDir	.\vim73\autoload\vimball.vim	/^fun! s:ChgDir(newdir)$/;"	f
ChgDir	.\vim73\autoload\zip.vim	/^fun! s:ChgDir(newdir,errlvl,errmsg)$/;"	f
Choose	.\vim73\macros\matchit.vim	/^fun! s:Choose(patterns, string, comma, branch, prefix, suffix, ...)$/;"	f
ChooseSnippet	.\vimfiles\bundle\vim-snipmate\autoload\snipMate.vim	/^fun! s:ChooseSnippet(snippets)$/;"	f
ClassNames	.\ctags58\flex.c	/^static stringList *ClassNames;$/;"	v	file:
ClassNames	.\ctags58\jscript.c	/^static stringList *ClassNames;$/;"	v	file:
CleanUp	.\vim73\macros\matchit.vim	/^fun! s:CleanUp(options, mode, startline, startcol, ...)$/;"	f
Clearstack	.\vim73\autoload\xmlcomplete.vim	/^function! s:Clearstack(sname)$/;"	f
Close	.\vimfiles\bundle\vim-snipmate\ftplugin\html_snip_helper.vim	/^fun! Close()$/;"	f
CloseBug	.\vim73\ftplugin\debchangelog.vim	/^function CloseBug()$/;"	f
CobolIndentBlock	.\vim73\ftplugin\cobol.vim	/^function! CobolIndentBlock(shift)$/;"	f
CobolParser	.\ctags58\cobol.c	/^extern parserDefinition* CobolParser ()$/;"	f
Col	.\vim73\tools\ccfilter.c	/^unsigned long  Col;$/;"	v
CollectingSignature	.\ctags58\c.c	/^static boolean CollectingSignature;$/;"	v	file:
Column	.\ctags58\fortran.c	/^static unsigned int Column;$/;"	v	file:
CommandT	.\vimfiles\bundle\command-t\plugin\command-t.vim	/^command -nargs=? -complete=dir CommandT call <SID>CommandTShowFileFinder(<q-args>)$/;"	c
CommandT	.\vimfiles\bundle\command-t\ruby\command-t\controller.rb	/^module CommandT$/;"	m
CommandT	.\vimfiles\bundle\command-t\ruby\command-t\finder.rb	/^module CommandT$/;"	m
CommandT	.\vimfiles\bundle\command-t\ruby\command-t\finder\buffer_finder.rb	/^module CommandT$/;"	m
CommandT	.\vimfiles\bundle\command-t\ruby\command-t\finder\file_finder.rb	/^module CommandT$/;"	m
CommandT	.\vimfiles\bundle\command-t\ruby\command-t\finder\jump_finder.rb	/^module CommandT$/;"	m
CommandT	.\vimfiles\bundle\command-t\ruby\command-t\finder\tag_finder.rb	/^module CommandT$/;"	m
CommandT	.\vimfiles\bundle\command-t\ruby\command-t\match_window.rb	/^module CommandT$/;"	m
CommandT	.\vimfiles\bundle\command-t\ruby\command-t\prompt.rb	/^module CommandT$/;"	m
CommandT	.\vimfiles\bundle\command-t\ruby\command-t\scanner.rb	/^module CommandT$/;"	m
CommandT	.\vimfiles\bundle\command-t\ruby\command-t\scanner\buffer_scanner.rb	/^module CommandT$/;"	m
CommandT	.\vimfiles\bundle\command-t\ruby\command-t\scanner\file_scanner.rb	/^module CommandT$/;"	m
CommandT	.\vimfiles\bundle\command-t\ruby\command-t\scanner\jump_scanner.rb	/^module CommandT$/;"	m
CommandT	.\vimfiles\bundle\command-t\ruby\command-t\scanner\tag_scanner.rb	/^module CommandT$/;"	m
CommandT	.\vimfiles\bundle\command-t\ruby\command-t\settings.rb	/^module CommandT$/;"	m
CommandT	.\vimfiles\bundle\command-t\ruby\command-t\stub.rb	/^module CommandT$/;"	m
CommandT	.\vimfiles\bundle\command-t\ruby\command-t\vim.rb	/^module CommandT$/;"	m
CommandT	.\vimfiles\bundle\command-t\ruby\command-t\vim\path_utilities.rb	/^module CommandT$/;"	m
CommandT	.\vimfiles\bundle\command-t\ruby\command-t\vim\screen.rb	/^module CommandT$/;"	m
CommandT	.\vimfiles\bundle\command-t\ruby\command-t\vim\window.rb	/^module CommandT$/;"	m
CommandTAcceptSelection	.\vimfiles\bundle\command-t\plugin\command-t.vim	/^function CommandTAcceptSelection()$/;"	f
CommandTAcceptSelectionSplit	.\vimfiles\bundle\command-t\plugin\command-t.vim	/^function CommandTAcceptSelectionSplit()$/;"	f
CommandTAcceptSelectionTab	.\vimfiles\bundle\command-t\plugin\command-t.vim	/^function CommandTAcceptSelectionTab()$/;"	f
CommandTAcceptSelectionVSplit	.\vimfiles\bundle\command-t\plugin\command-t.vim	/^function CommandTAcceptSelectionVSplit()$/;"	f
CommandTBackspace	.\vimfiles\bundle\command-t\plugin\command-t.vim	/^function CommandTBackspace()$/;"	f
CommandTBuffer	.\vimfiles\bundle\command-t\plugin\command-t.vim	/^command CommandTBuffer call <SID>CommandTShowBufferFinder()$/;"	c
CommandTCancel	.\vimfiles\bundle\command-t\plugin\command-t.vim	/^function CommandTCancel()$/;"	f
CommandTClear	.\vimfiles\bundle\command-t\plugin\command-t.vim	/^function CommandTClear()$/;"	f
CommandTCursorEnd	.\vimfiles\bundle\command-t\plugin\command-t.vim	/^function CommandTCursorEnd()$/;"	f
CommandTCursorLeft	.\vimfiles\bundle\command-t\plugin\command-t.vim	/^function CommandTCursorLeft()$/;"	f
CommandTCursorRight	.\vimfiles\bundle\command-t\plugin\command-t.vim	/^function CommandTCursorRight()$/;"	f
CommandTCursorStart	.\vimfiles\bundle\command-t\plugin\command-t.vim	/^function CommandTCursorStart()$/;"	f
CommandTDelete	.\vimfiles\bundle\command-t\plugin\command-t.vim	/^function CommandTDelete()$/;"	f
CommandTFlush	.\vimfiles\bundle\command-t\plugin\command-t.vim	/^command CommandTFlush call <SID>CommandTFlush()$/;"	c
CommandTFlush	.\vimfiles\bundle\command-t\plugin\command-t.vim	/^function s:CommandTFlush()$/;"	f
CommandTHandleKey	.\vimfiles\bundle\command-t\plugin\command-t.vim	/^function CommandTHandleKey(arg)$/;"	f
CommandTJump	.\vimfiles\bundle\command-t\plugin\command-t.vim	/^command CommandTJump call <SID>CommandTShowJumpFinder()$/;"	c
CommandTMatch_initialize	.\vimfiles\bundle\command-t\ruby\command-t\match.c	/^VALUE CommandTMatch_initialize(int argc, VALUE *argv, VALUE self)$/;"	f	signature:(int argc, VALUE *argv, VALUE self)
CommandTMatch_initialize	.\vimfiles\bundle\command-t\ruby\command-t\match.h	/^extern VALUE CommandTMatch_initialize(int argc, VALUE *argv, VALUE self);$/;"	p	signature:(int argc, VALUE *argv, VALUE self)
CommandTMatch_matches	.\vimfiles\bundle\command-t\ruby\command-t\match.c	/^VALUE CommandTMatch_matches(VALUE self)$/;"	f	signature:(VALUE self)
CommandTMatch_matches	.\vimfiles\bundle\command-t\ruby\command-t\match.h	/^extern VALUE CommandTMatch_matches(VALUE self);$/;"	p	signature:(VALUE self)
CommandTMatch_score	.\vimfiles\bundle\command-t\ruby\command-t\match.h	/^extern VALUE CommandTMatch_score(VALUE self);$/;"	p	signature:(VALUE self)
CommandTMatch_to_s	.\vimfiles\bundle\command-t\ruby\command-t\match.c	/^VALUE CommandTMatch_to_s(VALUE self)$/;"	f	signature:(VALUE self)
CommandTMatch_to_s	.\vimfiles\bundle\command-t\ruby\command-t\match.h	/^extern VALUE CommandTMatch_to_s(VALUE self);$/;"	p	signature:(VALUE self)
CommandTMatcher_initialize	.\vimfiles\bundle\command-t\ruby\command-t\matcher.c	/^VALUE CommandTMatcher_initialize(int argc, VALUE *argv, VALUE self)$/;"	f	signature:(int argc, VALUE *argv, VALUE self)
CommandTMatcher_initialize	.\vimfiles\bundle\command-t\ruby\command-t\matcher.h	/^extern VALUE CommandTMatcher_initialize(int argc, VALUE *argv, VALUE self);$/;"	p	signature:(int argc, VALUE *argv, VALUE self)
CommandTMatcher_matches_for	.\vimfiles\bundle\command-t\ruby\command-t\matcher.c	/^VALUE CommandTMatcher_matches_for(VALUE self, VALUE abbrev)$/;"	f	signature:(VALUE self, VALUE abbrev)
CommandTMatcher_matches_for	.\vimfiles\bundle\command-t\ruby\command-t\matcher.h	/^extern VALUE CommandTMatcher_matches_for(VALUE self, VALUE abbrev);$/;"	p	signature:(VALUE self, VALUE abbrev)
CommandTMatcher_sorted_matches_for	.\vimfiles\bundle\command-t\ruby\command-t\matcher.c	/^VALUE CommandTMatcher_sorted_matches_for(VALUE self, VALUE abbrev, VALUE options)$/;"	f	signature:(VALUE self, VALUE abbrev, VALUE options)
CommandTMatcher_sorted_matches_for	.\vimfiles\bundle\command-t\ruby\command-t\matcher.h	/^extern VALUE CommandTMatcher_sorted_matches_for(VALUE self, VALUE abbrev, VALUE options);$/;"	p	signature:(VALUE self, VALUE abbrev, VALUE options)
CommandTQuickfix	.\vimfiles\bundle\command-t\plugin\command-t.vim	/^function CommandTQuickfix()$/;"	f
CommandTRefresh	.\vimfiles\bundle\command-t\plugin\command-t.vim	/^function CommandTRefresh()$/;"	f
CommandTRubyWarning	.\vimfiles\bundle\command-t\plugin\command-t.vim	/^function s:CommandTRubyWarning()$/;"	f
CommandTSelectNext	.\vimfiles\bundle\command-t\plugin\command-t.vim	/^function CommandTSelectNext()$/;"	f
CommandTSelectPrev	.\vimfiles\bundle\command-t\plugin\command-t.vim	/^function CommandTSelectPrev()$/;"	f
CommandTShowBufferFinder	.\vimfiles\bundle\command-t\plugin\command-t.vim	/^function s:CommandTShowBufferFinder()$/;"	f
CommandTShowFileFinder	.\vimfiles\bundle\command-t\plugin\command-t.vim	/^function s:CommandTShowFileFinder(arg)$/;"	f
CommandTShowJumpFinder	.\vimfiles\bundle\command-t\plugin\command-t.vim	/^function s:CommandTShowJumpFinder()$/;"	f
CommandTShowTagFinder	.\vimfiles\bundle\command-t\plugin\command-t.vim	/^function s:CommandTShowTagFinder()$/;"	f
CommandTTag	.\vimfiles\bundle\command-t\plugin\command-t.vim	/^command CommandTTag call <SID>CommandTShowTagFinder()$/;"	c
CommandTToggleFocus	.\vimfiles\bundle\command-t\plugin\command-t.vim	/^function CommandTToggleFocus()$/;"	f
CommandT_option_from_hash	.\vimfiles\bundle\command-t\ruby\command-t\ext.c	/^VALUE CommandT_option_from_hash(const char *option, VALUE hash)$/;"	f	signature:(const char *option, VALUE hash)
CommandT_option_from_hash	.\vimfiles\bundle\command-t\ruby\command-t\ext.h	/^VALUE CommandT_option_from_hash(const char *option, VALUE hash);$/;"	p	signature:(const char *option, VALUE hash)
Comment	.\ctags58\get.c	/^typedef enum { COMMENT_NONE, COMMENT_C, COMMENT_CPLUS } Comment;$/;"	t	typeref:enum:__anon24	file:
Comment	.\vim73\ftplugin\cobol.vim	/^function! s:Comment(arg)$/;"	f
CommentLevel	.\ctags58\sml.c	/^static unsigned int CommentLevel = 0;$/;"	v	file:
CompareBufferNrByMRU	.\vimfiles\bundle\tlib_vim\autoload\tlib\buffer.vim	/^function! s:CompareBufferNrByMRU(a, b) "{{{3$/;"	f
CompareBuffernameByBasename	.\vimfiles\bundle\tlib_vim\autoload\tlib\buffer.vim	/^function! s:CompareBuffernameByBasename(a, b) "{{{3$/;"	f
CompareHash	.\vimfiles\bundle\tlib_vim\spec\tlib\hash.vim	/^function! s:CompareHash(text) "{{{3$/;"	f
CompilerSet	.\vim73\compiler\ant.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	.\vim73\compiler\bcc.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	.\vim73\compiler\checkstyle.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	.\vim73\compiler\cs.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	.\vim73\compiler\cucumber.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	.\vim73\compiler\decada.vim	/^   command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	.\vim73\compiler\dot.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	.\vim73\compiler\eruby.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	.\vim73\compiler\fortran_F.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	.\vim73\compiler\fortran_cv.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	.\vim73\compiler\fortran_elf90.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	.\vim73\compiler\fortran_g77.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	.\vim73\compiler\fortran_lf95.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	.\vim73\compiler\fpc.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	.\vim73\compiler\gnat.vim	/^   command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	.\vim73\compiler\hp_acc.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	.\vim73\compiler\icc.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	.\vim73\compiler\intel.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	.\vim73\compiler\irix5_c.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	.\vim73\compiler\irix5_cpp.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	.\vim73\compiler\javac.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	.\vim73\compiler\jikes.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	.\vim73\compiler\mips_c.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	.\vim73\compiler\mipspro_c89.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	.\vim73\compiler\mipspro_cpp.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	.\vim73\compiler\modelsim_vcom.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	.\vim73\compiler\neato.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	.\vim73\compiler\onsgmls.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	.\vim73\compiler\pbx.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	.\vim73\compiler\perl.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	.\vim73\compiler\php.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	.\vim73\compiler\pyunit.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	.\vim73\compiler\rspec.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	.\vim73\compiler\ruby.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	.\vim73\compiler\rubyunit.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	.\vim73\compiler\se.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	.\vim73\compiler\splint.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	.\vim73\compiler\tcl.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	.\vim73\compiler\tex.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	.\vim73\compiler\tidy.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	.\vim73\compiler\xmllint.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	.\vim73\compiler\xmlwf.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
Component	.\vim73\tools\shtags.pl	/^Component:	$id[1]$/;"	l
ComposePath	.\vim73\autoload\netrw.vim	/^fun! s:ComposePath(base,subdir)$/;"	f
ContextBlock	.\ctags58\ocaml.c	/^	ContextBlock$/;"	e	enum:_sContextType	file:
ContextClass	.\ctags58\ocaml.c	/^	ContextClass,$/;"	e	enum:_sContextType	file:
ContextFunction	.\ctags58\ocaml.c	/^	ContextFunction,$/;"	e	enum:_sContextType	file:
ContextMethod	.\ctags58\ocaml.c	/^	ContextMethod,$/;"	e	enum:_sContextType	file:
ContextModule	.\ctags58\ocaml.c	/^	ContextModule,$/;"	e	enum:_sContextType	file:
ContextSoft	.\ctags58\ocaml.c	/^	ContextSoft$/;"	e	enum:_sContextKind	file:
ContextStrong	.\ctags58\ocaml.c	/^	ContextStrong,$/;"	e	enum:_sContextKind	file:
ContextType	.\ctags58\ocaml.c	/^	ContextType,$/;"	e	enum:_sContextType	file:
ContextValue	.\ctags58\ocaml.c	/^	ContextValue,$/;"	e	enum:_sContextType	file:
Controller	.\vimfiles\bundle\command-t\ruby\command-t\controller.rb	/^  class Controller$/;"	c	class:CommandT
Count	.\vim73\macros\matchit.vim	/^fun! s:Count(string, pattern, ...)$/;"	f
Count	.\vimfiles\bundle\vim-snipmate\autoload\snipMate.vim	/^fun! s:Count(haystack, needle)$/;"	f
CountHelper	.\vimfiles\bundle\tlib_vim\autoload\tlib\string.vim	/^function! s:CountHelper() "{{{3$/;"	f
CountUnbalancedParan	.\vim73\indent\sqlanywhere.vim	/^function s:CountUnbalancedParan( line, paran_to_check )$/;"	f
CountWrapper	.\vim73\ftplugin\vhdl.vim	/^function! <SID>CountWrapper(cmd)$/;"	f
Cpp	.\ctags58\get.c	/^static cppState Cpp = {$/;"	v	file:
CppParser	.\ctags58\c.c	/^extern parserDefinition* CppParser (void)$/;"	f	signature:(void)
CsharpKinds	.\ctags58\c.c	/^static kindOption CsharpKinds [] = {$/;"	v	file:
CsharpParser	.\ctags58\c.c	/^extern parserDefinition* CsharpParser (void)$/;"	f	signature:(void)
CucumberComplete	.\vim73\ftplugin\cucumber.vim	/^function! CucumberComplete(findstart,base) abort$/;"	f
CurrentDirectory	.\ctags58\routines.c	/^char *CurrentDirectory;$/;"	v
CurrentStatement	.\ctags58\c.c	/^static statementInfo *CurrentStatement = NULL;$/;"	v	file:
Cycle	.\vim73\ftplugin\gitrebase.vim	/^command! -buffer -bar Cycle  :call s:cycle()$/;"	c
DEBUG	.\ctags58\mk_mingw.mak	/^dctags.exe: DEBUG = -DDEBUG$/;"	m
DEBUG_CPP	.\ctags58\debug.h	/^	DEBUG_CPP    = 0x10,  \/* echo characters out of pre-processor *\/$/;"	e	enum:eDebugLevels
DEBUG_OPTION	.\ctags58\debug.h	/^	DEBUG_OPTION = 0x08,  \/* echo option parsing *\/$/;"	e	enum:eDebugLevels
DEBUG_PARSE	.\ctags58\debug.h	/^	DEBUG_PARSE  = 0x02,  \/* echo parsing results *\/$/;"	e	enum:eDebugLevels
DEBUG_RAW	.\ctags58\debug.h	/^	DEBUG_RAW    = 0x20   \/* echo raw (filtered) characters *\/$/;"	e	enum:eDebugLevels
DEBUG_READ	.\ctags58\debug.h	/^	DEBUG_READ   = 0x01,  \/* echo raw (filtered) characters *\/$/;"	e	enum:eDebugLevels
DEBUG_STATUS	.\ctags58\debug.h	/^	DEBUG_STATUS = 0x04,  \/* echo file status information *\/$/;"	e	enum:eDebugLevels
DECL_BASE	.\ctags58\c.c	/^	DECL_BASE,           \/* base type (default) *\/$/;"	e	enum:eDeclaration	file:
DECL_CLASS	.\ctags58\c.c	/^	DECL_CLASS,$/;"	e	enum:eDeclaration	file:
DECL_COUNT	.\ctags58\c.c	/^	DECL_COUNT$/;"	e	enum:eDeclaration	file:
DECL_ENUM	.\ctags58\c.c	/^	DECL_ENUM,$/;"	e	enum:eDeclaration	file:
DECL_EVENT	.\ctags58\c.c	/^	DECL_EVENT,$/;"	e	enum:eDeclaration	file:
DECL_FUNCTION	.\ctags58\c.c	/^	DECL_FUNCTION,$/;"	e	enum:eDeclaration	file:
DECL_IGNORE	.\ctags58\c.c	/^	DECL_IGNORE,         \/* non-taggable "declaration" *\/$/;"	e	enum:eDeclaration	file:
DECL_INTERFACE	.\ctags58\c.c	/^	DECL_INTERFACE,$/;"	e	enum:eDeclaration	file:
DECL_NAMESPACE	.\ctags58\c.c	/^	DECL_NAMESPACE,$/;"	e	enum:eDeclaration	file:
DECL_NOMANGLE	.\ctags58\c.c	/^	DECL_NOMANGLE,       \/* C++ name demangling block *\/$/;"	e	enum:eDeclaration	file:
DECL_NONE	.\ctags58\c.c	/^	DECL_NONE,$/;"	e	enum:eDeclaration	file:
DECL_PACKAGE	.\ctags58\c.c	/^	DECL_PACKAGE,$/;"	e	enum:eDeclaration	file:
DECL_PROGRAM	.\ctags58\c.c	/^	DECL_PROGRAM,        \/* Vera program *\/$/;"	e	enum:eDeclaration	file:
DECL_STRUCT	.\ctags58\c.c	/^	DECL_STRUCT,$/;"	e	enum:eDeclaration	file:
DECL_TASK	.\ctags58\c.c	/^	DECL_TASK,           \/* Vera task *\/$/;"	e	enum:eDeclaration	file:
DECL_UNION	.\ctags58\c.c	/^	DECL_UNION,$/;"	e	enum:eDeclaration	file:
DEFAULT_FILE_FORMAT	.\ctags58\e_mac.h	21;"	d
DEFAULT_FILE_FORMAT	.\ctags58\e_riscos.h	21;"	d
DEFAULT_FILE_FORMAT	.\ctags58\options.c	53;"	d	file:
DEFINES	.\ctags58\mk_bc5.mak	/^DEFINES = -DWIN32 $(REGEX_DEFINE)$/;"	m
DEFINES	.\ctags58\mk_mingw.mak	/^DEFINES = -DWIN32 $(REGEX_DEFINES)$/;"	m
DEFINES	.\ctags58\mk_mvc.mak	/^DEFINES = -DWIN32 $(REGEX_DEFINES)$/;"	m
DEFINES	.\ctags58\mk_os2.mak	/^DEFINES=-DOS2$/;"	m
DESCRIPTION	.\ctags58\ctags.html	/^<a name="DESCRIPTION"><\/a>$/;"	a
DIR	.\ctags58\e_mac.h	/^} DIR;$/;"	t	typeref:struct:__anon19
DOUBLE_QUOTE	.\ctags58\read.h	/^	DOUBLE_QUOTE  = '"',$/;"	e	enum:eCharacters
DRCTV_DEFINE	.\ctags58\get.c	/^	DRCTV_DEFINE,  \/* "#define" encountered *\/$/;"	e	enum:eState	file:
DRCTV_HASH	.\ctags58\get.c	/^	DRCTV_HASH,    \/* initial '#' read; determine directive *\/$/;"	e	enum:eState	file:
DRCTV_IF	.\ctags58\get.c	/^	DRCTV_IF,      \/* "#if" or "#ifdef" encountered *\/$/;"	e	enum:eState	file:
DRCTV_NONE	.\ctags58\get.c	/^	DRCTV_NONE,    \/* no known directive - ignore to end of line *\/$/;"	e	enum:eState	file:
DRCTV_PRAGMA	.\ctags58\get.c	/^	DRCTV_PRAGMA,  \/* #pragma encountered *\/$/;"	e	enum:eState	file:
DRCTV_UNDEF	.\ctags58\get.c	/^	DRCTV_UNDEF    \/* "#undef" encountered *\/$/;"	e	enum:eState	file:
Date	.\vim73\ftplugin\debchangelog.vim	/^function <SID>Date()$/;"	f
DebChangelogFoldText	.\vim73\ftplugin\debchangelog.vim	/^function! DebChangelogFoldText()$/;"	f
DebCompleteBugs	.\vim73\ftplugin\debchangelog.vim	/^fun! DebCompleteBugs(findstart, base)$/;"	f
DebControlFold	.\vim73\ftplugin\debcontrol.vim	/^function! DebControlFold(l)$/;"	f
DebControlFoldText	.\vim73\ftplugin\debcontrol.vim	/^function! DebControlFoldText()$/;"	f
DebGetChangelogFold	.\vim73\ftplugin\debchangelog.vim	/^function! DebGetChangelogFold(lnum)$/;"	f
DebGetPkgSrcName	.\vim73\ftplugin\debchangelog.vim	/^function! DebGetPkgSrcName(lineno)$/;"	f
Debug	.\ctags58\eiffel.c	/^static int Debug;$/;"	v	file:
DebugStatement	.\ctags58\debug.h	30;"	d
DebugStatement	.\ctags58\debug.h	34;"	d
DecreaseFunc	.\vim73\ftplugin\cobol.vim	/^function! s:DecreaseFunc(type)$/;"	f
DecreaseIndent	.\vim73\ftplugin\cobol.vim	/^function! s:DecreaseIndent()$/;"	f
DefPython	.\vim73\autoload\python3complete.vim	/^function! s:DefPython()$/;"	f
DefPython	.\vim73\autoload\pythoncomplete.vim	/^function! s:DefPython()$/;"	f
DefRuby	.\vim73\autoload\rubycomplete.vim	/^function! s:DefRuby()$/;"	f
DefineInlineMarkup	.\vim73\syntax\rst.vim	/^function! s:DefineInlineMarkup(name, start, middle, end)$/;"	f
DefineOneInlineMarkup	.\vim73\syntax\rst.vim	/^function! s:DefineOneInlineMarkup(name, start, middle, end, char_left, char_right)$/;"	f
Dict2info	.\vim73\autoload\ccomplete.vim	/^function! s:Dict2info(dict)$/;"	f
DiffGitCached	.\vim73\ftplugin\gitcommit.vim	/^command! -bang -bar -buffer -complete=custom,s:diffcomplete -nargs=* DiffGitCached :call s:gitdiffcached(<bang>0,b:git_dir,<f-args>)$/;"	c
DiffOrig	.\vim73\vimrc_example.vim	/^  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis$/;"	c
DisplayIncludeTree	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\includes.vim	/^function! s:DisplayIncludeTree(szFilePath, indent, ...)$/;"	f
Distribution	.\vim73\ftplugin\debchangelog.vim	/^function Distribution(dist)$/;"	f
DoMatchParen	.\vim73\plugin\matchparen.vim	/^command! DoMatchParen runtime plugin\/matchparen.vim | windo doau CursorMoved$/;"	c
DoRemoteReply	.\vim73\plugin\rrhelper.vim	/^function DoRemoteReply(id, cnt, group, file)$/;"	f
Do_toolbar_tmenu	.\vim73\lang\menu_af_af.latin1.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	.\vim73\lang\menu_ca_es.latin1.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	.\vim73\lang\menu_chinese_gb.936.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	.\vim73\lang\menu_chinese_taiwan.950.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	.\vim73\lang\menu_cs_cz.iso_8859-2.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	.\vim73\lang\menu_czech_czech_republic.1250.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	.\vim73\lang\menu_czech_czech_republic.ascii.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	.\vim73\lang\menu_de_de.latin1.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	.\vim73\lang\menu_eo.utf-8.vim	/^fun! Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	.\vim73\lang\menu_es_es.latin1.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	.\vim73\lang\menu_fi_fi.latin1.vim	/^fun! Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	.\vim73\lang\menu_fr_fr.latin1.vim	/^fun! Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	.\vim73\lang\menu_hu_hu.iso_8859-2.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	.\vim73\lang\menu_hu_hu.utf-8.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	.\vim73\lang\menu_it_it.latin1.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	.\vim73\lang\menu_ja_jp.euc-jp.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	.\vim73\lang\menu_ja_jp.utf-8.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	.\vim73\lang\menu_japanese_japan.932.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	.\vim73\lang\menu_ko_kr.euckr.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	.\vim73\lang\menu_ko_kr.utf-8.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	.\vim73\lang\menu_nl_nl.latin1.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	.\vim73\lang\menu_no_no.latin1.vim	/^	function Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	.\vim73\lang\menu_pl_pl.iso_8859-2.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	.\vim73\lang\menu_pl_pl.utf-8.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	.\vim73\lang\menu_polish_poland.1250.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	.\vim73\lang\menu_pt_br.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	.\vim73\lang\menu_pt_pt.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	.\vim73\lang\menu_ru_ru.koi8-r.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	.\vim73\lang\menu_ru_ru.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	.\vim73\lang\menu_sk_sk.iso_8859-2.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	.\vim73\lang\menu_sl_si.cp1250.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	.\vim73\lang\menu_sl_si.latin2.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	.\vim73\lang\menu_sl_si.utf-8.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	.\vim73\lang\menu_slovak_slovak_republic.1250.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	.\vim73\lang\menu_sr_rs.ascii.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	.\vim73\lang\menu_sr_rs.iso_8859-2.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	.\vim73\lang\menu_sr_rs.iso_8859-5.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	.\vim73\lang\menu_sr_rs.utf-8.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	.\vim73\lang\menu_sv_se.latin1.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	.\vim73\lang\menu_uk_ua.cp1251.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	.\vim73\lang\menu_uk_ua.koi8-u.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	.\vim73\lang\menu_vi_vn.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	.\vim73\lang\menu_zh_cn.gb2312.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	.\vim73\lang\menu_zh_cn.utf-8.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	.\vim73\lang\menu_zh_tw.utf-8.vim	/^  fun Do_toolbar_tmenu()$/;"	f
DosBatchParser	.\ctags58\dosbatch.c	/^extern parserDefinition* DosBatchParser ()$/;"	f
Doxygen_Hilights	.\vim73\syntax\doxygen.vim	/^    fun! s:Doxygen_Hilights()$/;"	f
Doxygen_Hilights_Base	.\vim73\syntax\doxygen.vim	/^    fun! s:Doxygen_Hilights_Base()$/;"	f
DtraceCheck	.\vim73\filetype.vim	/^func! s:DtraceCheck()$/;"	f
DxyCreateSmallSpecial	.\vim73\syntax\doxygen.vim	/^  fun! s:DxyCreateSmallSpecial( kword, name )$/;"	f
DylanGetIndent	.\vim73\indent\dylan.vim	/^function DylanGetIndent()$/;"	f
E	.\vim73\macros\hanoi\hanoi.vim	/^map E "hp$/;"	m
E	.\vim73\macros\maze\maze.c	/^char*M,A,Z,E=40,J[40],T[40];main(C){for(*J=A=scanf(M="%d",&C);$/;"	v
E	.\vim73\macros\maze\mazeansi.c	/^char*M,A,Z,E=40,J[80],T[3];main(C){for(M=J+E,*J=A=scanf("%d",&$/;"	v
E	.\vim73\macros\maze\mazeclean.c	/^char *M, A, Z, E = 40, line[80], T[3];$/;"	v
EKIND_CLASS	.\ctags58\eiffel.c	/^	EKIND_CLASS, EKIND_FEATURE, EKIND_LOCAL, EKIND_QUALIFIED_TAGS$/;"	e	enum:__anon16	file:
EKIND_FEATURE	.\ctags58\eiffel.c	/^	EKIND_CLASS, EKIND_FEATURE, EKIND_LOCAL, EKIND_QUALIFIED_TAGS$/;"	e	enum:__anon16	file:
EKIND_LOCAL	.\ctags58\eiffel.c	/^	EKIND_CLASS, EKIND_FEATURE, EKIND_LOCAL, EKIND_QUALIFIED_TAGS$/;"	e	enum:__anon16	file:
EKIND_QUALIFIED_TAGS	.\ctags58\eiffel.c	/^	EKIND_CLASS, EKIND_FEATURE, EKIND_LOCAL, EKIND_QUALIFIED_TAGS$/;"	e	enum:__anon16	file:
END_OF_RE	.\ctags58\gnu_regex\regex_internal.h	/^  END_OF_RE = 2,$/;"	e	enum:__anon29
ENVIRONMENT VARIABLES	.\ctags58\ctags.html	/^<a name="ENVIRONMENT VARIABLES"><\/a>$/;"	a
ENVIRONMENT_HEADERS	.\ctags58\source.mak	/^ENVIRONMENT_HEADERS = \\$/;"	m
ENVIRONMENT_SOURCES	.\ctags58\source.mak	/^ENVIRONMENT_SOURCES = \\$/;"	m
EPSILON_BIT	.\ctags58\gnu_regex\regex_internal.h	207;"	d
EQUIV_CLASS	.\ctags58\gnu_regex\regex_internal.h	/^  EQUIV_CLASS,$/;"	e	enum:__anon38
ETAGS	.\ctags58\options.c	42;"	d	file:
ETAGS_ENVIRONMENT	.\ctags58\options.c	36;"	d	file:
ETAGS_FILE	.\ctags58\options.c	39;"	d	file:
EXEC	.\ctags58\mk_qdos.mak	/^EXEC = ctags$/;"	m
EXIT_ERR	.\ctags58\argproc.c	36;"	d	file:
EXIT_OK	.\ctags58\argproc.c	35;"	d	file:
EXTENSION_SEPARATOR	.\ctags58\options.c	47;"	d	file:
EXTRA_LIBS	.\ctags58\mk_bc3.mak	/^EXTRA_LIBS =$/;"	m
EX_LINENUM	.\ctags58\options.h	/^	EX_LINENUM,  \/* -n  only line numbers in tag file *\/$/;"	e	enum:eLocate
EX_MIX	.\ctags58\options.h	/^	EX_MIX,      \/* line numbers for defines, patterns otherwise *\/$/;"	e	enum:eLocate
EX_PATTERN	.\ctags58\options.h	/^	EX_PATTERN   \/* -N  only patterns in tag file *\/$/;"	e	enum:eLocate
E_AMIGA_H	.\ctags58\e_amiga.h	12;"	d
E_DJGPP_H	.\ctags58\e_djgpp.h	12;"	d
E_MAC_H	.\ctags58\e_mac.h	16;"	d
E_MSOFT_H	.\ctags58\e_msoft.h	12;"	d
E_OS2_H	.\ctags58\e_os2.h	12;"	d
E_QDOS_H	.\ctags58\e_qdos.h	12;"	d
E_RISCOS_H	.\ctags58\e_riscos.h	18;"	d
E_VMS_H	.\ctags58\e_vms.h	12;"	d
Edit	.\vim73\ftplugin\gitrebase.vim	/^command! -buffer -bar Edit   :call s:choose('edit')$/;"	c
EditCallback	.\vimfiles\bundle\tlib_vim\autoload\tlib\input.vim	/^function! s:EditCallback(...) "{{{3$/;"	f
EditElsewhere	.\vim73\macros\editexisting.vim	/^func s:EditElsewhere(filename)$/;"	f
EditExisting	.\vim73\macros\editexisting.vim	/^func! EditExisting(fname, command)$/;"	f
EditVimrc	.\vim73\menu.vim	/^fun! s:EditVimrc()$/;"	f
EiffelKeywordTable	.\ctags58\eiffel.c	/^static const keywordDesc EiffelKeywordTable [] = {$/;"	v	file:
EiffelKinds	.\ctags58\eiffel.c	/^static kindOption EiffelKinds [] = {$/;"	v	file:
EiffelParser	.\ctags58\eiffel.c	/^extern parserDefinition* EiffelParser (void)$/;"	f	signature:(void)
Email	.\vim73\ftplugin\debchangelog.vim	/^function <SID>Email()$/;"	f
EmptyString	.\ctags58\readtags.c	/^const char *const EmptyString = "";$/;"	v
EmptystackP	.\vim73\autoload\xmlcomplete.vim	/^function! s:EmptystackP(sname)$/;"	f
End	.\vim73\macros\less.vim	/^fun! s:End()$/;"	f
EndBlockIndent	.\vim73\indent\ada.vim	/^function s:EndBlockIndent( prev_indent, prev_lnum, blockstart, blockend )$/;"	f
Enter_annotation_buffer	.\vim73\ftplugin\ocaml.vim	/^    function! s:Enter_annotation_buffer()$/;"	f
Environ.CDPATH	.\vim73\macros\shellmenu.vim	/^imenu Environ.CDPATH ${CDPATH}$/;"	m
Environ.HOME	.\vim73\macros\shellmenu.vim	/^imenu Environ.HOME ${HOME}$/;"	m
Environ.IFS	.\vim73\macros\shellmenu.vim	/^imenu Environ.IFS ${IFS}$/;"	m
Environ.LC_CTYPE	.\vim73\macros\shellmenu.vim	/^imenu Environ.LC_CTYPE ${LC_CTYPE}$/;"	m
Environ.LC_MESSAGES	.\vim73\macros\shellmenu.vim	/^imenu Environ.LC_MESSAGES ${LC_MESSAGES}$/;"	m
Environ.MAIL	.\vim73\macros\shellmenu.vim	/^imenu Environ.MAIL ${MAIL}$/;"	m
Environ.MAILCHECK	.\vim73\macros\shellmenu.vim	/^imenu Environ.MAILCHECK ${MAILCHECK}$/;"	m
Environ.PATH	.\vim73\macros\shellmenu.vim	/^imenu Environ.PATH ${PATH}$/;"	m
Environ.PS1	.\vim73\macros\shellmenu.vim	/^imenu Environ.PS1 ${PS1}$/;"	m
Environ.PS2	.\vim73\macros\shellmenu.vim	/^imenu Environ.PS2 ${PS2}$/;"	m
Environ.SHACCT	.\vim73\macros\shellmenu.vim	/^imenu Environ.SHACCT ${SHACCT}$/;"	m
Environ.SHELL	.\vim73\macros\shellmenu.vim	/^imenu Environ.SHELL ${SHELL}$/;"	m
ErlangIndent	.\vim73\indent\erlang.vim	/^function ErlangIndent()$/;"	f
ErlangIndentAtferLine	.\vim73\indent\erlang.vim	/^function s:ErlangIndentAtferLine(l)$/;"	f
ErlangKinds	.\ctags58\erlang.c	/^static kindOption ErlangKinds[] = {$/;"	v	file:
ErlangParser	.\ctags58\erlang.c	/^extern parserDefinition *ErlangParser (void)$/;"	f	signature:(void)
ErrMsg	.\vim73\autoload\rubycomplete.vim	/^function! s:ErrMsg(msg)$/;"	f
Escape	.\vim73\autoload\zip.vim	/^fun! s:Escape(fname,isfilt)$/;"	f
Examples	.\vim73\tools\efm_perl.pl	/^Examples:$/;"	l
Exception	.\ctags58\c.c	/^static jmp_buf Exception;$/;"	v	file:
Exception	.\ctags58\eiffel.c	/^static jmp_buf Exception;$/;"	v	file:
Exception	.\ctags58\flex.c	/^static jmp_buf Exception;$/;"	v	file:
Exception	.\ctags58\fortran.c	/^static jmp_buf Exception;$/;"	v	file:
Exception	.\ctags58\jscript.c	/^static jmp_buf Exception;$/;"	v	file:
Exception	.\ctags58\sql.c	/^static jmp_buf Exception;$/;"	v	file:
Exception	.\ctags58\tex.c	/^static jmp_buf Exception;$/;"	v	file:
Exception	.\ctags58\verilog.c	/^static jmp_buf Exception;$/;"	v	file:
Exception	.\ctags58\vhdl.c	/^static jmp_buf Exception;$/;"	v	file:
ExceptionBraceFormattingError	.\ctags58\c.c	/^	ExceptionBraceFormattingError$/;"	e	enum:eException	file:
ExceptionEOF	.\ctags58\c.c	/^	ExceptionNone, ExceptionEOF, ExceptionFormattingError,$/;"	e	enum:eException	file:
ExceptionEOF	.\ctags58\eiffel.c	/^typedef enum eException { ExceptionNone, ExceptionEOF } exception_t;$/;"	e	enum:eException	file:
ExceptionEOF	.\ctags58\flex.c	/^typedef enum eException { ExceptionNone, ExceptionEOF } exception_t;$/;"	e	enum:eException	file:
ExceptionEOF	.\ctags58\fortran.c	/^	ExceptionNone, ExceptionEOF, ExceptionFixedFormat, ExceptionLoop$/;"	e	enum:eException	file:
ExceptionEOF	.\ctags58\jscript.c	/^typedef enum eException { ExceptionNone, ExceptionEOF } exception_t;$/;"	e	enum:eException	file:
ExceptionEOF	.\ctags58\sql.c	/^typedef enum eException { ExceptionNone, ExceptionEOF } exception_t;$/;"	e	enum:eException	file:
ExceptionEOF	.\ctags58\tex.c	/^typedef enum eException { ExceptionNone, ExceptionEOF } exception_t;$/;"	e	enum:eException	file:
ExceptionEOF	.\ctags58\verilog.c	/^typedef enum eException { ExceptionNone, ExceptionEOF } exception_t;$/;"	e	enum:eException	file:
ExceptionEOF	.\ctags58\vhdl.c	/^typedef enum eException { ExceptionNone, ExceptionEOF } exception_t;$/;"	e	enum:eException	file:
ExceptionFixedFormat	.\ctags58\fortran.c	/^	ExceptionNone, ExceptionEOF, ExceptionFixedFormat, ExceptionLoop$/;"	e	enum:eException	file:
ExceptionFormattingError	.\ctags58\c.c	/^	ExceptionNone, ExceptionEOF, ExceptionFormattingError,$/;"	e	enum:eException	file:
ExceptionLoop	.\ctags58\fortran.c	/^	ExceptionNone, ExceptionEOF, ExceptionFixedFormat, ExceptionLoop$/;"	e	enum:eException	file:
ExceptionNone	.\ctags58\c.c	/^	ExceptionNone, ExceptionEOF, ExceptionFormattingError,$/;"	e	enum:eException	file:
ExceptionNone	.\ctags58\eiffel.c	/^typedef enum eException { ExceptionNone, ExceptionEOF } exception_t;$/;"	e	enum:eException	file:
ExceptionNone	.\ctags58\flex.c	/^typedef enum eException { ExceptionNone, ExceptionEOF } exception_t;$/;"	e	enum:eException	file:
ExceptionNone	.\ctags58\fortran.c	/^	ExceptionNone, ExceptionEOF, ExceptionFixedFormat, ExceptionLoop$/;"	e	enum:eException	file:
ExceptionNone	.\ctags58\jscript.c	/^typedef enum eException { ExceptionNone, ExceptionEOF } exception_t;$/;"	e	enum:eException	file:
ExceptionNone	.\ctags58\sql.c	/^typedef enum eException { ExceptionNone, ExceptionEOF } exception_t;$/;"	e	enum:eException	file:
ExceptionNone	.\ctags58\tex.c	/^typedef enum eException { ExceptionNone, ExceptionEOF } exception_t;$/;"	e	enum:eException	file:
ExceptionNone	.\ctags58\verilog.c	/^typedef enum eException { ExceptionNone, ExceptionEOF } exception_t;$/;"	e	enum:eException	file:
ExceptionNone	.\ctags58\vhdl.c	/^typedef enum eException { ExceptionNone, ExceptionEOF } exception_t;$/;"	e	enum:eException	file:
Excluded	.\ctags58\options.c	/^static stringList* Excluded;$/;"	v	file:
ExecutableName	.\ctags58\routines.c	/^static const char *ExecutableName;$/;"	v	file:
ExecutableProgram	.\ctags58\routines.c	/^static const char *ExecutableProgram;$/;"	v	file:
Exit_annotation_buffer	.\vim73\ftplugin\ocaml.vim	/^    function! s:Exit_annotation_buffer()$/;"	f
Explore	.\vim73\plugin\netrwPlugin.vim	/^com! -nargs=* -bar -bang -count=0 -complete=dir	Explore		call netrw#Explore(<count>,0,0+<bang>0,<q-args>)$/;"	c
ExplorePatHls	.\vim73\autoload\netrw.vim	/^fun! s:ExplorePatHls(pattern)$/;"	f
ExtendKeyMap	.\vimfiles\bundle\tlib_vim\autoload\tlib\input.vim	/^function! s:ExtendKeyMap(world, key_mode, key_handlers) "{{{3$/;"	f
ExtendTagItemToPopupItem	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\complete.vim	/^function! s:ExtendTagItemToPopupItem(tagItem, szTypeName)$/;"	f
ExtractScopeFromTypeInfo	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\utils.vim	/^function! s:ExtractScopeFromTypeInfo(szTypeInfo)$/;"	f
ExtractTypeInfoFromDecl	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\items.vim	/^function! s:ExtractTypeInfoFromDecl(tokens)$/;"	f
Extract_type_data	.\vim73\ftplugin\ocaml.vim	/^    function! s:Extract_type_data(block_pattern)$/;"	f
F	.\vim73\macros\hanoi\hanoi.vim	/^map F "hy2l$/;"	m
F	.\vim73\macros\less.vim	/^map F :e<CR>G<SID>L:sleep 1<CR>F$/;"	m
F	.\vim73\macros\urm\urm.vim	/^map F yl$/;"	m
FALSE	.\ctags58\general.h	/^typedef enum { FALSE, TRUE } boolean;$/;"	e	enum:__anon23
FALSE	.\ctags58\general.h	/^typedef enum { FALSE, TRUE } booleanType;$/;"	e	enum:__anon22
FALSE	.\ctags58\general.h	90;"	d
FALSE	.\ctags58\general.h	98;"	d
FATAL	.\ctags58\routines.h	/^enum eErrorTypes { FATAL = 1, WARNING = 2, PERROR = 4 };$/;"	e	enum:eErrorTypes
FA_DIREC	.\ctags58\e_msoft.h	71;"	d
FILEBUF_INCR	.\ctags58\qdos.c	41;"	d	file:
FILEBUF_INIT	.\ctags58\qdos.c	40;"	d	file:
FILES	.\ctags58\ctags.html	/^<a name="FILES"><\/a>$/;"	a
FILE_WRITE	.\ctags58\read.c	21;"	d	file:
FLEXTAG_CLASS	.\ctags58\flex.c	/^	FLEXTAG_CLASS,$/;"	e	enum:__anon20	file:
FLEXTAG_COUNT	.\ctags58\flex.c	/^	FLEXTAG_COUNT$/;"	e	enum:__anon20	file:
FLEXTAG_FUNCTION	.\ctags58\flex.c	/^	FLEXTAG_FUNCTION,$/;"	e	enum:__anon20	file:
FLEXTAG_METHOD	.\ctags58\flex.c	/^	FLEXTAG_METHOD,$/;"	e	enum:__anon20	file:
FLEXTAG_MXTAG	.\ctags58\flex.c	/^	FLEXTAG_MXTAG,$/;"	e	enum:__anon20	file:
FLEXTAG_PROPERTY	.\ctags58\flex.c	/^	FLEXTAG_PROPERTY,$/;"	e	enum:__anon20	file:
FLEXTAG_VARIABLE	.\ctags58\flex.c	/^	FLEXTAG_VARIABLE,$/;"	e	enum:__anon20	file:
FORMFEED	.\ctags58\read.h	/^	FORMFEED      = '\\f',$/;"	e	enum:eCharacters
FTRules	.\vim73\filetype.vim	/^func! s:FTRules()$/;"	f
FTVB	.\vim73\filetype.vim	/^func! s:FTVB(alt)$/;"	f
FTasm	.\vim73\filetype.vim	/^func! s:FTasm()$/;"	f
FTasmsyntax	.\vim73\filetype.vim	/^func! s:FTasmsyntax()$/;"	f
FTbtm	.\vim73\filetype.vim	/^func! s:FTbtm()$/;"	f
FTchange	.\vim73\filetype.vim	/^func! s:FTchange()$/;"	f
FTe	.\vim73\filetype.vim	/^func! s:FTe()$/;"	f
FTent	.\vim73\filetype.vim	/^func! s:FTent()$/;"	f
FTheader	.\vim73\filetype.vim	/^func! s:FTheader()$/;"	f
FThtml	.\vim73\filetype.vim	/^func! s:FThtml()$/;"	f
FTidl	.\vim73\filetype.vim	/^func! s:FTidl()$/;"	f
FTinc	.\vim73\filetype.vim	/^func! s:FTinc()$/;"	f
FTlpc	.\vim73\filetype.vim	/^func! s:FTlpc()$/;"	f
FTm	.\vim73\filetype.vim	/^func! s:FTm()$/;"	f
FTmm	.\vim73\filetype.vim	/^func! s:FTmm()$/;"	f
FTmms	.\vim73\filetype.vim	/^func! s:FTmms()$/;"	f
FTnroff	.\vim73\filetype.vim	/^func! s:FTnroff()$/;"	f
FTperl	.\vim73\filetype.vim	/^func! s:FTperl()$/;"	f
FTpl	.\vim73\filetype.vim	/^func! s:FTpl()$/;"	f
FTprogress_asm	.\vim73\filetype.vim	/^func! s:FTprogress_asm()$/;"	f
FTprogress_cweb	.\vim73\filetype.vim	/^func! s:FTprogress_cweb()$/;"	f
FTprogress_pascal	.\vim73\filetype.vim	/^func! s:FTprogress_pascal()$/;"	f
FTr	.\vim73\filetype.vim	/^func! s:FTr()$/;"	f
FTtex	.\vim73\filetype.vim	/^func! s:FTtex()$/;"	f
FTxml	.\vim73\filetype.vim	/^func! s:FTxml()$/;"	f
FTy	.\vim73\filetype.vim	/^func! s:FTy()$/;"	f
Features	.\ctags58\options.c	/^static const char *const Features [] = {$/;"	v	file:
File	.\ctags58\eiffel.c	/^static FILE *File;$/;"	v	file:
File	.\ctags58\read.c	/^inputFile File;  \/* globally read through macros *\/$/;"	v
FileExplorer	.\vim73\plugin\netrwPlugin.vim	/^augroup FileExplorer$/;"	a
FileFinder	.\vimfiles\bundle\command-t\ruby\command-t\finder\file_finder.rb	/^  class FileFinder < Finder$/;"	c	class:CommandT
FileFormat	.\vim73\menu.vim	/^fun! s:FileFormat()$/;"	f
FileLimitExceeded	.\vimfiles\bundle\command-t\ruby\command-t\scanner\file_scanner.rb	/^    class FileLimitExceeded < ::RuntimeError; end$/;"	c	class:CommandT.FileScanner
FileName	.\ctags58\eiffel.c	/^static const char *FileName;$/;"	v	file:
FileName	.\vim73\tools\ccfilter.c	/^char	       FileName[1024];$/;"	v
FileReadable	.\vim73\autoload\netrw.vim	/^fun! s:FileReadable(fname)$/;"	f
FileScanner	.\vimfiles\bundle\command-t\ruby\command-t\scanner\file_scanner.rb	/^  class FileScanner < Scanner$/;"	c	class:CommandT
Filename	.\vimfiles\bundle\vim-snipmate\autoload\snipMate.vim	/^fun! Filename(...)$/;"	f
FilesRequired	.\ctags58\options.c	/^static boolean FilesRequired = TRUE;$/;"	v	file:
FilterClassMembers	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\complete.vim	/^function! s:FilterClassMembers(tagPopupList, szAccessFilter)$/;"	f
FilterClassScopeMembers	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\complete.vim	/^function! s:FilterClassScopeMembers(tagPopupList, szAccessFilter)$/;"	f
FilterNamespaceScopeMembers	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\complete.vim	/^function! s:FilterNamespaceScopeMembers(tagPopupList)$/;"	f
FilterOverloadedFunctions	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\complete.vim	/^function! s:FilterOverloadedFunctions(tagPopupList)$/;"	f
FilterStaticClassMembers	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\complete.vim	/^function! s:FilterStaticClassMembers(tagPopupList, szAccessFilter)$/;"	f
Finalise	.\vim73\ftplugin\debchangelog.vim	/^function Finalise()$/;"	f
FinaliseMenu	.\vim73\ftplugin\debchangelog.vim	/^function <SID>FinaliseMenu()$/;"	f
Finalised	.\vim73\ftplugin\debchangelog.vim	/^function <SID>Finalised()$/;"	f
Find	.\vim73\optwin.vim	/^fun! <SID>Find(lnum)$/;"	f
FindLet	.\vim73\indent\ocaml.vim	/^function s:FindLet(pstart, pmid, pend)$/;"	f
FindLet	.\vim73\indent\sml.vim	/^function! s:FindLet(pstart, pmid, pend)$/;"	f
FindOpenBracket	.\vim73\indent\php.vim	/^function! FindOpenBracket(lnum) " {{{$/;"	f
FindPage	.\vim73\ftplugin\man.vim	/^func <SID>FindPage(sect, page)$/;"	f
FindPair	.\vim73\indent\ocaml.vim	/^function s:FindPair(pstart, pmid, pend)$/;"	f
FindPair	.\vim73\indent\sml.vim	/^function! s:FindPair(pstart, pmid, pend)$/;"	f
FindPrevNonBlankNonComment	.\vim73\indent\erlang.vim	/^function s:FindPrevNonBlankNonComment(lnum)$/;"	f
FindStartPositionOfCompletion	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\complete.vim	/^function! s:FindStartPositionOfCompletion()$/;"	f
FindTheIfOfAnElse	.\vim73\indent\php.vim	/^function! FindTheIfOfAnElse (lnum, StopAfterFirstPrevElse) " {{{$/;"	f
FindTheSwitchIndent	.\vim73\indent\php.vim	/^function! FindTheSwitchIndent (lnum) " {{{$/;"	f
Find_common_path	.\vim73\ftplugin\ocaml.vim	/^  function! s:Find_common_path (p1,p2)$/;"	f
Finder	.\vimfiles\bundle\command-t\ruby\command-t\finder.rb	/^  class Finder$/;"	c	class:CommandT
First_word_len	.\vim73\indent\awk.vim	/^function! s:First_word_len( line )$/;"	f
FixBeginfigs	.\vim73\ftplugin\mp.vim	/^  command -nargs=0 FixBeginfigs call s:fix_beginfigs()$/;"	c
FixFText	.\vim73\menu.vim	/^fun! s:FixFText()$/;"	f
Fixup	.\vim73\ftplugin\gitrebase.vim	/^command! -buffer -bar Fixup  :call s:choose('fixup')$/;"	c
FlexKeywordTable	.\ctags58\flex.c	/^static const keywordDesc FlexKeywordTable [] = {$/;"	v	file:
FlexKinds	.\ctags58\flex.c	/^static kindOption FlexKinds [] = {$/;"	v	file:
FlexParser	.\ctags58\flex.c	/^extern parserDefinition* FlexParser (void)$/;"	f	signature:(void)
FnameEscape	.\vim73\menu.vim	/^func! s:FnameEscape(fname)$/;"	f
Fnameescape	.\vim73\ftplugin\ocaml.vim	/^  function! s:Fnameescape(s)$/;"	f
FoldCompare	.\vim73\syntax\2html.vim	/^  function! s:FoldCompare(f1, f2)$/;"	f
FormatHelp	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:FormatHelp(help) "{{{3$/;"	f
FormatHelpItem	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:FormatHelpItem(item, fmt) "{{{3$/;"	f
Formatter	.\vimfiles\bundle\command-t\spec\vim_formatter.rb	/^    module Formatter$/;"	m	class:Spec.Runner
FortranGetFixedIndent	.\vim73\indent\fortran.vim	/^function FortranGetFixedIndent()$/;"	f
FortranGetFreeIndent	.\vim73\indent\fortran.vim	/^function FortranGetFreeIndent()$/;"	f
FortranGetIndent	.\vim73\indent\fortran.vim	/^function FortranGetIndent(lnum)$/;"	f
FortranKeywordTable	.\ctags58\fortran.c	/^static const keywordDesc FortranKeywordTable [] = {$/;"	v	file:
FortranKinds	.\ctags58\fortran.c	/^static kindOption FortranKinds [] = {$/;"	v	file:
FortranParser	.\ctags58\fortran.c	/^extern parserDefinition* FortranParser (void)$/;"	f	signature:(void)
Forward	.\vim73\macros\less.vim	/^fun! s:Forward()$/;"	f
FreeSourceForm	.\ctags58\fortran.c	/^static boolean FreeSourceForm;$/;"	v	file:
FullName	.\vim73\ftplugin\debchangelog.vim	/^function <SID>FullName()$/;"	f
FunctionNames	.\ctags58\flex.c	/^static stringList *FunctionNames;$/;"	v	file:
FunctionNames	.\ctags58\jscript.c	/^static stringList *FunctionNames;$/;"	v	file:
G	.\vim73\macros\less.vim	/^noremap <script> G G<SID>L$/;"	m
G	.\vim73\syntax\2html.vim	/^  norm! G$/;"	m
GenericNames	.\ctags58\eiffel.c	/^static stringList *GenericNames;$/;"	v	file:
GetAccessFilter	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\complete.vim	/^function! s:GetAccessFilter(szFilter, szAccessFilter)$/;"	f
GetAdaIndent	.\vim73\indent\ada.vim	/^function GetAdaIndent()$/;"	f
GetAddition	.\vim73\autoload\ccomplete.vim	/^function! s:GetAddition(line, match, memarg, bracket)$/;"	f
GetAllUsingNamespaceMapFromCurrentBuffer	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\namespaces.vim	/^function! s:GetAllUsingNamespaceMapFromCurrentBuffer(...)$/;"	f
GetAllUsingNamespaceMapFromFile	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\namespaces.vim	/^function! s:GetAllUsingNamespaceMapFromFile(szFilePath, ...)$/;"	f
GetAwkIndent	.\vim73\indent\awk.vim	/^function! GetAwkIndent()$/;"	f
GetBstIndent	.\vim73\indent\bst.vim	/^function! GetBstIndent(lnum) abort$/;"	f
GetBufferRubyClass	.\vim73\autoload\rubycomplete.vim	/^function! s:GetBufferRubyClass(name, ...)$/;"	f
GetBufferRubyEntity	.\vim73\autoload\rubycomplete.vim	/^function! s:GetBufferRubyEntity( name, type, ... )$/;"	f
GetBufferRubyModule	.\vim73\autoload\rubycomplete.vim	/^function! s:GetBufferRubyModule(name, ...)$/;"	f
GetBufferRubySingletonMethods	.\vim73\autoload\rubycomplete.vim	/^function! s:GetBufferRubySingletonMethods(name)$/;"	f
GetCSSIndent	.\vim73\indent\css.vim	/^function GetCSSIndent()$/;"	f
GetChaiScriptIndent	.\vim73\indent\chaiscript.vim	/^function! GetChaiScriptIndent()$/;"	f
GetClassScopeAtCursor	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\namespaces.vim	/^function! s:GetClassScopeAtCursor()$/;"	f
GetCmd	.\vimfiles\bundle\tlib_vim\autoload\tlib\vcs.vim	/^function! s:GetCmd(vcstype, cmd)$/;"	f
GetCmdArg	.\vim73\ftplugin\man.vim	/^func <SID>GetCmdArg(sect, page)$/;"	f
GetCobolIndent	.\vim73\indent\cobol.vim	/^function! GetCobolIndent(lnum) abort$/;"	f
GetConfigIndent	.\vim73\indent\config.vim	/^function GetConfigIndent()$/;"	f
GetCucumberIndent	.\vim73\indent\cucumber.vim	/^function! GetCucumberIndent()$/;"	f
GetDTDIndent	.\vim73\indent\dtd.vim	/^function GetDTDIndent()$/;"	f
GetEiffelIndent	.\vim73\indent\eiffel.vim	/^function GetEiffelIndent()$/;"	f
GetErubyIndent	.\vim73\indent\eruby.vim	/^function! GetErubyIndent(...)$/;"	f
GetEtermIndent	.\vim73\indent\eterm.vim	/^function GetEtermIndent()$/;"	f
GetFrameScriptIndent	.\vim73\indent\framescript.vim	/^function GetFrameScriptIndent()$/;"	f
GetGitconfigIndent	.\vim73\indent\gitconfig.vim	/^function! GetGitconfigIndent()$/;"	f
GetHamlIndent	.\vim73\indent\haml.vim	/^function! GetHamlIndent()$/;"	f
GetIdlangIndent	.\vim73\indent\idlang.vim	/^function GetIdlangIndent(lnum)$/;"	f
GetIncludeListFromCurrentBuffer	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\includes.vim	/^function! s:GetIncludeListFromCurrentBuffer()$/;"	f
GetIncludeListFromFile	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\includes.vim	/^function! s:GetIncludeListFromFile(szFilePath, bUpdate) $/;"	f
GetInd	.\vim73\indent\ocaml.vim	/^function s:GetInd(lnum, pat, lim)$/;"	f
GetInd	.\vim73\indent\sml.vim	/^function! s:GetInd(lnum, pat, lim)$/;"	f
GetIshdIndent	.\vim73\indent\ishd.vim	/^fun! GetIshdIndent(lnum)$/;"	f
GetJavaIndent	.\vim73\indent\java.vim	/^function GetJavaIndent()$/;"	f
GetLDIndent	.\vim73\indent\ld.vim	/^function GetLDIndent()$/;"	f
GetLastRealCodeLNum	.\vim73\indent\php.vim	/^function! GetLastRealCodeLNum(startline) " {{{$/;"	f
GetLatestVimScripts	.\vim73\autoload\getscript.vim	/^com!        -nargs=0 GetLatestVimScripts call getscript#GetLatestVimScripts()$/;"	c
GetLatestVimScripts	.\vim73\plugin\getscriptPlugin.vim	/^com!        -nargs=0 GetLatestVimScripts call getscript#GetLatestVimScripts()$/;"	c
GetLineWithoutFullComment	.\vim73\indent\ocaml.vim	/^function s:GetLineWithoutFullComment(lnum)$/;"	f
GetLiquidIndent	.\vim73\indent\liquid.vim	/^function! GetLiquidIndent(...)$/;"	f
GetLogtalkIndent	.\vim73\indent\logtalk.vim	/^function! GetLogtalkIndent()$/;"	f
GetLuaIndent	.\vim73\indent\lua.vim	/^function! GetLuaIndent()$/;"	f
GetMSL	.\vim73\indent\ruby.vim	/^function s:GetMSL(lnum)$/;"	f
GetMakeIndent	.\vim73\indent\make.vim	/^function GetMakeIndent()$/;"	f
GetMatlabIndent	.\vim73\indent\matlab.vim	/^function GetMatlabIndent(lnum)$/;"	f
GetMetaPostIndent	.\vim73\indent\mp.vim	/^function! GetMetaPostIndent()$/;"	f
GetMmaIndent	.\vim73\indent\mma.vim	/^function GetMmaIndent()$/;"	f
GetNamespaceAliasListFromLine	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\namespaces.vim	/^function! s:GetNamespaceAliasListFromLine(szLine)$/;"	f
GetNamespaceAliasMap	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\namespaces.vim	/^function! s:GetNamespaceAliasMap()$/;"	f
GetNamespaceListFromLine	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\namespaces.vim	/^function! s:GetNamespaceListFromLine(szLine)$/;"	f
GetNthElement	.\vimfiles\bundle\tlib_vim\autoload\tlib\list.vim	/^function! s:GetNthElement(n, lists, default) "{{{3$/;"	f
GetOCamlIndent	.\vim73\indent\ocaml.vim	/^function GetOCamlIndent()$/;"	f
GetObjCIndent	.\vim73\indent\objc.vim	/^function GetObjCIndent()$/;"	f
GetOccamIndent	.\vim73\indent\occam.vim	/^function GetOccamIndent()$/;"	f
GetOffsetOf	.\vim73\indent\config.vim	/^function s:GetOffsetOf(line, regexp)$/;"	f
GetOneScript	.\vim73\autoload\getscript.vim	/^fun! s:GetOneScript(...)$/;"	f
GetPage	.\vim73\ftplugin\man.vim	/^func <SID>GetPage(...)$/;"	f
GetPascalIndent	.\vim73\indent\pascal.vim	/^function! GetPascalIndent( line_num )$/;"	f
GetPerl6Indent	.\vim73\indent\perl6.vim	/^function GetPerl6Indent()$/;"	f
GetPerlIndent	.\vim73\indent\perl.vim	/^function GetPerlIndent()$/;"	f
GetPhpIndent	.\vim73\indent\php.vim	/^function! GetPhpIndent()$/;"	f
GetPoVRayIndent	.\vim73\indent\pov.vim	/^function GetPoVRayIndent()$/;"	f
GetPrevNonCommentLineNum	.\vim73\indent\pascal.vim	/^function! s:GetPrevNonCommentLineNum( line_num )$/;"	f
GetPrologIndent	.\vim73\indent\prolog.vim	/^function! GetPrologIndent()$/;"	f
GetPythonIndent	.\vim73\indent\python.vim	/^function GetPythonIndent(lnum)$/;"	f
GetRSTIndent	.\vim73\indent\rst.vim	/^function GetRSTIndent()$/;"	f
GetReadlineIndent	.\vim73\indent\readline.vim	/^function GetReadlineIndent()$/;"	f
GetRubyIndent	.\vim73\indent\ruby.vim	/^function GetRubyIndent()$/;"	f
GetRubyVarType	.\vim73\autoload\rubycomplete.vim	/^function! s:GetRubyVarType(v)$/;"	f
GetSDLIndent	.\vim73\indent\sdl.vim	/^function! GetSDLIndent()$/;"	f
GetSMLIndent	.\vim73\indent\sml.vim	/^function! GetSMLIndent()$/;"	f
GetSQLIndent	.\vim73\indent\sqlanywhere.vim	/^function GetSQLIndent()$/;"	f
GetSassIndent	.\vim73\indent\sass.vim	/^function! GetSassIndent()$/;"	f
GetScript	.\vim73\autoload\getscript.vim	/^com!        -nargs=0 GetScript           call getscript#GetLatestVimScripts()$/;"	c
GetScripts	.\vim73\plugin\getscriptPlugin.vim	/^com!        -nargs=0 GetScripts          call getscript#GetLatestVimScripts()$/;"	c
GetShIndent	.\vim73\indent\sh.vim	/^function! GetShIndent()$/;"	f
GetStmtStarterIndent	.\vim73\indent\sqlanywhere.vim	/^function s:GetStmtStarterIndent( keyword, curr_lnum )$/;"	f
GetStopPositionForLocalSearch	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\namespaces.vim	/^function! s:GetStopPositionForLocalSearch()$/;"	f
GetSymbol	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\items.vim	/^function! s:GetSymbol(tokens)$/;"	f
GetTFIndent	.\vim73\indent\tf.vim	/^function GetTFIndent()$/;"	f
GetTagOfSameScope	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\utils.vim	/^function! s:GetTagOfSameScope(listTags, szScopeToMatch)$/;"	f
GetTclIndent	.\vim73\indent\tcl.vim	/^function GetTclIndent()$/;"	f
GetTempfile	.\vim73\autoload\netrw.vim	/^fun! s:GetTempfile(fname)$/;"	f
GetTildeIndent	.\vim73\indent\tilde.vim	/^function GetTildeIndent(lnum)$/;"	f
GetTypeInfoOfReturnedType	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\items.vim	/^function! s:GetTypeInfoOfReturnedType(contextStack, szFunctionName)$/;"	f
GetTypeInfoOfVariable	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\items.vim	/^function! s:GetTypeInfoOfVariable(contextStack, szVariable, bSearchDecl)$/;"	f
GetUsingNamespaceListFromMap	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\namespaces.vim	/^function! s:GetUsingNamespaceListFromMap(namespaceMap, ...)$/;"	f
GetVHDLindent	.\vim73\indent\vhdl.vim	/^function GetVHDLindent()$/;"	f
GetVerilogIndent	.\vim73\indent\verilog.vim	/^function GetVerilogIndent()$/;"	f
GetVimIndent	.\vim73\indent\vim.vim	/^function GetVimIndent()$/;"	f
GetWidth	.\vim73\indent\objc.vim	/^function s:GetWidth(line, regexp)$/;"	f
GetXF86ConfIndent	.\vim73\indent\xf86conf.vim	/^function GetXF86ConfIndent()$/;"	f
GetXinetdIndent	.\vim73\indent\xinetd.vim	/^function GetXinetdIndent()$/;"	f
GetYaccIndent	.\vim73\indent\yacc.vim	/^function GetYaccIndent()$/;"	f
Get_brace_balance	.\vim73\indent\awk.vim	/^function! s:Get_brace_balance( line, b_open, b_close )$/;"	f
Get_prev_line	.\vim73\indent\awk.vim	/^function! s:Get_prev_line( lineno )$/;"	f
Get_type	.\vim73\ftplugin\ocaml.vim	/^    function! s:Get_type(mode)$/;"	f
Glob	.\vimfiles\bundle\vim-snipmate\autoload\snipMate.vim	/^function! s:Glob(path, expr)$/;"	f
Greek	.\vim73\syntax\tex.vim	/^  fun! s:Greek(group,pat,cchar)$/;"	f
GroovyHiLink	.\vim73\syntax\groovy.vim	/^  command! -nargs=+ GroovyHiLink hi def link <args>$/;"	c
GroovyHiLink	.\vim73\syntax\groovy.vim	/^  command! -nargs=+ GroovyHiLink hi link <args>$/;"	c
H	.\vim73\macros\less.vim	/^map H h$/;"	m
HASH_EXPONENT	.\ctags58\keyword.c	27;"	d	file:
HAVE_CHMOD	.\ctags58\e_riscos.h	27;"	d
HAVE_CHSIZE	.\ctags58\e_msoft.h	30;"	d
HAVE_CHSIZE	.\ctags58\e_os2.h	25;"	d
HAVE_CHSIZE	.\ctags58\e_riscos.h	28;"	d
HAVE_CLOCK	.\ctags58\e_amiga.h	18;"	d
HAVE_CLOCK	.\ctags58\e_djgpp.h	30;"	d
HAVE_CLOCK	.\ctags58\e_mac.h	26;"	d
HAVE_CLOCK	.\ctags58\e_msoft.h	29;"	d
HAVE_CLOCK	.\ctags58\e_os2.h	24;"	d
HAVE_CLOCK	.\ctags58\e_qdos.h	22;"	d
HAVE_CLOCK	.\ctags58\e_riscos.h	29;"	d
HAVE_CLOCK	.\ctags58\e_vms.h	25;"	d
HAVE_DIRECT_H	.\ctags58\e_msoft.h	50;"	d
HAVE_DIRENT_H	.\ctags58\e_djgpp.h	18;"	d
HAVE_DIRENT_H	.\ctags58\e_msoft.h	44;"	d
HAVE_DIRENT_H	.\ctags58\e_msoft.h	67;"	d
HAVE_DIRENT_H	.\ctags58\e_os2.h	16;"	d
HAVE_DIRENT_H	.\ctags58\e_qdos.h	14;"	d
HAVE_DIRENT_H	.\ctags58\e_riscos.h	45;"	d
HAVE_DIR_H	.\ctags58\e_djgpp.h	17;"	d
HAVE_DIR_H	.\ctags58\e_msoft.h	43;"	d
HAVE_DIR_H	.\ctags58\e_msoft.h	66;"	d
HAVE_DOS_H	.\ctags58\e_msoft.h	22;"	d
HAVE_FCNTL_H	.\ctags58\e_djgpp.h	19;"	d
HAVE_FCNTL_H	.\ctags58\e_mac.h	33;"	d
HAVE_FCNTL_H	.\ctags58\e_msoft.h	23;"	d
HAVE_FCNTL_H	.\ctags58\e_os2.h	17;"	d
HAVE_FCNTL_H	.\ctags58\e_riscos.h	46;"	d
HAVE_FCNTL_H	.\ctags58\e_vms.h	21;"	d
HAVE_FGETPOS	.\ctags58\e_amiga.h	19;"	d
HAVE_FGETPOS	.\ctags58\e_djgpp.h	31;"	d
HAVE_FGETPOS	.\ctags58\e_mac.h	27;"	d
HAVE_FGETPOS	.\ctags58\e_msoft.h	31;"	d
HAVE_FGETPOS	.\ctags58\e_msoft.h	63;"	d
HAVE_FGETPOS	.\ctags58\e_os2.h	26;"	d
HAVE_FGETPOS	.\ctags58\e_qdos.h	23;"	d
HAVE_FGETPOS	.\ctags58\e_riscos.h	30;"	d
HAVE_FGETPOS	.\ctags58\e_vms.h	26;"	d
HAVE_FINDFIRST	.\ctags58\e_msoft.h	45;"	d
HAVE_FINDNEXT	.\ctags58\e_msoft.h	36;"	d
HAVE_FNMATCH	.\ctags58\e_djgpp.h	32;"	d
HAVE_FNMATCH	.\ctags58\e_riscos.h	31;"	d
HAVE_FNMATCH_H	.\ctags58\e_djgpp.h	20;"	d
HAVE_FNMATCH_H	.\ctags58\e_riscos.h	47;"	d
HAVE_FTRUNCATE	.\ctags58\e_os2.h	27;"	d
HAVE_FTRUNCATE	.\ctags58\e_qdos.h	24;"	d
HAVE_FTRUNCATE	.\ctags58\e_riscos.h	32;"	d
HAVE_IO_H	.\ctags58\e_msoft.h	24;"	d
HAVE_IO_H	.\ctags58\e_os2.h	18;"	d
HAVE_MKSTEMP	.\ctags58\e_djgpp.h	33;"	d
HAVE_MKSTEMP	.\ctags58\e_riscos.h	33;"	d
HAVE_OPENDIR	.\ctags58\e_djgpp.h	34;"	d
HAVE_OPENDIR	.\ctags58\e_mac.h	28;"	d
HAVE_OPENDIR	.\ctags58\e_os2.h	28;"	d
HAVE_OPENDIR	.\ctags58\e_qdos.h	25;"	d
HAVE_OPENDIR	.\ctags58\e_riscos.h	34;"	d
HAVE_PUTENV	.\ctags58\e_qdos.h	26;"	d
HAVE_PUTENV	.\ctags58\e_riscos.h	35;"	d
HAVE_REGCOMP	.\ctags58\e_djgpp.h	35;"	d
HAVE_REGCOMP	.\ctags58\e_os2.h	29;"	d
HAVE_REGCOMP	.\ctags58\e_riscos.h	36;"	d
HAVE_REGEX	.\ctags58\general.h	53;"	d
HAVE_REMOVE	.\ctags58\e_djgpp.h	36;"	d
HAVE_REMOVE	.\ctags58\e_mac.h	29;"	d
HAVE_REMOVE	.\ctags58\e_os2.h	30;"	d
HAVE_REMOVE	.\ctags58\e_qdos.h	27;"	d
HAVE_REMOVE	.\ctags58\e_riscos.h	37;"	d
HAVE_SETENV	.\ctags58\e_djgpp.h	37;"	d
HAVE_SETENV	.\ctags58\e_mac.h	30;"	d
HAVE_SETENV	.\ctags58\e_riscos.h	38;"	d
HAVE_STAT_H	.\ctags58\e_riscos.h	48;"	d
HAVE_STAT_H	.\ctags58\e_vms.h	18;"	d
HAVE_STAT_ST_INO	.\ctags58\e_djgpp.h	38;"	d
HAVE_STDLIB_H	.\ctags58\e_amiga.h	14;"	d
HAVE_STDLIB_H	.\ctags58\e_djgpp.h	21;"	d
HAVE_STDLIB_H	.\ctags58\e_mac.h	34;"	d
HAVE_STDLIB_H	.\ctags58\e_mac.h	40;"	d
HAVE_STDLIB_H	.\ctags58\e_msoft.h	25;"	d
HAVE_STDLIB_H	.\ctags58\e_os2.h	19;"	d
HAVE_STDLIB_H	.\ctags58\e_qdos.h	15;"	d
HAVE_STDLIB_H	.\ctags58\e_riscos.h	49;"	d
HAVE_STDLIB_H	.\ctags58\e_vms.h	15;"	d
HAVE_STRCASECMP	.\ctags58\e_djgpp.h	39;"	d
HAVE_STRERROR	.\ctags58\e_amiga.h	20;"	d
HAVE_STRERROR	.\ctags58\e_djgpp.h	40;"	d
HAVE_STRERROR	.\ctags58\e_mac.h	31;"	d
HAVE_STRERROR	.\ctags58\e_msoft.h	35;"	d
HAVE_STRERROR	.\ctags58\e_os2.h	31;"	d
HAVE_STRERROR	.\ctags58\e_qdos.h	28;"	d
HAVE_STRERROR	.\ctags58\e_riscos.h	39;"	d
HAVE_STRERROR	.\ctags58\e_vms.h	27;"	d
HAVE_STRICMP	.\ctags58\e_amiga.h	21;"	d
HAVE_STRICMP	.\ctags58\e_msoft.h	32;"	d
HAVE_STRICMP	.\ctags58\e_os2.h	32;"	d
HAVE_STRICMP	.\ctags58\e_riscos.h	40;"	d
HAVE_STRING_H	.\ctags58\e_djgpp.h	22;"	d
HAVE_STRING_H	.\ctags58\e_mac.h	35;"	d
HAVE_STRING_H	.\ctags58\e_riscos.h	50;"	d
HAVE_STRNCASECMP	.\ctags58\e_djgpp.h	41;"	d
HAVE_STRNICMP	.\ctags58\e_amiga.h	22;"	d
HAVE_STRNICMP	.\ctags58\e_msoft.h	33;"	d
HAVE_STRNICMP	.\ctags58\e_os2.h	33;"	d
HAVE_STRNICMP	.\ctags58\e_riscos.h	41;"	d
HAVE_STRSTR	.\ctags58\e_djgpp.h	42;"	d
HAVE_STRSTR	.\ctags58\e_mac.h	32;"	d
HAVE_STRSTR	.\ctags58\e_msoft.h	34;"	d
HAVE_STRSTR	.\ctags58\e_os2.h	34;"	d
HAVE_STRSTR	.\ctags58\e_qdos.h	29;"	d
HAVE_STRSTR	.\ctags58\e_riscos.h	42;"	d
HAVE_STRSTR	.\ctags58\e_vms.h	28;"	d
HAVE_SYS_DIR_H	.\ctags58\e_djgpp.h	23;"	d
HAVE_SYS_DIR_H	.\ctags58\e_mac.h	36;"	d
HAVE_SYS_DIR_H	.\ctags58\e_riscos.h	51;"	d
HAVE_SYS_STAT_H	.\ctags58\e_amiga.h	15;"	d
HAVE_SYS_STAT_H	.\ctags58\e_djgpp.h	24;"	d
HAVE_SYS_STAT_H	.\ctags58\e_msoft.h	26;"	d
HAVE_SYS_STAT_H	.\ctags58\e_os2.h	20;"	d
HAVE_SYS_STAT_H	.\ctags58\e_qdos.h	16;"	d
HAVE_SYS_STAT_H	.\ctags58\e_riscos.h	52;"	d
HAVE_SYS_STAT_H	.\ctags58\e_vms.h	22;"	d
HAVE_SYS_TIMES_H	.\ctags58\e_djgpp.h	25;"	d
HAVE_SYS_TIMES_H	.\ctags58\e_mac.h	37;"	d
HAVE_SYS_TIMES_H	.\ctags58\e_qdos.h	17;"	d
HAVE_SYS_TIMES_H	.\ctags58\e_riscos.h	53;"	d
HAVE_SYS_TYPES_H	.\ctags58\e_amiga.h	16;"	d
HAVE_SYS_TYPES_H	.\ctags58\e_djgpp.h	26;"	d
HAVE_SYS_TYPES_H	.\ctags58\e_msoft.h	27;"	d
HAVE_SYS_TYPES_H	.\ctags58\e_os2.h	21;"	d
HAVE_SYS_TYPES_H	.\ctags58\e_qdos.h	18;"	d
HAVE_SYS_TYPES_H	.\ctags58\e_riscos.h	54;"	d
HAVE_SYS_TYPES_H	.\ctags58\e_vms.h	23;"	d
HAVE_TEMPNAM	.\ctags58\e_msoft.h	37;"	d
HAVE_TIMES	.\ctags58\e_qdos.h	30;"	d
HAVE_TIMES	.\ctags58\e_riscos.h	43;"	d
HAVE_TIME_H	.\ctags58\e_amiga.h	17;"	d
HAVE_TIME_H	.\ctags58\e_djgpp.h	27;"	d
HAVE_TIME_H	.\ctags58\e_mac.h	38;"	d
HAVE_TIME_H	.\ctags58\e_msoft.h	28;"	d
HAVE_TIME_H	.\ctags58\e_os2.h	22;"	d
HAVE_TIME_H	.\ctags58\e_qdos.h	19;"	d
HAVE_TIME_H	.\ctags58\e_riscos.h	55;"	d
HAVE_TIME_H	.\ctags58\e_vms.h	16;"	d
HAVE_TRUNCATE	.\ctags58\e_djgpp.h	43;"	d
HAVE_TRUNCATE	.\ctags58\e_os2.h	35;"	d
HAVE_TRUNCATE	.\ctags58\e_qdos.h	31;"	d
HAVE_TRUNCATE	.\ctags58\e_riscos.h	44;"	d
HAVE_TYPES_H	.\ctags58\e_mac.h	39;"	d
HAVE_TYPES_H	.\ctags58\e_vms.h	19;"	d
HAVE_UNISTD_H	.\ctags58\e_djgpp.h	28;"	d
HAVE_UNISTD_H	.\ctags58\e_os2.h	23;"	d
HAVE_UNISTD_H	.\ctags58\e_qdos.h	20;"	d
HAVE_UNISTD_H	.\ctags58\e_riscos.h	56;"	d
HAVE_UNISTD_H	.\ctags58\e_vms.h	29;"	d
HAVE__FINDFIRST	.\ctags58\e_msoft.h	49;"	d
HAVE__FINDFIRST	.\ctags58\e_msoft.h	68;"	d
HEADERS	.\ctags58\mk_mpw.mak	/^HEADERS	= ¶$/;"	m
HEADERS	.\ctags58\mk_qdos.mak	/^HEADERS = e_qdos.h \\$/;"	m
HEADERS	.\ctags58\source.mak	/^HEADERS = \\$/;"	m
HOW TO USE WITH GNU EMACS	.\ctags58\ctags.html	/^<a name="HOW TO USE WITH GNU EMACS"><\/a>$/;"	a
HOW TO USE WITH NEDIT	.\ctags58\ctags.html	/^<a name="HOW TO USE WITH NEDIT"><\/a>$/;"	a
HOW TO USE WITH VI	.\ctags58\ctags.html	/^<a name="HOW TO USE WITH VI"><\/a>$/;"	a
HamGetFreeIndent	.\vim73\indent\hamster.vim	/^function HamGetFreeIndent()$/;"	f
HamGetIndent	.\vim73\indent\hamster.vim	/^function HamGetIndent(lnum)$/;"	f
HasATagFileOrTagEnvChanged	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\complete.vim	/^function! s:HasATagFileOrTagEnvChanged()$/;"	f
HasTagEnvChanged	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\complete.vim	/^function! s:HasTagEnvChanged()$/;"	f
HashTable	.\ctags58\keyword.c	/^static hashEntry **HashTable = NULL;$/;"	v	file:
Header	.\vim73\optwin.vim	/^fun! <SID>Header(text)$/;"	f
HeaderExtensions	.\ctags58\options.c	/^static const char *const HeaderExtensions [] = {$/;"	v	file:
Help	.\vim73\macros\less.vim	/^fun! s:Help()$/;"	f
Helpfind	.\vim73\menu.vim	/^fun! s:Helpfind()$/;"	f
Hexplore	.\vim73\plugin\netrwPlugin.vim	/^com! -nargs=* -bar -bang -count=0 -complete=dir	Hexplore	call netrw#Explore(<count>,1,2+<bang>0,<q-args>)$/;"	c
Hi	.\vim73\syntax\sdl.vim	/^	command -nargs=+ Hi     hi <args>$/;"	c
Hi	.\vim73\syntax\sdl.vim	/^	command -nargs=+ Hi     hi def <args>$/;"	c
Hi	.\vim73\syntax\xpm2.vim	/^  command -nargs=+ Hi hi <args>$/;"	c
Hi	.\vim73\syntax\xpm2.vim	/^  command -nargs=+ Hi hi def <args>$/;"	c
HiFold	.\vim73\syntax\yacc.vim	/^ com! -nargs=+ HiFold	<args> fold$/;"	c
HiFold	.\vim73\syntax\yacc.vim	/^ com! -nargs=+ HiFold	<args>$/;"	c
HiLink	.\vim73\syntax\a65.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\a65.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\abap.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\abap.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\abaqus.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\abaqus.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\abc.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\abc.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\abel.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\abel.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\acedb.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\acedb.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\aflex.vim	/^      command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\aflex.vim	/^      command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\ahdl.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\ahdl.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\amiga.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\amiga.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\aml.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\aml.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\ampl.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\ampl.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\antlr.vim	/^      command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\antlr.vim	/^      command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\apache.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\apache.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\apachestyle.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\apachestyle.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\asm.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\asm.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\asm68k.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\asm68k.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\asmh8300.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\asmh8300.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\asn.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\asn.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\aspvbs.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\aspvbs.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\asterisk.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\asterisk.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\asteriskvm.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\asteriskvm.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\atlas.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\atlas.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\automake.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\automake.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\ave.vim	/^	command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\ave.vim	/^	command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\awk.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\awk.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\ayacc.vim	/^      command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\ayacc.vim	/^      command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\b.vim	/^      command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\b.vim	/^      command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\baan.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\baan.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\basic.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\basic.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\bc.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\bc.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\bib.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\bib.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\bindzone.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\bindzone.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\blank.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\blank.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\bst.vim	/^        command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\bst.vim	/^        command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\btm.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\btm.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\bzr.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\bzr.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\cabal.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\cabal.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\cdl.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\cdl.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\cfg.vim	/^	command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\cfg.vim	/^	command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\ch.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\ch.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\change.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\change.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\changelog.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\changelog.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\cheetah.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\cheetah.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\chill.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\chill.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\cl.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\cl.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\clean.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\clean.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\clipper.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\clipper.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\cmake.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\cmake.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\cobol.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\cobol.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\config.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\config.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\cpp.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\cpp.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\crontab.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\crontab.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\csc.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\csc.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\csh.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\csh.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\csp.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\csp.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\css.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\css.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\cterm.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\cterm.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\cupl.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\cupl.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\cuplsim.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\cuplsim.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\cvs.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\cvs.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\cweb.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\cweb.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\cynlib.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\cynlib.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\cynpp.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\cynpp.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\dcd.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\dcd.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\dcl.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\dcl.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\debchangelog.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\debchangelog.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\debcontrol.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\debcontrol.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\def.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\def.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\desc.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\desc.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\desktop.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\desktop.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\diva.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\diva.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\django.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\django.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\docbk.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\docbk.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\dosbatch.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\dosbatch.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\dosini.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\dosini.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\dot.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\dot.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\dracula.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\dracula.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\dtd.vim	/^	command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\dtd.vim	/^	command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\dtml.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\dtml.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\dylan.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\dylan.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\dylanintr.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\dylanintr.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\dylanlid.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\dylanlid.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\ecd.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\ecd.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\edif.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\edif.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\eiffel.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\eiffel.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\elf.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\elf.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\elmfilt.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\elmfilt.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\erlang.vim	/^        command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\erlang.vim	/^        command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\esqlc.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\esqlc.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\esterel.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\esterel.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\eviews.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\eviews.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\exim.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\exim.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\expect.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\expect.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\exports.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\exports.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\fdcc.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\fdcc.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\fgl.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\fgl.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\focexec.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\focexec.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\form.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\form.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\forth.vim	/^	command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\forth.vim	/^	command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\fortran.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\fortran.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\foxpro.vim	/^	command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\foxpro.vim	/^	command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\fstab.vim	/^		command! -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\fstab.vim	/^		command! -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\gdb.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\gdb.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\gdmo.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\gdmo.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\gedcom.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\gedcom.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\gkrellmrc.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\gkrellmrc.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\gnuplot.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\gnuplot.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\gp.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\gp.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\grads.vim	/^	command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\grads.vim	/^	command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\gretl.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\gretl.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\gtkrc.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\gtkrc.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\hamster.vim	/^        command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\hamster.vim	/^        command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\haskell.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\haskell.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\hb.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\hb.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\hercules.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\hercules.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\hex.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\hex.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\hog.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\hog.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\htmlos.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\htmlos.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\ia64.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\ia64.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\icon.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\icon.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\idl.vim	/^  command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\idlang.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\idlang.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\inform.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\inform.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\inittab.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\inittab.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\ishd.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\ishd.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\iss.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\iss.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\ist.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\ist.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\jal.vim	/^  command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\jal.vim	/^  command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\jam.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\jam.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\jargon.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\jargon.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\javacc.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\javacc.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\javascript.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\javascript.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\jess.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\jess.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\jgraph.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\jgraph.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\jproperties.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\jproperties.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\jsp.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\jsp.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\kix.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\kix.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\kscript.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\kscript.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\kwt.vim	/^	command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\kwt.vim	/^	command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\lace.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\lace.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\latte.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\latte.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\ldif.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\ldif.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\lhaskell.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\lhaskell.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\lifelines.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\lifelines.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\lilo.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\lilo.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\lisp.vim	/^  command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\lite.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\lite.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\logtalk.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\logtalk.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\lotos.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\lotos.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\lout.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\lout.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\lpc.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\lpc.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\lprolog.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\lprolog.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\lscript.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\lscript.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\lua.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\lua.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\m4.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\m4.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\mailcap.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\mailcap.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\make.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\make.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\man.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\man.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\maple.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\maple.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\masm.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\masm.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\mason.vim	/^		com -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\mason.vim	/^		com -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\master.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\master.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\matlab.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\matlab.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\maxima.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\maxima.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\mel.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\mel.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\mf.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\mf.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\mgl.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\mgl.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\mgp.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\mgp.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\mma.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\mma.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\mmix.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\mmix.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\modsim3.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\modsim3.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\modula2.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\modula2.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\modula3.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\modula3.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\monk.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\monk.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\mp.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\mp.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\msidl.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\msidl.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\msql.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\msql.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\mupad.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\mupad.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\mush.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\mush.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\muttrc.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\muttrc.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\mysql.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\mysql.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\named.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\named.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\nasm.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\nasm.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\nastran.vim	/^     command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\natural.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\natural.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\ncf.vim	/^	command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\ncf.vim	/^	command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\nqc.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\nqc.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\nroff.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\nroff.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\nsis.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\nsis.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\obj.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\obj.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\objc.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\objc.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\ocaml.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\ocaml.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\occam.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\occam.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\omnimark.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\omnimark.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\openroad.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\openroad.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\opl.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\opl.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\ora.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\ora.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\pascal.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\pascal.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\pcap.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\pcap.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\pccts.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\pccts.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\perl.vim	/^command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\perl6.vim	/^        command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\perl6.vim	/^        command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\pf.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\pf.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\pfmain.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\pfmain.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\php.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\php.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\pic.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\pic.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\pike.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\pike.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\pilrc.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\pilrc.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\pine.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\pine.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\plm.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\plm.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\plsql.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\plsql.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\po.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\po.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\pod.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\pod.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\postscr.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\postscr.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\ppd.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\ppd.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\ppwiz.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\ppwiz.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\prescribe.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\prescribe.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\procmail.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\procmail.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\progress.vim	/^	command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\progress.vim	/^	command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\prolog.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\prolog.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\psf.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\psf.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\ptcap.vim	/^	command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\ptcap.vim	/^	command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\purifylog.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\purifylog.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\pyrex.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\pyrex.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\python.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\python.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\r.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\r.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\radiance.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\radiance.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\ratpoison.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\ratpoison.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\rc.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\rc.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\rcs.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\rcs.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\rcslog.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\rcslog.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\rebol.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\rebol.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\registry.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\registry.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\remind.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\remind.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\resolv.vim	/^		command! -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\resolv.vim	/^		command! -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\rexx.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\rexx.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\rhelp.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\rhelp.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\rib.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\rib.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\robots.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\robots.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\rpcgen.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\rpcgen.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\rpl.vim	/^    command -nargs=+ HiLink highlight default link <args>$/;"	c
HiLink	.\vim73\syntax\rpl.vim	/^    command -nargs=+ HiLink highlight link <args>$/;"	c
HiLink	.\vim73\syntax\rtf.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\rtf.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\samba.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\samba.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\sas.vim	/^      command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\sas.vim	/^      command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\sather.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\sather.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\scheme.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\scheme.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\scilab.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\scilab.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\sd.vim	/^                command! -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\sd.vim	/^                command! -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\sdl.vim	/^	command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\sdl.vim	/^	command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\sed.vim	/^	command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\sed.vim	/^	command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\sgmldecl.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\sgmldecl.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\sgmllnx.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\sgmllnx.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\sicad.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\sicad.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\simula.vim	/^	command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\simula.vim	/^	command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\sinda.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\sinda.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\sindacmp.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\sindacmp.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\sindaout.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\sindaout.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\skill.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\skill.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\sl.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\sl.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\slang.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\slang.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\slice.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\slice.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\slrnrc.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\slrnrc.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\slrnsc.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\slrnsc.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\sm.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\sm.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\smarty.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\smarty.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\smil.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\smil.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\smith.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\smith.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\sml.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\sml.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\snnsnet.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\snnsnet.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\snnspat.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\snnspat.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\snnsres.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\snnsres.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\snobol4.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\snobol4.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\spec.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\spec.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\specman.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\specman.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\spice.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\spice.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\splint.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\splint.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\spup.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\spup.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\sqlanywhere.vim	/^        command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\sqlforms.vim	/^	command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\sqlforms.vim	/^	command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\sqlinformix.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\sqlinformix.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\sqlj.vim	/^    command! -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\sqlj.vim	/^    command! -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\sqloracle.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\sqloracle.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\sqr.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\sqr.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\squid.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\squid.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\sshconfig.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\sshconfig.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\sshdconfig.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\sshdconfig.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\st.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\st.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\stp.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\stp.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\strace.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\strace.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\svn.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\svn.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\tads.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\tads.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\tags.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\tags.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\tak.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\tak.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\takcmp.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\takcmp.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\takout.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\takout.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\tasm.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\tasm.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\tcl.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\tcl.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\tex.vim	/^  command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\tex.vim	/^  command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\texinfo.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\texinfo.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\texmf.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\texmf.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\tf.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\tf.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\tidy.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\tidy.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\tli.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\tli.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\tpp.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\tpp.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\trasys.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\trasys.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\tsalt.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\tsalt.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\tsscl.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\tsscl.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\tssgm.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\tssgm.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\tssop.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\tssop.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\uc.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\uc.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\uil.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\uil.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\vb.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\vb.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\vera.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\vera.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\verilog.vim	/^      command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\verilog.vim	/^      command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\verilogams.vim	/^      command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\verilogams.vim	/^      command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\vhdl.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\vhdl.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\virata.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\virata.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\vmasm.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\vmasm.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\vrml.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\vrml.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\vsejcl.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\vsejcl.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\wdiff.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\wdiff.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\webmacro.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\webmacro.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\wget.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\wget.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\winbatch.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\winbatch.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\wml.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\wml.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\wsml.vim	/^       command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\wsml.vim	/^       command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\xdefaults.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\xdefaults.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\xkb.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\xkb.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\xmath.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\xmath.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\xpm.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\xpm.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\xpm2.vim	/^  command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\xpm2.vim	/^  command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\xs.vim	/^command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\xxd.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\xxd.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.\vim73\syntax\yacc.vim	/^  command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\z8a.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.\vim73\syntax\z8a.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
Highlight_Matching_Pair	.\vim73\plugin\matchparen.vim	/^function! s:Highlight_Matching_Pair()$/;"	f
HtmlClosing	.\vim73\syntax\2html.vim	/^  function! s:HtmlClosing(id)$/;"	f
HtmlColor	.\vim73\syntax\2html.vim	/^  function! s:HtmlColor(color)$/;"	f
HtmlFormat	.\vim73\syntax\2html.vim	/^function! s:HtmlFormat(text, style_name, diff_style_name)$/;"	f
HtmlHiLink	.\vim73\syntax\html.vim	/^  command! -nargs=+ HtmlHiLink hi def link <args>$/;"	c
HtmlHiLink	.\vim73\syntax\html.vim	/^  command! -nargs=+ HtmlHiLink hi link <args>$/;"	c
HtmlIndentClose	.\vim73\indent\html.vim	/^fun! <SID>HtmlIndentClose(lnum, pattern)$/;"	f
HtmlIndentCloseAlt	.\vim73\indent\html.vim	/^fun! <SID>HtmlIndentCloseAlt(lnum)$/;"	f
HtmlIndentGet	.\vim73\indent\html.vim	/^fun! HtmlIndentGet(lnum)$/;"	f
HtmlIndentOpen	.\vim73\indent\html.vim	/^fun! <SID>HtmlIndentOpen(lnum, pattern)$/;"	f
HtmlIndentOpenAlt	.\vim73\indent\html.vim	/^fun! <SID>HtmlIndentOpenAlt(lnum)$/;"	f
HtmlIndentPush	.\vim73\indent\html.vim	/^fun! <SID>HtmlIndentPush(tag)$/;"	f
HtmlIndentSum	.\vim73\indent\html.vim	/^fun! <SID>HtmlIndentSum(lnum, style)$/;"	f
HtmlOpening	.\vim73\syntax\2html.vim	/^  function! s:HtmlOpening(id)$/;"	f
HtmlParser	.\ctags58\html.c	/^extern parserDefinition* HtmlParser (void)$/;"	f	signature:(void)
I	.\vim73\macros\hanoi\hanoi.vim	/^map I KMYNOQNOSkRTV$/;"	m
I	.\vim73\macros\life\life.vim	/^map I G)0)0)0)0)1)0)0)2)0)0)0)0,ok,-11k,-,R,IIN$/;"	m
IGNORE_SEPARATORS	.\ctags58\options.c	50;"	d	file:
IMP_ABSTRACT	.\ctags58\c.c	/^	IMP_ABSTRACT,$/;"	e	enum:eImplementation	file:
IMP_COUNT	.\ctags58\c.c	/^	IMP_COUNT$/;"	e	enum:eImplementation	file:
IMP_DEFAULT	.\ctags58\c.c	/^	IMP_DEFAULT,$/;"	e	enum:eImplementation	file:
IMP_PURE_VIRTUAL	.\ctags58\c.c	/^	IMP_PURE_VIRTUAL,$/;"	e	enum:eImplementation	file:
IMP_VIRTUAL	.\ctags58\c.c	/^	IMP_VIRTUAL,$/;"	e	enum:eImplementation	file:
INC	.\ctags58\mk_bc3.mak	/^INC	= -I$(BCCLOC)\\include$/;"	m
INCLUDES	.\ctags58\mk_bc5.mak	/^INCLUDES = -I. -Ignu_regex$/;"	m
INCLUDES	.\ctags58\mk_mingw.mak	/^INCLUDES = -I. -Ignu_regex$/;"	m
INCLUDES	.\ctags58\mk_mvc.mak	/^INCLUDES = -I. -Ignu_regex$/;"	m
INSIDE_NOTWORD	.\ctags58\gnu_regex\regex_internal.h	/^  INSIDE_NOTWORD = PREV_NOTWORD_CONSTRAINT | NEXT_NOTWORD_CONSTRAINT,$/;"	e	enum:__anon27
INSIDE_WORD	.\ctags58\gnu_regex\regex_internal.h	/^  INSIDE_WORD = PREV_WORD_CONSTRAINT | NEXT_WORD_CONSTRAINT,$/;"	e	enum:__anon27
INTERNAL_SORT	.\ctags58\e_mac.h	22;"	d
INTERNAL_SORT	.\ctags58\e_riscos.h	22;"	d
INVOCATION	.\ctags58\options.c	33;"	d	file:
ISBN	.\vim73\tutor\tutor.pl	/^	ISBN: 83-7197-472-8$/;"	l
ISBN	.\vim73\tutor\tutor.pl	/^	ISBN: 83-7197-539-2$/;"	l
IS_BEGBUF_CONTEXT	.\ctags58\gnu_regex\regex_internal.h	477;"	d
IS_ENDBUF_CONTEXT	.\ctags58\gnu_regex\regex_internal.h	478;"	d
IS_EPSILON_NODE	.\ctags58\gnu_regex\regex_internal.h	318;"	d
IS_NEWLINE	.\ctags58\gnu_regex\regex_internal.h	482;"	d
IS_NEWLINE_CONTEXT	.\ctags58\gnu_regex\regex_internal.h	476;"	d
IS_ORDINARY_CONTEXT	.\ctags58\gnu_regex\regex_internal.h	479;"	d
IS_WIDE_NEWLINE	.\ctags58\gnu_regex\regex_internal.h	484;"	d
IS_WIDE_WORD_CHAR	.\ctags58\gnu_regex\regex_internal.h	483;"	d
IS_WORD_CHAR	.\ctags58\gnu_regex\regex_internal.h	481;"	d
IS_WORD_CONTEXT	.\ctags58\gnu_regex\regex_internal.h	475;"	d
InComment	.\vim73\autoload\xmlcomplete.vim	/^function! s:InComment()$/;"	f
InCommentAt	.\vim73\autoload\xmlcomplete.vim	/^function! s:InCommentAt(line, col)$/;"	f
IncreaseFunc	.\vim73\ftplugin\cobol.vim	/^function! s:IncreaseFunc(type)$/;"	f
IncreaseIndent	.\vim73\ftplugin\cobol.vim	/^function! s:IncreaseIndent()$/;"	f
Init	.\vimfiles\bundle\tlib_vim\autoload\tlib\input.vim	/^function! s:Init(world, cmd) "{{{3$/;"	f
InitComplete	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\complete.vim	/^function! s:InitComplete()$/;"	f
Init_ext	.\vimfiles\bundle\command-t\ruby\command-t\ext.c	/^void Init_ext()$/;"	f
InsertRefs	.\vim73\macros\matchit.vim	/^fun! s:InsertRefs(groupBR, prefix, group, suffix, matchline)$/;"	f
InsertSelectedItems	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:InsertSelectedItems(rv, current) "{{{3$/;"	f
Instack	.\vim73\autoload\xmlcomplete.vim	/^function! s:Instack(el, sname)$/;"	f
Intersection	.\vimfiles\bundle\vim-addon-mw-utils\autoload\tovl\ui\filter_list.vim	/^fun! s:Intersection(a, b)$/;"	f
IsCached	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\complete.vim	/^function! s:IsCached(cache, szKey1, szKey2)$/;"	f
IsColComment	.\vim73\indent\sqlanywhere.vim	/^function s:IsColComment(lnum, cnum)$/;"	f
IsInClassDef	.\vim73\autoload\rubycomplete.vim	/^function! s:IsInClassDef()$/;"	f
IsInString	.\vim73\indent\ruby.vim	/^function s:IsInString(lnum, col)$/;"	f
IsInStringOrComment	.\vim73\indent\ruby.vim	/^function s:IsInStringOrComment(lnum, col)$/;"	f
IsInStringOrDocumentation	.\vim73\indent\ruby.vim	/^function s:IsInStringOrDocumentation(lnum, col)$/;"	f
IsLineComment	.\vim73\indent\sqlanywhere.vim	/^function s:IsLineComment(lnum)$/;"	f
IsPosInClassDef	.\vim73\autoload\rubycomplete.vim	/^function! s:IsPosInClassDef(pos)$/;"	f
IsSerialName	.\vim73\tools\xcmdsrv_client.c	/^IsSerialName(str)$/;"	f	file:
IsSerialName	.\vim73\tools\xcmdsrv_client.c	/^static int	IsSerialName __ARGS((char *name));$/;"	p	file:	signature:(char *name)
IsTypeInfoResolved	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\utils.vim	/^function! s:IsTypeInfoResolved(szTypeInfo)$/;"	f
IsUnnamedType	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\items.vim	/^function! s:IsUnnamedType(tagItem)$/;"	f
IslinePHP	.\vim73\indent\php.vim	/^function! IslinePHP (lnum, tofind) " {{{$/;"	f
J	.\vim73\macros\hanoi\hanoi.vim	/^map J \/^0[^t]*\$$/;"	m
J	.\vim73\macros\maze\maze.c	/^char*M,A,Z,E=40,J[40],T[40];main(C){for(*J=A=scanf(M="%d",&C);$/;"	v
J	.\vim73\macros\maze\mazeansi.c	/^char*M,A,Z,E=40,J[80],T[3];main(C){for(M=J+E,*J=A=scanf("%d",&$/;"	v
JK_ACCESS	.\ctags58\c.c	/^	JK_LOCAL, JK_METHOD, JK_PACKAGE, JK_ACCESS, JK_CLASS_PREFIX$/;"	e	enum:__anon14	file:
JK_CLASS	.\ctags58\c.c	/^	JK_CLASS, JK_ENUM_CONSTANT, JK_FIELD, JK_ENUM, JK_INTERFACE,$/;"	e	enum:__anon14	file:
JK_CLASS_PREFIX	.\ctags58\c.c	/^	JK_LOCAL, JK_METHOD, JK_PACKAGE, JK_ACCESS, JK_CLASS_PREFIX$/;"	e	enum:__anon14	file:
JK_ENUM	.\ctags58\c.c	/^	JK_CLASS, JK_ENUM_CONSTANT, JK_FIELD, JK_ENUM, JK_INTERFACE,$/;"	e	enum:__anon14	file:
JK_ENUM_CONSTANT	.\ctags58\c.c	/^	JK_CLASS, JK_ENUM_CONSTANT, JK_FIELD, JK_ENUM, JK_INTERFACE,$/;"	e	enum:__anon14	file:
JK_FIELD	.\ctags58\c.c	/^	JK_CLASS, JK_ENUM_CONSTANT, JK_FIELD, JK_ENUM, JK_INTERFACE,$/;"	e	enum:__anon14	file:
JK_INTERFACE	.\ctags58\c.c	/^	JK_CLASS, JK_ENUM_CONSTANT, JK_FIELD, JK_ENUM, JK_INTERFACE,$/;"	e	enum:__anon14	file:
JK_LOCAL	.\ctags58\c.c	/^	JK_LOCAL, JK_METHOD, JK_PACKAGE, JK_ACCESS, JK_CLASS_PREFIX$/;"	e	enum:__anon14	file:
JK_METHOD	.\ctags58\c.c	/^	JK_LOCAL, JK_METHOD, JK_PACKAGE, JK_ACCESS, JK_CLASS_PREFIX$/;"	e	enum:__anon14	file:
JK_PACKAGE	.\ctags58\c.c	/^	JK_LOCAL, JK_METHOD, JK_PACKAGE, JK_ACCESS, JK_CLASS_PREFIX$/;"	e	enum:__anon14	file:
JK_UNDEFINED	.\ctags58\c.c	/^	JK_UNDEFINED = -1,$/;"	e	enum:__anon14	file:
JSTAG_CLASS	.\ctags58\jscript.c	/^	JSTAG_CLASS,$/;"	e	enum:__anon41	file:
JSTAG_COUNT	.\ctags58\jscript.c	/^	JSTAG_COUNT$/;"	e	enum:__anon41	file:
JSTAG_FUNCTION	.\ctags58\jscript.c	/^	JSTAG_FUNCTION,$/;"	e	enum:__anon41	file:
JSTAG_METHOD	.\ctags58\jscript.c	/^	JSTAG_METHOD,$/;"	e	enum:__anon41	file:
JSTAG_PROPERTY	.\ctags58\jscript.c	/^	JSTAG_PROPERTY,$/;"	e	enum:__anon41	file:
JSTAG_VARIABLE	.\ctags58\jscript.c	/^	JSTAG_VARIABLE,$/;"	e	enum:__anon41	file:
JUMP_BACK	.\ctags58\readtags.c	561;"	d	file:
JavaHiLink	.\vim73\syntax\java.vim	/^  command! -nargs=+ JavaHiLink hi def link <args>$/;"	c
JavaHiLink	.\vim73\syntax\java.vim	/^  command! -nargs=+ JavaHiLink hi link <args>$/;"	c
JavaKinds	.\ctags58\c.c	/^static kindOption JavaKinds [] = {$/;"	v	file:
JavaParser	.\ctags58\c.c	/^extern parserDefinition* JavaParser (void)$/;"	f	signature:(void)
JavaScriptParser	.\ctags58\jscript.c	/^extern parserDefinition* JavaScriptParser (void)$/;"	f	signature:(void)
JsKeywordTable	.\ctags58\jscript.c	/^static const keywordDesc JsKeywordTable [] = {$/;"	v	file:
JsKinds	.\ctags58\jscript.c	/^static kindOption JsKinds [] = {$/;"	v	file:
JumpFinder	.\vimfiles\bundle\command-t\ruby\command-t\finder\jump_finder.rb	/^  class JumpFinder < Finder$/;"	c	class:CommandT
JumpScanner	.\vimfiles\bundle\command-t\ruby\command-t\scanner\jump_scanner.rb	/^  class JumpScanner < Scanner$/;"	c	class:CommandT
Justify	.\vim73\macros\justify.vim	/^com! -range -nargs=* Justify <line1>,<line2>call Justify(<f-args>)$/;"	c
Justify	.\vim73\macros\justify.vim	/^function! Justify(...) range$/;"	f
Justify_error	.\vim73\macros\justify.vim	/^function! Justify_error(message)$/;"	f
K	.\vim73\ftplugin\gitrebase.vim	/^nnoremap <buffer> <expr> K col('.') < 7 && expand('<Lt>cword>') =~ '\\X' && getline('.') =~ '^\\w\\+\\s\\+\\x\\+\\>' ? 'wK' : 'K'$/;"	m
K	.\vim73\macros\hanoi\hanoi.vim	/^map K 1Go$/;"	m
KEYWORD_ABS	.\ctags58\vhdl.c	/^	KEYWORD_ABS,$/;"	e	enum:eKeywordId	file:
KEYWORD_ABSTRACT	.\ctags58\c.c	/^	KEYWORD_ATTRIBUTE, KEYWORD_ABSTRACT,$/;"	e	enum:eKeywordId	file:
KEYWORD_ACCESS	.\ctags58\vhdl.c	/^	KEYWORD_ACCESS,$/;"	e	enum:eKeywordId	file:
KEYWORD_AFTER	.\ctags58\vhdl.c	/^	KEYWORD_AFTER,$/;"	e	enum:eKeywordId	file:
KEYWORD_ALIAS	.\ctags58\vhdl.c	/^	KEYWORD_ALIAS,$/;"	e	enum:eKeywordId	file:
KEYWORD_ALL	.\ctags58\vhdl.c	/^	KEYWORD_ALL,$/;"	e	enum:eKeywordId	file:
KEYWORD_AND	.\ctags58\vhdl.c	/^	KEYWORD_AND,$/;"	e	enum:eKeywordId	file:
KEYWORD_ARCHITECTURE	.\ctags58\vhdl.c	/^	KEYWORD_ARCHITECTURE,$/;"	e	enum:eKeywordId	file:
KEYWORD_ARRAY	.\ctags58\vhdl.c	/^	KEYWORD_ARRAY,$/;"	e	enum:eKeywordId	file:
KEYWORD_ASSERT	.\ctags58\vhdl.c	/^	KEYWORD_ASSERT,$/;"	e	enum:eKeywordId	file:
KEYWORD_ATTRIBUTE	.\ctags58\c.c	/^	KEYWORD_ATTRIBUTE, KEYWORD_ABSTRACT,$/;"	e	enum:eKeywordId	file:
KEYWORD_ATTRIBUTE	.\ctags58\vhdl.c	/^	KEYWORD_ATTRIBUTE,$/;"	e	enum:eKeywordId	file:
KEYWORD_BAD_STATE	.\ctags58\c.c	/^	KEYWORD_BOOLEAN, KEYWORD_BYTE, KEYWORD_BAD_STATE, KEYWORD_BAD_TRANS,$/;"	e	enum:eKeywordId	file:
KEYWORD_BAD_TRANS	.\ctags58\c.c	/^	KEYWORD_BOOLEAN, KEYWORD_BYTE, KEYWORD_BAD_STATE, KEYWORD_BAD_TRANS,$/;"	e	enum:eKeywordId	file:
KEYWORD_BEGIN	.\ctags58\vhdl.c	/^	KEYWORD_BEGIN,$/;"	e	enum:eKeywordId	file:
KEYWORD_BIND	.\ctags58\c.c	/^	KEYWORD_BIND, KEYWORD_BIND_VAR, KEYWORD_BIT,$/;"	e	enum:eKeywordId	file:
KEYWORD_BIND_VAR	.\ctags58\c.c	/^	KEYWORD_BIND, KEYWORD_BIND_VAR, KEYWORD_BIT,$/;"	e	enum:eKeywordId	file:
KEYWORD_BIT	.\ctags58\c.c	/^	KEYWORD_BIND, KEYWORD_BIND_VAR, KEYWORD_BIT,$/;"	e	enum:eKeywordId	file:
KEYWORD_BLOCK	.\ctags58\vhdl.c	/^	KEYWORD_BLOCK,$/;"	e	enum:eKeywordId	file:
KEYWORD_BODY	.\ctags58\vhdl.c	/^	KEYWORD_BODY,$/;"	e	enum:eKeywordId	file:
KEYWORD_BOOLEAN	.\ctags58\c.c	/^	KEYWORD_BOOLEAN, KEYWORD_BYTE, KEYWORD_BAD_STATE, KEYWORD_BAD_TRANS,$/;"	e	enum:eKeywordId	file:
KEYWORD_BUFFER	.\ctags58\vhdl.c	/^	KEYWORD_BUFFER,$/;"	e	enum:eKeywordId	file:
KEYWORD_BUS	.\ctags58\vhdl.c	/^	KEYWORD_BUS,$/;"	e	enum:eKeywordId	file:
KEYWORD_BYTE	.\ctags58\c.c	/^	KEYWORD_BOOLEAN, KEYWORD_BYTE, KEYWORD_BAD_STATE, KEYWORD_BAD_TRANS,$/;"	e	enum:eKeywordId	file:
KEYWORD_CASE	.\ctags58\c.c	/^	KEYWORD_CASE, KEYWORD_CATCH, KEYWORD_CHAR, KEYWORD_CLASS, KEYWORD_CONST,$/;"	e	enum:eKeywordId	file:
KEYWORD_CASE	.\ctags58\vhdl.c	/^	KEYWORD_CASE,$/;"	e	enum:eKeywordId	file:
KEYWORD_CATCH	.\ctags58\c.c	/^	KEYWORD_CASE, KEYWORD_CATCH, KEYWORD_CHAR, KEYWORD_CLASS, KEYWORD_CONST,$/;"	e	enum:eKeywordId	file:
KEYWORD_CHAR	.\ctags58\c.c	/^	KEYWORD_CASE, KEYWORD_CATCH, KEYWORD_CHAR, KEYWORD_CLASS, KEYWORD_CONST,$/;"	e	enum:eKeywordId	file:
KEYWORD_CLASS	.\ctags58\c.c	/^	KEYWORD_CASE, KEYWORD_CATCH, KEYWORD_CHAR, KEYWORD_CLASS, KEYWORD_CONST,$/;"	e	enum:eKeywordId	file:
KEYWORD_COMPONENT	.\ctags58\vhdl.c	/^	KEYWORD_COMPONENT,$/;"	e	enum:eKeywordId	file:
KEYWORD_CONFIGURATION	.\ctags58\vhdl.c	/^	KEYWORD_CONFIGURATION,$/;"	e	enum:eKeywordId	file:
KEYWORD_CONST	.\ctags58\c.c	/^	KEYWORD_CASE, KEYWORD_CATCH, KEYWORD_CHAR, KEYWORD_CLASS, KEYWORD_CONST,$/;"	e	enum:eKeywordId	file:
KEYWORD_CONSTANT	.\ctags58\vhdl.c	/^	KEYWORD_CONSTANT,$/;"	e	enum:eKeywordId	file:
KEYWORD_CONSTRAINT	.\ctags58\c.c	/^	KEYWORD_CONSTRAINT, KEYWORD_COVERAGE_BLOCK, KEYWORD_COVERAGE_DEF,$/;"	e	enum:eKeywordId	file:
KEYWORD_COVERAGE_BLOCK	.\ctags58\c.c	/^	KEYWORD_CONSTRAINT, KEYWORD_COVERAGE_BLOCK, KEYWORD_COVERAGE_DEF,$/;"	e	enum:eKeywordId	file:
KEYWORD_COVERAGE_DEF	.\ctags58\c.c	/^	KEYWORD_CONSTRAINT, KEYWORD_COVERAGE_BLOCK, KEYWORD_COVERAGE_DEF,$/;"	e	enum:eKeywordId	file:
KEYWORD_Current	.\ctags58\eiffel.c	/^	KEYWORD_creation, KEYWORD_Current,$/;"	e	enum:eKeywordId	file:
KEYWORD_DEFAULT	.\ctags58\c.c	/^	KEYWORD_DEFAULT, KEYWORD_DELEGATE, KEYWORD_DELETE, KEYWORD_DO,$/;"	e	enum:eKeywordId	file:
KEYWORD_DELEGATE	.\ctags58\c.c	/^	KEYWORD_DEFAULT, KEYWORD_DELEGATE, KEYWORD_DELETE, KEYWORD_DO,$/;"	e	enum:eKeywordId	file:
KEYWORD_DELETE	.\ctags58\c.c	/^	KEYWORD_DEFAULT, KEYWORD_DELEGATE, KEYWORD_DELETE, KEYWORD_DO,$/;"	e	enum:eKeywordId	file:
KEYWORD_DISCONNECT	.\ctags58\vhdl.c	/^	KEYWORD_DISCONNECT,$/;"	e	enum:eKeywordId	file:
KEYWORD_DO	.\ctags58\c.c	/^	KEYWORD_DEFAULT, KEYWORD_DELEGATE, KEYWORD_DELETE, KEYWORD_DO,$/;"	e	enum:eKeywordId	file:
KEYWORD_DOUBLE	.\ctags58\c.c	/^	KEYWORD_DOUBLE,$/;"	e	enum:eKeywordId	file:
KEYWORD_DOWNTO	.\ctags58\vhdl.c	/^	KEYWORD_DOWNTO,$/;"	e	enum:eKeywordId	file:
KEYWORD_ELSE	.\ctags58\c.c	/^	KEYWORD_ELSE, KEYWORD_ENUM, KEYWORD_EXPLICIT, KEYWORD_EXTERN,$/;"	e	enum:eKeywordId	file:
KEYWORD_ELSE	.\ctags58\vhdl.c	/^	KEYWORD_ELSE,$/;"	e	enum:eKeywordId	file:
KEYWORD_ELSIF	.\ctags58\vhdl.c	/^	KEYWORD_ELSIF,$/;"	e	enum:eKeywordId	file:
KEYWORD_END	.\ctags58\vhdl.c	/^	KEYWORD_END,$/;"	e	enum:eKeywordId	file:
KEYWORD_ENTITY	.\ctags58\vhdl.c	/^	KEYWORD_ENTITY,$/;"	e	enum:eKeywordId	file:
KEYWORD_ENUM	.\ctags58\c.c	/^	KEYWORD_ELSE, KEYWORD_ENUM, KEYWORD_EXPLICIT, KEYWORD_EXTERN,$/;"	e	enum:eKeywordId	file:
KEYWORD_EVENT	.\ctags58\c.c	/^	KEYWORD_EXTENDS, KEYWORD_EVENT,$/;"	e	enum:eKeywordId	file:
KEYWORD_EXIT	.\ctags58\vhdl.c	/^	KEYWORD_EXIT,$/;"	e	enum:eKeywordId	file:
KEYWORD_EXPLICIT	.\ctags58\c.c	/^	KEYWORD_ELSE, KEYWORD_ENUM, KEYWORD_EXPLICIT, KEYWORD_EXTERN,$/;"	e	enum:eKeywordId	file:
KEYWORD_EXTENDS	.\ctags58\c.c	/^	KEYWORD_EXTENDS, KEYWORD_EVENT,$/;"	e	enum:eKeywordId	file:
KEYWORD_EXTERN	.\ctags58\c.c	/^	KEYWORD_ELSE, KEYWORD_ENUM, KEYWORD_EXPLICIT, KEYWORD_EXTERN,$/;"	e	enum:eKeywordId	file:
KEYWORD_FILE	.\ctags58\vhdl.c	/^	KEYWORD_FILE,$/;"	e	enum:eKeywordId	file:
KEYWORD_FINAL	.\ctags58\c.c	/^	KEYWORD_FINAL, KEYWORD_FLOAT, KEYWORD_FOR, KEYWORD_FOREACH,$/;"	e	enum:eKeywordId	file:
KEYWORD_FLOAT	.\ctags58\c.c	/^	KEYWORD_FINAL, KEYWORD_FLOAT, KEYWORD_FOR, KEYWORD_FOREACH,$/;"	e	enum:eKeywordId	file:
KEYWORD_FOR	.\ctags58\c.c	/^	KEYWORD_FINAL, KEYWORD_FLOAT, KEYWORD_FOR, KEYWORD_FOREACH,$/;"	e	enum:eKeywordId	file:
KEYWORD_FOR	.\ctags58\vhdl.c	/^	KEYWORD_FOR,$/;"	e	enum:eKeywordId	file:
KEYWORD_FOREACH	.\ctags58\c.c	/^	KEYWORD_FINAL, KEYWORD_FLOAT, KEYWORD_FOR, KEYWORD_FOREACH,$/;"	e	enum:eKeywordId	file:
KEYWORD_FRIEND	.\ctags58\c.c	/^	KEYWORD_FRIEND, KEYWORD_FUNCTION,$/;"	e	enum:eKeywordId	file:
KEYWORD_FUNCTION	.\ctags58\c.c	/^	KEYWORD_FRIEND, KEYWORD_FUNCTION,$/;"	e	enum:eKeywordId	file:
KEYWORD_FUNCTION	.\ctags58\vhdl.c	/^	KEYWORD_FUNCTION,$/;"	e	enum:eKeywordId	file:
KEYWORD_GENERATE	.\ctags58\vhdl.c	/^	KEYWORD_GENERATE,$/;"	e	enum:eKeywordId	file:
KEYWORD_GENERIC	.\ctags58\vhdl.c	/^	KEYWORD_GENERIC,$/;"	e	enum:eKeywordId	file:
KEYWORD_GOTO	.\ctags58\c.c	/^	KEYWORD_GOTO,$/;"	e	enum:eKeywordId	file:
KEYWORD_GROUP	.\ctags58\vhdl.c	/^	KEYWORD_GROUP,$/;"	e	enum:eKeywordId	file:
KEYWORD_GUARDED	.\ctags58\vhdl.c	/^	KEYWORD_GUARDED,$/;"	e	enum:eKeywordId	file:
KEYWORD_IF	.\ctags58\c.c	/^	KEYWORD_IF, KEYWORD_IMPLEMENTS, KEYWORD_IMPORT, KEYWORD_INLINE, KEYWORD_INT,$/;"	e	enum:eKeywordId	file:
KEYWORD_IF	.\ctags58\vhdl.c	/^	KEYWORD_IF,$/;"	e	enum:eKeywordId	file:
KEYWORD_IMPLEMENTS	.\ctags58\c.c	/^	KEYWORD_IF, KEYWORD_IMPLEMENTS, KEYWORD_IMPORT, KEYWORD_INLINE, KEYWORD_INT,$/;"	e	enum:eKeywordId	file:
KEYWORD_IMPORT	.\ctags58\c.c	/^	KEYWORD_IF, KEYWORD_IMPLEMENTS, KEYWORD_IMPORT, KEYWORD_INLINE, KEYWORD_INT,$/;"	e	enum:eKeywordId	file:
KEYWORD_IMPURE	.\ctags58\vhdl.c	/^	KEYWORD_IMPURE,$/;"	e	enum:eKeywordId	file:
KEYWORD_IN	.\ctags58\vhdl.c	/^	KEYWORD_IN,$/;"	e	enum:eKeywordId	file:
KEYWORD_INERTIAL	.\ctags58\vhdl.c	/^	KEYWORD_INERTIAL,$/;"	e	enum:eKeywordId	file:
KEYWORD_INLINE	.\ctags58\c.c	/^	KEYWORD_IF, KEYWORD_IMPLEMENTS, KEYWORD_IMPORT, KEYWORD_INLINE, KEYWORD_INT,$/;"	e	enum:eKeywordId	file:
KEYWORD_INOUT	.\ctags58\c.c	/^	KEYWORD_INOUT, KEYWORD_INPUT, KEYWORD_INTEGER, KEYWORD_INTERFACE,$/;"	e	enum:eKeywordId	file:
KEYWORD_INOUT	.\ctags58\vhdl.c	/^	KEYWORD_INOUT,$/;"	e	enum:eKeywordId	file:
KEYWORD_INPUT	.\ctags58\c.c	/^	KEYWORD_INOUT, KEYWORD_INPUT, KEYWORD_INTEGER, KEYWORD_INTERFACE,$/;"	e	enum:eKeywordId	file:
KEYWORD_INT	.\ctags58\c.c	/^	KEYWORD_IF, KEYWORD_IMPLEMENTS, KEYWORD_IMPORT, KEYWORD_INLINE, KEYWORD_INT,$/;"	e	enum:eKeywordId	file:
KEYWORD_INTEGER	.\ctags58\c.c	/^	KEYWORD_INOUT, KEYWORD_INPUT, KEYWORD_INTEGER, KEYWORD_INTERFACE,$/;"	e	enum:eKeywordId	file:
KEYWORD_INTERFACE	.\ctags58\c.c	/^	KEYWORD_INOUT, KEYWORD_INPUT, KEYWORD_INTEGER, KEYWORD_INTERFACE,$/;"	e	enum:eKeywordId	file:
KEYWORD_INTERNAL	.\ctags58\c.c	/^	KEYWORD_INTERNAL,$/;"	e	enum:eKeywordId	file:
KEYWORD_IS	.\ctags58\vhdl.c	/^	KEYWORD_IS,$/;"	e	enum:eKeywordId	file:
KEYWORD_LABEL	.\ctags58\vhdl.c	/^	KEYWORD_LABEL,$/;"	e	enum:eKeywordId	file:
KEYWORD_LIBRARY	.\ctags58\vhdl.c	/^	KEYWORD_LIBRARY,$/;"	e	enum:eKeywordId	file:
KEYWORD_LINKAGE	.\ctags58\vhdl.c	/^	KEYWORD_LINKAGE,$/;"	e	enum:eKeywordId	file:
KEYWORD_LITERAL	.\ctags58\vhdl.c	/^	KEYWORD_LITERAL,$/;"	e	enum:eKeywordId	file:
KEYWORD_LOCAL	.\ctags58\c.c	/^	KEYWORD_LOCAL, KEYWORD_LONG,$/;"	e	enum:eKeywordId	file:
KEYWORD_LONG	.\ctags58\c.c	/^	KEYWORD_LOCAL, KEYWORD_LONG,$/;"	e	enum:eKeywordId	file:
KEYWORD_LOOP	.\ctags58\vhdl.c	/^	KEYWORD_LOOP,$/;"	e	enum:eKeywordId	file:
KEYWORD_MAP	.\ctags58\vhdl.c	/^	KEYWORD_MAP,$/;"	e	enum:eKeywordId	file:
KEYWORD_MOD	.\ctags58\vhdl.c	/^	KEYWORD_MOD,$/;"	e	enum:eKeywordId	file:
KEYWORD_MUTABLE	.\ctags58\c.c	/^	KEYWORD_MUTABLE,$/;"	e	enum:eKeywordId	file:
KEYWORD_M_BAD_STATE	.\ctags58\c.c	/^	KEYWORD_M_BAD_STATE, KEYWORD_M_BAD_TRANS, KEYWORD_M_STATE, KEYWORD_M_TRANS,$/;"	e	enum:eKeywordId	file:
KEYWORD_M_BAD_TRANS	.\ctags58\c.c	/^	KEYWORD_M_BAD_STATE, KEYWORD_M_BAD_TRANS, KEYWORD_M_STATE, KEYWORD_M_TRANS,$/;"	e	enum:eKeywordId	file:
KEYWORD_M_STATE	.\ctags58\c.c	/^	KEYWORD_M_BAD_STATE, KEYWORD_M_BAD_TRANS, KEYWORD_M_STATE, KEYWORD_M_TRANS,$/;"	e	enum:eKeywordId	file:
KEYWORD_M_TRANS	.\ctags58\c.c	/^	KEYWORD_M_BAD_STATE, KEYWORD_M_BAD_TRANS, KEYWORD_M_STATE, KEYWORD_M_TRANS,$/;"	e	enum:eKeywordId	file:
KEYWORD_NAMESPACE	.\ctags58\c.c	/^	KEYWORD_NAMESPACE, KEYWORD_NEW, KEYWORD_NEWCOV, KEYWORD_NATIVE,$/;"	e	enum:eKeywordId	file:
KEYWORD_NAND	.\ctags58\vhdl.c	/^	KEYWORD_NAND,$/;"	e	enum:eKeywordId	file:
KEYWORD_NATIVE	.\ctags58\c.c	/^	KEYWORD_NAMESPACE, KEYWORD_NEW, KEYWORD_NEWCOV, KEYWORD_NATIVE,$/;"	e	enum:eKeywordId	file:
KEYWORD_NEW	.\ctags58\c.c	/^	KEYWORD_NAMESPACE, KEYWORD_NEW, KEYWORD_NEWCOV, KEYWORD_NATIVE,$/;"	e	enum:eKeywordId	file:
KEYWORD_NEW	.\ctags58\vhdl.c	/^	KEYWORD_NEW,$/;"	e	enum:eKeywordId	file:
KEYWORD_NEWCOV	.\ctags58\c.c	/^	KEYWORD_NAMESPACE, KEYWORD_NEW, KEYWORD_NEWCOV, KEYWORD_NATIVE,$/;"	e	enum:eKeywordId	file:
KEYWORD_NEXT	.\ctags58\vhdl.c	/^	KEYWORD_NEXT,$/;"	e	enum:eKeywordId	file:
KEYWORD_NONE	.\ctags58\c.c	/^	KEYWORD_NONE = -1,$/;"	e	enum:eKeywordId	file:
KEYWORD_NONE	.\ctags58\eiffel.c	/^	KEYWORD_NONE = -1,$/;"	e	enum:eKeywordId	file:
KEYWORD_NONE	.\ctags58\flex.c	/^	KEYWORD_NONE = -1,$/;"	e	enum:eKeywordId	file:
KEYWORD_NONE	.\ctags58\fortran.c	/^	KEYWORD_NONE = -1,$/;"	e	enum:eKeywordId	file:
KEYWORD_NONE	.\ctags58\jscript.c	/^	KEYWORD_NONE = -1,$/;"	e	enum:eKeywordId	file:
KEYWORD_NONE	.\ctags58\sql.c	/^	KEYWORD_NONE = -1,$/;"	e	enum:eKeywordId	file:
KEYWORD_NONE	.\ctags58\tex.c	/^	KEYWORD_NONE = -1,$/;"	e	enum:eKeywordId	file:
KEYWORD_NONE	.\ctags58\vhdl.c	/^	KEYWORD_NONE = -1,$/;"	e	enum:eKeywordId	file:
KEYWORD_NOR	.\ctags58\vhdl.c	/^	KEYWORD_NOR,$/;"	e	enum:eKeywordId	file:
KEYWORD_NOT	.\ctags58\vhdl.c	/^	KEYWORD_NOT,$/;"	e	enum:eKeywordId	file:
KEYWORD_NULL	.\ctags58\vhdl.c	/^	KEYWORD_NULL,$/;"	e	enum:eKeywordId	file:
KEYWORD_OF	.\ctags58\vhdl.c	/^	KEYWORD_OF,$/;"	e	enum:eKeywordId	file:
KEYWORD_ON	.\ctags58\vhdl.c	/^	KEYWORD_ON,$/;"	e	enum:eKeywordId	file:
KEYWORD_OPEN	.\ctags58\vhdl.c	/^	KEYWORD_OPEN,$/;"	e	enum:eKeywordId	file:
KEYWORD_OPERATOR	.\ctags58\c.c	/^	KEYWORD_OPERATOR, KEYWORD_OUTPUT, KEYWORD_OVERLOAD, KEYWORD_OVERRIDE,$/;"	e	enum:eKeywordId	file:
KEYWORD_OR	.\ctags58\vhdl.c	/^	KEYWORD_OR,$/;"	e	enum:eKeywordId	file:
KEYWORD_OTHERS	.\ctags58\vhdl.c	/^	KEYWORD_OTHERS,$/;"	e	enum:eKeywordId	file:
KEYWORD_OUT	.\ctags58\vhdl.c	/^	KEYWORD_OUT,$/;"	e	enum:eKeywordId	file:
KEYWORD_OUTPUT	.\ctags58\c.c	/^	KEYWORD_OPERATOR, KEYWORD_OUTPUT, KEYWORD_OVERLOAD, KEYWORD_OVERRIDE,$/;"	e	enum:eKeywordId	file:
KEYWORD_OVERLOAD	.\ctags58\c.c	/^	KEYWORD_OPERATOR, KEYWORD_OUTPUT, KEYWORD_OVERLOAD, KEYWORD_OVERRIDE,$/;"	e	enum:eKeywordId	file:
KEYWORD_OVERRIDE	.\ctags58\c.c	/^	KEYWORD_OPERATOR, KEYWORD_OUTPUT, KEYWORD_OVERLOAD, KEYWORD_OVERRIDE,$/;"	e	enum:eKeywordId	file:
KEYWORD_PACKAGE	.\ctags58\c.c	/^	KEYWORD_PACKED, KEYWORD_PORT, KEYWORD_PACKAGE, KEYWORD_PRIVATE,$/;"	e	enum:eKeywordId	file:
KEYWORD_PACKAGE	.\ctags58\vhdl.c	/^	KEYWORD_PACKAGE,$/;"	e	enum:eKeywordId	file:
KEYWORD_PACKED	.\ctags58\c.c	/^	KEYWORD_PACKED, KEYWORD_PORT, KEYWORD_PACKAGE, KEYWORD_PRIVATE,$/;"	e	enum:eKeywordId	file:
KEYWORD_PORT	.\ctags58\c.c	/^	KEYWORD_PACKED, KEYWORD_PORT, KEYWORD_PACKAGE, KEYWORD_PRIVATE,$/;"	e	enum:eKeywordId	file:
KEYWORD_PORT	.\ctags58\vhdl.c	/^	KEYWORD_PORT,$/;"	e	enum:eKeywordId	file:
KEYWORD_POSTPONED	.\ctags58\vhdl.c	/^	KEYWORD_POSTPONED,$/;"	e	enum:eKeywordId	file:
KEYWORD_PRIVATE	.\ctags58\c.c	/^	KEYWORD_PACKED, KEYWORD_PORT, KEYWORD_PACKAGE, KEYWORD_PRIVATE,$/;"	e	enum:eKeywordId	file:
KEYWORD_PROCEDURE	.\ctags58\vhdl.c	/^	KEYWORD_PROCEDURE,$/;"	e	enum:eKeywordId	file:
KEYWORD_PROCESS	.\ctags58\vhdl.c	/^	KEYWORD_PROCESS,$/;"	e	enum:eKeywordId	file:
KEYWORD_PROGRAM	.\ctags58\c.c	/^	KEYWORD_PROGRAM, KEYWORD_PROTECTED, KEYWORD_PUBLIC,$/;"	e	enum:eKeywordId	file:
KEYWORD_PROTECTED	.\ctags58\c.c	/^	KEYWORD_PROGRAM, KEYWORD_PROTECTED, KEYWORD_PUBLIC,$/;"	e	enum:eKeywordId	file:
KEYWORD_PUBLIC	.\ctags58\c.c	/^	KEYWORD_PROGRAM, KEYWORD_PROTECTED, KEYWORD_PUBLIC,$/;"	e	enum:eKeywordId	file:
KEYWORD_PURE	.\ctags58\vhdl.c	/^	KEYWORD_PURE,$/;"	e	enum:eKeywordId	file:
KEYWORD_RANGE	.\ctags58\vhdl.c	/^	KEYWORD_RANGE,$/;"	e	enum:eKeywordId	file:
KEYWORD_RECORD	.\ctags58\vhdl.c	/^	KEYWORD_RECORD,$/;"	e	enum:eKeywordId	file:
KEYWORD_REGISTER	.\ctags58\c.c	/^	KEYWORD_REGISTER, KEYWORD_RETURN,$/;"	e	enum:eKeywordId	file:
KEYWORD_REGISTER	.\ctags58\vhdl.c	/^	KEYWORD_REGISTER,$/;"	e	enum:eKeywordId	file:
KEYWORD_REJECT	.\ctags58\vhdl.c	/^	KEYWORD_REJECT,$/;"	e	enum:eKeywordId	file:
KEYWORD_RETURN	.\ctags58\c.c	/^	KEYWORD_REGISTER, KEYWORD_RETURN,$/;"	e	enum:eKeywordId	file:
KEYWORD_RETURN	.\ctags58\vhdl.c	/^	KEYWORD_RETURN,$/;"	e	enum:eKeywordId	file:
KEYWORD_ROL	.\ctags58\vhdl.c	/^	KEYWORD_ROL,$/;"	e	enum:eKeywordId	file:
KEYWORD_ROR	.\ctags58\vhdl.c	/^	KEYWORD_ROR,$/;"	e	enum:eKeywordId	file:
KEYWORD_Result	.\ctags58\eiffel.c	/^	KEYWORD_require, KEYWORD_rescue, KEYWORD_Result, KEYWORD_retry,$/;"	e	enum:eKeywordId	file:
KEYWORD_SELECT	.\ctags58\vhdl.c	/^	KEYWORD_SELECT,$/;"	e	enum:eKeywordId	file:
KEYWORD_SEVERITY	.\ctags58\vhdl.c	/^	KEYWORD_SEVERITY,$/;"	e	enum:eKeywordId	file:
KEYWORD_SHADOW	.\ctags58\c.c	/^	KEYWORD_SHADOW, KEYWORD_STATE,$/;"	e	enum:eKeywordId	file:
KEYWORD_SHARED	.\ctags58\vhdl.c	/^	KEYWORD_SHARED,$/;"	e	enum:eKeywordId	file:
KEYWORD_SHORT	.\ctags58\c.c	/^	KEYWORD_SHORT, KEYWORD_SIGNED, KEYWORD_STATIC, KEYWORD_STRING,$/;"	e	enum:eKeywordId	file:
KEYWORD_SIGNAL	.\ctags58\vhdl.c	/^	KEYWORD_SIGNAL,$/;"	e	enum:eKeywordId	file:
KEYWORD_SIGNED	.\ctags58\c.c	/^	KEYWORD_SHORT, KEYWORD_SIGNED, KEYWORD_STATIC, KEYWORD_STRING,$/;"	e	enum:eKeywordId	file:
KEYWORD_SLA	.\ctags58\vhdl.c	/^	KEYWORD_SLA,$/;"	e	enum:eKeywordId	file:
KEYWORD_SLI	.\ctags58\vhdl.c	/^	KEYWORD_SLI,$/;"	e	enum:eKeywordId	file:
KEYWORD_SRA	.\ctags58\vhdl.c	/^	KEYWORD_SRA,$/;"	e	enum:eKeywordId	file:
KEYWORD_SRL	.\ctags58\vhdl.c	/^	KEYWORD_SRL,$/;"	e	enum:eKeywordId	file:
KEYWORD_STATE	.\ctags58\c.c	/^	KEYWORD_SHADOW, KEYWORD_STATE,$/;"	e	enum:eKeywordId	file:
KEYWORD_STATIC	.\ctags58\c.c	/^	KEYWORD_SHORT, KEYWORD_SIGNED, KEYWORD_STATIC, KEYWORD_STRING,$/;"	e	enum:eKeywordId	file:
KEYWORD_STRING	.\ctags58\c.c	/^	KEYWORD_SHORT, KEYWORD_SIGNED, KEYWORD_STATIC, KEYWORD_STRING,$/;"	e	enum:eKeywordId	file:
KEYWORD_STRUCT	.\ctags58\c.c	/^	KEYWORD_STRUCT, KEYWORD_SWITCH, KEYWORD_SYNCHRONIZED,$/;"	e	enum:eKeywordId	file:
KEYWORD_SUBTYPE	.\ctags58\vhdl.c	/^	KEYWORD_SUBTYPE,$/;"	e	enum:eKeywordId	file:
KEYWORD_SWITCH	.\ctags58\c.c	/^	KEYWORD_STRUCT, KEYWORD_SWITCH, KEYWORD_SYNCHRONIZED,$/;"	e	enum:eKeywordId	file:
KEYWORD_SYNCHRONIZED	.\ctags58\c.c	/^	KEYWORD_STRUCT, KEYWORD_SWITCH, KEYWORD_SYNCHRONIZED,$/;"	e	enum:eKeywordId	file:
KEYWORD_TASK	.\ctags58\c.c	/^	KEYWORD_TASK, KEYWORD_TEMPLATE, KEYWORD_THIS, KEYWORD_THROW,$/;"	e	enum:eKeywordId	file:
KEYWORD_TEMPLATE	.\ctags58\c.c	/^	KEYWORD_TASK, KEYWORD_TEMPLATE, KEYWORD_THIS, KEYWORD_THROW,$/;"	e	enum:eKeywordId	file:
KEYWORD_THEN	.\ctags58\vhdl.c	/^	KEYWORD_THEN,$/;"	e	enum:eKeywordId	file:
KEYWORD_THIS	.\ctags58\c.c	/^	KEYWORD_TASK, KEYWORD_TEMPLATE, KEYWORD_THIS, KEYWORD_THROW,$/;"	e	enum:eKeywordId	file:
KEYWORD_THROW	.\ctags58\c.c	/^	KEYWORD_TASK, KEYWORD_TEMPLATE, KEYWORD_THIS, KEYWORD_THROW,$/;"	e	enum:eKeywordId	file:
KEYWORD_THROWS	.\ctags58\c.c	/^	KEYWORD_THROWS, KEYWORD_TRANSIENT, KEYWORD_TRANS, KEYWORD_TRANSITION,$/;"	e	enum:eKeywordId	file:
KEYWORD_TO	.\ctags58\vhdl.c	/^	KEYWORD_TO,$/;"	e	enum:eKeywordId	file:
KEYWORD_TRANS	.\ctags58\c.c	/^	KEYWORD_THROWS, KEYWORD_TRANSIENT, KEYWORD_TRANS, KEYWORD_TRANSITION,$/;"	e	enum:eKeywordId	file:
KEYWORD_TRANSIENT	.\ctags58\c.c	/^	KEYWORD_THROWS, KEYWORD_TRANSIENT, KEYWORD_TRANS, KEYWORD_TRANSITION,$/;"	e	enum:eKeywordId	file:
KEYWORD_TRANSITION	.\ctags58\c.c	/^	KEYWORD_THROWS, KEYWORD_TRANSIENT, KEYWORD_TRANS, KEYWORD_TRANSITION,$/;"	e	enum:eKeywordId	file:
KEYWORD_TRANSPORT	.\ctags58\vhdl.c	/^	KEYWORD_TRANSPORT,$/;"	e	enum:eKeywordId	file:
KEYWORD_TRY	.\ctags58\c.c	/^	KEYWORD_TRY, KEYWORD_TYPEDEF, KEYWORD_TYPENAME,$/;"	e	enum:eKeywordId	file:
KEYWORD_TYPE	.\ctags58\vhdl.c	/^	KEYWORD_TYPE,$/;"	e	enum:eKeywordId	file:
KEYWORD_TYPEDEF	.\ctags58\c.c	/^	KEYWORD_TRY, KEYWORD_TYPEDEF, KEYWORD_TYPENAME,$/;"	e	enum:eKeywordId	file:
KEYWORD_TYPENAME	.\ctags58\c.c	/^	KEYWORD_TRY, KEYWORD_TYPEDEF, KEYWORD_TYPENAME,$/;"	e	enum:eKeywordId	file:
KEYWORD_UINT	.\ctags58\c.c	/^	KEYWORD_UINT, KEYWORD_ULONG, KEYWORD_UNION, KEYWORD_UNSIGNED, KEYWORD_USHORT,$/;"	e	enum:eKeywordId	file:
KEYWORD_ULONG	.\ctags58\c.c	/^	KEYWORD_UINT, KEYWORD_ULONG, KEYWORD_UNION, KEYWORD_UNSIGNED, KEYWORD_USHORT,$/;"	e	enum:eKeywordId	file:
KEYWORD_UNAFFECTED	.\ctags58\vhdl.c	/^	KEYWORD_UNAFFECTED,$/;"	e	enum:eKeywordId	file:
KEYWORD_UNION	.\ctags58\c.c	/^	KEYWORD_UINT, KEYWORD_ULONG, KEYWORD_UNION, KEYWORD_UNSIGNED, KEYWORD_USHORT,$/;"	e	enum:eKeywordId	file:
KEYWORD_UNITS	.\ctags58\vhdl.c	/^	KEYWORD_UNITS,$/;"	e	enum:eKeywordId	file:
KEYWORD_UNSIGNED	.\ctags58\c.c	/^	KEYWORD_UINT, KEYWORD_ULONG, KEYWORD_UNION, KEYWORD_UNSIGNED, KEYWORD_USHORT,$/;"	e	enum:eKeywordId	file:
KEYWORD_UNTIL	.\ctags58\vhdl.c	/^	KEYWORD_UNTIL,$/;"	e	enum:eKeywordId	file:
KEYWORD_USE	.\ctags58\vhdl.c	/^	KEYWORD_USE,$/;"	e	enum:eKeywordId	file:
KEYWORD_USHORT	.\ctags58\c.c	/^	KEYWORD_UINT, KEYWORD_ULONG, KEYWORD_UNION, KEYWORD_UNSIGNED, KEYWORD_USHORT,$/;"	e	enum:eKeywordId	file:
KEYWORD_USING	.\ctags58\c.c	/^	KEYWORD_USING,$/;"	e	enum:eKeywordId	file:
KEYWORD_VARIABLE	.\ctags58\vhdl.c	/^	KEYWORD_VARIABLE,$/;"	e	enum:eKeywordId	file:
KEYWORD_VIRTUAL	.\ctags58\c.c	/^	KEYWORD_VIRTUAL, KEYWORD_VOID, KEYWORD_VOLATILE,$/;"	e	enum:eKeywordId	file:
KEYWORD_VOID	.\ctags58\c.c	/^	KEYWORD_VIRTUAL, KEYWORD_VOID, KEYWORD_VOLATILE,$/;"	e	enum:eKeywordId	file:
KEYWORD_VOLATILE	.\ctags58\c.c	/^	KEYWORD_VIRTUAL, KEYWORD_VOID, KEYWORD_VOLATILE,$/;"	e	enum:eKeywordId	file:
KEYWORD_WAIT	.\ctags58\vhdl.c	/^	KEYWORD_WAIT,$/;"	e	enum:eKeywordId	file:
KEYWORD_WCHAR_T	.\ctags58\c.c	/^	KEYWORD_WCHAR_T, KEYWORD_WHILE$/;"	e	enum:eKeywordId	file:
KEYWORD_WHEN	.\ctags58\vhdl.c	/^	KEYWORD_WHEN,$/;"	e	enum:eKeywordId	file:
KEYWORD_WHILE	.\ctags58\c.c	/^	KEYWORD_WCHAR_T, KEYWORD_WHILE$/;"	e	enum:eKeywordId	file:
KEYWORD_WHILE	.\ctags58\vhdl.c	/^	KEYWORD_WHILE,$/;"	e	enum:eKeywordId	file:
KEYWORD_WITH	.\ctags58\vhdl.c	/^	KEYWORD_WITH,$/;"	e	enum:eKeywordId	file:
KEYWORD_XNOR	.\ctags58\vhdl.c	/^	KEYWORD_XNOR,$/;"	e	enum:eKeywordId	file:
KEYWORD_XOR	.\ctags58\vhdl.c	/^	KEYWORD_XOR$/;"	e	enum:eKeywordId	file:
KEYWORD_alias	.\ctags58\eiffel.c	/^	KEYWORD_alias, KEYWORD_all, KEYWORD_and, KEYWORD_as, KEYWORD_assign,$/;"	e	enum:eKeywordId	file:
KEYWORD_all	.\ctags58\eiffel.c	/^	KEYWORD_alias, KEYWORD_all, KEYWORD_and, KEYWORD_as, KEYWORD_assign,$/;"	e	enum:eKeywordId	file:
KEYWORD_allocatable	.\ctags58\fortran.c	/^	KEYWORD_allocatable,$/;"	e	enum:eKeywordId	file:
KEYWORD_and	.\ctags58\eiffel.c	/^	KEYWORD_alias, KEYWORD_all, KEYWORD_and, KEYWORD_as, KEYWORD_assign,$/;"	e	enum:eKeywordId	file:
KEYWORD_as	.\ctags58\eiffel.c	/^	KEYWORD_alias, KEYWORD_all, KEYWORD_and, KEYWORD_as, KEYWORD_assign,$/;"	e	enum:eKeywordId	file:
KEYWORD_assign	.\ctags58\eiffel.c	/^	KEYWORD_alias, KEYWORD_all, KEYWORD_and, KEYWORD_as, KEYWORD_assign,$/;"	e	enum:eKeywordId	file:
KEYWORD_assignment	.\ctags58\fortran.c	/^	KEYWORD_assignment,$/;"	e	enum:eKeywordId	file:
KEYWORD_at	.\ctags58\sql.c	/^	KEYWORD_at,$/;"	e	enum:eKeywordId	file:
KEYWORD_automatic	.\ctags58\fortran.c	/^	KEYWORD_automatic,$/;"	e	enum:eKeywordId	file:
KEYWORD_begin	.\ctags58\sql.c	/^	KEYWORD_begin,$/;"	e	enum:eKeywordId	file:
KEYWORD_block	.\ctags58\fortran.c	/^	KEYWORD_block,$/;"	e	enum:eKeywordId	file:
KEYWORD_body	.\ctags58\sql.c	/^	KEYWORD_body,$/;"	e	enum:eKeywordId	file:
KEYWORD_byte	.\ctags58\fortran.c	/^	KEYWORD_byte,$/;"	e	enum:eKeywordId	file:
KEYWORD_call	.\ctags58\sql.c	/^	KEYWORD_call,$/;"	e	enum:eKeywordId	file:
KEYWORD_capital_function	.\ctags58\flex.c	/^	KEYWORD_capital_function,$/;"	e	enum:eKeywordId	file:
KEYWORD_capital_function	.\ctags58\jscript.c	/^	KEYWORD_capital_function,$/;"	e	enum:eKeywordId	file:
KEYWORD_capital_object	.\ctags58\flex.c	/^	KEYWORD_capital_object,$/;"	e	enum:eKeywordId	file:
KEYWORD_capital_object	.\ctags58\jscript.c	/^	KEYWORD_capital_object,$/;"	e	enum:eKeywordId	file:
KEYWORD_case	.\ctags58\sql.c	/^	KEYWORD_case,$/;"	e	enum:eKeywordId	file:
KEYWORD_catch	.\ctags58\flex.c	/^	KEYWORD_catch,$/;"	e	enum:eKeywordId	file:
KEYWORD_catch	.\ctags58\jscript.c	/^	KEYWORD_catch,$/;"	e	enum:eKeywordId	file:
KEYWORD_cdata	.\ctags58\flex.c	/^	KEYWORD_cdata,$/;"	e	enum:eKeywordId	file:
KEYWORD_cexternal	.\ctags58\fortran.c	/^	KEYWORD_cexternal,$/;"	e	enum:eKeywordId	file:
KEYWORD_cglobal	.\ctags58\fortran.c	/^	KEYWORD_cglobal,$/;"	e	enum:eKeywordId	file:
KEYWORD_chapter	.\ctags58\tex.c	/^	KEYWORD_chapter,$/;"	e	enum:eKeywordId	file:
KEYWORD_character	.\ctags58\fortran.c	/^	KEYWORD_character,$/;"	e	enum:eKeywordId	file:
KEYWORD_check	.\ctags58\eiffel.c	/^	KEYWORD_check, KEYWORD_class, KEYWORD_convert, KEYWORD_create,$/;"	e	enum:eKeywordId	file:
KEYWORD_check	.\ctags58\sql.c	/^	KEYWORD_check,$/;"	e	enum:eKeywordId	file:
KEYWORD_class	.\ctags58\eiffel.c	/^	KEYWORD_check, KEYWORD_class, KEYWORD_convert, KEYWORD_create,$/;"	e	enum:eKeywordId	file:
KEYWORD_class	.\ctags58\flex.c	/^	KEYWORD_class,$/;"	e	enum:eKeywordId	file:
KEYWORD_comment	.\ctags58\sql.c	/^	KEYWORD_comment,$/;"	e	enum:eKeywordId	file:
KEYWORD_common	.\ctags58\fortran.c	/^	KEYWORD_common,$/;"	e	enum:eKeywordId	file:
KEYWORD_complex	.\ctags58\fortran.c	/^	KEYWORD_complex,$/;"	e	enum:eKeywordId	file:
KEYWORD_constraint	.\ctags58\sql.c	/^	KEYWORD_constraint,$/;"	e	enum:eKeywordId	file:
KEYWORD_contains	.\ctags58\fortran.c	/^	KEYWORD_contains,$/;"	e	enum:eKeywordId	file:
KEYWORD_convert	.\ctags58\eiffel.c	/^	KEYWORD_check, KEYWORD_class, KEYWORD_convert, KEYWORD_create,$/;"	e	enum:eKeywordId	file:
KEYWORD_create	.\ctags58\eiffel.c	/^	KEYWORD_check, KEYWORD_class, KEYWORD_convert, KEYWORD_create,$/;"	e	enum:eKeywordId	file:
KEYWORD_create	.\ctags58\sql.c	/^	KEYWORD_create,$/;"	e	enum:eKeywordId	file:
KEYWORD_creation	.\ctags58\eiffel.c	/^	KEYWORD_creation, KEYWORD_Current,$/;"	e	enum:eKeywordId	file:
KEYWORD_cursor	.\ctags58\sql.c	/^	KEYWORD_cursor,$/;"	e	enum:eKeywordId	file:
KEYWORD_data	.\ctags58\fortran.c	/^	KEYWORD_data,$/;"	e	enum:eKeywordId	file:
KEYWORD_datatype	.\ctags58\sql.c	/^	KEYWORD_datatype,$/;"	e	enum:eKeywordId	file:
KEYWORD_debug	.\ctags58\eiffel.c	/^	KEYWORD_debug, KEYWORD_deferred, KEYWORD_do, KEYWORD_else,$/;"	e	enum:eKeywordId	file:
KEYWORD_declare	.\ctags58\sql.c	/^	KEYWORD_declare,$/;"	e	enum:eKeywordId	file:
KEYWORD_deferred	.\ctags58\eiffel.c	/^	KEYWORD_debug, KEYWORD_deferred, KEYWORD_do, KEYWORD_else,$/;"	e	enum:eKeywordId	file:
KEYWORD_dimension	.\ctags58\fortran.c	/^	KEYWORD_dimension,$/;"	e	enum:eKeywordId	file:
KEYWORD_dllexport	.\ctags58\fortran.c	/^	KEYWORD_dllexport,$/;"	e	enum:eKeywordId	file:
KEYWORD_dllimport	.\ctags58\fortran.c	/^	KEYWORD_dllimport,$/;"	e	enum:eKeywordId	file:
KEYWORD_do	.\ctags58\eiffel.c	/^	KEYWORD_debug, KEYWORD_deferred, KEYWORD_do, KEYWORD_else,$/;"	e	enum:eKeywordId	file:
KEYWORD_do	.\ctags58\flex.c	/^	KEYWORD_do,$/;"	e	enum:eKeywordId	file:
KEYWORD_do	.\ctags58\fortran.c	/^	KEYWORD_do,$/;"	e	enum:eKeywordId	file:
KEYWORD_do	.\ctags58\jscript.c	/^	KEYWORD_do,$/;"	e	enum:eKeywordId	file:
KEYWORD_domain	.\ctags58\sql.c	/^	KEYWORD_domain,$/;"	e	enum:eKeywordId	file:
KEYWORD_double	.\ctags58\fortran.c	/^	KEYWORD_double,$/;"	e	enum:eKeywordId	file:
KEYWORD_drop	.\ctags58\sql.c	/^	KEYWORD_drop,$/;"	e	enum:eKeywordId	file:
KEYWORD_elemental	.\ctags58\fortran.c	/^	KEYWORD_elemental,$/;"	e	enum:eKeywordId	file:
KEYWORD_else	.\ctags58\eiffel.c	/^	KEYWORD_debug, KEYWORD_deferred, KEYWORD_do, KEYWORD_else,$/;"	e	enum:eKeywordId	file:
KEYWORD_else	.\ctags58\flex.c	/^	KEYWORD_else,$/;"	e	enum:eKeywordId	file:
KEYWORD_else	.\ctags58\jscript.c	/^	KEYWORD_else,$/;"	e	enum:eKeywordId	file:
KEYWORD_elseif	.\ctags58\eiffel.c	/^	KEYWORD_elseif, KEYWORD_end, KEYWORD_ensure, KEYWORD_expanded,$/;"	e	enum:eKeywordId	file:
KEYWORD_end	.\ctags58\eiffel.c	/^	KEYWORD_elseif, KEYWORD_end, KEYWORD_ensure, KEYWORD_expanded,$/;"	e	enum:eKeywordId	file:
KEYWORD_end	.\ctags58\fortran.c	/^	KEYWORD_end,$/;"	e	enum:eKeywordId	file:
KEYWORD_end	.\ctags58\sql.c	/^	KEYWORD_end,$/;"	e	enum:eKeywordId	file:
KEYWORD_ensure	.\ctags58\eiffel.c	/^	KEYWORD_elseif, KEYWORD_end, KEYWORD_ensure, KEYWORD_expanded,$/;"	e	enum:eKeywordId	file:
KEYWORD_entry	.\ctags58\fortran.c	/^	KEYWORD_entry,$/;"	e	enum:eKeywordId	file:
KEYWORD_equivalence	.\ctags58\fortran.c	/^	KEYWORD_equivalence,$/;"	e	enum:eKeywordId	file:
KEYWORD_event	.\ctags58\sql.c	/^	KEYWORD_event,$/;"	e	enum:eKeywordId	file:
KEYWORD_exception	.\ctags58\sql.c	/^	KEYWORD_exception,$/;"	e	enum:eKeywordId	file:
KEYWORD_expanded	.\ctags58\eiffel.c	/^	KEYWORD_elseif, KEYWORD_end, KEYWORD_ensure, KEYWORD_expanded,$/;"	e	enum:eKeywordId	file:
KEYWORD_export	.\ctags58\eiffel.c	/^	KEYWORD_export, KEYWORD_external, KEYWORD_false, KEYWORD_feature,$/;"	e	enum:eKeywordId	file:
KEYWORD_external	.\ctags58\eiffel.c	/^	KEYWORD_export, KEYWORD_external, KEYWORD_false, KEYWORD_feature,$/;"	e	enum:eKeywordId	file:
KEYWORD_external	.\ctags58\fortran.c	/^	KEYWORD_external,$/;"	e	enum:eKeywordId	file:
KEYWORD_external	.\ctags58\sql.c	/^	KEYWORD_external,$/;"	e	enum:eKeywordId	file:
KEYWORD_false	.\ctags58\eiffel.c	/^	KEYWORD_export, KEYWORD_external, KEYWORD_false, KEYWORD_feature,$/;"	e	enum:eKeywordId	file:
KEYWORD_feature	.\ctags58\eiffel.c	/^	KEYWORD_export, KEYWORD_external, KEYWORD_false, KEYWORD_feature,$/;"	e	enum:eKeywordId	file:
KEYWORD_finally	.\ctags58\flex.c	/^	KEYWORD_finally,$/;"	e	enum:eKeywordId	file:
KEYWORD_finally	.\ctags58\jscript.c	/^	KEYWORD_finally$/;"	e	enum:eKeywordId	file:
KEYWORD_for	.\ctags58\flex.c	/^	KEYWORD_for,$/;"	e	enum:eKeywordId	file:
KEYWORD_for	.\ctags58\jscript.c	/^	KEYWORD_for,$/;"	e	enum:eKeywordId	file:
KEYWORD_for	.\ctags58\sql.c	/^	KEYWORD_for,$/;"	e	enum:eKeywordId	file:
KEYWORD_foreign	.\ctags58\sql.c	/^	KEYWORD_foreign,$/;"	e	enum:eKeywordId	file:
KEYWORD_format	.\ctags58\fortran.c	/^	KEYWORD_format,$/;"	e	enum:eKeywordId	file:
KEYWORD_from	.\ctags58\eiffel.c	/^	KEYWORD_from, KEYWORD_frozen, KEYWORD_if, KEYWORD_implies,$/;"	e	enum:eKeywordId	file:
KEYWORD_frozen	.\ctags58\eiffel.c	/^	KEYWORD_from, KEYWORD_frozen, KEYWORD_if, KEYWORD_implies,$/;"	e	enum:eKeywordId	file:
KEYWORD_function	.\ctags58\flex.c	/^	KEYWORD_function,$/;"	e	enum:eKeywordId	file:
KEYWORD_function	.\ctags58\fortran.c	/^	KEYWORD_function,$/;"	e	enum:eKeywordId	file:
KEYWORD_function	.\ctags58\jscript.c	/^	KEYWORD_function,$/;"	e	enum:eKeywordId	file:
KEYWORD_function	.\ctags58\sql.c	/^	KEYWORD_function,$/;"	e	enum:eKeywordId	file:
KEYWORD_go	.\ctags58\sql.c	/^	KEYWORD_go$/;"	e	enum:eKeywordId	file:
KEYWORD_handler	.\ctags58\sql.c	/^	KEYWORD_handler,$/;"	e	enum:eKeywordId	file:
KEYWORD_id	.\ctags58\flex.c	/^	KEYWORD_id,$/;"	e	enum:eKeywordId	file:
KEYWORD_if	.\ctags58\eiffel.c	/^	KEYWORD_from, KEYWORD_frozen, KEYWORD_if, KEYWORD_implies,$/;"	e	enum:eKeywordId	file:
KEYWORD_if	.\ctags58\flex.c	/^	KEYWORD_if,$/;"	e	enum:eKeywordId	file:
KEYWORD_if	.\ctags58\fortran.c	/^	KEYWORD_if,$/;"	e	enum:eKeywordId	file:
KEYWORD_if	.\ctags58\jscript.c	/^	KEYWORD_if,$/;"	e	enum:eKeywordId	file:
KEYWORD_if	.\ctags58\sql.c	/^	KEYWORD_if,$/;"	e	enum:eKeywordId	file:
KEYWORD_implicit	.\ctags58\fortran.c	/^	KEYWORD_implicit,$/;"	e	enum:eKeywordId	file:
KEYWORD_implies	.\ctags58\eiffel.c	/^	KEYWORD_from, KEYWORD_frozen, KEYWORD_if, KEYWORD_implies,$/;"	e	enum:eKeywordId	file:
KEYWORD_include	.\ctags58\fortran.c	/^	KEYWORD_include,$/;"	e	enum:eKeywordId	file:
KEYWORD_index	.\ctags58\sql.c	/^	KEYWORD_index,$/;"	e	enum:eKeywordId	file:
KEYWORD_indexing	.\ctags58\eiffel.c	/^	KEYWORD_indexing, KEYWORD_infix, KEYWORD_inherit, KEYWORD_inspect,$/;"	e	enum:eKeywordId	file:
KEYWORD_infix	.\ctags58\eiffel.c	/^	KEYWORD_indexing, KEYWORD_infix, KEYWORD_inherit, KEYWORD_inspect,$/;"	e	enum:eKeywordId	file:
KEYWORD_inherit	.\ctags58\eiffel.c	/^	KEYWORD_indexing, KEYWORD_infix, KEYWORD_inherit, KEYWORD_inspect,$/;"	e	enum:eKeywordId	file:
KEYWORD_inline	.\ctags58\fortran.c	/^	KEYWORD_inline,$/;"	e	enum:eKeywordId	file:
KEYWORD_inspect	.\ctags58\eiffel.c	/^	KEYWORD_indexing, KEYWORD_infix, KEYWORD_inherit, KEYWORD_inspect,$/;"	e	enum:eKeywordId	file:
KEYWORD_integer	.\ctags58\fortran.c	/^	KEYWORD_integer,$/;"	e	enum:eKeywordId	file:
KEYWORD_intent	.\ctags58\fortran.c	/^	KEYWORD_intent,$/;"	e	enum:eKeywordId	file:
KEYWORD_interface	.\ctags58\fortran.c	/^	KEYWORD_interface,$/;"	e	enum:eKeywordId	file:
KEYWORD_internal	.\ctags58\sql.c	/^	KEYWORD_internal,$/;"	e	enum:eKeywordId	file:
KEYWORD_intrinsic	.\ctags58\fortran.c	/^	KEYWORD_intrinsic,$/;"	e	enum:eKeywordId	file:
KEYWORD_invariant	.\ctags58\eiffel.c	/^	KEYWORD_invariant, KEYWORD_is, KEYWORD_like, KEYWORD_local,$/;"	e	enum:eKeywordId	file:
KEYWORD_is	.\ctags58\eiffel.c	/^	KEYWORD_invariant, KEYWORD_is, KEYWORD_like, KEYWORD_local,$/;"	e	enum:eKeywordId	file:
KEYWORD_is	.\ctags58\sql.c	/^	KEYWORD_is,$/;"	e	enum:eKeywordId	file:
KEYWORD_like	.\ctags58\eiffel.c	/^	KEYWORD_invariant, KEYWORD_is, KEYWORD_like, KEYWORD_local,$/;"	e	enum:eKeywordId	file:
KEYWORD_local	.\ctags58\eiffel.c	/^	KEYWORD_invariant, KEYWORD_is, KEYWORD_like, KEYWORD_local,$/;"	e	enum:eKeywordId	file:
KEYWORD_local	.\ctags58\sql.c	/^	KEYWORD_local,$/;"	e	enum:eKeywordId	file:
KEYWORD_logical	.\ctags58\fortran.c	/^	KEYWORD_logical,$/;"	e	enum:eKeywordId	file:
KEYWORD_loop	.\ctags58\eiffel.c	/^	KEYWORD_loop, KEYWORD_not, KEYWORD_obsolete, KEYWORD_old, KEYWORD_once,$/;"	e	enum:eKeywordId	file:
KEYWORD_loop	.\ctags58\sql.c	/^	KEYWORD_loop,$/;"	e	enum:eKeywordId	file:
KEYWORD_map	.\ctags58\fortran.c	/^	KEYWORD_map,$/;"	e	enum:eKeywordId	file:
KEYWORD_ml_conn	.\ctags58\sql.c	/^	KEYWORD_ml_conn,$/;"	e	enum:eKeywordId	file:
KEYWORD_ml_conn_chk	.\ctags58\sql.c	/^	KEYWORD_ml_conn_chk,$/;"	e	enum:eKeywordId	file:
KEYWORD_ml_conn_dnet	.\ctags58\sql.c	/^	KEYWORD_ml_conn_dnet,$/;"	e	enum:eKeywordId	file:
KEYWORD_ml_conn_java	.\ctags58\sql.c	/^	KEYWORD_ml_conn_java,$/;"	e	enum:eKeywordId	file:
KEYWORD_ml_conn_lang	.\ctags58\sql.c	/^	KEYWORD_ml_conn_lang,$/;"	e	enum:eKeywordId	file:
KEYWORD_ml_table	.\ctags58\sql.c	/^	KEYWORD_ml_table,$/;"	e	enum:eKeywordId	file:
KEYWORD_ml_table_chk	.\ctags58\sql.c	/^	KEYWORD_ml_table_chk,$/;"	e	enum:eKeywordId	file:
KEYWORD_ml_table_dnet	.\ctags58\sql.c	/^	KEYWORD_ml_table_dnet,$/;"	e	enum:eKeywordId	file:
KEYWORD_ml_table_java	.\ctags58\sql.c	/^	KEYWORD_ml_table_java,$/;"	e	enum:eKeywordId	file:
KEYWORD_ml_table_lang	.\ctags58\sql.c	/^	KEYWORD_ml_table_lang,$/;"	e	enum:eKeywordId	file:
KEYWORD_module	.\ctags58\fortran.c	/^	KEYWORD_module,$/;"	e	enum:eKeywordId	file:
KEYWORD_mx	.\ctags58\flex.c	/^	KEYWORD_mx$/;"	e	enum:eKeywordId	file:
KEYWORD_namelist	.\ctags58\fortran.c	/^	KEYWORD_namelist,$/;"	e	enum:eKeywordId	file:
KEYWORD_new	.\ctags58\flex.c	/^	KEYWORD_new,$/;"	e	enum:eKeywordId	file:
KEYWORD_new	.\ctags58\jscript.c	/^	KEYWORD_new,$/;"	e	enum:eKeywordId	file:
KEYWORD_not	.\ctags58\eiffel.c	/^	KEYWORD_loop, KEYWORD_not, KEYWORD_obsolete, KEYWORD_old, KEYWORD_once,$/;"	e	enum:eKeywordId	file:
KEYWORD_object	.\ctags58\flex.c	/^	KEYWORD_object,$/;"	e	enum:eKeywordId	file:
KEYWORD_object	.\ctags58\jscript.c	/^	KEYWORD_object,$/;"	e	enum:eKeywordId	file:
KEYWORD_object	.\ctags58\sql.c	/^	KEYWORD_object,$/;"	e	enum:eKeywordId	file:
KEYWORD_obsolete	.\ctags58\eiffel.c	/^	KEYWORD_loop, KEYWORD_not, KEYWORD_obsolete, KEYWORD_old, KEYWORD_once,$/;"	e	enum:eKeywordId	file:
KEYWORD_old	.\ctags58\eiffel.c	/^	KEYWORD_loop, KEYWORD_not, KEYWORD_obsolete, KEYWORD_old, KEYWORD_once,$/;"	e	enum:eKeywordId	file:
KEYWORD_on	.\ctags58\sql.c	/^	KEYWORD_on,$/;"	e	enum:eKeywordId	file:
KEYWORD_once	.\ctags58\eiffel.c	/^	KEYWORD_loop, KEYWORD_not, KEYWORD_obsolete, KEYWORD_old, KEYWORD_once,$/;"	e	enum:eKeywordId	file:
KEYWORD_operator	.\ctags58\fortran.c	/^	KEYWORD_operator,$/;"	e	enum:eKeywordId	file:
KEYWORD_optional	.\ctags58\fortran.c	/^	KEYWORD_optional,$/;"	e	enum:eKeywordId	file:
KEYWORD_or	.\ctags58\eiffel.c	/^	KEYWORD_or, KEYWORD_prefix, KEYWORD_redefine, KEYWORD_rename,$/;"	e	enum:eKeywordId	file:
KEYWORD_package	.\ctags58\sql.c	/^	KEYWORD_package,$/;"	e	enum:eKeywordId	file:
KEYWORD_paragraph	.\ctags58\tex.c	/^	KEYWORD_paragraph,$/;"	e	enum:eKeywordId	file:
KEYWORD_parameter	.\ctags58\fortran.c	/^	KEYWORD_parameter,$/;"	e	enum:eKeywordId	file:
KEYWORD_part	.\ctags58\tex.c	/^	KEYWORD_part,$/;"	e	enum:eKeywordId	file:
KEYWORD_pascal	.\ctags58\fortran.c	/^	KEYWORD_pascal,$/;"	e	enum:eKeywordId	file:
KEYWORD_pexternal	.\ctags58\fortran.c	/^	KEYWORD_pexternal,$/;"	e	enum:eKeywordId	file:
KEYWORD_pglobal	.\ctags58\fortran.c	/^	KEYWORD_pglobal,$/;"	e	enum:eKeywordId	file:
KEYWORD_pointer	.\ctags58\fortran.c	/^	KEYWORD_pointer,$/;"	e	enum:eKeywordId	file:
KEYWORD_pragma	.\ctags58\sql.c	/^	KEYWORD_pragma,$/;"	e	enum:eKeywordId	file:
KEYWORD_precision	.\ctags58\fortran.c	/^	KEYWORD_precision,$/;"	e	enum:eKeywordId	file:
KEYWORD_prefix	.\ctags58\eiffel.c	/^	KEYWORD_or, KEYWORD_prefix, KEYWORD_redefine, KEYWORD_rename,$/;"	e	enum:eKeywordId	file:
KEYWORD_primary	.\ctags58\sql.c	/^	KEYWORD_primary,$/;"	e	enum:eKeywordId	file:
KEYWORD_private	.\ctags58\flex.c	/^	KEYWORD_private,$/;"	e	enum:eKeywordId	file:
KEYWORD_private	.\ctags58\fortran.c	/^	KEYWORD_private,$/;"	e	enum:eKeywordId	file:
KEYWORD_procedure	.\ctags58\sql.c	/^	KEYWORD_procedure,$/;"	e	enum:eKeywordId	file:
KEYWORD_program	.\ctags58\fortran.c	/^	KEYWORD_program,$/;"	e	enum:eKeywordId	file:
KEYWORD_prototype	.\ctags58\flex.c	/^	KEYWORD_prototype,$/;"	e	enum:eKeywordId	file:
KEYWORD_prototype	.\ctags58\jscript.c	/^	KEYWORD_prototype,$/;"	e	enum:eKeywordId	file:
KEYWORD_public	.\ctags58\flex.c	/^	KEYWORD_public,$/;"	e	enum:eKeywordId	file:
KEYWORD_public	.\ctags58\fortran.c	/^	KEYWORD_public,$/;"	e	enum:eKeywordId	file:
KEYWORD_publication	.\ctags58\sql.c	/^	KEYWORD_publication,$/;"	e	enum:eKeywordId	file:
KEYWORD_pure	.\ctags58\fortran.c	/^	KEYWORD_pure,$/;"	e	enum:eKeywordId	file:
KEYWORD_real	.\ctags58\fortran.c	/^	KEYWORD_real,$/;"	e	enum:eKeywordId	file:
KEYWORD_record	.\ctags58\fortran.c	/^	KEYWORD_record,$/;"	e	enum:eKeywordId	file:
KEYWORD_record	.\ctags58\sql.c	/^	KEYWORD_record,$/;"	e	enum:eKeywordId	file:
KEYWORD_recursive	.\ctags58\fortran.c	/^	KEYWORD_recursive,$/;"	e	enum:eKeywordId	file:
KEYWORD_redefine	.\ctags58\eiffel.c	/^	KEYWORD_or, KEYWORD_prefix, KEYWORD_redefine, KEYWORD_rename,$/;"	e	enum:eKeywordId	file:
KEYWORD_ref	.\ctags58\sql.c	/^	KEYWORD_ref,$/;"	e	enum:eKeywordId	file:
KEYWORD_references	.\ctags58\sql.c	/^	KEYWORD_references,$/;"	e	enum:eKeywordId	file:
KEYWORD_rem	.\ctags58\sql.c	/^	KEYWORD_rem,$/;"	e	enum:eKeywordId	file:
KEYWORD_rename	.\ctags58\eiffel.c	/^	KEYWORD_or, KEYWORD_prefix, KEYWORD_redefine, KEYWORD_rename,$/;"	e	enum:eKeywordId	file:
KEYWORD_require	.\ctags58\eiffel.c	/^	KEYWORD_require, KEYWORD_rescue, KEYWORD_Result, KEYWORD_retry,$/;"	e	enum:eKeywordId	file:
KEYWORD_rescue	.\ctags58\eiffel.c	/^	KEYWORD_require, KEYWORD_rescue, KEYWORD_Result, KEYWORD_retry,$/;"	e	enum:eKeywordId	file:
KEYWORD_result	.\ctags58\sql.c	/^	KEYWORD_result,$/;"	e	enum:eKeywordId	file:
KEYWORD_retry	.\ctags58\eiffel.c	/^	KEYWORD_require, KEYWORD_rescue, KEYWORD_Result, KEYWORD_retry,$/;"	e	enum:eKeywordId	file:
KEYWORD_return	.\ctags58\sql.c	/^	KEYWORD_return,$/;"	e	enum:eKeywordId	file:
KEYWORD_returns	.\ctags58\sql.c	/^	KEYWORD_returns,$/;"	e	enum:eKeywordId	file:
KEYWORD_save	.\ctags58\fortran.c	/^	KEYWORD_save,$/;"	e	enum:eKeywordId	file:
KEYWORD_script	.\ctags58\flex.c	/^	KEYWORD_script,$/;"	e	enum:eKeywordId	file:
KEYWORD_section	.\ctags58\tex.c	/^	KEYWORD_section,$/;"	e	enum:eKeywordId	file:
KEYWORD_select	.\ctags58\eiffel.c	/^	KEYWORD_select, KEYWORD_separate, KEYWORD_strip, KEYWORD_then,$/;"	e	enum:eKeywordId	file:
KEYWORD_select	.\ctags58\fortran.c	/^	KEYWORD_select,$/;"	e	enum:eKeywordId	file:
KEYWORD_separate	.\ctags58\eiffel.c	/^	KEYWORD_select, KEYWORD_separate, KEYWORD_strip, KEYWORD_then,$/;"	e	enum:eKeywordId	file:
KEYWORD_sequence	.\ctags58\fortran.c	/^	KEYWORD_sequence,$/;"	e	enum:eKeywordId	file:
KEYWORD_service	.\ctags58\sql.c	/^	KEYWORD_service,$/;"	e	enum:eKeywordId	file:
KEYWORD_static	.\ctags58\flex.c	/^	KEYWORD_static,$/;"	e	enum:eKeywordId	file:
KEYWORD_static	.\ctags58\fortran.c	/^	KEYWORD_static,$/;"	e	enum:eKeywordId	file:
KEYWORD_stdcall	.\ctags58\fortran.c	/^	KEYWORD_stdcall,$/;"	e	enum:eKeywordId	file:
KEYWORD_strip	.\ctags58\eiffel.c	/^	KEYWORD_select, KEYWORD_separate, KEYWORD_strip, KEYWORD_then,$/;"	e	enum:eKeywordId	file:
KEYWORD_structure	.\ctags58\fortran.c	/^	KEYWORD_structure,$/;"	e	enum:eKeywordId	file:
KEYWORD_subparagraph	.\ctags58\tex.c	/^	KEYWORD_subparagraph$/;"	e	enum:eKeywordId	file:
KEYWORD_subroutine	.\ctags58\fortran.c	/^	KEYWORD_subroutine,$/;"	e	enum:eKeywordId	file:
KEYWORD_subsection	.\ctags58\tex.c	/^	KEYWORD_subsection,$/;"	e	enum:eKeywordId	file:
KEYWORD_subsubsection	.\ctags58\tex.c	/^	KEYWORD_subsubsection,$/;"	e	enum:eKeywordId	file:
KEYWORD_subtype	.\ctags58\sql.c	/^	KEYWORD_subtype,$/;"	e	enum:eKeywordId	file:
KEYWORD_switch	.\ctags58\flex.c	/^	KEYWORD_switch,$/;"	e	enum:eKeywordId	file:
KEYWORD_switch	.\ctags58\jscript.c	/^	KEYWORD_switch,$/;"	e	enum:eKeywordId	file:
KEYWORD_synonym	.\ctags58\sql.c	/^	KEYWORD_synonym,$/;"	e	enum:eKeywordId	file:
KEYWORD_table	.\ctags58\sql.c	/^	KEYWORD_table,$/;"	e	enum:eKeywordId	file:
KEYWORD_target	.\ctags58\fortran.c	/^	KEYWORD_target,$/;"	e	enum:eKeywordId	file:
KEYWORD_temporary	.\ctags58\sql.c	/^	KEYWORD_temporary,$/;"	e	enum:eKeywordId	file:
KEYWORD_then	.\ctags58\eiffel.c	/^	KEYWORD_select, KEYWORD_separate, KEYWORD_strip, KEYWORD_then,$/;"	e	enum:eKeywordId	file:
KEYWORD_then	.\ctags58\fortran.c	/^	KEYWORD_then,$/;"	e	enum:eKeywordId	file:
KEYWORD_then	.\ctags58\sql.c	/^	KEYWORD_then,$/;"	e	enum:eKeywordId	file:
KEYWORD_this	.\ctags58\flex.c	/^	KEYWORD_this,$/;"	e	enum:eKeywordId	file:
KEYWORD_this	.\ctags58\jscript.c	/^	KEYWORD_this,$/;"	e	enum:eKeywordId	file:
KEYWORD_trigger	.\ctags58\sql.c	/^	KEYWORD_trigger,$/;"	e	enum:eKeywordId	file:
KEYWORD_true	.\ctags58\eiffel.c	/^	KEYWORD_true, KEYWORD_undefine, KEYWORD_unique, KEYWORD_until,$/;"	e	enum:eKeywordId	file:
KEYWORD_try	.\ctags58\flex.c	/^	KEYWORD_try,$/;"	e	enum:eKeywordId	file:
KEYWORD_try	.\ctags58\jscript.c	/^	KEYWORD_try,$/;"	e	enum:eKeywordId	file:
KEYWORD_type	.\ctags58\fortran.c	/^	KEYWORD_type,$/;"	e	enum:eKeywordId	file:
KEYWORD_type	.\ctags58\sql.c	/^	KEYWORD_type,$/;"	e	enum:eKeywordId	file:
KEYWORD_undefine	.\ctags58\eiffel.c	/^	KEYWORD_true, KEYWORD_undefine, KEYWORD_unique, KEYWORD_until,$/;"	e	enum:eKeywordId	file:
KEYWORD_union	.\ctags58\fortran.c	/^	KEYWORD_union,$/;"	e	enum:eKeywordId	file:
KEYWORD_unique	.\ctags58\eiffel.c	/^	KEYWORD_true, KEYWORD_undefine, KEYWORD_unique, KEYWORD_until,$/;"	e	enum:eKeywordId	file:
KEYWORD_unique	.\ctags58\sql.c	/^	KEYWORD_unique,$/;"	e	enum:eKeywordId	file:
KEYWORD_until	.\ctags58\eiffel.c	/^	KEYWORD_true, KEYWORD_undefine, KEYWORD_unique, KEYWORD_until,$/;"	e	enum:eKeywordId	file:
KEYWORD_url	.\ctags58\sql.c	/^	KEYWORD_url,$/;"	e	enum:eKeywordId	file:
KEYWORD_use	.\ctags58\fortran.c	/^	KEYWORD_use,$/;"	e	enum:eKeywordId	file:
KEYWORD_value	.\ctags58\fortran.c	/^	KEYWORD_value,$/;"	e	enum:eKeywordId	file:
KEYWORD_var	.\ctags58\flex.c	/^	KEYWORD_var,$/;"	e	enum:eKeywordId	file:
KEYWORD_var	.\ctags58\jscript.c	/^	KEYWORD_var,$/;"	e	enum:eKeywordId	file:
KEYWORD_variable	.\ctags58\sql.c	/^	KEYWORD_variable,$/;"	e	enum:eKeywordId	file:
KEYWORD_variant	.\ctags58\eiffel.c	/^	KEYWORD_variant, KEYWORD_when, KEYWORD_xor$/;"	e	enum:eKeywordId	file:
KEYWORD_view	.\ctags58\sql.c	/^	KEYWORD_view,$/;"	e	enum:eKeywordId	file:
KEYWORD_virtual	.\ctags58\fortran.c	/^	KEYWORD_virtual,$/;"	e	enum:eKeywordId	file:
KEYWORD_volatile	.\ctags58\fortran.c	/^	KEYWORD_volatile,$/;"	e	enum:eKeywordId	file:
KEYWORD_when	.\ctags58\eiffel.c	/^	KEYWORD_variant, KEYWORD_when, KEYWORD_xor$/;"	e	enum:eKeywordId	file:
KEYWORD_when	.\ctags58\sql.c	/^	KEYWORD_when,$/;"	e	enum:eKeywordId	file:
KEYWORD_where	.\ctags58\fortran.c	/^	KEYWORD_where,$/;"	e	enum:eKeywordId	file:
KEYWORD_while	.\ctags58\flex.c	/^	KEYWORD_while,$/;"	e	enum:eKeywordId	file:
KEYWORD_while	.\ctags58\fortran.c	/^	KEYWORD_while$/;"	e	enum:eKeywordId	file:
KEYWORD_while	.\ctags58\jscript.c	/^	KEYWORD_while,$/;"	e	enum:eKeywordId	file:
KEYWORD_xor	.\ctags58\eiffel.c	/^	KEYWORD_variant, KEYWORD_when, KEYWORD_xor$/;"	e	enum:eKeywordId	file:
KIND_COUNT	.\ctags58\parse.h	24;"	d
K_AND	.\ctags58\sml.c	/^	K_AND = -2,$/;"	e	enum:__anon80	file:
K_AUGROUP	.\ctags58\vim.c	/^	K_AUGROUP,$/;"	e	enum:__anon88	file:
K_CLASS	.\ctags58\asp.c	/^	K_CONST, K_CLASS, K_FUNCTION, K_SUB, K_DIM$/;"	e	enum:__anon7	file:
K_CLASS	.\ctags58\ocaml.c	/^	K_CLASS,        \/* Ocaml class, relatively rare *\/$/;"	e	enum:__anon51	file:
K_CLASS	.\ctags58\php.c	/^	K_CLASS, K_DEFINE, K_FUNCTION, K_VARIABLE$/;"	e	enum:__anon60	file:
K_CLASS	.\ctags58\python.c	/^	K_CLASS, K_FUNCTION, K_MEMBER, K_VARIABLE, K_IMPORT$/;"	e	enum:__anon61	file:
K_CLASS	.\ctags58\ruby.c	/^	K_UNDEFINED = -1, K_CLASS, K_METHOD, K_MODULE, K_SINGLETON$/;"	e	enum:__anon77	file:
K_CLASS	.\ctags58\tcl.c	/^	K_CLASS, K_METHOD, K_PROCEDURE$/;"	e	enum:__anon83	file:
K_COMMAND	.\ctags58\vim.c	/^	K_COMMAND,$/;"	e	enum:__anon88	file:
K_CONST	.\ctags58\asp.c	/^	K_CONST, K_CLASS, K_FUNCTION, K_SUB, K_DIM$/;"	e	enum:__anon7	file:
K_CONST	.\ctags58\basic.c	/^	K_CONST,$/;"	e	enum:__anon8	file:
K_CONSTANT	.\ctags58\perl.c	/^	K_CONSTANT,$/;"	e	enum:__anon59	file:
K_CONSTANT	.\ctags58\verilog.c	/^	K_CONSTANT,$/;"	e	enum:__anon85	file:
K_CONSTRUCTOR	.\ctags58\ocaml.c	/^	K_CONSTRUCTOR,  \/* Constructor of a sum type *\/$/;"	e	enum:__anon51	file:
K_DEFINE	.\ctags58\asm.c	/^	K_NONE = -1, K_DEFINE, K_LABEL, K_MACRO, K_TYPE$/;"	e	enum:__anon3	file:
K_DEFINE	.\ctags58\php.c	/^	K_CLASS, K_DEFINE, K_FUNCTION, K_VARIABLE$/;"	e	enum:__anon60	file:
K_DIM	.\ctags58\asp.c	/^	K_CONST, K_CLASS, K_FUNCTION, K_SUB, K_DIM$/;"	e	enum:__anon7	file:
K_ENUM	.\ctags58\basic.c	/^	K_ENUM$/;"	e	enum:__anon8	file:
K_EVENT	.\ctags58\verilog.c	/^	K_EVENT,$/;"	e	enum:__anon85	file:
K_EXCEPTION	.\ctags58\ocaml.c	/^	K_EXCEPTION$/;"	e	enum:__anon51	file:
K_EXCEPTION	.\ctags58\sml.c	/^	K_EXCEPTION,$/;"	e	enum:__anon80	file:
K_FORMAT	.\ctags58\perl.c	/^	K_FORMAT,$/;"	e	enum:__anon59	file:
K_FRAGMENT	.\ctags58\beta.c	/^	K_FRAGMENT, K_PATTERN, K_SLOT, K_VIRTUAL$/;"	e	enum:__anon10	file:
K_FUNCTION	.\ctags58\asp.c	/^	K_CONST, K_CLASS, K_FUNCTION, K_SUB, K_DIM$/;"	e	enum:__anon7	file:
K_FUNCTION	.\ctags58\awk.c	/^	K_FUNCTION$/;"	e	enum:eAwkKinds	file:
K_FUNCTION	.\ctags58\basic.c	/^	K_FUNCTION,$/;"	e	enum:__anon8	file:
K_FUNCTION	.\ctags58\erlang.c	/^	K_MACRO, K_FUNCTION, K_MODULE, K_RECORD$/;"	e	enum:__anon18	file:
K_FUNCTION	.\ctags58\lisp.c	/^	K_FUNCTION$/;"	e	enum:__anon42	file:
K_FUNCTION	.\ctags58\lua.c	/^	K_FUNCTION$/;"	e	enum:__anon48	file:
K_FUNCTION	.\ctags58\ocaml.c	/^	K_FUNCTION,$/;"	e	enum:__anon51	file:
K_FUNCTION	.\ctags58\pascal.c	/^	K_FUNCTION, K_PROCEDURE$/;"	e	enum:__anon58	file:
K_FUNCTION	.\ctags58\php.c	/^	K_CLASS, K_DEFINE, K_FUNCTION, K_VARIABLE$/;"	e	enum:__anon60	file:
K_FUNCTION	.\ctags58\python.c	/^	K_CLASS, K_FUNCTION, K_MEMBER, K_VARIABLE, K_IMPORT$/;"	e	enum:__anon61	file:
K_FUNCTION	.\ctags58\scheme.c	/^	K_FUNCTION, K_SET$/;"	e	enum:__anon78	file:
K_FUNCTION	.\ctags58\sh.c	/^	K_FUNCTION$/;"	e	enum:__anon79	file:
K_FUNCTION	.\ctags58\sml.c	/^	K_FUNCTION,$/;"	e	enum:__anon80	file:
K_FUNCTION	.\ctags58\verilog.c	/^	K_FUNCTION,$/;"	e	enum:__anon85	file:
K_FUNCTION	.\ctags58\vim.c	/^	K_FUNCTION,$/;"	e	enum:__anon88	file:
K_FUNCTOR	.\ctags58\sml.c	/^	K_FUNCTOR,$/;"	e	enum:__anon80	file:
K_IMPORT	.\ctags58\python.c	/^	K_CLASS, K_FUNCTION, K_MEMBER, K_VARIABLE, K_IMPORT$/;"	e	enum:__anon61	file:
K_LABEL	.\ctags58\asm.c	/^	K_NONE = -1, K_DEFINE, K_LABEL, K_MACRO, K_TYPE$/;"	e	enum:__anon3	file:
K_LABEL	.\ctags58\basic.c	/^	K_LABEL,$/;"	e	enum:__anon8	file:
K_LABEL	.\ctags58\perl.c	/^	K_LABEL,$/;"	e	enum:__anon59	file:
K_MACRO	.\ctags58\asm.c	/^	K_NONE = -1, K_DEFINE, K_LABEL, K_MACRO, K_TYPE$/;"	e	enum:__anon3	file:
K_MACRO	.\ctags58\erlang.c	/^	K_MACRO, K_FUNCTION, K_MODULE, K_RECORD$/;"	e	enum:__anon18	file:
K_MACRO	.\ctags58\make.c	/^	K_MACRO$/;"	e	enum:__anon50	file:
K_MAP	.\ctags58\vim.c	/^	K_MAP,$/;"	e	enum:__anon88	file:
K_MEMBER	.\ctags58\python.c	/^	K_CLASS, K_FUNCTION, K_MEMBER, K_VARIABLE, K_IMPORT$/;"	e	enum:__anon61	file:
K_METHOD	.\ctags58\ocaml.c	/^	K_METHOD,       \/* class method *\/$/;"	e	enum:__anon51	file:
K_METHOD	.\ctags58\ruby.c	/^	K_UNDEFINED = -1, K_CLASS, K_METHOD, K_MODULE, K_SINGLETON$/;"	e	enum:__anon77	file:
K_METHOD	.\ctags58\tcl.c	/^	K_CLASS, K_METHOD, K_PROCEDURE$/;"	e	enum:__anon83	file:
K_MODULE	.\ctags58\erlang.c	/^	K_MACRO, K_FUNCTION, K_MODULE, K_RECORD$/;"	e	enum:__anon18	file:
K_MODULE	.\ctags58\ocaml.c	/^	K_MODULE,       \/* Ocaml module OR functor *\/$/;"	e	enum:__anon51	file:
K_MODULE	.\ctags58\ruby.c	/^	K_UNDEFINED = -1, K_CLASS, K_METHOD, K_MODULE, K_SINGLETON$/;"	e	enum:__anon77	file:
K_MODULE	.\ctags58\verilog.c	/^	K_MODULE,$/;"	e	enum:__anon85	file:
K_NET	.\ctags58\verilog.c	/^	K_NET,$/;"	e	enum:__anon85	file:
K_NONE	.\ctags58\asm.c	/^	K_NONE = -1, K_DEFINE, K_LABEL, K_MACRO, K_TYPE$/;"	e	enum:__anon3	file:
K_NONE	.\ctags58\perl.c	/^	K_NONE = -1,$/;"	e	enum:__anon59	file:
K_NONE	.\ctags58\sml.c	/^	K_NONE = -1,$/;"	e	enum:__anon80	file:
K_PACKAGE	.\ctags58\perl.c	/^	K_PACKAGE,$/;"	e	enum:__anon59	file:
K_PATTERN	.\ctags58\beta.c	/^	K_FRAGMENT, K_PATTERN, K_SLOT, K_VIRTUAL$/;"	e	enum:__anon10	file:
K_PORT	.\ctags58\verilog.c	/^	K_PORT,$/;"	e	enum:__anon85	file:
K_PROCEDURE	.\ctags58\pascal.c	/^	K_FUNCTION, K_PROCEDURE$/;"	e	enum:__anon58	file:
K_PROCEDURE	.\ctags58\tcl.c	/^	K_CLASS, K_METHOD, K_PROCEDURE$/;"	e	enum:__anon83	file:
K_RECORD	.\ctags58\erlang.c	/^	K_MACRO, K_FUNCTION, K_MODULE, K_RECORD$/;"	e	enum:__anon18	file:
K_RECORDFIELD	.\ctags58\ocaml.c	/^	K_RECORDFIELD,$/;"	e	enum:__anon51	file:
K_REGISTER	.\ctags58\verilog.c	/^	K_REGISTER,$/;"	e	enum:__anon85	file:
K_SET	.\ctags58\scheme.c	/^	K_FUNCTION, K_SET$/;"	e	enum:__anon78	file:
K_SIGNATURE	.\ctags58\sml.c	/^	K_SIGNATURE,$/;"	e	enum:__anon80	file:
K_SINGLETON	.\ctags58\ruby.c	/^	K_UNDEFINED = -1, K_CLASS, K_METHOD, K_MODULE, K_SINGLETON$/;"	e	enum:__anon77	file:
K_SLOT	.\ctags58\beta.c	/^	K_FRAGMENT, K_PATTERN, K_SLOT, K_VIRTUAL$/;"	e	enum:__anon10	file:
K_STRUCTURE	.\ctags58\sml.c	/^	K_STRUCTURE,$/;"	e	enum:__anon80	file:
K_SUB	.\ctags58\asp.c	/^	K_CONST, K_CLASS, K_FUNCTION, K_SUB, K_DIM$/;"	e	enum:__anon7	file:
K_SUBROUTINE	.\ctags58\perl.c	/^	K_SUBROUTINE,$/;"	e	enum:__anon59	file:
K_SUBROUTINE_DECLARATION	.\ctags58\perl.c	/^	K_SUBROUTINE_DECLARATION$/;"	e	enum:__anon59	file:
K_TASK	.\ctags58\verilog.c	/^	K_TASK$/;"	e	enum:__anon85	file:
K_TYPE	.\ctags58\asm.c	/^	K_NONE = -1, K_DEFINE, K_LABEL, K_MACRO, K_TYPE$/;"	e	enum:__anon3	file:
K_TYPE	.\ctags58\basic.c	/^	K_TYPE,$/;"	e	enum:__anon8	file:
K_TYPE	.\ctags58\ocaml.c	/^	K_TYPE,         \/* name of an OCaml type *\/$/;"	e	enum:__anon51	file:
K_TYPE	.\ctags58\sml.c	/^	K_TYPE,$/;"	e	enum:__anon80	file:
K_UNDEFINED	.\ctags58\ruby.c	/^	K_UNDEFINED = -1, K_CLASS, K_METHOD, K_MODULE, K_SINGLETON$/;"	e	enum:__anon77	file:
K_UNDEFINED	.\ctags58\verilog.c	/^	K_UNDEFINED = -1,$/;"	e	enum:__anon85	file:
K_VAL	.\ctags58\sml.c	/^	K_VAL$/;"	e	enum:__anon80	file:
K_VAR	.\ctags58\ocaml.c	/^	K_VAR,$/;"	e	enum:__anon51	file:
K_VARIABLE	.\ctags58\basic.c	/^	K_VARIABLE,$/;"	e	enum:__anon8	file:
K_VARIABLE	.\ctags58\php.c	/^	K_CLASS, K_DEFINE, K_FUNCTION, K_VARIABLE$/;"	e	enum:__anon60	file:
K_VARIABLE	.\ctags58\python.c	/^	K_CLASS, K_FUNCTION, K_MEMBER, K_VARIABLE, K_IMPORT$/;"	e	enum:__anon61	file:
K_VARIABLE	.\ctags58\vim.c	/^	K_VARIABLE$/;"	e	enum:__anon88	file:
K_VIRTUAL	.\ctags58\beta.c	/^	K_FRAGMENT, K_PATTERN, K_SLOT, K_VIRTUAL$/;"	e	enum:__anon10	file:
KeyWord	.\ctags58\basic.c	/^} KeyWord;$/;"	t	typeref:struct:__anon9	file:
KeywordTable	.\ctags58\c.c	/^static const keywordDesc KeywordTable [] = {$/;"	v	file:
L	.\vim73\macros\hanoi\hanoi.vim	/^map L 1G\/t$/;"	m
L	.\vim73\macros\life\life.vim	/^map L makf-h,1`ak,2`af-h,1`a,2`ajf-h,1`aj,2($/;"	m
LANG_AUTO	.\ctags58\parse.h	26;"	d
LANG_IGNORE	.\ctags58\parse.h	27;"	d
LD	.\ctags58\mk_mpw.mak	/^LD			= mwlinkppc$/;"	m
LD	.\ctags58\mk_qdos.mak	/^LD  = $(P)ld$/;"	m
LDFLAGS	.\ctags58\mk_qdos.mak	/^LDFLAGS  = -v -L$(P)lib_ -bufp150K\\$/;"	m
LFLAGS	.\ctags58\mk_bc3.mak	/^LFLAGS	= $(LIB) $(EXTRA)$/;"	m
LIB	.\ctags58\mk_bc3.mak	/^LIB	= -L$(BCCLOC)\\lib$/;"	m
LIBS	.\ctags58\mk_mpw.mak	/^LIBS = ¶$/;"	m
LIBS	.\ctags58\mk_qdos.mak	/^LIBS =$/;"	m
LINELENGTH	.\vim73\tools\ccfilter.c	21;"	d	file:
LINE_FIRST	.\ctags58\gnu_regex\regex_internal.h	/^  LINE_FIRST = PREV_NEWLINE_CONSTRAINT,$/;"	e	enum:__anon27
LINE_LAST	.\ctags58\gnu_regex\regex_internal.h	/^  LINE_LAST = NEXT_NEWLINE_CONSTRAINT,$/;"	e	enum:__anon27
LN_DEBUG	.\ctags58\mk_manx.mak	/^LN_DEBUG =$/;"	m
LOptions	.\ctags58\mk_mpw.mak	/^LOptions	= -xm m -stacksize 128$/;"	m
LTYPE_COMMENT	.\ctags58\fortran.c	/^	LTYPE_COMMENT,$/;"	e	enum:eFortranLineType	file:
LTYPE_CONTINUATION	.\ctags58\fortran.c	/^	LTYPE_CONTINUATION,$/;"	e	enum:eFortranLineType	file:
LTYPE_EOF	.\ctags58\fortran.c	/^	LTYPE_EOF,$/;"	e	enum:eFortranLineType	file:
LTYPE_INITIAL	.\ctags58\fortran.c	/^	LTYPE_INITIAL,$/;"	e	enum:eFortranLineType	file:
LTYPE_INVALID	.\ctags58\fortran.c	/^	LTYPE_INVALID,$/;"	e	enum:eFortranLineType	file:
LTYPE_SHORT	.\ctags58\fortran.c	/^	LTYPE_SHORT$/;"	e	enum:eFortranLineType	file:
LTYPE_UNDETERMINED	.\ctags58\fortran.c	/^	LTYPE_UNDETERMINED,$/;"	e	enum:eFortranLineType	file:
LUB	.\vim73\tutor\tutor.pl	/^	     LUB:	    <ESC> :wq<ENTER>  by zmiany zachowaæ.$/;"	l
L_getit	.\ctags58\lisp.c	/^static void L_getit (vString *const name, const unsigned char *dbp)$/;"	f	file:	signature:(vString *const name, const unsigned char *dbp)
L_isdef	.\ctags58\lisp.c	/^static int L_isdef (const unsigned char *strp)$/;"	f	file:	signature:(const unsigned char *strp)
L_isquote	.\ctags58\lisp.c	/^static int L_isquote (const unsigned char *strp)$/;"	f	file:	signature:(const unsigned char *strp)
Lang_Ocaml	.\ctags58\ocaml.c	/^static langType Lang_Ocaml;$/;"	v	file:
Lang_asm	.\ctags58\asm.c	/^static langType Lang_asm;$/;"	v	file:
Lang_c	.\ctags58\c.c	/^static langType Lang_c;$/;"	v	file:
Lang_cpp	.\ctags58\c.c	/^static langType Lang_cpp;$/;"	v	file:
Lang_csharp	.\ctags58\c.c	/^static langType Lang_csharp;$/;"	v	file:
Lang_eiffel	.\ctags58\eiffel.c	/^static langType Lang_eiffel;$/;"	v	file:
Lang_fortran	.\ctags58\fortran.c	/^static langType Lang_fortran;$/;"	v	file:
Lang_java	.\ctags58\c.c	/^static langType Lang_java;$/;"	v	file:
Lang_js	.\ctags58\flex.c	/^static langType Lang_js;$/;"	v	file:
Lang_js	.\ctags58\jscript.c	/^static langType Lang_js;$/;"	v	file:
Lang_js	.\ctags58\tex.c	/^static langType Lang_js;$/;"	v	file:
Lang_sql	.\ctags58\sql.c	/^static langType Lang_sql;$/;"	v	file:
Lang_vera	.\ctags58\c.c	/^static langType Lang_vera;$/;"	v	file:
Lang_verilog	.\ctags58\verilog.c	/^static int Lang_verilog;$/;"	v	file:
Lang_vhdl	.\ctags58\vhdl.c	/^static int Lang_vhdl;$/;"	v	file:
LanguageCount	.\ctags58\parse.c	/^static unsigned int LanguageCount = 0;$/;"	v	file:
LanguageTable	.\ctags58\parse.c	/^static parserDefinition** LanguageTable = NULL;$/;"	v	file:
LeadingWhiteSpace	.\vim73\indent\objc.vim	/^function s:LeadingWhiteSpace(line)$/;"	f
License1	.\ctags58\options.c	/^static const char* const License1 =$/;"	v	file:
License2	.\ctags58\options.c	/^static const char* const License2 =$/;"	v	file:
Line	.\vim73\tools\ccfilter.c	/^char	       Line[LINELENGTH];$/;"	v
Line2	.\vim73\tools\ccfilter.c	/^char	       Line2[LINELENGTH];$/;"	v
LineHasOpeningBrackets	.\vim73\indent\ruby.vim	/^function s:LineHasOpeningBrackets(lnum)$/;"	f
LispKinds	.\ctags58\lisp.c	/^static kindOption LispKinds [] = {$/;"	v	file:
LispParser	.\ctags58\lisp.c	/^extern parserDefinition* LispParser (void)$/;"	f	signature:(void)
LoadBufferMenu	.\vim73\menu.vim	/^  augroup LoadBufferMenu$/;"	a
LoadFTPlugin	.\vim73\ftplugin.vim	/^  func! s:LoadFTPlugin()$/;"	f
LoadIndent	.\vim73\indent.vim	/^  func! s:LoadIndent()$/;"	f
LoadVimSesn	.\vim73\menu.vim	/^fun! s:LoadVimSesn()$/;"	f
Load_annotation	.\vim73\ftplugin\ocaml.vim	/^    function! s:Load_annotation()$/;"	f
LocalBrowse	.\vim73\plugin\netrwPlugin.vim	/^fun! s:LocalBrowse(dirname)$/;"	f
LocalBrowseShellCmdRefresh	.\vim73\autoload\netrw.vim	/^fun! s:LocalBrowseShellCmdRefresh()$/;"	f
LocalFastBrowser	.\vim73\autoload\netrw.vim	/^fun! s:LocalFastBrowser()$/;"	f
LocalListing	.\vim73\autoload\netrw.vim	/^fun! s:LocalListing()$/;"	f
LocalSearchDecl	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\items.vim	/^function! s:LocalSearchDecl(name)$/;"	f
Locate_annotation	.\vim73\ftplugin\ocaml.vim	/^  function! s:Locate_annotation()$/;"	f
LongOptionDescription	.\ctags58\options.c	/^static optionDescription LongOptionDescription [] = {$/;"	v	file:
LookupName	.\vim73\tools\xcmdsrv_client.c	/^LookupName(dpy, name, delete, loose)$/;"	f	file:
LookupName	.\vim73\tools\xcmdsrv_client.c	/^static Window	LookupName __ARGS((Display *dpy, char *name,$/;"	p	file:	signature:(Display *dpy, char *name, int delete, char **loose)
LuaKinds	.\ctags58\lua.c	/^static kindOption LuaKinds [] = {$/;"	v	file:
LuaParser	.\ctags58\lua.c	/^extern parserDefinition* LuaParser (void)$/;"	f	signature:(void)
M	.\vim73\macros\hanoi\hanoi.vim	/^map M dG$/;"	m
M	.\vim73\macros\maze\maze.c	/^char*M,A,Z,E=40,J[40],T[40];main(C){for(*J=A=scanf(M="%d",&C);$/;"	v
M	.\vim73\macros\maze\mazeansi.c	/^char*M,A,Z,E=40,J[80],T[3];main(C){for(M=J+E,*J=A=scanf("%d",&$/;"	v
M	.\vim73\macros\maze\mazeclean.c	/^char *M, A, Z, E = 40, line[80], T[3];$/;"	v
MACROS_USE_PATTERNS	.\ctags58\e_mac.h	20;"	d
MACROS_USE_PATTERNS	.\ctags58\e_riscos.h	20;"	d
MANUAL_GLOBBING	.\ctags58\e_msoft.h	20;"	d
MAX_PROP_WORDS	.\vim73\tools\xcmdsrv_client.c	67;"	d	file:
MB_CHAR	.\ctags58\gnu_regex\regex_internal.h	/^  MB_CHAR,$/;"	e	enum:__anon38
MOTIVATION	.\ctags58\ctags.html	/^<a name="MOTIVATION"><\/a>$/;"	a
MSDOS_STYLE_PATH	.\ctags58\e_djgpp.h	15;"	d
MSDOS_STYLE_PATH	.\ctags58\e_msoft.h	21;"	d
MainBlockIndent	.\vim73\indent\ada.vim	/^function s:MainBlockIndent (prev_indent, prev_lnum, blockstart, stop_at)$/;"	f
MakeKinds	.\ctags58\make.c	/^static kindOption MakeKinds [] = {$/;"	v	file:
MakeMenu	.\vim73\ftplugin\debchangelog.vim	/^function <SID>MakeMenu()$/;"	f
MakeSshCmd	.\vim73\autoload\netrw.vim	/^fun! s:MakeSshCmd(sshcmd)$/;"	f
MakeTag	.\vim73\tools\pltags.pl	/^sub MakeTag($$$$$)$/;"	s
MakefileParser	.\ctags58\make.c	/^extern parserDefinition* MakefileParser (void)$/;"	f	signature:(void)
Man	.\vim73\ftplugin\man.vim	/^  com -nargs=+ Man call s:GetPage(<f-args>)$/;"	c
MatLabParser	.\ctags58\matlab.c	/^extern parserDefinition* MatLabParser ()$/;"	f
Match	.\vim73\indent\ruby.vim	/^function s:Match(lnum, regex)$/;"	f
MatchCount	.\vim73\indent\pov.vim	/^function! s:MatchCount(line, rexp)$/;"	f
MatchDebug	.\vim73\macros\matchit.vim	/^  command! -nargs=0 MatchDebug call s:Match_debug()$/;"	c
MatchLast	.\vim73\indent\ruby.vim	/^function s:MatchLast(lnum, regex)$/;"	f
MatchWindow	.\vimfiles\bundle\command-t\ruby\command-t\match_window.rb	/^  class MatchWindow$/;"	c	class:CommandT
Match_borders	.\vim73\ftplugin\ocaml.vim	/^    function! s:Match_borders(mode)$/;"	f
Match_data	.\vim73\ftplugin\ocaml.vim	/^    function! s:Match_data()$/;"	f
Match_debug	.\vim73\macros\matchit.vim	/^fun! s:Match_debug()$/;"	f
Match_wrapper	.\vim73\macros\matchit.vim	/^function! s:Match_wrapper(word, forward, mode) range$/;"	f
MaxCppNestingLevel	.\ctags58\get.c	/^	MaxCppNestingLevel = 20,$/;"	e	enum:eCppLimits	file:
MaxDirectiveName	.\ctags58\get.c	/^	MaxDirectiveName = 10$/;"	e	enum:eCppLimits	file:
MaxHeaderExtensions	.\ctags58\options.c	/^	MaxHeaderExtensions	= 100,  \/* maximum number of extensions in -h option *\/$/;"	e	enum:eOptionLimits	file:
MaxSupportedTagFormat	.\ctags58\options.c	/^	MaxSupportedTagFormat = 2$/;"	e	enum:eOptionLimits	file:
McSetf	.\vim73\filetype.vim	/^func! s:McSetf()$/;"	f
MenuExplOpen	.\vim73\menu.vim	/^    fun MenuExplOpen()$/;"	f
MetaNextNonblankNoncomment	.\vim73\indent\mp.vim	/^function! MetaNextNonblankNoncomment(pos)$/;"	f
MetaPrevNonblankNoncomment	.\vim73\indent\mp.vim	/^function! MetaPrevNonblankNoncomment(pos)$/;"	f
MetaSearchNoncomment	.\vim73\indent\mp.vim	/^function! MetaSearchNoncomment(pattern, ...)$/;"	f
MkVimball	.\vim73\plugin\vimballPlugin.vim	/^com! -ra   -complete=file -na=+ -bang MkVimball call vimball#MkVimball(<line1>,<line2>,<bang>0,<f-args>)$/;"	c
ModuloIndent	.\vim73\indent\sqlanywhere.vim	/^function s:ModuloIndent(ind)$/;"	f
MultiMatch	.\vim73\macros\matchit.vim	/^fun! s:MultiMatch(spflag, mode)$/;"	f
N	.\vim73\macros\hanoi\hanoi.vim	/^map N yy$/;"	m
NAME	.\ctags58\ctags.html	/^<a name="NAME"><\/a>$/;"	a
NDEBUG	.\ctags58\debug.h	38;"	d
NEED_PROTO_FGETPOS	.\ctags58\e_msoft.h	64;"	d
NEED_PROTO_LSTAT	.\ctags58\e_djgpp.h	44;"	d
NEED_PROTO_TRUNCATE	.\ctags58\e_mac.h	24;"	d
NEWLINE	.\ctags58\read.h	/^	NEWLINE       = '\\n',$/;"	e	enum:eCharacters
NEWLINE_CHAR	.\ctags58\gnu_regex\regex_internal.h	111;"	d
NEXT_ENDBUF_CONSTRAINT	.\ctags58\gnu_regex\regex_internal.h	165;"	d
NEXT_NEWLINE_CONSTRAINT	.\ctags58\gnu_regex\regex_internal.h	163;"	d
NEXT_NOTWORD_CONSTRAINT	.\ctags58\gnu_regex\regex_internal.h	161;"	d
NEXT_WORD_CONSTRAINT	.\ctags58\gnu_regex\regex_internal.h	160;"	d
NFH_bmp	.\vim73\autoload\netrwFileHandlers.vim	/^fun! s:NFH_bmp(bmpfile)$/;"	f
NFH_doc	.\vim73\autoload\netrwFileHandlers.vim	/^fun! s:NFH_doc(doc)$/;"	f
NFH_eps	.\vim73\autoload\netrwFileHandlers.vim	/^fun! s:NFH_eps(eps)$/;"	f
NFH_fig	.\vim73\autoload\netrwFileHandlers.vim	/^fun! s:NFH_fig(fig)$/;"	f
NFH_gif	.\vim73\autoload\netrwFileHandlers.vim	/^fun! s:NFH_gif(giffile)$/;"	f
NFH_htm	.\vim73\autoload\netrwFileHandlers.vim	/^fun! s:NFH_htm(pagefile)$/;"	f
NFH_html	.\vim73\autoload\netrwFileHandlers.vim	/^fun! s:NFH_html(pagefile)$/;"	f
NFH_jpg	.\vim73\autoload\netrwFileHandlers.vim	/^fun! s:NFH_jpg(jpgfile)$/;"	f
NFH_obj	.\vim73\autoload\netrwFileHandlers.vim	/^fun! s:NFH_obj(obj)$/;"	f
NFH_pdf	.\vim73\autoload\netrwFileHandlers.vim	/^fun! s:NFH_pdf(pdf)$/;"	f
NFH_png	.\vim73\autoload\netrwFileHandlers.vim	/^fun! s:NFH_png(pngfile)$/;"	f
NFH_pnm	.\vim73\autoload\netrwFileHandlers.vim	/^fun! s:NFH_pnm(pnmfile)$/;"	f
NFH_ps	.\vim73\autoload\netrwFileHandlers.vim	/^fun! s:NFH_ps(ps)$/;"	f
NFH_sxw	.\vim73\autoload\netrwFileHandlers.vim	/^fun! s:NFH_sxw(sxw)$/;"	f
NFH_xls	.\vim73\autoload\netrwFileHandlers.vim	/^fun! s:NFH_xls(xls)$/;"	f
NON_CONST_PUTENV_PROTOTYPE	.\ctags58\e_qdos.h	32;"	d
NON_TYPE	.\ctags58\gnu_regex\regex_internal.h	/^  NON_TYPE = 0,$/;"	e	enum:__anon29
NOT_SATISFY_NEXT_CONSTRAINT	.\ctags58\gnu_regex\regex_internal.h	492;"	d
NOT_SATISFY_PREV_CONSTRAINT	.\ctags58\gnu_regex\regex_internal.h	486;"	d
NOT_WORD_DELIM	.\ctags58\gnu_regex\regex_internal.h	/^  NOT_WORD_DELIM = NOT_WORD_DELIM_CONSTRAINT$/;"	e	enum:__anon27
NOT_WORD_DELIM_CONSTRAINT	.\ctags58\gnu_regex\regex_internal.h	167;"	d
NeoComplCacheCachingBuffer	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache\buffer_complete.vim	/^      \\ NeoComplCacheCachingBuffer$/;"	c
NeoComplCacheCachingDictionary	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache\dictionary_complete.vim	/^      \\ NeoComplCacheCachingDictionary$/;"	c
NeoComplCacheCachingInclude	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache\include_complete.vim	/^command! -nargs=? -complete=buffer NeoComplCacheCachingInclude$/;"	c
NeoComplCacheCachingSyntax	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache\syntax_complete.vim	/^      \\ NeoComplCacheCachingSyntax$/;"	c
NeoComplCacheCachingTags	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache\tags_complete.vim	/^      \\ NeoComplCacheCachingTags$/;"	c
NeoComplCacheClean	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^command! -nargs=0 -bar NeoComplCacheClean$/;"	c
NeoComplCacheDisable	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^command! -nargs=0 -bar NeoComplCacheDisable$/;"	c
NeoComplCacheDisableCaching	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache\buffer_complete.vim	/^      \\ NeoComplCacheDisableCaching$/;"	c
NeoComplCacheEnable	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^command! -nargs=0 -bar NeoComplCacheEnable$/;"	c
NeoComplCacheEnableCaching	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache\buffer_complete.vim	/^      \\ NeoComplCacheEnableCaching$/;"	c
NeoComplCacheLock	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^command! -nargs=0 -bar NeoComplCacheLock$/;"	c
NeoComplCacheLockSource	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^command! -nargs=1 -bar NeoComplCacheLockSource$/;"	c
NeoComplCacheOutputKeyword	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache\buffer_complete.vim	/^      \\ NeoComplCacheOutputKeyword$/;"	c
NeoComplCachePrintSource	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache\buffer_complete.vim	/^      \\ NeoComplCachePrintSource$/;"	c
NeoComplCacheSetFileType	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^  command! -nargs=1 -bar -complete=filetype NeoComplCacheSetFileType$/;"	c
NeoComplCacheSetFileType	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^  command! -nargs=1 -bar NeoComplCacheSetFileType$/;"	c
NeoComplCacheToggle	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^command! -nargs=0 -bar NeoComplCacheToggle$/;"	c
NeoComplCacheUnlock	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^command! -nargs=0 -bar NeoComplCacheUnlock$/;"	c
NeoComplCacheUnlockSource	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^command! -nargs=1 -bar NeoComplCacheUnlockSource$/;"	c
NestingLevel	.\ctags58\python.c	/^struct NestingLevel$/;"	s	file:
NestingLevel	.\ctags58\python.c	/^typedef struct NestingLevel NestingLevel;$/;"	t	typeref:struct:NestingLevel	file:
NestingLevel::indentation	.\ctags58\python.c	/^	int indentation;$/;"	m	struct:NestingLevel	file:	access:public
NestingLevel::name	.\ctags58\python.c	/^	vString *name;$/;"	m	struct:NestingLevel	file:	access:public
NestingLevel::type	.\ctags58\python.c	/^	int type;$/;"	m	struct:NestingLevel	file:	access:public
NestingLevels	.\ctags58\python.c	/^struct NestingLevels$/;"	s	file:
NestingLevels	.\ctags58\python.c	/^typedef struct NestingLevels NestingLevels;$/;"	t	typeref:struct:NestingLevels	file:
NestingLevels::allocated	.\ctags58\python.c	/^	int allocated;$/;"	m	struct:NestingLevels	file:	access:public
NestingLevels::levels	.\ctags58\python.c	/^	NestingLevel *levels;$/;"	m	struct:NestingLevels	file:	access:public
NestingLevels::n	.\ctags58\python.c	/^	int n;					\/* number of levels in use *\/$/;"	m	struct:NestingLevels	file:	access:public
NetReadFixup	.\vim73\autoload\netrw.vim	/^ fun! NetReadFixup(method, line1, line2)$/;"	f
NetSortSequence	.\vim73\autoload\netrw.vim	/^fun! s:NetSortSequence(islocal)$/;"	f
NetUserPass	.\vim73\autoload\netrw.vim	/^fun! NetUserPass(...)$/;"	f
NetUserPass	.\vim73\plugin\netrwPlugin.vim	/^com! -nargs=*		NetUserPass	call NetUserPass(<f-args>)$/;"	c
NetUserPass	.\vim73\plugin\netrwPlugin.vim	/^fun! NetUserPass(...)$/;"	f
NetrwBMShow	.\vim73\autoload\netrw.vim	/^fun! s:NetrwBMShow()$/;"	f
NetrwBannerCtrl	.\vim73\autoload\netrw.vim	/^fun! s:NetrwBannerCtrl(islocal)$/;"	f
NetrwBookHistHandler	.\vim73\autoload\netrw.vim	/^fun! s:NetrwBookHistHandler(chg,curdir)$/;"	f
NetrwBookHistRead	.\vim73\autoload\netrw.vim	/^fun! s:NetrwBookHistRead()$/;"	f
NetrwBookHistSave	.\vim73\autoload\netrw.vim	/^fun! s:NetrwBookHistSave()$/;"	f
NetrwBookmarkMenu	.\vim73\autoload\netrw.vim	/^fun! s:NetrwBookmarkMenu()$/;"	f
NetrwBrowse	.\vim73\autoload\netrw.vim	/^fun! s:NetrwBrowse(islocal,dirname)$/;"	f
NetrwBrowseChgDir	.\vim73\autoload\netrw.vim	/^fun! s:NetrwBrowseChgDir(islocal,newdir,...)$/;"	f
NetrwChgPerm	.\vim73\autoload\netrw.vim	/^fun! s:NetrwChgPerm(islocal,curdir)$/;"	f
NetrwClean	.\vim73\plugin\netrwPlugin.vim	/^com! -bang	NetrwClean	call netrw#NetrwClean(<bang>0)$/;"	c
NetrwClearExplore	.\vim73\autoload\netrw.vim	/^fun! s:NetrwClearExplore()$/;"	f
NetrwCursorline	.\vim73\autoload\netrw.vim	/^fun! s:NetrwCursorline()$/;"	f
NetrwDelete	.\vim73\autoload\netrw.vim	/^fun! s:NetrwDelete(path)$/;"	f
NetrwEnew	.\vim73\autoload\netrw.vim	/^fun! s:NetrwEnew(...)$/;"	f
NetrwExploreListUniq	.\vim73\autoload\netrw.vim	/^fun! s:NetrwExploreListUniq(explist)$/;"	f
NetrwFileInfo	.\vim73\autoload\netrw.vim	/^fun! s:NetrwFileInfo(islocal,fname)$/;"	f
NetrwGetBuffer	.\vim73\autoload\netrw.vim	/^fun! s:NetrwGetBuffer(islocal,dirname)$/;"	f
NetrwGetFile	.\vim73\autoload\netrw.vim	/^fun! s:NetrwGetFile(readcmd, tfile, method)$/;"	f
NetrwGetWord	.\vim73\autoload\netrw.vim	/^fun! s:NetrwGetWord()$/;"	f
NetrwGetcwd	.\vim73\autoload\netrw.vim	/^fun! s:NetrwGetcwd(doesc)$/;"	f
NetrwHidden	.\vim73\autoload\netrw.vim	/^fun! s:NetrwHidden(islocal)$/;"	f
NetrwHide	.\vim73\autoload\netrw.vim	/^fun! s:NetrwHide(islocal)$/;"	f
NetrwHideEdit	.\vim73\autoload\netrw.vim	/^fun! s:NetrwHideEdit(islocal)$/;"	f
NetrwHome	.\vim73\autoload\netrw.vim	/^fun! s:NetrwHome()$/;"	f
NetrwInit	.\vim73\autoload\netrw.vim	/^fun s:NetrwInit(varname,value)$/;"	f
NetrwLeftmouse	.\vim73\autoload\netrw.vim	/^fun! s:NetrwLeftmouse(islocal)$/;"	f
NetrwListHide	.\vim73\autoload\netrw.vim	/^fun! s:NetrwListHide()$/;"	f
NetrwListSettings	.\vim73\autoload\netrw.vim	/^fun! s:NetrwListSettings(islocal)$/;"	f
NetrwListStyle	.\vim73\autoload\netrw.vim	/^fun! s:NetrwListStyle(islocal)$/;"	f
NetrwLocalRename	.\vim73\autoload\netrw.vim	/^fun! s:NetrwLocalRename(path) range$/;"	f
NetrwLocalRm	.\vim73\autoload\netrw.vim	/^fun! s:NetrwLocalRm(path) range$/;"	f
NetrwLocalRmFile	.\vim73\autoload\netrw.vim	/^fun! s:NetrwLocalRmFile(path,fname,all)$/;"	f
NetrwMakeDir	.\vim73\autoload\netrw.vim	/^fun! s:NetrwMakeDir(usrhost)$/;"	f
NetrwMarkFile	.\vim73\autoload\netrw.vim	/^fun! s:NetrwMarkFile(islocal,fname)$/;"	f
NetrwMarkFileCompress	.\vim73\autoload\netrw.vim	/^fun! s:NetrwMarkFileCompress(islocal)$/;"	f
NetrwMarkFileCopy	.\vim73\autoload\netrw.vim	/^fun! s:NetrwMarkFileCopy(islocal)$/;"	f
NetrwMarkFileDiff	.\vim73\autoload\netrw.vim	/^fun! s:NetrwMarkFileDiff(islocal)$/;"	f
NetrwMarkFileEdit	.\vim73\autoload\netrw.vim	/^fun! s:NetrwMarkFileEdit(islocal)$/;"	f
NetrwMarkFileExe	.\vim73\autoload\netrw.vim	/^fun! s:NetrwMarkFileExe(islocal)$/;"	f
NetrwMarkFileGrep	.\vim73\autoload\netrw.vim	/^fun! s:NetrwMarkFileGrep(islocal)$/;"	f
NetrwMarkFileMove	.\vim73\autoload\netrw.vim	/^fun! s:NetrwMarkFileMove(islocal)$/;"	f
NetrwMarkFilePrint	.\vim73\autoload\netrw.vim	/^fun! s:NetrwMarkFilePrint(islocal)$/;"	f
NetrwMarkFileRegexp	.\vim73\autoload\netrw.vim	/^fun! s:NetrwMarkFileRegexp(islocal)$/;"	f
NetrwMarkFileSource	.\vim73\autoload\netrw.vim	/^fun! s:NetrwMarkFileSource(islocal)$/;"	f
NetrwMarkFileTag	.\vim73\autoload\netrw.vim	/^fun! s:NetrwMarkFileTag(islocal)$/;"	f
NetrwMarkFileTgt	.\vim73\autoload\netrw.vim	/^fun! s:NetrwMarkFileTgt(islocal)$/;"	f
NetrwMarkHideSfx	.\vim73\autoload\netrw.vim	/^fun! s:NetrwMarkHideSfx(islocal)$/;"	f
NetrwMenu	.\vim73\autoload\netrw.vim	/^fun! s:NetrwMenu(domenu)$/;"	f
NetrwMethod	.\vim73\autoload\netrw.vim	/^fun! s:NetrwMethod(choice)$/;"	f
NetrwObtain	.\vim73\autoload\netrw.vim	/^fun! s:NetrwObtain(islocal)$/;"	f
NetrwOpenFile	.\vim73\autoload\netrw.vim	/^fun! s:NetrwOpenFile(islocal)$/;"	f
NetrwOptionRestore	.\vim73\autoload\netrw.vim	/^fun! s:NetrwOptionRestore(vt)$/;"	f
NetrwOptionSave	.\vim73\autoload\netrw.vim	/^fun! s:NetrwOptionSave(vt)$/;"	f
NetrwPrevWinOpen	.\vim73\autoload\netrw.vim	/^fun! s:NetrwPrevWinOpen(islocal)$/;"	f
NetrwPreview	.\vim73\autoload\netrw.vim	/^fun! s:NetrwPreview(path) range$/;"	f
NetrwRefresh	.\vim73\autoload\netrw.vim	/^fun! s:NetrwRefresh(islocal,dirname)$/;"	f
NetrwRefreshDir	.\vim73\autoload\netrw.vim	/^fun! s:NetrwRefreshDir(islocal,dirname)$/;"	f
NetrwRemoteFtpCmd	.\vim73\autoload\netrw.vim	/^fun! s:NetrwRemoteFtpCmd(path,listcmd)$/;"	f
NetrwRemoteListing	.\vim73\autoload\netrw.vim	/^fun! s:NetrwRemoteListing()$/;"	f
NetrwRemoteRename	.\vim73\autoload\netrw.vim	/^fun! s:NetrwRemoteRename(usrhost,path) range$/;"	f
NetrwRemoteRm	.\vim73\autoload\netrw.vim	/^fun! s:NetrwRemoteRm(usrhost,path) range$/;"	f
NetrwRemoteRmFile	.\vim73\autoload\netrw.vim	/^fun! s:NetrwRemoteRmFile(path,rmfile,all)$/;"	f
NetrwRestoreWordPosn	.\vim73\autoload\netrw.vim	/^fun! s:NetrwRestoreWordPosn()$/;"	f
NetrwRexplore	.\vim73\autoload\netrw.vim	/^fun! s:NetrwRexplore(islocal,dirname)$/;"	f
NetrwSafeOptions	.\vim73\autoload\netrw.vim	/^fun! s:NetrwSafeOptions()$/;"	f
NetrwSaveWordPosn	.\vim73\autoload\netrw.vim	/^fun! s:NetrwSaveWordPosn()$/;"	f
NetrwSetSort	.\vim73\autoload\netrw.vim	/^fun! s:NetrwSetSort()$/;"	f
NetrwSettingHelp	.\vim73\autoload\netrwSettings.vim	/^fun! NetrwSettingHelp()$/;"	f
NetrwSettings	.\vim73\plugin\netrwPlugin.vim	/^com! -nargs=0	NetrwSettings	call netrwSettings#NetrwSettings()$/;"	c
NetrwSortStyle	.\vim73\autoload\netrw.vim	/^fun! s:NetrwSortStyle(islocal)$/;"	f
NetrwSplit	.\vim73\autoload\netrw.vim	/^fun! s:NetrwSplit(mode)$/;"	f
NetrwStatusLine	.\vim73\autoload\netrw.vim	/^fun! NetrwStatusLine()$/;"	f
NetrwStatusLine	.\vim73\plugin\netrwPlugin.vim	/^fun! NetrwStatusLine()$/;"	f
NetrwTreeDir	.\vim73\autoload\netrw.vim	/^fun! s:NetrwTreeDir()$/;"	f
NetrwTreeDisplay	.\vim73\autoload\netrw.vim	/^fun! s:NetrwTreeDisplay(dir,depth)$/;"	f
NetrwTreeListing	.\vim73\autoload\netrw.vim	/^fun! s:NetrwTreeListing(dirname)$/;"	f
NetrwUnMarkFile	.\vim73\autoload\netrw.vim	/^fun! s:NetrwUnMarkFile(islocal)$/;"	f
NetrwUnmarkAll	.\vim73\autoload\netrw.vim	/^fun! s:NetrwUnmarkAll()$/;"	f
NetrwUnmarkAll2	.\vim73\autoload\netrw.vim	/^fun! s:NetrwUnmarkAll2()$/;"	f
NetrwUnmarkList	.\vim73\autoload\netrw.vim	/^fun! s:NetrwUnmarkList(curbufnr,curdir)$/;"	f
NetrwUpload	.\vim73\autoload\netrw.vim	/^fun! s:NetrwUpload(fname,tgt,...)$/;"	f
NetrwWideListing	.\vim73\autoload\netrw.vim	/^fun! s:NetrwWideListing()$/;"	f
Network	.\vim73\plugin\netrwPlugin.vim	/^augroup Network$/;"	a
NewChangelogEntry	.\vim73\ftplugin\changelog.vim	/^    command! -nargs=0 NewChangelogEntry call s:new_changelog_entry()$/;"	c
NewVersion	.\vim73\ftplugin\debchangelog.vim	/^function NewVersion()$/;"	f
Nexplore	.\vim73\plugin\netrwPlugin.vim	/^com! -nargs=* -bar -bang			Nexplore	call netrw#Explore(-1,0,0,<q-args>)$/;"	c
NextPage	.\vim73\macros\less.vim	/^fun! s:NextPage()$/;"	f
Nextitem	.\vim73\autoload\ccomplete.vim	/^function! s:Nextitem(lead, items, depth, all)$/;"	f
NoMatchParen	.\vim73\plugin\matchparen.vim	/^command! NoMatchParen windo 3match none | unlet! g:loaded_matchparen |$/;"	c
NonOptionEncountered	.\ctags58\options.c	/^static boolean NonOptionEncountered;$/;"	v	file:
Nosynonly	.\vim73\synmenu.vim	/^fun! s:Nosynonly()$/;"	f
Nread	.\vim73\plugin\netrwPlugin.vim	/^com! -count=1 -nargs=*	Nread		call netrw#NetrwSavePosn()<bar>call netrw#NetRead(<count>,<f-args>)<bar>call netrw#NetrwRestorePosn()$/;"	c
Nsource	.\vim73\plugin\netrwPlugin.vim	/^com! -nargs=*	        Nsource		call netrw#NetrwSavePosn()<bar>call netrw#NetSource(<f-args>)<bar>call netrw#NetrwRestorePosn()$/;"	c
NumTokens	.\ctags58\c.c	/^enum { NumTokens = 3 };$/;"	e	enum:__anon11	file:
Nwrite	.\vim73\plugin\netrwPlugin.vim	/^com! -range=% -nargs=*	Nwrite		call netrw#NetrwSavePosn()<bar><line1>,<line2>call netrw#NetWrite(<f-args>)<bar>call netrw#NetrwRestorePosn()$/;"	c
O	.\vim73\macros\hanoi\hanoi.vim	/^map O p$/;"	m
OBJ	.\ctags58\mk_mpw.mak	/^OBJ = ¶$/;"	m
OBJECTS	.\ctags58\mk_manx.mak	/^OBJECTS = \\$/;"	m
OBJECTS	.\ctags58\mk_qdos.mak	/^OBJECTS = qdos.$(OBJEXT) \\$/;"	m
OBJECTS	.\ctags58\mk_sas.mak	/^OBJECTS = \\$/;"	m
OBJECTS	.\ctags58\source.mak	/^OBJECTS = \\$/;"	m
OBJEXT	.\ctags58\mk_manx.mak	/^OBJEXT = o$/;"	m
OBJEXT	.\ctags58\mk_qdos.mak	/^OBJEXT = o$/;"	m
OBJEXT	.\ctags58\mk_sas.mak	/^OBJEXT = o$/;"	m
OCAML_MAX_STACK_SIZE	.\ctags58\ocaml.c	34;"	d	file:
OCaml_switch	.\vim73\ftplugin\ocaml.vim	/^  fun OCaml_switch(newwin)$/;"	f
OMLetFoldLevel	.\vim73\ftplugin\ocaml.vim	/^function OMLetFoldLevel(l)$/;"	f
OPERATIONAL DETAILS	.\ctags58\ctags.html	/^<a name="OPERATIONAL DETAILS"><\/a>$/;"	a
OPT	.\ctags58\mk_bc5.mak	/^OPT = -O2 -OS -lGt$/;"	m
OPT	.\ctags58\mk_mingw.mak	/^ctags.exe: OPT = -O4$/;"	m
OPT	.\ctags58\mk_mingw.mak	/^dctags.exe: OPT = -g$/;"	m
OPT	.\ctags58\mk_mvc.mak	/^OPT = \/O2$/;"	m
OPTIMIZE	.\ctags58\mk_bc3.mak	/^OPTIMIZE= -1- -O1$/;"	m
OPTIONS	.\ctags58\ctags.html	/^<a name="OPTIONS"><\/a>$/;"	a
OPTIONS	.\ctags58\mk_manx.mak	/^OPTIONS = -so$/;"	m
OPTION_LONG	.\ctags58\options.h	/^typedef enum { OPTION_NONE, OPTION_SHORT, OPTION_LONG } optionType;$/;"	e	enum:__anon55
OPTION_NONE	.\ctags58\options.h	/^typedef enum { OPTION_NONE, OPTION_SHORT, OPTION_LONG } optionType;$/;"	e	enum:__anon55
OPTION_SHORT	.\ctags58\options.h	/^typedef enum { OPTION_NONE, OPTION_SHORT, OPTION_LONG } optionType;$/;"	e	enum:__anon55
OPTION_WRITE	.\ctags58\options.c	25;"	d	file:
OPTION_WRITE	.\ctags58\parse.c	23;"	d	file:
OP_ALIGN	.\ctags58\asm.c	/^	OP_ALIGN,$/;"	e	enum:__anon4	file:
OP_ALT	.\ctags58\gnu_regex\regex_internal.h	/^  OP_ALT = EPSILON_BIT | 2,$/;"	e	enum:__anon29
OP_BACK_REF	.\ctags58\gnu_regex\regex_internal.h	/^  OP_BACK_REF = 4,$/;"	e	enum:__anon29
OP_CHARSET_RANGE	.\ctags58\gnu_regex\regex_internal.h	/^  OP_CHARSET_RANGE,$/;"	e	enum:__anon29
OP_CLOSE_BRACKET	.\ctags58\gnu_regex\regex_internal.h	/^  OP_CLOSE_BRACKET,$/;"	e	enum:__anon29
OP_CLOSE_CHAR_CLASS	.\ctags58\gnu_regex\regex_internal.h	/^  OP_CLOSE_CHAR_CLASS,$/;"	e	enum:__anon29
OP_CLOSE_COLL_ELEM	.\ctags58\gnu_regex\regex_internal.h	/^  OP_CLOSE_COLL_ELEM,$/;"	e	enum:__anon29
OP_CLOSE_DUP_NUM	.\ctags58\gnu_regex\regex_internal.h	/^  OP_CLOSE_DUP_NUM,$/;"	e	enum:__anon29
OP_CLOSE_EQUIV_CLASS	.\ctags58\gnu_regex\regex_internal.h	/^  OP_CLOSE_EQUIV_CLASS,$/;"	e	enum:__anon29
OP_CLOSE_SUBEXP	.\ctags58\gnu_regex\regex_internal.h	/^  OP_CLOSE_SUBEXP = EPSILON_BIT | 1,$/;"	e	enum:__anon29
OP_COLON_EQUAL	.\ctags58\asm.c	/^	OP_COLON_EQUAL,$/;"	e	enum:__anon4	file:
OP_DUP_ASTERISK	.\ctags58\gnu_regex\regex_internal.h	/^  OP_DUP_ASTERISK = EPSILON_BIT | 3,$/;"	e	enum:__anon29
OP_DUP_PLUS	.\ctags58\gnu_regex\regex_internal.h	/^  OP_DUP_PLUS = 18,$/;"	e	enum:__anon29
OP_DUP_QUESTION	.\ctags58\gnu_regex\regex_internal.h	/^  OP_DUP_QUESTION,$/;"	e	enum:__anon29
OP_END	.\ctags58\asm.c	/^	OP_END,$/;"	e	enum:__anon4	file:
OP_ENDM	.\ctags58\asm.c	/^	OP_ENDM,$/;"	e	enum:__anon4	file:
OP_ENDMACRO	.\ctags58\asm.c	/^	OP_ENDMACRO,$/;"	e	enum:__anon4	file:
OP_ENDP	.\ctags58\asm.c	/^	OP_ENDP,$/;"	e	enum:__anon4	file:
OP_ENDS	.\ctags58\asm.c	/^	OP_ENDS,$/;"	e	enum:__anon4	file:
OP_EQU	.\ctags58\asm.c	/^	OP_EQU,$/;"	e	enum:__anon4	file:
OP_EQUAL	.\ctags58\asm.c	/^	OP_EQUAL,$/;"	e	enum:__anon4	file:
OP_LABEL	.\ctags58\asm.c	/^	OP_LABEL,$/;"	e	enum:__anon4	file:
OP_LAST	.\ctags58\asm.c	/^	OP_LAST$/;"	e	enum:__anon4	file:
OP_MACRO	.\ctags58\asm.c	/^	OP_MACRO,$/;"	e	enum:__anon4	file:
OP_NON_MATCH_LIST	.\ctags58\gnu_regex\regex_internal.h	/^  OP_NON_MATCH_LIST,$/;"	e	enum:__anon29
OP_NOTSPACE	.\ctags58\gnu_regex\regex_internal.h	/^  OP_NOTSPACE,$/;"	e	enum:__anon29
OP_NOTWORD	.\ctags58\gnu_regex\regex_internal.h	/^  OP_NOTWORD,$/;"	e	enum:__anon29
OP_OPEN_BRACKET	.\ctags58\gnu_regex\regex_internal.h	/^  OP_OPEN_BRACKET,$/;"	e	enum:__anon29
OP_OPEN_CHAR_CLASS	.\ctags58\gnu_regex\regex_internal.h	/^  OP_OPEN_CHAR_CLASS,$/;"	e	enum:__anon29
OP_OPEN_COLL_ELEM	.\ctags58\gnu_regex\regex_internal.h	/^  OP_OPEN_COLL_ELEM,$/;"	e	enum:__anon29
OP_OPEN_DUP_NUM	.\ctags58\gnu_regex\regex_internal.h	/^  OP_OPEN_DUP_NUM,$/;"	e	enum:__anon29
OP_OPEN_EQUIV_CLASS	.\ctags58\gnu_regex\regex_internal.h	/^  OP_OPEN_EQUIV_CLASS,$/;"	e	enum:__anon29
OP_OPEN_SUBEXP	.\ctags58\gnu_regex\regex_internal.h	/^  OP_OPEN_SUBEXP = EPSILON_BIT | 0,$/;"	e	enum:__anon29
OP_PERIOD	.\ctags58\gnu_regex\regex_internal.h	/^  OP_PERIOD = 5,$/;"	e	enum:__anon29
OP_PROC	.\ctags58\asm.c	/^	OP_PROC,$/;"	e	enum:__anon4	file:
OP_RECORD	.\ctags58\asm.c	/^	OP_RECORD,$/;"	e	enum:__anon4	file:
OP_SECTIONS	.\ctags58\asm.c	/^	OP_SECTIONS,$/;"	e	enum:__anon4	file:
OP_SET	.\ctags58\asm.c	/^	OP_SET,$/;"	e	enum:__anon4	file:
OP_SPACE	.\ctags58\gnu_regex\regex_internal.h	/^  OP_SPACE,$/;"	e	enum:__anon29
OP_STRUCT	.\ctags58\asm.c	/^	OP_STRUCT,$/;"	e	enum:__anon4	file:
OP_UNDEFINED	.\ctags58\asm.c	/^	OP_UNDEFINED = -1,$/;"	e	enum:__anon4	file:
OP_UTF8_PERIOD	.\ctags58\gnu_regex\regex_internal.h	/^  OP_UTF8_PERIOD = 7,$/;"	e	enum:__anon29
OP_WORD	.\ctags58\gnu_regex\regex_internal.h	/^  OP_WORD,$/;"	e	enum:__anon29
OUTPUT_PATH_SEPARATOR	.\ctags58\routines.h	40;"	d
OUTPUT_PATH_SEPARATOR	.\ctags58\routines.h	42;"	d
O_RDWR	.\ctags58\entry.c	71;"	d	file:
OcaIDENTIFIER	.\ctags58\ocaml.c	/^	OcaIDENTIFIER,$/;"	e	enum:__anon52	file:
OcaKEYWORD_and	.\ctags58\ocaml.c	/^	OcaKEYWORD_and,$/;"	e	enum:__anon52	file:
OcaKEYWORD_begin	.\ctags58\ocaml.c	/^	OcaKEYWORD_begin,$/;"	e	enum:__anon52	file:
OcaKEYWORD_class	.\ctags58\ocaml.c	/^	OcaKEYWORD_class,$/;"	e	enum:__anon52	file:
OcaKEYWORD_do	.\ctags58\ocaml.c	/^	OcaKEYWORD_do,$/;"	e	enum:__anon52	file:
OcaKEYWORD_done	.\ctags58\ocaml.c	/^	OcaKEYWORD_done,$/;"	e	enum:__anon52	file:
OcaKEYWORD_else	.\ctags58\ocaml.c	/^	OcaKEYWORD_else,$/;"	e	enum:__anon52	file:
OcaKEYWORD_end	.\ctags58\ocaml.c	/^	OcaKEYWORD_end,$/;"	e	enum:__anon52	file:
OcaKEYWORD_exception	.\ctags58\ocaml.c	/^	OcaKEYWORD_exception,$/;"	e	enum:__anon52	file:
OcaKEYWORD_for	.\ctags58\ocaml.c	/^	OcaKEYWORD_for,$/;"	e	enum:__anon52	file:
OcaKEYWORD_fun	.\ctags58\ocaml.c	/^	OcaKEYWORD_fun,$/;"	e	enum:__anon52	file:
OcaKEYWORD_functor	.\ctags58\ocaml.c	/^	OcaKEYWORD_functor,$/;"	e	enum:__anon52	file:
OcaKEYWORD_if	.\ctags58\ocaml.c	/^	OcaKEYWORD_if,$/;"	e	enum:__anon52	file:
OcaKEYWORD_in	.\ctags58\ocaml.c	/^	OcaKEYWORD_in,$/;"	e	enum:__anon52	file:
OcaKEYWORD_let	.\ctags58\ocaml.c	/^	OcaKEYWORD_let,$/;"	e	enum:__anon52	file:
OcaKEYWORD_match	.\ctags58\ocaml.c	/^	OcaKEYWORD_match,$/;"	e	enum:__anon52	file:
OcaKEYWORD_method	.\ctags58\ocaml.c	/^	OcaKEYWORD_method,$/;"	e	enum:__anon52	file:
OcaKEYWORD_module	.\ctags58\ocaml.c	/^	OcaKEYWORD_module,$/;"	e	enum:__anon52	file:
OcaKEYWORD_mutable	.\ctags58\ocaml.c	/^	OcaKEYWORD_mutable,$/;"	e	enum:__anon52	file:
OcaKEYWORD_object	.\ctags58\ocaml.c	/^	OcaKEYWORD_object,$/;"	e	enum:__anon52	file:
OcaKEYWORD_of	.\ctags58\ocaml.c	/^	OcaKEYWORD_of,$/;"	e	enum:__anon52	file:
OcaKEYWORD_rec	.\ctags58\ocaml.c	/^	OcaKEYWORD_rec,$/;"	e	enum:__anon52	file:
OcaKEYWORD_sig	.\ctags58\ocaml.c	/^	OcaKEYWORD_sig,$/;"	e	enum:__anon52	file:
OcaKEYWORD_struct	.\ctags58\ocaml.c	/^	OcaKEYWORD_struct,$/;"	e	enum:__anon52	file:
OcaKEYWORD_then	.\ctags58\ocaml.c	/^	OcaKEYWORD_then,$/;"	e	enum:__anon52	file:
OcaKEYWORD_try	.\ctags58\ocaml.c	/^	OcaKEYWORD_try,$/;"	e	enum:__anon52	file:
OcaKEYWORD_type	.\ctags58\ocaml.c	/^	OcaKEYWORD_type,$/;"	e	enum:__anon52	file:
OcaKEYWORD_val	.\ctags58\ocaml.c	/^	OcaKEYWORD_val,$/;"	e	enum:__anon52	file:
OcaKEYWORD_virtual	.\ctags58\ocaml.c	/^	OcaKEYWORD_virtual,$/;"	e	enum:__anon52	file:
OcaKEYWORD_while	.\ctags58\ocaml.c	/^	OcaKEYWORD_while,$/;"	e	enum:__anon52	file:
OcaKEYWORD_with	.\ctags58\ocaml.c	/^	OcaKEYWORD_with,$/;"	e	enum:__anon52	file:
OcamlKeywordTable	.\ctags58\ocaml.c	/^static const ocaKeywordDesc OcamlKeywordTable[] = {$/;"	v	file:
OcamlKinds	.\ctags58\ocaml.c	/^static kindOption OcamlKinds[] = {$/;"	v	file:
OcamlParser	.\ctags58\ocaml.c	/^extern parserDefinition *OcamlParser (void)$/;"	f	signature:(void)
Ocaml_get_type	.\vim73\ftplugin\ocaml.vim	/^      function Ocaml_get_type(mode)$/;"	f
Ocaml_get_type_or_not	.\vim73\ftplugin\ocaml.vim	/^      function Ocaml_get_type_or_not(mode)$/;"	f
Ocaml_print_type	.\vim73\ftplugin\ocaml.vim	/^      function Ocaml_print_type(mode)$/;"	f
OmniSyntaxList	.\vim73\autoload\syntaxcomplete.vim	/^function! OmniSyntaxList(...)$/;"	f
OpKinds	.\ctags58\asm.c	/^static const opKind OpKinds [] = {$/;"	v	file:
Option	.\ctags58\options.c	/^optionValues Option = {$/;"	v
OptionFiles	.\ctags58\options.c	/^static stringList *OptionFiles;$/;"	v	file:
OptionG	.\vim73\optwin.vim	/^fun! <SID>OptionG(name, val)$/;"	f
OptionL	.\vim73\optwin.vim	/^fun! <SID>OptionL(name)$/;"	f
P	.\ctags58\mk_qdos.mak	/^P = drv1_C68_$/;"	m
P	.\vim73\macros\hanoi\hanoi.vim	/^map P p$/;"	m
PARSER_LIST	.\ctags58\parsers.h	18;"	d
PATH_MAX	.\ctags58\e_mac.h	104;"	d
PATH_MAX	.\ctags58\routines.c	130;"	d	file:
PATH_MAX	.\ctags58\routines.c	132;"	d	file:
PATH_MAX	.\ctags58\routines.c	142;"	d	file:
PATH_SEPARATOR	.\ctags58\routines.h	31;"	d
PATH_SEPARATOR	.\ctags58\routines.h	33;"	d
PATH_SEPARATOR	.\ctags58\routines.h	35;"	d
PATTERN_START	.\ctags58\options.c	48;"	d	file:
PATTERN_STOP	.\ctags58\options.c	49;"	d	file:
PERROR	.\ctags58\routines.h	/^enum eErrorTypes { FATAL = 1, WARNING = 2, PERROR = 4 };$/;"	e	enum:eErrorTypes
PE_CONST	.\ctags58\sort.c	51;"	d	file:
PE_CONST	.\ctags58\sort.c	53;"	d	file:
POSIX_REGEX	.\ctags58\lregex.c	48;"	d	file:
POSSIBLE_ATTRIBUTES	.\ctags58\html.c	25;"	d	file:
PREV_BEGBUF_CONSTRAINT	.\ctags58\gnu_regex\regex_internal.h	164;"	d
PREV_NEWLINE_CONSTRAINT	.\ctags58\gnu_regex\regex_internal.h	162;"	d
PREV_NOTWORD_CONSTRAINT	.\ctags58\gnu_regex\regex_internal.h	159;"	d
PREV_WORD_CONSTRAINT	.\ctags58\gnu_regex\regex_internal.h	158;"	d
PROGRAM_COPYRIGHT	.\ctags58\ctags.h	22;"	d
PROGRAM_NAME	.\ctags58\ctags.h	20;"	d
PROGRAM_URL	.\ctags58\ctags.h	21;"	d
PROGRAM_VERSION	.\ctags58\ctags.h	18;"	d
PSEUDO_TAG_PREFIX	.\ctags58\entry.c	54;"	d	file:
PTRN_CALLBACK	.\ctags58\lregex.c	/^enum pType { PTRN_TAG, PTRN_CALLBACK };$/;"	e	enum:pType	file:
PTRN_TAG	.\ctags58\lregex.c	/^enum pType { PTRN_TAG, PTRN_CALLBACK };$/;"	e	enum:pType	file:
PTvalue	.\vim73\optwin.vim	/^fun! <SID>PTvalue()$/;"	f
PackageName	.\vim73\tools\pltags.pl	/^sub PackageName($)$/;"	s
ParametricOptions	.\ctags58\options.c	/^static parametricOption ParametricOptions [] = {$/;"	v	file:
Parent	.\ctags58\fortran.c	/^static tokenInfo *Parent;$/;"	v	file:
ParmSub.If	.\vim73\macros\shellmenu.vim	/^imenu ParmSub.If parm not set print word and exit ${:?}hhi$/;"	m
ParmSub.Set	.\vim73\macros\shellmenu.vim	/^imenu ParmSub.Set parm to word if not set ${:=}hhi$/;"	m
ParmSub.Substitute	.\vim73\macros\shellmenu.vim	/^imenu ParmSub.Substitute word if parm not set ${:-}hhi$/;"	m
ParmSub.Substitute	.\vim73\macros\shellmenu.vim	/^imenu ParmSub.Substitute word if parm set else nothing ${:+}hhi$/;"	m
ParseDataToProps	.\vim73\tools\unicode.vim	/^func! ParseDataToProps()$/;"	f
ParseFoldProps	.\vim73\tools\unicode.vim	/^func! ParseFoldProps()$/;"	f
ParseRpmVars	.\vim73\ftplugin\spec.vim	/^    function s:ParseRpmVars(str, strline)$/;"	f
ParseSkip	.\vim73\macros\matchit.vim	/^fun! s:ParseSkip(str)$/;"	f
ParseTagline	.\vim73\autoload\ccomplete.vim	/^function! s:ParseTagline(line)$/;"	f
ParseWidthProps	.\vim73\tools\unicode.vim	/^func! ParseWidthProps()$/;"	f
ParseWords	.\vim73\macros\matchit.vim	/^fun! s:ParseWords(groups)$/;"	f
ParsingString	.\ctags58\fortran.c	/^static boolean ParsingString;$/;"	v	file:
PascalKinds	.\ctags58\pascal.c	/^static kindOption PascalKinds [] = {$/;"	v	file:
PascalParser	.\ctags58\pascal.c	/^extern parserDefinition* PascalParser (void)$/;"	f	signature:(void)
PathDelimiters	.\ctags58\routines.c	/^const char *const PathDelimiters = ":\/\\\\";$/;"	v
PathDelimiters	.\ctags58\routines.c	/^const char *const PathDelimiters = ":]>";$/;"	v
PathUtilities	.\vimfiles\bundle\command-t\ruby\command-t\vim\path_utilities.rb	/^    module PathUtilities$/;"	m	class:CommandT.VIM
Peekstack	.\vim73\autoload\xmlcomplete.vim	/^function! s:Peekstack(sname)$/;"	f
PerformListing	.\vim73\autoload\netrw.vim	/^fun! s:PerformListing(islocal)$/;"	f
PerlKinds	.\ctags58\perl.c	/^static kindOption PerlKinds [] = {$/;"	v	file:
PerlParser	.\ctags58\perl.c	/^extern parserDefinition* PerlParser (void)$/;"	f	signature:(void)
Pexplore	.\vim73\plugin\netrwPlugin.vim	/^com! -nargs=* -bar -bang			Pexplore	call netrw#Explore(-2,0,0,<q-args>)$/;"	c
PhpParser	.\ctags58\php.c	/^extern parserDefinition* PhpParser (void)$/;"	f	signature:(void)
Pick	.\vim73\ftplugin\gitrebase.vim	/^command! -buffer -bar Pick   :call s:choose('pick')$/;"	c
Pop	.\vim73\autoload\xmlcomplete.vim	/^function! s:Pop(sname)$/;"	f
PopPage	.\vim73\ftplugin\man.vim	/^func <SID>PopPage()$/;"	f
PopupmenuExists	.\vimfiles\bundle\tlib_vim\autoload\tlib\input.vim	/^function s:PopupmenuExists()$/;"	f
PostscrIndentGet	.\vim73\indent\postscr.vim	/^function! PostscrIndentGet(lnum)$/;"	f
PreGetPage	.\vim73\ftplugin\man.vim	/^func <SID>PreGetPage(cnt)$/;"	f
PrevNonBlankNonString	.\vim73\indent\ruby.vim	/^function s:PrevNonBlankNonString(lnum)$/;"	f
PrintClass	.\ctags58\eiffel.c	/^static int PrintClass;$/;"	v	file:
PrintFormat	.\vimfiles\bundle\tlib_vim\autoload\tlib\string.vim	/^function! s:PrintFormat(format, string) "{{{3$/;"	f
PrintMe	.\vimfiles\bundle\tlib_vim\samples\tlib\input\tlib_input_list.vim	/^function! PrintMe(state, items) "{{{3$/;"	f
PrintReferences	.\ctags58\eiffel.c	/^static int PrintReferences;$/;"	v	file:
PrintStatus	.\ctags58\debug.h	31;"	d
PrintStatus	.\ctags58\debug.h	35;"	d
ProcessSnippet	.\vimfiles\bundle\vim-snipmate\autoload\snipMate.vim	/^fun! s:ProcessSnippet(snip)$/;"	f
ProgramName	.\ctags58\readtags.c	/^static const char *ProgramName;$/;"	v	file:
ProgressBar	.\vim73\syntax\2html.vim	/^  func! s:ProgressBar(title, max_value, winnr)$/;"	f
Prompt	.\vimfiles\bundle\command-t\ruby\command-t\prompt.rb	/^  class Prompt$/;"	c	class:CommandT
ProtoCheck	.\vim73\filetype.vim	/^func! s:ProtoCheck(default)$/;"	f
PseudoTagPrefix	.\ctags58\readtags.c	/^const char *const PseudoTagPrefix = "!_";$/;"	v
PurgeTimestamp	.\vimfiles\bundle\tlib_vim\autoload\tlib\cache.vim	/^function! s:PurgeTimestamp(dir) "{{{3$/;"	f
Push	.\vim73\autoload\xmlcomplete.vim	/^function! s:Push(el, sname)$/;"	f
PythonKinds	.\ctags58\python.c	/^static kindOption PythonKinds[] = {$/;"	v	file:
PythonParser	.\ctags58\python.c	/^extern parserDefinition *PythonParser (void)$/;"	f	signature:(void)
Python_jump	.\vim73\ftplugin\python.vim	/^fun! <SID>Python_jump(motion) range$/;"	f
Q	.\vim73\evim.vim	/^map Q gq$/;"	m
Q	.\vim73\macros\hanoi\hanoi.vim	/^map Q 0iT$/;"	m
Q	.\vim73\vimrc_example.vim	/^map Q gq$/;"	m
R	.\vim73\macros\hanoi\hanoi.vim	/^map R $rn$/;"	m
R	.\vim73\macros\less.vim	/^noremap <script> R <C-L><SID>L$/;"	m
R	.\vim73\macros\life\life.vim	/^map R CV$/;"	m
RARRAY_LEN	.\vimfiles\bundle\command-t\ruby\command-t\ruby_compat.h	43;"	d
RARRAY_PTR	.\vimfiles\bundle\command-t\ruby\command-t\ruby_compat.h	38;"	d
READTAGS_H	.\ctags58\readtags.h	22;"	d
RECURSE_SUPPORTED	.\ctags58\options.c	57;"	d	file:
REGEX_DEFINE	.\ctags58\mk_bc5.mak	/^REGEX_DEFINE = -DHAVE_REGCOMP -DREGEX_MALLOC -DSTDC_HEADERS=1$/;"	m
REGEX_DEFINES	.\ctags58\mk_mingw.mak	/^REGEX_DEFINES = -DHAVE_REGCOMP -D__USE_GNU -Dbool=int -Dfalse=0 -Dtrue=1 -Dstrcasecmp=stricmp$/;"	m
REGEX_DEFINES	.\ctags58\mk_mvc.mak	/^REGEX_DEFINES = -DHAVE_REGCOMP -D__USE_GNU -Dbool=int -Dfalse=0 -Dtrue=1 -Dstrcasecmp=stricmp$/;"	m
REGEX_HEADERS	.\ctags58\source.mak	/^REGEX_HEADERS = gnu_regex\/regex.h$/;"	m
REGEX_NAME	.\ctags58\lregex.c	51;"	d	file:
REGEX_SOURCES	.\ctags58\source.mak	/^REGEX_SOURCES = gnu_regex\/regex.c$/;"	m
REGS_FIXED	.\ctags58\gnu_regex\regex.h	399;"	d
REGS_REALLOCATE	.\ctags58\gnu_regex\regex.h	398;"	d
REGS_UNALLOCATED	.\ctags58\gnu_regex\regex.h	397;"	d
REG_BADBR	.\ctags58\gnu_regex\regex.h	/^  REG_BADBR,		\/* Invalid contents of \\{\\}.  *\/$/;"	e	enum:__anon25
REG_BADBR_IDX	.\ctags58\gnu_regex\regcomp.c	162;"	d	file:
REG_BADPAT	.\ctags58\gnu_regex\regex.h	/^  REG_BADPAT,		\/* Invalid pattern.  *\/$/;"	e	enum:__anon25
REG_BADPAT_IDX	.\ctags58\gnu_regex\regcomp.c	138;"	d	file:
REG_BADRPT	.\ctags58\gnu_regex\regex.h	/^  REG_BADRPT,		\/* No preceding re for repetition op.  *\/$/;"	e	enum:__anon25
REG_BADRPT_IDX	.\ctags58\gnu_regex\regcomp.c	171;"	d	file:
REG_EBRACE	.\ctags58\gnu_regex\regex.h	/^  REG_EBRACE,		\/* Unmatched \\{.  *\/$/;"	e	enum:__anon25
REG_EBRACE_IDX	.\ctags58\gnu_regex\regcomp.c	159;"	d	file:
REG_EBRACK	.\ctags58\gnu_regex\regex.h	/^  REG_EBRACK,		\/* Unmatched left bracket.  *\/$/;"	e	enum:__anon25
REG_EBRACK_IDX	.\ctags58\gnu_regex\regcomp.c	153;"	d	file:
REG_ECOLLATE	.\ctags58\gnu_regex\regex.h	/^  REG_ECOLLATE,		\/* Inalid collating element.  *\/$/;"	e	enum:__anon25
REG_ECOLLATE_IDX	.\ctags58\gnu_regex\regcomp.c	141;"	d	file:
REG_ECTYPE	.\ctags58\gnu_regex\regex.h	/^  REG_ECTYPE,		\/* Invalid character class name.  *\/$/;"	e	enum:__anon25
REG_ECTYPE_IDX	.\ctags58\gnu_regex\regcomp.c	144;"	d	file:
REG_EEND	.\ctags58\gnu_regex\regex.h	/^  REG_EEND,		\/* Premature end.  *\/$/;"	e	enum:__anon25
REG_EEND_IDX	.\ctags58\gnu_regex\regcomp.c	174;"	d	file:
REG_EESCAPE	.\ctags58\gnu_regex\regex.h	/^  REG_EESCAPE,		\/* Trailing backslash.  *\/$/;"	e	enum:__anon25
REG_EESCAPE_IDX	.\ctags58\gnu_regex\regcomp.c	147;"	d	file:
REG_ENOSYS	.\ctags58\gnu_regex\regex.h	/^  REG_ENOSYS = -1,	\/* This will never happen for this implementation.  *\/$/;"	e	enum:__anon25
REG_EPAREN	.\ctags58\gnu_regex\regex.h	/^  REG_EPAREN,		\/* Parenthesis imbalance.  *\/$/;"	e	enum:__anon25
REG_EPAREN_IDX	.\ctags58\gnu_regex\regcomp.c	156;"	d	file:
REG_ERANGE	.\ctags58\gnu_regex\regex.h	/^  REG_ERANGE,		\/* Invalid range end.  *\/$/;"	e	enum:__anon25
REG_ERANGE_IDX	.\ctags58\gnu_regex\regcomp.c	165;"	d	file:
REG_ERPAREN	.\ctags58\gnu_regex\regex.h	/^  REG_ERPAREN		\/* Unmatched ) or \\); not returned from regcomp.  *\/$/;"	e	enum:__anon25
REG_ERPAREN_IDX	.\ctags58\gnu_regex\regcomp.c	180;"	d	file:
REG_ESIZE	.\ctags58\gnu_regex\regex.h	/^  REG_ESIZE,		\/* Compiled pattern bigger than 2^16 bytes.  *\/$/;"	e	enum:__anon25
REG_ESIZE_IDX	.\ctags58\gnu_regex\regcomp.c	177;"	d	file:
REG_ESPACE	.\ctags58\gnu_regex\regex.h	/^  REG_ESPACE,		\/* Ran out of memory.  *\/$/;"	e	enum:__anon25
REG_ESPACE_IDX	.\ctags58\gnu_regex\regcomp.c	168;"	d	file:
REG_ESUBREG	.\ctags58\gnu_regex\regex.h	/^  REG_ESUBREG,		\/* Invalid back reference.  *\/$/;"	e	enum:__anon25
REG_ESUBREG_IDX	.\ctags58\gnu_regex\regcomp.c	150;"	d	file:
REG_EXTENDED	.\ctags58\gnu_regex\regex.h	272;"	d
REG_ICASE	.\ctags58\gnu_regex\regex.h	276;"	d
REG_NEWLINE	.\ctags58\gnu_regex\regex.h	281;"	d
REG_NOERROR	.\ctags58\gnu_regex\regex.h	/^  REG_NOERROR = 0,	\/* Success.  *\/$/;"	e	enum:__anon25
REG_NOERROR_IDX	.\ctags58\gnu_regex\regcomp.c	132;"	d	file:
REG_NOMATCH	.\ctags58\gnu_regex\regex.h	/^  REG_NOMATCH,		\/* Didn't find a match (for regexec).  *\/$/;"	e	enum:__anon25
REG_NOMATCH_IDX	.\ctags58\gnu_regex\regcomp.c	135;"	d	file:
REG_NOSUB	.\ctags58\gnu_regex\regex.h	285;"	d
REG_NOTBOL	.\ctags58\gnu_regex\regex.h	295;"	d
REG_NOTEOL	.\ctags58\gnu_regex\regex.h	298;"	d
REG_STARTEND	.\ctags58\gnu_regex\regex.h	302;"	d
RE_BACKSLASH_ESCAPE_IN_LISTS	.\ctags58\gnu_regex\regex.h	49;"	d
RE_BK_PLUS_QM	.\ctags58\gnu_regex\regex.h	54;"	d
RE_CARET_ANCHORS_HERE	.\ctags58\gnu_regex\regex.h	168;"	d
RE_CHAR_CLASSES	.\ctags58\gnu_regex\regex.h	60;"	d
RE_CONTEXT_INDEP_ANCHORS	.\ctags58\gnu_regex\regex.h	74;"	d
RE_CONTEXT_INDEP_OPS	.\ctags58\gnu_regex\regex.h	82;"	d
RE_CONTEXT_INVALID_DUP	.\ctags58\gnu_regex\regex.h	172;"	d
RE_CONTEXT_INVALID_OPS	.\ctags58\gnu_regex\regex.h	86;"	d
RE_DEBUG	.\ctags58\gnu_regex\regex.h	154;"	d
RE_DOT_NEWLINE	.\ctags58\gnu_regex\regex.h	90;"	d
RE_DOT_NOT_NULL	.\ctags58\gnu_regex\regex.h	94;"	d
RE_DUP_MAX	.\ctags58\gnu_regex\regex.h	261;"	d
RE_DUP_MAX	.\ctags58\gnu_regex\regex.h	264;"	d
RE_ENABLE_I18N	.\ctags58\gnu_regex\regex_internal.h	95;"	d
RE_HAT_LISTS_NOT_NEWLINE	.\ctags58\gnu_regex\regex.h	98;"	d
RE_ICASE	.\ctags58\gnu_regex\regex.h	163;"	d
RE_INTERVALS	.\ctags58\gnu_regex\regex.h	103;"	d
RE_INVALID_INTERVAL_ORD	.\ctags58\gnu_regex\regex.h	159;"	d
RE_LIMITED_OPS	.\ctags58\gnu_regex\regex.h	107;"	d
RE_NEWLINE_ALT	.\ctags58\gnu_regex\regex.h	111;"	d
RE_NO_BK_BRACES	.\ctags58\gnu_regex\regex.h	116;"	d
RE_NO_BK_PARENS	.\ctags58\gnu_regex\regex.h	120;"	d
RE_NO_BK_REFS	.\ctags58\gnu_regex\regex.h	124;"	d
RE_NO_BK_VBAR	.\ctags58\gnu_regex\regex.h	128;"	d
RE_NO_EMPTY_RANGES	.\ctags58\gnu_regex\regex.h	134;"	d
RE_NO_GNU_OPS	.\ctags58\gnu_regex\regex.h	146;"	d
RE_NO_POSIX_BACKTRACKING	.\ctags58\gnu_regex\regex.h	142;"	d
RE_NO_SUB	.\ctags58\gnu_regex\regex.h	176;"	d
RE_NREGS	.\ctags58\gnu_regex\regex.h	443;"	d
RE_SYNTAX_AWK	.\ctags58\gnu_regex\regex.h	192;"	d
RE_SYNTAX_ED	.\ctags58\gnu_regex\regex.h	224;"	d
RE_SYNTAX_EGREP	.\ctags58\gnu_regex\regex.h	213;"	d
RE_SYNTAX_EMACS	.\ctags58\gnu_regex\regex.h	190;"	d
RE_SYNTAX_GNU_AWK	.\ctags58\gnu_regex\regex.h	199;"	d
RE_SYNTAX_GREP	.\ctags58\gnu_regex\regex.h	208;"	d
RE_SYNTAX_POSIX_AWK	.\ctags58\gnu_regex\regex.h	204;"	d
RE_SYNTAX_POSIX_BASIC	.\ctags58\gnu_regex\regex.h	233;"	d
RE_SYNTAX_POSIX_EGREP	.\ctags58\gnu_regex\regex.h	219;"	d
RE_SYNTAX_POSIX_EXTENDED	.\ctags58\gnu_regex\regex.h	242;"	d
RE_SYNTAX_POSIX_MINIMAL_BASIC	.\ctags58\gnu_regex\regex.h	239;"	d
RE_SYNTAX_POSIX_MINIMAL_EXTENDED	.\ctags58\gnu_regex\regex.h	250;"	d
RE_SYNTAX_SED	.\ctags58\gnu_regex\regex.h	226;"	d
RE_TRANSLATE_TYPE	.\ctags58\gnu_regex\regex.h	346;"	d
RE_UNMATCHED_RIGHT_PAREN_ORD	.\ctags58\gnu_regex\regex.h	138;"	d
RFLOAT_VALUE	.\vimfiles\bundle\command-t\ruby\command-t\ruby_compat.h	48;"	d
RSTRING_LEN	.\vimfiles\bundle\command-t\ruby\command-t\ruby_compat.h	33;"	d
RSTRING_PTR	.\vimfiles\bundle\command-t\ruby\command-t\ruby_compat.h	28;"	d
Range	.\vim73\tools\unicode.vim	/^func! Range(ranges, start, end, step, add)$/;"	f
Reason	.\vim73\tools\ccfilter.c	/^char	       Reason[LINELENGTH];$/;"	v
RecordInFile	.\vim73\autoload\vimball.vim	/^fun! s:RecordInFile(home)$/;"	f
RecordInVar	.\vim73\autoload\vimball.vim	/^fun! s:RecordInVar(home,cmd)$/;"	f
Ref	.\vim73\macros\matchit.vim	/^fun! s:Ref(string, d, ...)$/;"	f
ReferencedTypes	.\ctags58\eiffel.c	/^static stringList *ReferencedTypes;$/;"	v	file:
Release	.\vim73\tools\shtags.pl	/^Release:	$id[2]$/;"	l
RemotePathAnalysis	.\vim73\autoload\netrw.vim	/^fun! s:RemotePathAnalysis(dirname)$/;"	f
RemoteSystem	.\vim73\autoload\netrw.vim	/^fun! s:RemoteSystem(cmd)$/;"	f
RemoveCComments	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\utils.vim	/^function! s:RemoveCComments(szLine)$/;"	f
ResetPhpOptions	.\vim73\indent\php.vim	/^function! ResetPhpOptions()$/;"	f
Resolve	.\vim73\macros\matchit.vim	/^fun! s:Resolve(source, target, output)$/;"	f
ResolveAliasInNamespaceList	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\namespaces.vim	/^function! s:ResolveAliasInNamespaceList(mapNamespaceAlias, listNamespaces)$/;"	f
ResolveAliasKey	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\namespaces.vim	/^function! s:ResolveAliasKey(mapNamespaceAlias, szAlias)$/;"	f
ResolveAliasKeys	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\namespaces.vim	/^function! s:ResolveAliasKeys(mapNamespaceAlias)$/;"	f
ResolveCCast	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\items.vim	/^function! s:ResolveCCast(tokens)$/;"	f
ResolveCast	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\items.vim	/^function! s:ResolveCast(tokens, startChar, endChar)$/;"	f
ResolveCppCast	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\items.vim	/^function! s:ResolveCppCast(tokens)$/;"	f
ResolveNamespace	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\namespaces.vim	/^function! s:ResolveNamespace(namespace, mapCurrentContexts)$/;"	f
ResolveSymbol	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\items.vim	/^function! s:ResolveSymbol(contextStack, szSymbol, szTagFilter)$/;"	f
RestoreBufVars	.\vim73\autoload\netrw.vim	/^fun! s:RestoreBufVars()$/;"	f
RestoreCursorline	.\vim73\autoload\netrw.vim	/^fun! s:RestoreCursorline()$/;"	f
RestoreFrameParams	.\vimfiles\bundle\tlib_vim\autoload\tlib\vim.vim	/^function! s:RestoreFrameParams() "{{{3$/;"	f
RestoreKeywords	.\vim73\autoload\xmlcomplete.vim	/^function! s:RestoreKeywords()$/;"	f
RestoreShiftwidth	.\vim73\ftplugin\cobol.vim	/^function! s:RestoreShiftwidth()$/;"	f
RestoreWinVars	.\vim73\autoload\netrw.vim	/^fun! s:RestoreWinVars()$/;"	f
RetabSnip	.\vimfiles\bundle\vim-snipmate\ftplugin\snippet.vim	/^command! -buffer -range=% RetabSnip <line1>,<line2>call snipMate#RetabSnip()$/;"	c
Reword	.\vim73\ftplugin\gitrebase.vim	/^command! -buffer -bar Reword :call s:choose('reword')$/;"	c
RewriteFormatString	.\vimfiles\bundle\tlib_vim\autoload\tlib\string.vim	/^function! s:RewriteFormatString(format, pattern, string) "{{{3$/;"	f
RexxParser	.\ctags58\rexx.c	/^extern parserDefinition* RexxParser (void)$/;"	f	signature:(void)
RmVimball	.\vim73\plugin\vimballPlugin.vim	/^com! -na=* -complete=dir  RmVimball				call vimball#SaveSettings()|call vimball#RmVimball(<f-args>)|call vimball#RestoreSettings()$/;"	c
Rmdir	.\vim73\autoload\tar.vim	/^fun! s:Rmdir(fname)$/;"	f
Rmdir	.\vim73\autoload\zip.vim	/^fun! s:Rmdir(fname)$/;"	f
Row	.\vim73\tools\ccfilter.c	/^unsigned long  Row;$/;"	v
RplGetFreeIndent	.\vim73\indent\rpl.vim	/^function RplGetFreeIndent()$/;"	f
RplGetIndent	.\vim73\indent\rpl.vim	/^function RplGetIndent(lnum)$/;"	f
RubyBalloonexpr	.\vim73\ftplugin\ruby.vim	/^function! RubyBalloonexpr()$/;"	f
RubyCursorIdentifier	.\vim73\ftplugin\ruby.vim	/^function! RubyCursorIdentifier()$/;"	f
RubyKinds	.\ctags58\ruby.c	/^static kindOption RubyKinds [] = {$/;"	v	file:
RubyParser	.\ctags58\ruby.c	/^extern parserDefinition* RubyParser (void)$/;"	f	signature:(void)
RunStateHandlers	.\vimfiles\bundle\tlib_vim\autoload\tlib\input.vim	/^function! s:RunStateHandlers(world) "{{{3$/;"	f
Runner	.\vimfiles\bundle\command-t\spec\vim_formatter.rb	/^  module Runner$/;"	m	class:Spec
S	.\vim73\macros\hanoi\hanoi.vim	/^map S $r\$$/;"	m
SBC_MAX	.\ctags58\gnu_regex\regex_internal.h	106;"	d
SB_CHAR	.\ctags58\gnu_regex\regex_internal.h	/^  SB_CHAR,$/;"	e	enum:__anon38
SCOPE_COUNT	.\ctags58\c.c	/^	SCOPE_COUNT$/;"	e	enum:eTagScope	file:
SCOPE_EXTERN	.\ctags58\c.c	/^	SCOPE_EXTERN,        \/* external storage class *\/$/;"	e	enum:eTagScope	file:
SCOPE_FRIEND	.\ctags58\c.c	/^	SCOPE_FRIEND,        \/* declares access only *\/$/;"	e	enum:eTagScope	file:
SCOPE_GLOBAL	.\ctags58\c.c	/^	SCOPE_GLOBAL,        \/* no storage class specified *\/$/;"	e	enum:eTagScope	file:
SCOPE_STATIC	.\ctags58\c.c	/^	SCOPE_STATIC,        \/* static storage class *\/$/;"	e	enum:eTagScope	file:
SCOPE_TYPEDEF	.\ctags58\c.c	/^	SCOPE_TYPEDEF,       \/* scoping depends upon context *\/$/;"	e	enum:eTagScope	file:
SEE ALSO	.\ctags58\ctags.html	/^<a name="SEE ALSO"><\/a>$/;"	a
SEND_MSEC_POLL	.\vim73\tools\xcmdsrv_client.c	206;"	d	file:
SIMPLE_BRACKET	.\ctags58\gnu_regex\regex_internal.h	/^  SIMPLE_BRACKET = 3,$/;"	e	enum:__anon29
SINGLE_QUOTE	.\ctags58\read.h	/^	SINGLE_QUOTE  = '\\'',$/;"	e	enum:eCharacters
SIZE_MAX	.\ctags58\gnu_regex\regex_internal.h	91;"	d
SOURCE FILES	.\ctags58\ctags.html	/^<a name="SOURCE FILES"><\/a>$/;"	a
SOURCES	.\ctags58\mk_mpw.mak	/^SOURCES = ¶$/;"	m
SOURCES	.\ctags58\source.mak	/^SOURCES = \\$/;"	m
SO_FOLDSORTED	.\ctags58\options.h	/^	SO_FOLDSORTED$/;"	e	enum:sortType
SO_SORTED	.\ctags58\options.h	/^	SO_SORTED,$/;"	e	enum:sortType
SO_UNSORTED	.\ctags58\options.h	/^	SO_UNSORTED,$/;"	e	enum:sortType
SPACE	.\ctags58\read.h	/^	SPACE         = ' ',$/;"	e	enum:eCharacters
SQL	.\vim73\filetype.vim	/^func! s:SQL()$/;"	f
SQLCAddAlias	.\vim73\autoload\sqlcomplete.vim	/^function! s:SQLCAddAlias(table_name, table_alias, cols)$/;"	f
SQLCCheck4dbext	.\vim73\autoload\sqlcomplete.vim	/^function! s:SQLCCheck4dbext()$/;"	f
SQLCErrorMsg	.\vim73\autoload\sqlcomplete.vim	/^function! s:SQLCErrorMsg(msg)$/;"	f
SQLCGetColumns	.\vim73\autoload\sqlcomplete.vim	/^function! s:SQLCGetColumns(table_name, list_type)$/;"	f
SQLCGetObjectOwner	.\vim73\autoload\sqlcomplete.vim	/^function! s:SQLCGetObjectOwner(object) $/;"	f
SQLCGetSyntaxList	.\vim73\autoload\sqlcomplete.vim	/^function! s:SQLCGetSyntaxList(syn_group)$/;"	f
SQLCWarningMsg	.\vim73\autoload\sqlcomplete.vim	/^function! s:SQLCWarningMsg(msg)$/;"	f
SQLGetType	.\vim73\ftplugin\sql.vim	/^    command! -nargs=0 SQLGetType :call SQL_GetType()$/;"	c
SQLSetType	.\vim73\ftplugin\sql.vim	/^    command! -nargs=* -complete=custom,SQL_GetList SQLSetType :call SQL_SetType(<q-args>)$/;"	c
SQLTAG_BLOCK_LABEL	.\ctags58\sql.c	/^	SQLTAG_BLOCK_LABEL,$/;"	e	enum:__anon82	file:
SQLTAG_COUNT	.\ctags58\sql.c	/^	SQLTAG_COUNT$/;"	e	enum:__anon82	file:
SQLTAG_CURSOR	.\ctags58\sql.c	/^	SQLTAG_CURSOR,$/;"	e	enum:__anon82	file:
SQLTAG_DOMAIN	.\ctags58\sql.c	/^	SQLTAG_DOMAIN,$/;"	e	enum:__anon82	file:
SQLTAG_EVENT	.\ctags58\sql.c	/^	SQLTAG_EVENT,$/;"	e	enum:__anon82	file:
SQLTAG_FIELD	.\ctags58\sql.c	/^	SQLTAG_FIELD,$/;"	e	enum:__anon82	file:
SQLTAG_FUNCTION	.\ctags58\sql.c	/^	SQLTAG_FUNCTION,$/;"	e	enum:__anon82	file:
SQLTAG_INDEX	.\ctags58\sql.c	/^	SQLTAG_INDEX,$/;"	e	enum:__anon82	file:
SQLTAG_LOCAL_VARIABLE	.\ctags58\sql.c	/^	SQLTAG_LOCAL_VARIABLE,$/;"	e	enum:__anon82	file:
SQLTAG_MLCONN	.\ctags58\sql.c	/^	SQLTAG_MLCONN,$/;"	e	enum:__anon82	file:
SQLTAG_MLTABLE	.\ctags58\sql.c	/^	SQLTAG_MLTABLE,$/;"	e	enum:__anon82	file:
SQLTAG_PACKAGE	.\ctags58\sql.c	/^	SQLTAG_PACKAGE,$/;"	e	enum:__anon82	file:
SQLTAG_PROCEDURE	.\ctags58\sql.c	/^	SQLTAG_PROCEDURE,$/;"	e	enum:__anon82	file:
SQLTAG_PROTOTYPE	.\ctags58\sql.c	/^	SQLTAG_PROTOTYPE,$/;"	e	enum:__anon82	file:
SQLTAG_PUBLICATION	.\ctags58\sql.c	/^	SQLTAG_PUBLICATION,$/;"	e	enum:__anon82	file:
SQLTAG_RECORD	.\ctags58\sql.c	/^	SQLTAG_RECORD,$/;"	e	enum:__anon82	file:
SQLTAG_SERVICE	.\ctags58\sql.c	/^	SQLTAG_SERVICE,$/;"	e	enum:__anon82	file:
SQLTAG_SUBTYPE	.\ctags58\sql.c	/^	SQLTAG_SUBTYPE,$/;"	e	enum:__anon82	file:
SQLTAG_SYNONYM	.\ctags58\sql.c	/^	SQLTAG_SYNONYM,$/;"	e	enum:__anon82	file:
SQLTAG_TABLE	.\ctags58\sql.c	/^	SQLTAG_TABLE,$/;"	e	enum:__anon82	file:
SQLTAG_TRIGGER	.\ctags58\sql.c	/^	SQLTAG_TRIGGER,$/;"	e	enum:__anon82	file:
SQLTAG_VARIABLE	.\ctags58\sql.c	/^	SQLTAG_VARIABLE,$/;"	e	enum:__anon82	file:
SQLTAG_VIEW	.\ctags58\sql.c	/^	SQLTAG_VIEW,$/;"	e	enum:__anon82	file:
SQL_GetList	.\vim73\ftplugin\sql.vim	/^    function SQL_GetList(ArgLead, CmdLine, CursorPos)$/;"	f
SQL_GetType	.\vim73\ftplugin\sql.vim	/^    function SQL_GetType()$/;"	f
SQL_SetType	.\vim73\ftplugin\sql.vim	/^    function SQL_SetType(name)$/;"	f
STATE_NODE_CONTAINS	.\ctags58\gnu_regex\regexec.c	1584;"	d	file:
STATIC_SPACE	.\vim73\tools\xcmdsrv_client.c	109;"	d	file:
STDC_HEADERS	.\ctags58\e_djgpp.h	45;"	d
STDC_HEADERS	.\ctags58\e_mac.h	25;"	d
STDC_HEADERS	.\ctags58\e_qdos.h	21;"	d
STDC_HEADERS	.\ctags58\e_riscos.h	26;"	d
STRING_SYMBOL	.\ctags58\read.h	/^	STRING_SYMBOL = ('S' + 0x80),$/;"	e	enum:eCharacters
SUBEXP	.\ctags58\gnu_regex\regex_internal.h	/^  SUBEXP = 17,$/;"	e	enum:__anon29
SYNOPSIS	.\ctags58\ctags.html	/^<a name="SYNOPSIS"><\/a>$/;"	a
S_IFBLK	.\ctags58\e_mac.h	70;"	d
S_IFCHR	.\ctags58\e_mac.h	69;"	d
S_IFDIR	.\ctags58\e_mac.h	68;"	d
S_IFMT	.\ctags58\e_mac.h	65;"	d
S_IFMT	.\ctags58\routines.c	99;"	d	file:
S_IFREG	.\ctags58\e_mac.h	71;"	d
S_IRUSR	.\ctags58\routines.c	113;"	d	file:
S_ISBLK	.\ctags58\e_mac.h	77;"	d
S_ISCHR	.\ctags58\e_mac.h	76;"	d
S_ISDIR	.\ctags58\e_mac.h	75;"	d
S_ISDIR	.\ctags58\routines.c	92;"	d	file:
S_ISDIR	.\ctags58\routines.c	94;"	d	file:
S_ISLNK	.\ctags58\routines.c	84;"	d	file:
S_ISLNK	.\ctags58\routines.c	86;"	d	file:
S_ISREG	.\ctags58\e_mac.h	78;"	d
S_ISREG	.\ctags58\routines.c	76;"	d	file:
S_ISREG	.\ctags58\routines.c	78;"	d	file:
S_ISTYPE	.\ctags58\e_mac.h	73;"	d
S_ISUID	.\ctags58\routines.c	120;"	d	file:
S_IWUSR	.\ctags58\routines.c	116;"	d	file:
S_IXGRP	.\ctags58\routines.c	106;"	d	file:
S_IXOTH	.\ctags58\routines.c	109;"	d	file:
S_IXUSR	.\ctags58\routines.c	103;"	d	file:
Safe_indent	.\vim73\indent\awk.vim	/^function! s:Safe_indent( base, wordlen, this_line )$/;"	f
SaveBufVars	.\vim73\autoload\netrw.vim	/^fun! s:SaveBufVars()$/;"	f
SaveFrameParams	.\vimfiles\bundle\tlib_vim\autoload\tlib\vim.vim	/^function! s:SaveFrameParams() "{{{3$/;"	f
SaveVimSesn	.\vim73\menu.vim	/^fun! s:SaveVimSesn()$/;"	f
SaveWinVars	.\vim73\autoload\netrw.vim	/^fun! s:SaveWinVars()$/;"	f
Scanner	.\vimfiles\bundle\command-t\ruby\command-t\scanner.rb	/^  class Scanner; end$/;"	c	class:CommandT
SchemeKinds	.\ctags58\scheme.c	/^static kindOption SchemeKinds [] = {$/;"	v	file:
SchemeParser	.\ctags58\scheme.c	/^extern parserDefinition* SchemeParser (void)$/;"	f	signature:(void)
Screen	.\vimfiles\bundle\command-t\ruby\command-t\vim\screen.rb	/^    module Screen$/;"	m	class:CommandT.VIM
SearchDecl	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\items.vim	/^function! s:SearchDecl(szVariable)$/;"	f
SearchGlobalMembers	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\complete.vim	/^function! s:SearchGlobalMembers(szBase)$/;"	f
SearchMembers	.\vim73\autoload\ccomplete.vim	/^function! s:SearchMembers(matches, items, all)$/;"	f
SearchMembers	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\complete.vim	/^function! s:SearchMembers(resolvedTagItem, szBase)$/;"	f
SearchP	.\vim73\menu.vim	/^fun! s:SearchP()$/;"	f
SearchTypeInfoOfDecl	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\items.vim	/^function! s:SearchTypeInfoOfDecl(szVariable)$/;"	f
Seems_continuing	.\vim73\indent\awk.vim	/^function! s:Seems_continuing( line )$/;"	f
SelectAll	.\vim73\menu.vim	/^func! <SID>SelectAll()$/;"	f
SelectOutput	.\vimfiles\bundle\tlib_vim\samples\tlib\input\tlib_input_list.vim	/^function! SelectOutput(ex) "{{{3$/;"	f
SelfReferences	.\ctags58\eiffel.c	/^static int SelfReferences;$/;"	v	file:
SendEventProc	.\vim73\tools\xcmdsrv_client.c	/^SendEventProc(dpy, eventPtr, expected, code)$/;"	f	file:
SendEventProc	.\vim73\tools\xcmdsrv_client.c	/^static char	*SendEventProc __ARGS((Display *dpy, XEvent *eventPtr,$/;"	p	file:	signature:(Display *dpy, XEvent *eventPtr, int expect, int *code)
SendInit	.\vim73\tools\xcmdsrv_client.c	/^SendInit(dpy)$/;"	f	file:
SendInit	.\vim73\tools\xcmdsrv_client.c	/^static int	SendInit __ARGS((Display *dpy));$/;"	p	file:	signature:(Display *dpy)
Set.All	.\vim73\macros\shellmenu.vim	/^imenu Set.All keyword arguments are placed in the environment set -k$/;"	m
Set.Disable	.\vim73\macros\shellmenu.vim	/^imenu Set.Disable file name generation set -f$/;"	m
Set.Exit	.\vim73\macros\shellmenu.vim	/^imenu Set.Exit after reading and executing one command set -t$/;"	m
Set.Print	.\vim73\macros\shellmenu.vim	/^imenu Set.Print commands and their arguments as they are executed set -x$/;"	m
Set.Print	.\vim73\macros\shellmenu.vim	/^imenu Set.Print shell input lines as they are read set -v$/;"	m
Set.Read	.\vim73\macros\shellmenu.vim	/^imenu Set.Read commands but do not execute them set -n$/;"	m
Set.Treat	.\vim73\macros\shellmenu.vim	/^imenu Set.Treat unset variables as an error when substituting set -u$/;"	m
Set.exit	.\vim73\macros\shellmenu.vim	/^imenu Set.exit when command returns non-zero exit code set -e$/;"	m
Set.mark	.\vim73\macros\shellmenu.vim	/^imenu Set.mark modified or modified variables set -a$/;"	m
Set.remember	.\vim73\macros\shellmenu.vim	/^imenu Set.remember function commands set -h$/;"	m
Set.set	.\vim73\macros\shellmenu.vim	/^imenu Set.set set$/;"	m
Set.unset	.\vim73\macros\shellmenu.vim	/^imenu Set.unset unset$/;"	m
SetBufWinVars	.\vim73\autoload\netrw.vim	/^fun! s:SetBufWinVars()$/;"	f
SetFileTypeSH	.\vim73\filetype.vim	/^func! SetFileTypeSH(name)$/;"	f
SetFileTypeShell	.\vim73\filetype.vim	/^func! SetFileTypeShell(name)$/;"	f
SetIsk	.\vim73\syntax\bst.vim	/^    command -nargs=1 SetIsk set iskeyword=<args>$/;"	c
SetIsk	.\vim73\syntax\bst.vim	/^    command -nargs=1 SetIsk setlocal iskeyword=<args>$/;"	c
SetIsk	.\vim73\syntax\lilo.vim	/^  command -nargs=1 SetIsk set iskeyword=<args>$/;"	c
SetIsk	.\vim73\syntax\lilo.vim	/^  command -nargs=1 SetIsk setlocal iskeyword=<args>$/;"	c
SetKeywords	.\vim73\autoload\xmlcomplete.vim	/^function! s:SetKeywords()$/;"	f
SetOffset	.\vimfiles\bundle\tlib_vim\autoload\tlib\input.vim	/^function! s:SetOffset(world) "{{{3$/;"	f
SetRexDir	.\vim73\autoload\netrw.vim	/^fun! s:SetRexDir(islocal,dirname)$/;"	f
SetScrollBind	.\vimfiles\bundle\tlib_vim\autoload\tlib\file.vim	/^function! s:SetScrollBind(world) "{{{3$/;"	f
SetSyn	.\vim73\synmenu.vim	/^fun! SetSyn(name)$/;"	f
SetUpper	.\ctags58\lregex.c	/^static int SetUpper = -1;  \/* upper language index in list *\/$/;"	v	file:
Sets	.\ctags58\lregex.c	/^static patternSet* Sets = NULL;$/;"	v	file:
Setsynonly	.\vim73\synmenu.vim	/^fun! s:Setsynonly()$/;"	f
Settings	.\vimfiles\bundle\command-t\ruby\command-t\settings.rb	/^  class Settings$/;"	c	class:CommandT
SetupNetrwStatusLine	.\vim73\autoload\netrw.vim	/^fun! s:SetupNetrwStatusLine(statline)$/;"	f
SetupRemoteReplies	.\vim73\plugin\rrhelper.vim	/^function SetupRemoteReplies()$/;"	f
Severity	.\vim73\tools\ccfilter.c	/^char	       Severity;$/;"	v
Sexplore	.\vim73\plugin\netrwPlugin.vim	/^com! -nargs=* -bar -bang -count=0 -complete=dir	Sexplore	call netrw#Explore(<count>,1,0+<bang>0,<q-args>)$/;"	c
ShKinds	.\ctags58\sh.c	/^static kindOption ShKinds [] = {$/;"	v	file:
ShParser	.\ctags58\sh.c	/^extern parserDefinition* ShParser (void)$/;"	f	signature:(void)
ShouldPurge	.\vimfiles\bundle\tlib_vim\autoload\tlib\cache.vim	/^function! s:ShouldPurge(partial_filename) "{{{3$/;"	f
ShowUsage	.\vim73\tools\ccfilter.c	/^int ShowUsage( char *szError )$/;"	f	signature:( char *szError )
SignId	.\vimfiles\bundle\tlib_vim\autoload\tlib\signs.vim	/^function! s:SignId(item) "{{{3$/;"	f
Signature	.\ctags58\c.c	/^static vString *Signature;$/;"	v	file:
SkipConfiguration	.\ctags58\options.c	/^static boolean SkipConfiguration;$/;"	v	file:
SkipJavaBlanksAndComments	.\vim73\indent\java.vim	/^function! SkipJavaBlanksAndComments(startline)$/;"	f
SkipPattern	.\vim73\indent\sml.vim	/^function! s:SkipPattern(lnum, pat)$/;"	f
Skippmatch	.\vim73\indent\php.vim	/^function! Skippmatch()	" {{{$/;"	f
Skippmatch2	.\vim73\indent\php.vim	/^function! Skippmatch2()$/;"	f
SlangParser	.\ctags58\slang.c	/^extern parserDefinition* SlangParser (void)$/;"	f	signature:(void)
SmlKeywordTypes	.\ctags58\sml.c	/^} SmlKeywordTypes [] = {$/;"	v	typeref:struct:__anon81	file:
SmlKinds	.\ctags58\sml.c	/^static kindOption SmlKinds[] = {$/;"	v	file:
SmlParser	.\ctags58\sml.c	/^extern parserDefinition *SmlParser (void)$/;"	f	signature:(void)
SnipMateOpenSnippetFiles	.\vimfiles\bundle\vim-snipmate\plugin\snipMateInterface.vim	/^command! SnipMateOpenSnippetFiles call snipMate#OpenSnippetFiles()$/;"	c
SortMethod	.\ctags58\readtags.c	/^static sortType SortMethod;$/;"	v	file:
SortOverride	.\ctags58\readtags.c	/^static int SortOverride;$/;"	v	file:
SpShVars.All	.\vim73\macros\shellmenu.vim	/^imenu SpShVars.All positional parameters (quoted spaces) ${*}$/;"	m
SpShVars.All	.\vim73\macros\shellmenu.vim	/^imenu SpShVars.All positional parameters (unquoted spaces) ${@}$/;"	m
SpShVars.Flags	.\vim73\macros\shellmenu.vim	/^imenu SpShVars.Flags set ${-}$/;"	m
SpShVars.Number	.\vim73\macros\shellmenu.vim	/^imenu SpShVars.Number of positional parameters ${#}$/;"	m
SpShVars.Process	.\vim73\macros\shellmenu.vim	/^imenu SpShVars.Process number of last background command ${!}$/;"	m
SpShVars.Process	.\vim73\macros\shellmenu.vim	/^imenu SpShVars.Process number of this shell ${$}$/;"	m
SpShVars.Return	.\vim73\macros\shellmenu.vim	/^imenu SpShVars.Return code of last command ${?}$/;"	m
Space	.\vim73\optwin.vim	/^fun! <SID>Space()$/;"	f
Spec	.\vimfiles\bundle\command-t\spec\vim_formatter.rb	/^module Spec$/;"	m
SpecChangelog	.\vim73\ftplugin\spec.vim	/^	function s:SpecChangelog(format)$/;"	f
SpellDel	.\vim73\menu.vim	/^  func! <SID>SpellDel()$/;"	f
SpellLang	.\vim73\menu.vim	/^  func! s:SpellLang()$/;"	f
SpellPopup	.\vim73\menu.vim	/^  func! <SID>SpellPopup()$/;"	f
SpellPopupMenu	.\vim73\menu.vim	/^  augroup SpellPopupMenu$/;"	a
SpellReplace	.\vim73\menu.vim	/^  func! <SID>SpellReplace(n)$/;"	f
SqlKeywordTable	.\ctags58\sql.c	/^static const keywordDesc SqlKeywordTable [] = {$/;"	v	file:
SqlKinds	.\ctags58\sql.c	/^static kindOption SqlKinds [] = {$/;"	v	file:
SqlParser	.\ctags58\sql.c	/^extern parserDefinition* SqlParser (void)$/;"	f	signature:(void)
Squash	.\vim73\ftplugin\gitrebase.vim	/^command! -buffer -bar Squash :call s:choose('squash')$/;"	c
StarSetf	.\vim73\filetype.vim	/^func! s:StarSetf(ft)$/;"	f
StartOfLine	.\ctags58\read.c	/^static fpos_t StartOfLine;  \/* holds deferred position of start of line *\/$/;"	v	file:
Starts_with_word	.\vim73\indent\awk.vim	/^function! s:Starts_with_word( line )$/;"	f
StatementIndent	.\vim73\indent\ada.vim	/^function s:StatementIndent( current_indent, prev_lnum )$/;"	f
Stmts.break	break	.\vim73\macros\shellmenu.vim	/^imenu Stmts.break	break $/;"	m
Stmts.case	case	.\vim73\macros\shellmenu.vim	/^imenu Stmts.case	case  in$/;"	m
Stmts.continue	continue	.\vim73\macros\shellmenu.vim	/^imenu Stmts.continue	continue $/;"	m
Stmts.elif	elif	.\vim73\macros\shellmenu.vim	/^imenu Stmts.elif	elif   $/;"	m
Stmts.exit	exit	.\vim73\macros\shellmenu.vim	/^imenu Stmts.exit	exit $/;"	m
Stmts.for	for	.\vim73\macros\shellmenu.vim	/^imenu Stmts.for	for  in $/;"	m
Stmts.function	()	.\vim73\macros\shellmenu.vim	/^imenu Stmts.function	() {$/;"	m
Stmts.if	if	.\vim73\macros\shellmenu.vim	/^imenu Stmts.if	if   $/;"	m
Stmts.if-else	if	.\vim73\macros\shellmenu.vim	/^imenu Stmts.if-else	if   $/;"	m
Stmts.return	return	.\vim73\macros\shellmenu.vim	/^imenu Stmts.return	return $/;"	m
Stmts.return-false	return	.\vim73\macros\shellmenu.vim	/^imenu Stmts.return-false	return 1$/;"	m
Stmts.return-true	return	.\vim73\macros\shellmenu.vim	/^imenu Stmts.return-true	return 0$/;"	m
Stmts.shift	shift	.\vim73\macros\shellmenu.vim	/^imenu Stmts.shift	shift $/;"	m
Stmts.trap	trap	.\vim73\macros\shellmenu.vim	/^imenu Stmts.trap	trap $/;"	m
Stmts.while	while	.\vim73\macros\shellmenu.vim	/^imenu Stmts.while	while   $/;"	m
Strlen	.\vim73\autoload\netrw.vim	/^fun! s:Strlen(x)$/;"	f
StructMembers	.\vim73\autoload\ccomplete.vim	/^function! s:StructMembers(typename, items, all)$/;"	f
Stub	.\vimfiles\bundle\command-t\ruby\command-t\stub.rb	/^  class Stub$/;"	c	class:CommandT
SubName	.\vim73\tools\pltags.pl	/^sub SubName($)$/;"	s
SuperSub	.\vim73\syntax\tex.vim	/^  fun! s:SuperSub(group,leader,pat,cchar)$/;"	f
Syn	.\vim73\makemenu.vim	/^fun! <SID>Syn(arg)$/;"	f
SynColor	.\vim73\syntax\doxygen.vim	/^    command -nargs=+ SynColor hi def <args>$/;"	c
SynColor	.\vim73\syntax\syncolor.vim	/^    command -nargs=* SynColor hi <args>$/;"	c
SynColor	.\vim73\syntax\syncolor.vim	/^    command -nargs=* SynColor hi def <args>$/;"	c
SynColor	.\vim73\syntax\syncolor.vim	/^  command -nargs=* SynColor hi <args>$/;"	c
SynDisplay	.\vim73\syntax\inform.vim	/^  command -nargs=+ SynDisplay syntax <args> display$/;"	c
SynDisplay	.\vim73\syntax\inform.vim	/^  command -nargs=+ SynDisplay syntax <args>$/;"	c
SynLink	.\vim73\syntax\doxygen.vim	/^    command -nargs=+ SynLink hi def link <args>$/;"	c
SynLink	.\vim73\syntax\syncolor.vim	/^    command -nargs=* SynLink hi def link <args>$/;"	c
SynLink	.\vim73\syntax\syncolor.vim	/^    command -nargs=* SynLink hi! link <args>$/;"	c
SynLink	.\vim73\syntax\syncolor.vim	/^  command -nargs=* SynLink hi link <args>$/;"	c
SynMenu	.\vim73\makemenu.vim	/^command! -nargs=* SynMenu call <SID>Syn(<q-args>)$/;"	c
SynOnOff	.\vim73\menu.vim	/^    fun s:SynOnOff()$/;"	f
SynSet	.\vim73\syntax\synload.vim	/^fun! s:SynSet()$/;"	f
SyntaxCSyntaxGroupItems	.\vim73\autoload\syntaxcomplete.vim	/^function! s:SyntaxCSyntaxGroupItems( group_name, syntax_full )$/;"	f
T	.\ctags58\mk_qdos.mak	/^T = ram1_$/;"	m
T	.\vim73\macros\hanoi\hanoi.vim	/^map T ko0$/;"	m
T	.\vim73\macros\life\life.vim	/^map T G,c2k,!9k,@,#j>2k,$j$/;"	m
T	.\vim73\macros\maze\maze.c	/^char*M,A,Z,E=40,J[40],T[40];main(C){for(*J=A=scanf(M="%d",&C);$/;"	v
T	.\vim73\macros\maze\mazeansi.c	/^char*M,A,Z,E=40,J[80],T[3];main(C){for(M=J+E,*J=A=scanf("%d",&$/;"	v
T	.\vim73\macros\maze\mazeclean.c	/^char *M, A, Z, E = 40, line[80], T[3];$/;"	v
T	.\vim73\macros\urm\urm.vim	/^map T y\$$/;"	m
TAB	.\ctags58\read.h	/^	TAB           = '\\t',$/;"	e	enum:eCharacters
TAB	.\ctags58\readtags.c	26;"	d	file:
TAG FILE FORMAT	.\ctags58\ctags.html	/^<a name="TAG FILE FORMAT"><\/a>$/;"	a
TAG_BLOCK_DATA	.\ctags58\fortran.c	/^	TAG_BLOCK_DATA,$/;"	e	enum:eTagType	file:
TAG_CLASS	.\ctags58\c.c	/^	TAG_CLASS,       \/* class name *\/$/;"	e	enum:eTagType	file:
TAG_COMMON_BLOCK	.\ctags58\fortran.c	/^	TAG_COMMON_BLOCK,$/;"	e	enum:eTagType	file:
TAG_COMPONENT	.\ctags58\fortran.c	/^	TAG_COMPONENT,$/;"	e	enum:eTagType	file:
TAG_COUNT	.\ctags58\c.c	/^	TAG_COUNT        \/* must be last *\/$/;"	e	enum:eTagType	file:
TAG_COUNT	.\ctags58\fortran.c	/^	TAG_COUNT  \/* must be last *\/$/;"	e	enum:eTagType	file:
TAG_DERIVED_TYPE	.\ctags58\fortran.c	/^	TAG_DERIVED_TYPE,$/;"	e	enum:eTagType	file:
TAG_ENTRY_POINT	.\ctags58\fortran.c	/^	TAG_ENTRY_POINT,$/;"	e	enum:eTagType	file:
TAG_ENUM	.\ctags58\c.c	/^	TAG_ENUM,        \/* enumeration name *\/$/;"	e	enum:eTagType	file:
TAG_ENUMERATOR	.\ctags58\c.c	/^	TAG_ENUMERATOR,  \/* enumerator (enumeration value) *\/$/;"	e	enum:eTagType	file:
TAG_EVENT	.\ctags58\c.c	/^	TAG_EVENT,       \/* event *\/$/;"	e	enum:eTagType	file:
TAG_EXTERN_VAR	.\ctags58\c.c	/^	TAG_EXTERN_VAR,  \/* external variable declaration *\/$/;"	e	enum:eTagType	file:
TAG_FIELD	.\ctags58\c.c	/^	TAG_FIELD,       \/* field (Java) *\/$/;"	e	enum:eTagType	file:
TAG_FOLDSORTED	.\ctags58\readtags.h	/^	TAG_UNSORTED, TAG_SORTED, TAG_FOLDSORTED$/;"	e	enum:__anon66
TAG_FULLMATCH	.\ctags58\readtags.h	38;"	d
TAG_FUNCTION	.\ctags58\c.c	/^	TAG_FUNCTION,    \/* function definition *\/$/;"	e	enum:eTagType	file:
TAG_FUNCTION	.\ctags58\fortran.c	/^	TAG_FUNCTION,$/;"	e	enum:eTagType	file:
TAG_IGNORECASE	.\ctags58\readtags.h	42;"	d
TAG_INTERFACE	.\ctags58\c.c	/^	TAG_INTERFACE,   \/* interface declaration *\/$/;"	e	enum:eTagType	file:
TAG_INTERFACE	.\ctags58\fortran.c	/^	TAG_INTERFACE,$/;"	e	enum:eTagType	file:
TAG_LABEL	.\ctags58\fortran.c	/^	TAG_LABEL,$/;"	e	enum:eTagType	file:
TAG_LOCAL	.\ctags58\c.c	/^	TAG_LOCAL,       \/* local variable definition *\/$/;"	e	enum:eTagType	file:
TAG_LOCAL	.\ctags58\fortran.c	/^	TAG_LOCAL,$/;"	e	enum:eTagType	file:
TAG_MEMBER	.\ctags58\c.c	/^	TAG_MEMBER,      \/* structure, class or interface member *\/$/;"	e	enum:eTagType	file:
TAG_METHOD	.\ctags58\c.c	/^	TAG_METHOD,      \/* method declaration *\/$/;"	e	enum:eTagType	file:
TAG_MODULE	.\ctags58\fortran.c	/^	TAG_MODULE,$/;"	e	enum:eTagType	file:
TAG_NAMELIST	.\ctags58\fortran.c	/^	TAG_NAMELIST,$/;"	e	enum:eTagType	file:
TAG_NAMESPACE	.\ctags58\c.c	/^	TAG_NAMESPACE,   \/* namespace name *\/$/;"	e	enum:eTagType	file:
TAG_OBSERVECASE	.\ctags58\readtags.h	41;"	d
TAG_PACKAGE	.\ctags58\c.c	/^	TAG_PACKAGE,     \/* package name *\/$/;"	e	enum:eTagType	file:
TAG_PARTIALMATCH	.\ctags58\readtags.h	39;"	d
TAG_PROGRAM	.\ctags58\c.c	/^	TAG_PROGRAM,     \/* program name *\/$/;"	e	enum:eTagType	file:
TAG_PROGRAM	.\ctags58\fortran.c	/^	TAG_PROGRAM,$/;"	e	enum:eTagType	file:
TAG_PROPERTY	.\ctags58\c.c	/^	TAG_PROPERTY,    \/* property name *\/$/;"	e	enum:eTagType	file:
TAG_PROTOTYPE	.\ctags58\c.c	/^	TAG_PROTOTYPE,   \/* function prototype or declaration *\/$/;"	e	enum:eTagType	file:
TAG_SORTED	.\ctags58\readtags.h	/^	TAG_UNSORTED, TAG_SORTED, TAG_FOLDSORTED$/;"	e	enum:__anon66
TAG_STRUCT	.\ctags58\c.c	/^	TAG_STRUCT,      \/* structure name *\/$/;"	e	enum:eTagType	file:
TAG_SUBROUTINE	.\ctags58\fortran.c	/^	TAG_SUBROUTINE,$/;"	e	enum:eTagType	file:
TAG_TASK	.\ctags58\c.c	/^	TAG_TASK,        \/* task name *\/$/;"	e	enum:eTagType	file:
TAG_TYPEDEF	.\ctags58\c.c	/^	TAG_TYPEDEF,     \/* typedef name *\/$/;"	e	enum:eTagType	file:
TAG_UNDEFINED	.\ctags58\c.c	/^	TAG_UNDEFINED,$/;"	e	enum:eTagType	file:
TAG_UNDEFINED	.\ctags58\fortran.c	/^	TAG_UNDEFINED = -1,$/;"	e	enum:eTagType	file:
TAG_UNION	.\ctags58\c.c	/^	TAG_UNION,       \/* union name *\/$/;"	e	enum:eTagType	file:
TAG_UNSORTED	.\ctags58\readtags.h	/^	TAG_UNSORTED, TAG_SORTED, TAG_FOLDSORTED$/;"	e	enum:__anon66
TAG_VARIABLE	.\ctags58\c.c	/^	TAG_VARIABLE,    \/* variable definition *\/$/;"	e	enum:eTagType	file:
TAG_VARIABLE	.\ctags58\fortran.c	/^	TAG_VARIABLE,$/;"	e	enum:eTagType	file:
TBrowseOutput	.\vimfiles\bundle\tlib_vim\plugin\02tlib.vim	/^command! -nargs=1 -complete=command TBrowseOutput call tlib#cmd#BrowseOutput(<q-args>)$/;"	c
TBrowseScriptnames	.\vimfiles\bundle\tlib_vim\plugin\02tlib.vim	/^command! -nargs=0 -complete=command TBrowseScriptnames call$/;"	c
TEXTAG_CHAPTER	.\ctags58\tex.c	/^	TEXTAG_CHAPTER,$/;"	e	enum:__anon84	file:
TEXTAG_COUNT	.\ctags58\tex.c	/^	TEXTAG_COUNT$/;"	e	enum:__anon84	file:
TEXTAG_PARAGRAPH	.\ctags58\tex.c	/^	TEXTAG_PARAGRAPH,$/;"	e	enum:__anon84	file:
TEXTAG_PART	.\ctags58\tex.c	/^	TEXTAG_PART,$/;"	e	enum:__anon84	file:
TEXTAG_SECTION	.\ctags58\tex.c	/^	TEXTAG_SECTION,$/;"	e	enum:__anon84	file:
TEXTAG_SUBPARAGRAPH	.\ctags58\tex.c	/^	TEXTAG_SUBPARAGRAPH,$/;"	e	enum:__anon84	file:
TEXTAG_SUBSECTION	.\ctags58\tex.c	/^	TEXTAG_SUBSECTION,$/;"	e	enum:__anon84	file:
TEXTAG_SUBSUBSECTION	.\ctags58\tex.c	/^	TEXTAG_SUBSUBSECTION,$/;"	e	enum:__anon84	file:
TKeyArg	.\vimfiles\bundle\tlib_vim\plugin\02tlib.vim	/^command! -nargs=+ TKeyArg exec tlib#arg#Key([<args>])$/;"	c
TLet	.\vimfiles\bundle\tlib_vim\plugin\02tlib.vim	/^command! -nargs=+ TLet if !exists(matchstr(<q-args>, '^[^=[:space:]]\\+')) | exec 'let '. <q-args> | endif$/;"	c
TLib	.\vimfiles\bundle\tlib_vim\autoload\tlib\autocmdgroup.vim	/^augroup TLib$/;"	a
TMPDIR	.\ctags58\e_mac.h	23;"	d
TMPDIR	.\ctags58\e_msoft.h	39;"	d
TMPDIR	.\ctags58\e_riscos.h	23;"	d
TMPDIR	.\ctags58\routines.c	69;"	d	file:
TOKEN_ARGS	.\ctags58\c.c	/^	TOKEN_ARGS,          \/* a parenthetical pair and its contents *\/$/;"	e	enum:eTokenType	file:
TOKEN_BANG	.\ctags58\eiffel.c	/^	TOKEN_BANG,$/;"	e	enum:eTokenType	file:
TOKEN_BLOCK_LABEL_BEGIN	.\ctags58\sql.c	/^	TOKEN_BLOCK_LABEL_BEGIN,$/;"	e	enum:eTokenType	file:
TOKEN_BLOCK_LABEL_END	.\ctags58\sql.c	/^	TOKEN_BLOCK_LABEL_END,$/;"	e	enum:eTokenType	file:
TOKEN_BRACE_CLOSE	.\ctags58\c.c	/^	TOKEN_BRACE_CLOSE,$/;"	e	enum:eTokenType	file:
TOKEN_BRACE_OPEN	.\ctags58\c.c	/^	TOKEN_BRACE_OPEN,$/;"	e	enum:eTokenType	file:
TOKEN_CHARACTER	.\ctags58\eiffel.c	/^	TOKEN_CHARACTER,$/;"	e	enum:eTokenType	file:
TOKEN_CHARACTER	.\ctags58\flex.c	/^	TOKEN_CHARACTER,$/;"	e	enum:eTokenType	file:
TOKEN_CHARACTER	.\ctags58\jscript.c	/^	TOKEN_CHARACTER,$/;"	e	enum:eTokenType	file:
TOKEN_CHARACTER	.\ctags58\sql.c	/^	TOKEN_CHARACTER,$/;"	e	enum:eTokenType	file:
TOKEN_CHARACTER	.\ctags58\tex.c	/^	TOKEN_CHARACTER,$/;"	e	enum:eTokenType	file:
TOKEN_CLOSE_BRACE	.\ctags58\eiffel.c	/^	TOKEN_CLOSE_BRACE,$/;"	e	enum:eTokenType	file:
TOKEN_CLOSE_BRACKET	.\ctags58\eiffel.c	/^	TOKEN_CLOSE_BRACKET,$/;"	e	enum:eTokenType	file:
TOKEN_CLOSE_CURLY	.\ctags58\flex.c	/^	TOKEN_CLOSE_CURLY,$/;"	e	enum:eTokenType	file:
TOKEN_CLOSE_CURLY	.\ctags58\jscript.c	/^	TOKEN_CLOSE_CURLY,$/;"	e	enum:eTokenType	file:
TOKEN_CLOSE_CURLY	.\ctags58\sql.c	/^	TOKEN_CLOSE_CURLY,$/;"	e	enum:eTokenType	file:
TOKEN_CLOSE_CURLY	.\ctags58\tex.c	/^	TOKEN_CLOSE_CURLY,$/;"	e	enum:eTokenType	file:
TOKEN_CLOSE_MXML	.\ctags58\flex.c	/^	TOKEN_CLOSE_MXML,$/;"	e	enum:eTokenType	file:
TOKEN_CLOSE_MXML	.\ctags58\tex.c	/^	TOKEN_CLOSE_MXML,$/;"	e	enum:eTokenType	file:
TOKEN_CLOSE_PAREN	.\ctags58\eiffel.c	/^	TOKEN_CLOSE_PAREN,$/;"	e	enum:eTokenType	file:
TOKEN_CLOSE_PAREN	.\ctags58\flex.c	/^	TOKEN_CLOSE_PAREN,$/;"	e	enum:eTokenType	file:
TOKEN_CLOSE_PAREN	.\ctags58\jscript.c	/^	TOKEN_CLOSE_PAREN,$/;"	e	enum:eTokenType	file:
TOKEN_CLOSE_PAREN	.\ctags58\sql.c	/^	TOKEN_CLOSE_PAREN,$/;"	e	enum:eTokenType	file:
TOKEN_CLOSE_PAREN	.\ctags58\tex.c	/^	TOKEN_CLOSE_PAREN,$/;"	e	enum:eTokenType	file:
TOKEN_CLOSE_PAREN	.\ctags58\vhdl.c	/^	TOKEN_CLOSE_PAREN,	\/* ) *\/$/;"	e	enum:eTokenType	file:
TOKEN_CLOSE_SGML	.\ctags58\flex.c	/^	TOKEN_CLOSE_SGML,$/;"	e	enum:eTokenType	file:
TOKEN_CLOSE_SGML	.\ctags58\tex.c	/^	TOKEN_CLOSE_SGML,$/;"	e	enum:eTokenType	file:
TOKEN_CLOSE_SQUARE	.\ctags58\flex.c	/^	TOKEN_CLOSE_SQUARE,$/;"	e	enum:eTokenType	file:
TOKEN_CLOSE_SQUARE	.\ctags58\jscript.c	/^	TOKEN_CLOSE_SQUARE$/;"	e	enum:eTokenType	file:
TOKEN_CLOSE_SQUARE	.\ctags58\sql.c	/^	TOKEN_CLOSE_SQUARE,$/;"	e	enum:eTokenType	file:
TOKEN_CLOSE_SQUARE	.\ctags58\tex.c	/^	TOKEN_CLOSE_SQUARE,$/;"	e	enum:eTokenType	file:
TOKEN_COLON	.\ctags58\c.c	/^	TOKEN_COLON,         \/* the colon character *\/$/;"	e	enum:eTokenType	file:
TOKEN_COLON	.\ctags58\eiffel.c	/^	TOKEN_COLON,$/;"	e	enum:eTokenType	file:
TOKEN_COLON	.\ctags58\flex.c	/^	TOKEN_COLON,$/;"	e	enum:eTokenType	file:
TOKEN_COLON	.\ctags58\jscript.c	/^	TOKEN_COLON,$/;"	e	enum:eTokenType	file:
TOKEN_COLON	.\ctags58\tex.c	/^	TOKEN_COLON,$/;"	e	enum:eTokenType	file:
TOKEN_COMMA	.\ctags58\c.c	/^	TOKEN_COMMA,         \/* the comma character *\/$/;"	e	enum:eTokenType	file:
TOKEN_COMMA	.\ctags58\eiffel.c	/^	TOKEN_COMMA,$/;"	e	enum:eTokenType	file:
TOKEN_COMMA	.\ctags58\flex.c	/^	TOKEN_COMMA,$/;"	e	enum:eTokenType	file:
TOKEN_COMMA	.\ctags58\fortran.c	/^	TOKEN_COMMA,$/;"	e	enum:eTokenType	file:
TOKEN_COMMA	.\ctags58\jscript.c	/^	TOKEN_COMMA,$/;"	e	enum:eTokenType	file:
TOKEN_COMMA	.\ctags58\sql.c	/^	TOKEN_COMMA,$/;"	e	enum:eTokenType	file:
TOKEN_COMMA	.\ctags58\tex.c	/^	TOKEN_COMMA,$/;"	e	enum:eTokenType	file:
TOKEN_COMMA	.\ctags58\vhdl.c	/^	TOKEN_COMMA,		\/* the comma character *\/$/;"	e	enum:eTokenType	file:
TOKEN_CONSTRAINT	.\ctags58\eiffel.c	/^	TOKEN_CONSTRAINT,$/;"	e	enum:eTokenType	file:
TOKEN_COUNT	.\ctags58\c.c	/^	TOKEN_COUNT$/;"	e	enum:eTokenType	file:
TOKEN_DOLLAR	.\ctags58\eiffel.c	/^	TOKEN_DOLLAR,$/;"	e	enum:eTokenType	file:
TOKEN_DOT	.\ctags58\eiffel.c	/^	TOKEN_DOT,$/;"	e	enum:eTokenType	file:
TOKEN_DOUBLE_COLON	.\ctags58\c.c	/^	TOKEN_DOUBLE_COLON,  \/* double colon indicates nested-name-specifier *\/$/;"	e	enum:eTokenType	file:
TOKEN_DOUBLE_COLON	.\ctags58\fortran.c	/^	TOKEN_DOUBLE_COLON,$/;"	e	enum:eTokenType	file:
TOKEN_EQUAL_SIGN	.\ctags58\flex.c	/^	TOKEN_EQUAL_SIGN,$/;"	e	enum:eTokenType	file:
TOKEN_EQUAL_SIGN	.\ctags58\jscript.c	/^	TOKEN_EQUAL_SIGN,$/;"	e	enum:eTokenType	file:
TOKEN_EQUAL_SIGN	.\ctags58\tex.c	/^	TOKEN_EQUAL_SIGN,$/;"	e	enum:eTokenType	file:
TOKEN_EXCLAMATION	.\ctags58\flex.c	/^	TOKEN_EXCLAMATION,$/;"	e	enum:eTokenType	file:
TOKEN_EXCLAMATION	.\ctags58\tex.c	/^	TOKEN_EXCLAMATION,$/;"	e	enum:eTokenType	file:
TOKEN_FORWARD_SLASH	.\ctags58\flex.c	/^	TOKEN_FORWARD_SLASH,$/;"	e	enum:eTokenType	file:
TOKEN_FORWARD_SLASH	.\ctags58\jscript.c	/^	TOKEN_FORWARD_SLASH,$/;"	e	enum:eTokenType	file:
TOKEN_FORWARD_SLASH	.\ctags58\sql.c	/^	TOKEN_FORWARD_SLASH$/;"	e	enum:eTokenType	file:
TOKEN_FORWARD_SLASH	.\ctags58\tex.c	/^	TOKEN_FORWARD_SLASH,$/;"	e	enum:eTokenType	file:
TOKEN_GREATER_THAN	.\ctags58\flex.c	/^	TOKEN_GREATER_THAN,$/;"	e	enum:eTokenType	file:
TOKEN_GREATER_THAN	.\ctags58\tex.c	/^	TOKEN_GREATER_THAN,$/;"	e	enum:eTokenType	file:
TOKEN_IDENTIFIER	.\ctags58\eiffel.c	/^	TOKEN_IDENTIFIER,$/;"	e	enum:eTokenType	file:
TOKEN_IDENTIFIER	.\ctags58\flex.c	/^	TOKEN_IDENTIFIER,$/;"	e	enum:eTokenType	file:
TOKEN_IDENTIFIER	.\ctags58\fortran.c	/^	TOKEN_IDENTIFIER,$/;"	e	enum:eTokenType	file:
TOKEN_IDENTIFIER	.\ctags58\jscript.c	/^	TOKEN_IDENTIFIER,$/;"	e	enum:eTokenType	file:
TOKEN_IDENTIFIER	.\ctags58\sql.c	/^	TOKEN_IDENTIFIER,$/;"	e	enum:eTokenType	file:
TOKEN_IDENTIFIER	.\ctags58\tex.c	/^	TOKEN_IDENTIFIER,$/;"	e	enum:eTokenType	file:
TOKEN_IDENTIFIER	.\ctags58\vhdl.c	/^	TOKEN_IDENTIFIER,$/;"	e	enum:eTokenType	file:
TOKEN_KEYWORD	.\ctags58\c.c	/^	TOKEN_KEYWORD,$/;"	e	enum:eTokenType	file:
TOKEN_KEYWORD	.\ctags58\eiffel.c	/^	TOKEN_KEYWORD,$/;"	e	enum:eTokenType	file:
TOKEN_KEYWORD	.\ctags58\flex.c	/^	TOKEN_KEYWORD,$/;"	e	enum:eTokenType	file:
TOKEN_KEYWORD	.\ctags58\fortran.c	/^	TOKEN_KEYWORD,$/;"	e	enum:eTokenType	file:
TOKEN_KEYWORD	.\ctags58\jscript.c	/^	TOKEN_KEYWORD,$/;"	e	enum:eTokenType	file:
TOKEN_KEYWORD	.\ctags58\sql.c	/^	TOKEN_KEYWORD,$/;"	e	enum:eTokenType	file:
TOKEN_KEYWORD	.\ctags58\tex.c	/^	TOKEN_KEYWORD,$/;"	e	enum:eTokenType	file:
TOKEN_KEYWORD	.\ctags58\vhdl.c	/^	TOKEN_KEYWORD,$/;"	e	enum:eTokenType	file:
TOKEN_LABEL	.\ctags58\fortran.c	/^	TOKEN_LABEL,$/;"	e	enum:eTokenType	file:
TOKEN_LESS_THAN	.\ctags58\flex.c	/^	TOKEN_LESS_THAN,$/;"	e	enum:eTokenType	file:
TOKEN_LESS_THAN	.\ctags58\tex.c	/^	TOKEN_LESS_THAN,$/;"	e	enum:eTokenType	file:
TOKEN_NAME	.\ctags58\c.c	/^	TOKEN_NAME,          \/* an unknown name *\/$/;"	e	enum:eTokenType	file:
TOKEN_NONE	.\ctags58\c.c	/^	TOKEN_NONE,          \/* none *\/$/;"	e	enum:eTokenType	file:
TOKEN_NONE	.\ctags58\vhdl.c	/^	TOKEN_NONE,		\/* none *\/$/;"	e	enum:eTokenType	file:
TOKEN_NUMERIC	.\ctags58\eiffel.c	/^	TOKEN_NUMERIC,$/;"	e	enum:eTokenType	file:
TOKEN_NUMERIC	.\ctags58\fortran.c	/^	TOKEN_NUMERIC,$/;"	e	enum:eTokenType	file:
TOKEN_OPEN_BRACE	.\ctags58\eiffel.c	/^	TOKEN_OPEN_BRACE,$/;"	e	enum:eTokenType	file:
TOKEN_OPEN_BRACKET	.\ctags58\eiffel.c	/^	TOKEN_OPEN_BRACKET,$/;"	e	enum:eTokenType	file:
TOKEN_OPEN_CURLY	.\ctags58\flex.c	/^	TOKEN_OPEN_CURLY,$/;"	e	enum:eTokenType	file:
TOKEN_OPEN_CURLY	.\ctags58\jscript.c	/^	TOKEN_OPEN_CURLY,$/;"	e	enum:eTokenType	file:
TOKEN_OPEN_CURLY	.\ctags58\sql.c	/^	TOKEN_OPEN_CURLY,$/;"	e	enum:eTokenType	file:
TOKEN_OPEN_CURLY	.\ctags58\tex.c	/^	TOKEN_OPEN_CURLY,$/;"	e	enum:eTokenType	file:
TOKEN_OPEN_MXML	.\ctags58\flex.c	/^	TOKEN_OPEN_MXML,$/;"	e	enum:eTokenType	file:
TOKEN_OPEN_MXML	.\ctags58\tex.c	/^	TOKEN_OPEN_MXML,$/;"	e	enum:eTokenType	file:
TOKEN_OPEN_PAREN	.\ctags58\eiffel.c	/^	TOKEN_OPEN_PAREN,$/;"	e	enum:eTokenType	file:
TOKEN_OPEN_PAREN	.\ctags58\flex.c	/^	TOKEN_OPEN_PAREN,$/;"	e	enum:eTokenType	file:
TOKEN_OPEN_PAREN	.\ctags58\jscript.c	/^	TOKEN_OPEN_PAREN,$/;"	e	enum:eTokenType	file:
TOKEN_OPEN_PAREN	.\ctags58\sql.c	/^	TOKEN_OPEN_PAREN,$/;"	e	enum:eTokenType	file:
TOKEN_OPEN_PAREN	.\ctags58\tex.c	/^	TOKEN_OPEN_PAREN,$/;"	e	enum:eTokenType	file:
TOKEN_OPEN_PAREN	.\ctags58\vhdl.c	/^	TOKEN_OPEN_PAREN,	\/* ( *\/$/;"	e	enum:eTokenType	file:
TOKEN_OPEN_SQUARE	.\ctags58\flex.c	/^	TOKEN_OPEN_SQUARE,$/;"	e	enum:eTokenType	file:
TOKEN_OPEN_SQUARE	.\ctags58\jscript.c	/^	TOKEN_OPEN_SQUARE,$/;"	e	enum:eTokenType	file:
TOKEN_OPEN_SQUARE	.\ctags58\sql.c	/^	TOKEN_OPEN_SQUARE,$/;"	e	enum:eTokenType	file:
TOKEN_OPEN_SQUARE	.\ctags58\tex.c	/^	TOKEN_OPEN_SQUARE,$/;"	e	enum:eTokenType	file:
TOKEN_OPERATOR	.\ctags58\eiffel.c	/^	TOKEN_OPERATOR,$/;"	e	enum:eTokenType	file:
TOKEN_OPERATOR	.\ctags58\flex.c	/^	TOKEN_OPERATOR,$/;"	e	enum:eTokenType	file:
TOKEN_OPERATOR	.\ctags58\fortran.c	/^	TOKEN_OPERATOR,$/;"	e	enum:eTokenType	file:
TOKEN_OPERATOR	.\ctags58\jscript.c	/^	TOKEN_OPERATOR,$/;"	e	enum:eTokenType	file:
TOKEN_OPERATOR	.\ctags58\sql.c	/^	TOKEN_OPERATOR,$/;"	e	enum:eTokenType	file:
TOKEN_OPERATOR	.\ctags58\tex.c	/^	TOKEN_OPERATOR,$/;"	e	enum:eTokenType	file:
TOKEN_OPERATOR	.\ctags58\vhdl.c	/^	TOKEN_OPERATOR,$/;"	e	enum:eTokenType	file:
TOKEN_OTHER	.\ctags58\eiffel.c	/^	TOKEN_OTHER,$/;"	e	enum:eTokenType	file:
TOKEN_OTHER	.\ctags58\sql.c	/^	TOKEN_OTHER,$/;"	e	enum:eTokenType	file:
TOKEN_PACKAGE	.\ctags58\c.c	/^	TOKEN_PACKAGE,       \/* a Java package name *\/$/;"	e	enum:eTokenType	file:
TOKEN_PAREN_CLOSE	.\ctags58\fortran.c	/^	TOKEN_PAREN_CLOSE,$/;"	e	enum:eTokenType	file:
TOKEN_PAREN_NAME	.\ctags58\c.c	/^	TOKEN_PAREN_NAME,    \/* a single name in parentheses *\/$/;"	e	enum:eTokenType	file:
TOKEN_PAREN_OPEN	.\ctags58\fortran.c	/^	TOKEN_PAREN_OPEN,$/;"	e	enum:eTokenType	file:
TOKEN_PERCENT	.\ctags58\fortran.c	/^	TOKEN_PERCENT,$/;"	e	enum:eTokenType	file:
TOKEN_PERIOD	.\ctags58\flex.c	/^	TOKEN_PERIOD,$/;"	e	enum:eTokenType	file:
TOKEN_PERIOD	.\ctags58\jscript.c	/^	TOKEN_PERIOD,$/;"	e	enum:eTokenType	file:
TOKEN_PERIOD	.\ctags58\sql.c	/^	TOKEN_PERIOD,$/;"	e	enum:eTokenType	file:
TOKEN_PERIOD	.\ctags58\tex.c	/^	TOKEN_PERIOD,$/;"	e	enum:eTokenType	file:
TOKEN_PERIOD	.\ctags58\vhdl.c	/^	TOKEN_PERIOD,		\/* . *\/$/;"	e	enum:eTokenType	file:
TOKEN_QUESTION	.\ctags58\eiffel.c	/^	TOKEN_QUESTION,$/;"	e	enum:eTokenType	file:
TOKEN_QUESTION_MARK	.\ctags58\flex.c	/^	TOKEN_QUESTION_MARK$/;"	e	enum:eTokenType	file:
TOKEN_QUESTION_MARK	.\ctags58\tex.c	/^	TOKEN_QUESTION_MARK,$/;"	e	enum:eTokenType	file:
TOKEN_SEMICOLON	.\ctags58\c.c	/^	TOKEN_SEMICOLON,     \/* the semicolon character *\/$/;"	e	enum:eTokenType	file:
TOKEN_SEMICOLON	.\ctags58\eiffel.c	/^	TOKEN_SEMICOLON,$/;"	e	enum:eTokenType	file:
TOKEN_SEMICOLON	.\ctags58\flex.c	/^	TOKEN_SEMICOLON,$/;"	e	enum:eTokenType	file:
TOKEN_SEMICOLON	.\ctags58\jscript.c	/^	TOKEN_SEMICOLON,$/;"	e	enum:eTokenType	file:
TOKEN_SEMICOLON	.\ctags58\sql.c	/^	TOKEN_SEMICOLON,$/;"	e	enum:eTokenType	file:
TOKEN_SEMICOLON	.\ctags58\tex.c	/^	TOKEN_SEMICOLON,$/;"	e	enum:eTokenType	file:
TOKEN_SEMICOLON	.\ctags58\vhdl.c	/^	TOKEN_SEMICOLON,	\/* the semicolon character *\/$/;"	e	enum:eTokenType	file:
TOKEN_SEPARATOR	.\ctags58\eiffel.c	/^	TOKEN_SEPARATOR,$/;"	e	enum:eTokenType	file:
TOKEN_SPEC	.\ctags58\c.c	/^	TOKEN_SPEC,          \/* a storage class specifier, qualifier, type, etc. *\/$/;"	e	enum:eTokenType	file:
TOKEN_STAR	.\ctags58\tex.c	/^	TOKEN_STAR$/;"	e	enum:eTokenType	file:
TOKEN_STATEMENT_END	.\ctags58\fortran.c	/^	TOKEN_STATEMENT_END,$/;"	e	enum:eTokenType	file:
TOKEN_STRING	.\ctags58\eiffel.c	/^	TOKEN_STRING,$/;"	e	enum:eTokenType	file:
TOKEN_STRING	.\ctags58\flex.c	/^	TOKEN_STRING,$/;"	e	enum:eTokenType	file:
TOKEN_STRING	.\ctags58\fortran.c	/^	TOKEN_STRING$/;"	e	enum:eTokenType	file:
TOKEN_STRING	.\ctags58\jscript.c	/^	TOKEN_STRING,$/;"	e	enum:eTokenType	file:
TOKEN_STRING	.\ctags58\sql.c	/^	TOKEN_STRING,$/;"	e	enum:eTokenType	file:
TOKEN_STRING	.\ctags58\tex.c	/^	TOKEN_STRING,$/;"	e	enum:eTokenType	file:
TOKEN_STRING	.\ctags58\vhdl.c	/^	TOKEN_STRING$/;"	e	enum:eTokenType	file:
TOKEN_TILDE	.\ctags58\eiffel.c	/^	TOKEN_TILDE$/;"	e	enum:eTokenType	file:
TOKEN_TILDE	.\ctags58\sql.c	/^	TOKEN_TILDE,$/;"	e	enum:eTokenType	file:
TOKEN_UNDEFINED	.\ctags58\eiffel.c	/^	TOKEN_UNDEFINED,$/;"	e	enum:eTokenType	file:
TOKEN_UNDEFINED	.\ctags58\flex.c	/^	TOKEN_UNDEFINED,$/;"	e	enum:eTokenType	file:
TOKEN_UNDEFINED	.\ctags58\fortran.c	/^	TOKEN_UNDEFINED,$/;"	e	enum:eTokenType	file:
TOKEN_UNDEFINED	.\ctags58\jscript.c	/^	TOKEN_UNDEFINED,$/;"	e	enum:eTokenType	file:
TOKEN_UNDEFINED	.\ctags58\sql.c	/^	TOKEN_UNDEFINED,$/;"	e	enum:eTokenType	file:
TOKEN_UNDEFINED	.\ctags58\tex.c	/^	TOKEN_UNDEFINED,$/;"	e	enum:eTokenType	file:
TOVLWrite	.\vimfiles\bundle\vim-addon-mw-utils\autoload\tovl\scratch_buffer.vim	/^augroup TOVLWrite$/;"	a
TOhtml	.\vim73\plugin\tohtml.vim	/^  command -range=% TOhtml :call tohtml#Convert2HTML(<line1>, <line2>)$/;"	c
TRACE	.\ctags58\perl.c	27;"	d	file:
TRACE_PERL_C	.\ctags58\perl.c	26;"	d	file:
TRUE	.\ctags58\general.h	/^typedef enum { FALSE, TRUE } boolean;$/;"	e	enum:__anon23
TRUE	.\ctags58\general.h	/^typedef enum { FALSE, TRUE } booleanType;$/;"	e	enum:__anon22
TRUE	.\ctags58\general.h	91;"	d
TRUE	.\ctags58\general.h	99;"	d
TRequire	.\vimfiles\bundle\tlib_vim\plugin\02tlib.vim	/^command! -nargs=+ TRequire let s:require = [<f-args>]$/;"	c
TScratch	.\vimfiles\bundle\tlib_vim\plugin\02tlib.vim	/^command! -bar -nargs=* -bang TScratch call tlib#scratch#UseScratch({'scratch_split': '<bang>' != '!', <args>})$/;"	c
TTimeCommand	.\vimfiles\bundle\tlib_vim\plugin\02tlib.vim	/^command! -nargs=1 -complete=command TTimeCommand call tlib#cmd#Time(<q-args>)$/;"	c
TVarArg	.\vimfiles\bundle\tlib_vim\plugin\02tlib.vim	/^command! -nargs=+ TVarArg exec tlib#arg#Let([<args>])$/;"	c
Tab	.\vim73\ftplugin\cobol.vim	/^function! s:Tab()$/;"	f
TableSize	.\ctags58\keyword.c	/^static const unsigned int TableSize = 1 << HASH_EXPONENT;$/;"	v	file:
Tag	.\vim73\ftplugin\pdf.vim	/^function! s:Tag()$/;"	f
Tag2item	.\vim73\autoload\ccomplete.vim	/^function! s:Tag2item(val)$/;"	f
TagFailure	.\ctags58\readtags.h	/^typedef enum { TagFailure = 0, TagSuccess = 1 } tagResult;$/;"	e	enum:__anon67
TagFile	.\ctags58\entry.c	/^tagFile TagFile = {$/;"	v
TagFileName	.\ctags58\readtags.c	/^static const char *TagFileName = "tags";$/;"	v	file:
TagFiles	.\vim73\menu.vim	/^fun! s:TagFiles()$/;"	f
TagFinder	.\vimfiles\bundle\command-t\ruby\command-t\finder\tag_finder.rb	/^  class TagFinder < Finder$/;"	c	class:CommandT
TagPopupList	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\complete.vim	/^function! s:TagPopupList(szTypeName, szBase)$/;"	f
TagScanner	.\vimfiles\bundle\command-t\ruby\command-t\scanner\tag_scanner.rb	/^  class TagScanner < Scanner$/;"	c	class:CommandT
TagSuccess	.\ctags58\readtags.h	/^typedef enum { TagFailure = 0, TagSuccess = 1 } tagResult;$/;"	e	enum:__anon67
Tagcmd2extra	.\vim73\autoload\ccomplete.vim	/^function! s:Tagcmd2extra(cmd, name, fname)$/;"	f
Tagline2item	.\vim73\autoload\ccomplete.vim	/^function! s:Tagline2item(val, brackets)$/;"	f
TagsToStdout	.\ctags58\entry.c	/^static boolean TagsToStdout = FALSE;$/;"	v	file:
TarBrowseSelect	.\vim73\autoload\tar.vim	/^fun! s:TarBrowseSelect()$/;"	f
TclKinds	.\ctags58\tcl.c	/^static kindOption TclKinds [] = {$/;"	v	file:
TclParser	.\ctags58\tcl.c	/^extern parserDefinition* TclParser (void)$/;"	f	signature:(void)
TcshGetIndent	.\vim73\indent\tcsh.vim	/^function TcshGetIndent()$/;"	f
Test.String	.\vim73\macros\shellmenu.vim	/^imenu Test.String is empty [ x = "x$" ]hhi$/;"	m
Test.String	.\vim73\macros\shellmenu.vim	/^imenu Test.String is not empty [ x != "x$" ]hhi$/;"	m
Test.Strings	.\vim73\macros\shellmenu.vim	/^imenu Test.Strings is equal [ "" = "" ]hhhhhhhi$/;"	m
Test.Strings	.\vim73\macros\shellmenu.vim	/^imenu Test.Strings is not equal [ "" != "" ]hhhhhhhhi$/;"	m
Test.Values	.\vim73\macros\shellmenu.vim	/^imenu Test.Values is equal [  -eq  ]hhhhhhi$/;"	m
Test.Values	.\vim73\macros\shellmenu.vim	/^imenu Test.Values is greater equal [  -ge  ]hhhhhhi$/;"	m
Test.Values	.\vim73\macros\shellmenu.vim	/^imenu Test.Values is greater than [  -gt  ]hhhhhhi$/;"	m
Test.Values	.\vim73\macros\shellmenu.vim	/^imenu Test.Values is less equal [  -le  ]hhhhhhi$/;"	m
Test.Values	.\vim73\macros\shellmenu.vim	/^imenu Test.Values is less than [  -lt  ]hhhhhhi$/;"	m
Test.Values	.\vim73\macros\shellmenu.vim	/^imenu Test.Values is not equal [  -ne  ]hhhhhhi$/;"	m
Test.existence	[	.\vim73\macros\shellmenu.vim	/^imenu Test.existence	[ -e  ]hi$/;"	m
Test.existence	.\vim73\macros\shellmenu.vim	/^imenu Test.existence - directory	[ -d  ]hi$/;"	m
Test.existence	.\vim73\macros\shellmenu.vim	/^imenu Test.existence - executable	[ -x  ]hi$/;"	m
Test.existence	.\vim73\macros\shellmenu.vim	/^imenu Test.existence - file		[ -f  ]hi$/;"	m
Test.existence	.\vim73\macros\shellmenu.vim	/^imenu Test.existence - file (not empty)	[ -s  ]hi$/;"	m
Test.existence	.\vim73\macros\shellmenu.vim	/^imenu Test.existence - readable	[ -r  ]hi$/;"	m
Test.existence	.\vim73\macros\shellmenu.vim	/^imenu Test.existence - writable	[ -w  ]hi$/;"	m
TestArgs	.\vimfiles\bundle\tlib_vim\spec\tlib\arg.vim	/^function! TestArgs(...) "{{{3$/;"	f
TestArgs	.\vimfiles\bundle\tlib_vim\test\tlib.vim	/^function! TestArgs(...) "{{{3$/;"	f
TestArgs1	.\vimfiles\bundle\tlib_vim\spec\tlib\arg.vim	/^function! TestArgs1(...) "{{{3$/;"	f
TestArgs1	.\vimfiles\bundle\tlib_vim\test\tlib.vim	/^function! TestArgs1(...) "{{{3$/;"	f
TestArgs2	.\vimfiles\bundle\tlib_vim\spec\tlib\arg.vim	/^function! TestArgs2(...) "{{{3$/;"	f
TestArgs2	.\vimfiles\bundle\tlib_vim\test\tlib.vim	/^function! TestArgs2(...) "{{{3$/;"	f
TestArgs3	.\vimfiles\bundle\tlib_vim\spec\tlib\arg.vim	/^function! TestArgs3(...)$/;"	f
TestArgs3	.\vimfiles\bundle\tlib_vim\test\tlib.vim	/^function! TestArgs3(...)$/;"	f
TestFiletypeFuncs	.\vim73\filetype.vim	/^func! TestFiletypeFuncs(testlist)$/;"	f
TestGetArg	.\vimfiles\bundle\tlib_vim\spec\tlib\arg.vim	/^function! TestGetArg(...) "{{{3$/;"	f
TestGetArg	.\vimfiles\bundle\tlib_vim\test\tlib.vim	/^function! TestGetArg(...) "{{{3$/;"	f
TestGetArg1	.\vimfiles\bundle\tlib_vim\spec\tlib\arg.vim	/^function! TestGetArg1(...) "{{{3$/;"	f
TestGetArg1	.\vimfiles\bundle\tlib_vim\test\tlib.vim	/^function! TestGetArg1(...) "{{{3$/;"	f
TexKeywordTable	.\ctags58\tex.c	/^static const keywordDesc TexKeywordTable [] = {$/;"	v	file:
TexKinds	.\ctags58\tex.c	/^static kindOption TexKinds [] = {$/;"	v	file:
TexNewMathZone	.\vim73\syntax\tex.vim	/^ fun! TexNewMathZone(sfx,mathzone,starform)$/;"	f
TexParser	.\ctags58\tex.c	/^extern parserDefinition* TexParser (void)$/;"	f	signature:(void)
Texplore	.\vim73\plugin\netrwPlugin.vim	/^com! -nargs=* -bar       -count=0 -complete=dir	Texplore	call netrw#Explore(<count>,0,6        ,<q-args>)$/;"	c
TextWidth	.\vim73\menu.vim	/^fun! s:TextWidth()$/;"	f
ToggleGuiOption	.\vim73\menu.vim	/^fun! s:ToggleGuiOption(option)$/;"	f
Tok_BRL	.\ctags58\ocaml.c	/^	Tok_BRL,        \/* '[' *\/$/;"	e	enum:__anon52	file:
Tok_BRR	.\ctags58\ocaml.c	/^	Tok_BRR,        \/* ']' *\/$/;"	e	enum:__anon52	file:
Tok_Backslash	.\ctags58\ocaml.c	/^	Tok_Backslash,  \/* '\\\\' *\/$/;"	e	enum:__anon52	file:
Tok_CurlL	.\ctags58\ocaml.c	/^	Tok_CurlL,      \/* '{' *\/$/;"	e	enum:__anon52	file:
Tok_CurlR	.\ctags58\ocaml.c	/^	Tok_CurlR,      \/* '}' *\/$/;"	e	enum:__anon52	file:
Tok_EOF	.\ctags58\ocaml.c	/^	Tok_EOF         \/* END of file *\/$/;"	e	enum:__anon52	file:
Tok_EQ	.\ctags58\ocaml.c	/^	Tok_EQ,         \/* '=' *\/$/;"	e	enum:__anon52	file:
Tok_Op	.\ctags58\ocaml.c	/^	Tok_Op,         \/* any operator recognized by the language *\/$/;"	e	enum:__anon52	file:
Tok_PARL	.\ctags58\ocaml.c	/^	Tok_PARL,       \/* '(' *\/$/;"	e	enum:__anon52	file:
Tok_PARR	.\ctags58\ocaml.c	/^	Tok_PARR,       \/* ')' *\/$/;"	e	enum:__anon52	file:
Tok_Pipe	.\ctags58\ocaml.c	/^	Tok_Pipe,       \/* '|' *\/$/;"	e	enum:__anon52	file:
Tok_Prime	.\ctags58\ocaml.c	/^	Tok_Prime,      \/* '\\'' *\/$/;"	e	enum:__anon52	file:
Tok_Sharp	.\ctags58\ocaml.c	/^	Tok_Sharp,      \/* '#' *\/$/;"	e	enum:__anon52	file:
Tok_To	.\ctags58\ocaml.c	/^	Tok_To,         \/* '->' *\/$/;"	e	enum:__anon52	file:
Tok_Val	.\ctags58\ocaml.c	/^	Tok_Val,        \/* string\/number\/poo *\/$/;"	e	enum:__anon52	file:
Tok_comma	.\ctags58\ocaml.c	/^	Tok_comma,      \/* ',' *\/$/;"	e	enum:__anon52	file:
Tok_semi	.\ctags58\ocaml.c	/^	Tok_semi,       \/* ';' *\/$/;"	e	enum:__anon52	file:
TokensToString	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\items.vim	/^function! s:TokensToString(tokens)$/;"	f
ToolBar.Paste		<C-R>+	.\vim73\menu.vim	/^  cnoremenu	 ToolBar.Paste		<C-R>+$/;"	m
ToolBar.Print		:hardcopy<CR>	.\vim73\menu.vim	/^    vnoremenu ToolBar.Print		:hardcopy<CR>$/;"	m
ToolBar.Print		:w	.\vim73\menu.vim	/^    vnoremenu ToolBar.Print		:w !lpr<CR>$/;"	m
ToolBar.Replace		y:promptrepl	.\vim73\menu.vim	/^    vnoremenu ToolBar.Replace		y:promptrepl <C-R>=<SID>FixFText()<CR><CR>$/;"	m
Totals	.\ctags58\main.c	/^static struct { long files, lines, bytes; } Totals = { 0, 0, 0 };$/;"	v	typeref:struct:__anon49	file:
TreeListMove	.\vim73\autoload\netrw.vim	/^fun! s:TreeListMove(dir)$/;"	f
TriggerSnippet	.\vimfiles\bundle\vim-snipmate\plugin\snipMate.vim	/^fun! TriggerSnippet()$/;"	f
U	.\vim73\macros\hanoi\hanoi.vim	/^map U L$/;"	m
UNIX_PATH_SEPARATOR	.\ctags58\e_os2.h	14;"	d
UNUSED	.\ctags58\ocaml.c	/^static void classSpecif (vString * const UNUSED (ident), ocaToken what)$/;"	p	file:
UNUSED	.\ctags58\ocaml.c	/^static void contextualTillToken (vString * const UNUSED (ident), ocaToken what)$/;"	p	file:
UNUSED	.\ctags58\ocaml.c	/^static void globalScope (vString * const UNUSED (ident), ocaToken what)$/;"	p	file:
UNUSED	.\ctags58\ocaml.c	/^static void ignoreToken (vString * const UNUSED (ident), ocaToken UNUSED (what))$/;"	f	file:
UNUSED	.\ctags58\ocaml.c	/^static void ignoreToken (vString * const UNUSED (ident), ocaToken UNUSED (what))$/;"	p	file:
UNUSED	.\ctags58\ocaml.c	/^static void matchPattern (vString * const UNUSED (ident), ocaToken what)$/;"	p	file:
UNUSED	.\ctags58\ocaml.c	/^static void tillToken (vString * const UNUSED (ident), ocaToken what)$/;"	p	file:
UNUSED	.\ctags58\ocaml.c	28;"	d	file:
UNUSED	.\ctags58\ocaml.c	30;"	d	file:
UNUSED	.\ctags58\ocaml.c	32;"	d	file:
USAGE	.\vim73\tools\ccfilter.c	/^const char USAGE[] =$/;"	v
USAGE	.\vim73\tools\shtags.pl	/^USAGE: $program [-kvwVx] [-t <file>] <files>$/;"	l
USE_REPLACEMENT_TRUNCATE	.\ctags58\entry.c	62;"	d	file:
UWAGA	.\vim73\tutor\tutor.pl	/^	 UWAGA:$/;"	l
UWAGA	.\vim73\tutor\tutor.pl	/^  UWAGA: Litera  d  pojawi siê na dole ekranu. Vim czeka na wpisanie  w .$/;"	l
UWAGA	.\vim73\tutor\tutor.pl	/^  UWAGA: Przeczytaj ca³± lekcjê zanim wykonasz jakie¶ polecenia!!!$/;"	l
UWAGA	.\vim73\tutor\tutor.pl	/^UWAGA:  Mno¿nik pomiêdzy operatorem  d  i ruchem dzia³a podobnie do ruchu bez$/;"	l
UWAGA	.\vim73\tutor\tutor.pl	/^UWAGA:  Mo¿esz u¿ywaæ <BS> aby poprawiaæ b³êdy w czasie pisania.$/;"	l
UWAGA	.\vim73\tutor\tutor.pl	/^UWAGA: :q!<ENTER> porzuca wszelkie zmiany jakie zrobi³e¶. W nastêpnych$/;"	l
UWAGA	.\vim73\tutor\tutor.pl	/^UWAGA: Mo¿esz te¿ wczytaæ wyj¶cie zewnêtrznego polecenia. Na przyk³ad$/;"	l
UWAGA	.\vim73\tutor\tutor.pl	/^UWAGA: Mo¿esz te¿ zobaczyæ pozycjê kursora w prawym, dolnym rogu ekranu.$/;"	l
UWAGA	.\vim73\tutor\tutor.pl	/^UWAGA: Pamiêtaj, by uczyæ siê æwicz±c, a nie pamiêciowo.$/;"	l
UWAGA	.\vim73\tutor\tutor.pl	/^UWAGA: Po wykonaniu kroku 2. zobaczysz tekst z Lekcji 5.3. Potem przejd¼$/;"	l
UWAGA	.\vim73\tutor\tutor.pl	/^UWAGA: Tryb Replace jest jak tryb Insert, ale ka¿dy znak usuwa istniej±cy$/;"	l
UWAGA	.\vim73\tutor\tutor.pl	/^UWAGA: Ucz siê przez æwiczenie, nie wkuwanie.$/;"	l
UWAGA	.\vim73\tutor\tutor.pl	/^UWAGA: Uzupe³nianie dzia³a dla wielu poleceñ. Spróbuj wcisn±æ CTRL-D i <TAB>.$/;"	l
UWAGA	.\vim73\tutor\tutor.pl	/^UWAGA: Wci¶niêcie  v  zaczyna tryb Wizualny. Mo¿esz poruszaæ kursorem, by$/;"	l
UWAGA	.\vim73\tutor\tutor.pl	/^UWAGA: Wci¶niêcie <ESC> przeniesie Ciê z powrotem do trybu Normal$/;"	l
UWAGA	.\vim73\tutor\tutor.pl	/^UWAGA: Wpisanie tylko ruchu w trybie Normal bez operatora przeniesie kursor$/;"	l
UndoHighlightLine	.\vimfiles\bundle\tlib_vim\autoload\tlib\buffer.vim	/^function! s:UndoHighlightLine() "{{{3$/;"	f
Unfinalise	.\vim73\ftplugin\debchangelog.vim	/^function Unfinalise()$/;"	f
UnfinaliseMenu	.\vim73\ftplugin\debchangelog.vim	/^function <SID>UnfinaliseMenu()$/;"	f
Ungetc	.\ctags58\fortran.c	/^static int Ungetc;$/;"	v	file:
Ungetc	.\ctags58\verilog.c	/^static int Ungetc;$/;"	v	file:
UniqValue	.\vimfiles\bundle\tlib_vim\autoload\tlib\list.vim	/^function! s:UniqValue(value) "{{{3$/;"	f
Update	.\vim73\optwin.vim	/^fun! <SID>Update(lnum, line, local, thiswin)$/;"	f
UpdateBuffersMenu	.\vim73\autoload\netrw.vim	/^fun! s:UpdateBuffersMenu()$/;"	f
Urgency	.\vim73\ftplugin\debchangelog.vim	/^function Urgency(urg)$/;"	f
Usage	.\ctags58\eiffel.c	/^static const char *const Usage =$/;"	v	file:
Usage	.\ctags58\readtags.c	/^const char *const Usage =$/;"	v
Usage	.\vim73\tools\efm_perl.pl	/^Usage:$/;"	l
UseBufWinVars	.\vim73\autoload\netrw.vim	/^fun! s:UseBufWinVars()$/;"	f
UseVimball	.\vim73\plugin\vimballPlugin.vim	/^com! -na=? -complete=dir  UseVimball			call vimball#Vimball(1,<f-args>)$/;"	c
Uwaga	.\vim73\tutor\tutor.pl	/^Uwaga:  'b³ond' to nie jest metoda, by przeliterowaæ b³±d; 'b³ond' to b³±d.$/;"	l
Uwaga	.\vim73\tutor\tutor.pl	/^Uwaga:  Kiedy szukanie osi±gnie koniec pliku, bêdzie kontynuowane od pocz±tku$/;"	l
Uwaga	.\vim73\tutor\tutor.pl	/^Uwaga:  W ten sposób mo¿na wykonaæ wszystkie polecenia pow³oki.$/;"	l
Uwaga	.\vim73\tutor\tutor.pl	/^Uwaga:  Wszystkie polecenia  :  musz± byæ zakoñczone <ENTER>.$/;"	l
Uwaga	.\vim73\tutor\tutor.pl	/^Uwaga:  a ,  i  oraz  A  prowadz± do trybu Insert, jedyn± ró¿nic± jest miejsce,$/;"	l
Uwaga	.\vim73\tutor\tutor.pl	/^Uwaga: Aby ignorowaæ wielko¶æ liter dla jednego wyszukiwania: \/ignore\\c<ENTER>$/;"	l
Uwaga	.\vim73\tutor\tutor.pl	/^Uwaga: Aby usun±æ pod¶wietlanie dopasowañ, wpisz:   :nohlsearch$/;"	l
Uwaga	.\vim73\tutor\tutor.pl	/^Uwaga: Je¶li nie jeste¶ pewien czego¶ co wpisa³e¶, wci¶nij <ESC>, by wróciæ do$/;"	l
Uwaga	.\vim73\tutor\tutor.pl	/^Uwaga: Klawisze kursora tak¿e powinny dzia³aæ, ale u¿ywaj±c  hjkl  bêdziesz$/;"	l
Uwaga	.\vim73\tutor\tutor.pl	/^Uwaga: Ta funkcja jest bardzo u¿yteczna w debuggowaniu programu$/;"	l
Uwaga	.\vim73\tutor\tutor.pl	/^Uwaga: Zauwa¿, ¿e gdyby¶ teraz wyszed³ z Vima, a nastêpnie wszed³ ponownie$/;"	l
Uwaga	.\vim73\tutor\tutor.pl	/^Uwaga: mo¿esz u¿yæ  y  jako operatora;  yw  kopiuje jeden wyraz.$/;"	l
V	.\vim73\macros\hanoi\hanoi.vim	/^map V Go\/$/;"	m
V	.\vim73\macros\life\life.vim	/^map V R$/;"	m
VERSION	.\vim73\tools\efm_perl.pl	/^use constant VERSION => 0.2;$/;"	c
VERsion	.\ctags58\main.c	/^  static const char *VERsion = "$VER: "PROGRAM_NAME" "PROGRAM_VERSION" "$/;"	v	file:
VHDLTAG_COMPONENT	.\ctags58\vhdl.c	/^	VHDLTAG_COMPONENT,$/;"	e	enum:__anon87	file:
VHDLTAG_CONSTANT	.\ctags58\vhdl.c	/^	VHDLTAG_CONSTANT,$/;"	e	enum:__anon87	file:
VHDLTAG_ENTITY	.\ctags58\vhdl.c	/^	VHDLTAG_ENTITY,$/;"	e	enum:__anon87	file:
VHDLTAG_FUNCTION	.\ctags58\vhdl.c	/^	VHDLTAG_FUNCTION,$/;"	e	enum:__anon87	file:
VHDLTAG_LOCAL	.\ctags58\vhdl.c	/^	VHDLTAG_LOCAL$/;"	e	enum:__anon87	file:
VHDLTAG_PACKAGE	.\ctags58\vhdl.c	/^	VHDLTAG_PACKAGE,$/;"	e	enum:__anon87	file:
VHDLTAG_PROCEDURE	.\ctags58\vhdl.c	/^	VHDLTAG_PROCEDURE,$/;"	e	enum:__anon87	file:
VHDLTAG_PROTOTYPE	.\ctags58\vhdl.c	/^	VHDLTAG_PROTOTYPE,$/;"	e	enum:__anon87	file:
VHDLTAG_RECORD	.\ctags58\vhdl.c	/^	VHDLTAG_RECORD,$/;"	e	enum:__anon87	file:
VHDLTAG_SUBTYPE	.\ctags58\vhdl.c	/^	VHDLTAG_SUBTYPE,$/;"	e	enum:__anon87	file:
VHDLTAG_TYPE	.\ctags58\vhdl.c	/^	VHDLTAG_TYPE,$/;"	e	enum:__anon87	file:
VHDLTAG_UNDEFINED	.\ctags58\vhdl.c	/^	VHDLTAG_UNDEFINED = -1,$/;"	e	enum:__anon87	file:
VIM	.\vimfiles\bundle\command-t\ruby\command-t\vim.rb	/^  module VIM$/;"	m	class:CommandT
VIM	.\vimfiles\bundle\command-t\ruby\command-t\vim\path_utilities.rb	/^  module VIM$/;"	m	class:CommandT
VIM	.\vimfiles\bundle\command-t\ruby\command-t\vim\screen.rb	/^  module VIM$/;"	m	class:CommandT
VIM	.\vimfiles\bundle\command-t\ruby\command-t\vim\window.rb	/^  module VIM$/;"	m	class:CommandT
VIM	.\vimfiles\bundle\command-t\spec\spec_helper.rb	/^module VIM$/;"	m
VK_CLASS	.\ctags58\c.c	/^	VK_CLASS, VK_DEFINE, VK_ENUMERATOR, VK_FUNCTION,$/;"	e	enum:__anon15	file:
VK_DEFINE	.\ctags58\c.c	/^	VK_CLASS, VK_DEFINE, VK_ENUMERATOR, VK_FUNCTION,$/;"	e	enum:__anon15	file:
VK_ENUMERATION	.\ctags58\c.c	/^	VK_ENUMERATION, VK_LOCAL, VK_MEMBER, VK_PROGRAM, VK_PROTOTYPE,$/;"	e	enum:__anon15	file:
VK_ENUMERATOR	.\ctags58\c.c	/^	VK_CLASS, VK_DEFINE, VK_ENUMERATOR, VK_FUNCTION,$/;"	e	enum:__anon15	file:
VK_EXTERN_VARIABLE	.\ctags58\c.c	/^	VK_EXTERN_VARIABLE$/;"	e	enum:__anon15	file:
VK_FUNCTION	.\ctags58\c.c	/^	VK_CLASS, VK_DEFINE, VK_ENUMERATOR, VK_FUNCTION,$/;"	e	enum:__anon15	file:
VK_LOCAL	.\ctags58\c.c	/^	VK_ENUMERATION, VK_LOCAL, VK_MEMBER, VK_PROGRAM, VK_PROTOTYPE,$/;"	e	enum:__anon15	file:
VK_MEMBER	.\ctags58\c.c	/^	VK_ENUMERATION, VK_LOCAL, VK_MEMBER, VK_PROGRAM, VK_PROTOTYPE,$/;"	e	enum:__anon15	file:
VK_PROGRAM	.\ctags58\c.c	/^	VK_ENUMERATION, VK_LOCAL, VK_MEMBER, VK_PROGRAM, VK_PROTOTYPE,$/;"	e	enum:__anon15	file:
VK_PROTOTYPE	.\ctags58\c.c	/^	VK_ENUMERATION, VK_LOCAL, VK_MEMBER, VK_PROGRAM, VK_PROTOTYPE,$/;"	e	enum:__anon15	file:
VK_TASK	.\ctags58\c.c	/^	VK_TASK, VK_TYPEDEF, VK_VARIABLE,$/;"	e	enum:__anon15	file:
VK_TYPEDEF	.\ctags58\c.c	/^	VK_TASK, VK_TYPEDEF, VK_VARIABLE,$/;"	e	enum:__anon15	file:
VK_UNDEFINED	.\ctags58\c.c	/^	VK_UNDEFINED = -1,$/;"	e	enum:__anon15	file:
VK_VARIABLE	.\ctags58\c.c	/^	VK_TASK, VK_TYPEDEF, VK_VARIABLE,$/;"	e	enum:__anon15	file:
VMS	.\ctags58\general.h	36;"	d
VSTRING_PUTC_MACRO	.\ctags58\vstring.h	27;"	d
VTAB	.\ctags58\read.h	/^	VTAB          = '\\v',$/;"	e	enum:eCharacters
VarNames	.\vim73\tools\pltags.pl	/^sub VarNames($)$/;"	s
VbGetIndent	.\vim73\indent\vb.vim	/^fun! VbGetIndent(lnum)$/;"	f
VbSearch	.\vim73\ftplugin\vb.vim	/^fun! <SID>VbSearch(pattern, flags)$/;"	f
VeraKinds	.\ctags58\c.c	/^static kindOption VeraKinds [] = {$/;"	v	file:
VeraParser	.\ctags58\c.c	/^extern parserDefinition* VeraParser (void)$/;"	f	signature:(void)
VerilogKeywordTable	.\ctags58\verilog.c	/^static keywordAssoc VerilogKeywordTable [] = {$/;"	v	file:
VerilogKinds	.\ctags58\verilog.c	/^static kindOption VerilogKinds [] = {$/;"	v	file:
VerilogParser	.\ctags58\verilog.c	/^extern parserDefinition* VerilogParser (void)$/;"	f	signature:(void)
Vexplore	.\vim73\plugin\netrwPlugin.vim	/^com! -nargs=* -bar -bang -count=0 -complete=dir	Vexplore	call netrw#Explore(<count>,1,4+<bang>0,<q-args>)$/;"	c
VhdlKeywordTable	.\ctags58\vhdl.c	/^static keywordDesc VhdlKeywordTable[] = {$/;"	v	file:
VhdlKinds	.\ctags58\vhdl.c	/^static kindOption VhdlKinds[] = {$/;"	v	file:
VhdlParser	.\ctags58\vhdl.c	/^extern parserDefinition *VhdlParser (void)$/;"	f	signature:(void)
VimEnter	.\vim73\plugin\netrwPlugin.vim	/^fun! s:VimEnter(dirname)$/;"	f
VimFormatter	.\vimfiles\bundle\command-t\spec\vim_formatter.rb	/^      class VimFormatter < BaseTextFormatter$/;"	c	class:Spec.Runner.Formatter
VimKinds	.\ctags58\vim.c	/^static kindOption VimKinds [] = {$/;"	v	file:
VimParser	.\ctags58\vim.c	/^extern parserDefinition* VimParser (void)$/;"	f	signature:(void)
VimScriptDef	.\vimfiles\bundle\command-t\vendor\vimscriptuploader\vimscriptdef.rb	/^class VimScriptDef$/;"	c
VimScriptUploader	.\vimfiles\bundle\command-t\vendor\vimscriptuploader\vimscriptuploader.rb	/^class VimScriptUploader$/;"	c
Vimball	.\vimfiles\bundle\command-t\vendor\vimball\vimball.rb	/^class Vimball$/;"	c
VimballList	.\vim73\plugin\vimballPlugin.vim	/^com! -na=0                VimballList			call vimball#Vimball(0)$/;"	c
Vimuntar	.\vim73\plugin\tarPlugin.vim	/^com! -nargs=? -complete=file Vimuntar call tar#Vimuntar(<q-args>)$/;"	c
W	.\vim73\macros\life\life.vim	/^map W makh,3`ah,3`ajh,3($/;"	m
WARNING	.\ctags58\routines.h	/^enum eErrorTypes { FATAL = 1, WARNING = 2, PERROR = 4 };$/;"	e	enum:eErrorTypes
WARNINGS	.\ctags58\mk_bc5.mak	/^WARNINGS = -w-aus -w-par -w-pia -w-pro -w-sus$/;"	m
WHOLE_FILE	.\ctags58\entry.h	26;"	d
WIDE_NEWLINE_CHAR	.\ctags58\gnu_regex\regex_internal.h	112;"	d
WORD_DELIM	.\ctags58\gnu_regex\regex_internal.h	/^  WORD_DELIM = WORD_DELIM_CONSTRAINT,$/;"	e	enum:__anon27
WORD_DELIM_CONSTRAINT	.\ctags58\gnu_regex\regex_internal.h	166;"	d
WORD_FIRST	.\ctags58\gnu_regex\regex_internal.h	/^  WORD_FIRST = PREV_NOTWORD_CONSTRAINT | NEXT_WORD_CONSTRAINT,$/;"	e	enum:__anon27
WORD_LAST	.\ctags58\gnu_regex\regex_internal.h	/^  WORD_LAST = PREV_WORD_CONSTRAINT | NEXT_NOTWORD_CONSTRAINT,$/;"	e	enum:__anon27
WarnIfNotUnfinalised	.\vim73\ftplugin\debchangelog.vim	/^function <SID>WarnIfNotUnfinalised()$/;"	f
Wholematch	.\vim73\macros\matchit.vim	/^fun! s:Wholematch(string, pat, start)$/;"	f
Window	.\vimfiles\bundle\command-t\ruby\command-t\vim\window.rb	/^    class Window$/;"	c	class:CommandT.VIM
Wydawca	.\vim73\tutor\tutor.pl	/^	Wydawca: Helion 2001 (O'Reilly) - wg 6. ang. wydania$/;"	l
Wydawca	.\vim73\tutor\tutor.pl	/^	Wydawca: Helion 2001 (O'Reilly).$/;"	l
Wydawca	.\vim73\tutor\tutor.pl	/^	Wydawca: New Riders$/;"	l
Wydawca	.\vim73\tutor\tutor.pl	/^	Wydawca: O'Reilly & Associates Inc.$/;"	l
X	.\vim73\macros\hanoi\hanoi.vim	/^map X x$/;"	m
XMLent	.\vim73\ftplugin\xml.vim	/^command! -nargs=? XMLent call xmlcomplete#CreateEntConnection(<f-args>)$/;"	c
XMLns	.\vim73\ftplugin\xml.vim	/^command! -nargs=+ XMLns call xmlcomplete#CreateConnection(<f-args>)$/;"	c
Xf86confdeclopt	.\vim73\syntax\xf86conf.vim	/^	command -nargs=+ Xf86confdeclopt syn keyword xf86confOptionName <args> contained nextgroup=xf86confValue,xf86confComment skipwhite$/;"	c
Xf86confdeclopt	.\vim73\syntax\xf86conf.vim	/^	command -nargs=+ Xf86confdeclopt syn keyword xf86confOptionName <args> contained$/;"	c
XmlIndentGet	.\vim73\indent\xml.vim	/^fun! XmlIndentGet(lnum, use_syntax_check)$/;"	f
XmlIndentSum	.\vim73\indent\xml.vim	/^fun! <SID>XmlIndentSum(lnum, style, add)$/;"	f
XmlIndentSynCheck	.\vim73\indent\xml.vim	/^fun! <SID>XmlIndentSynCheck(lnum)$/;"	f
XmlIndentWithPattern	.\vim73\indent\xml.vim	/^fun! <SID>XmlIndentWithPattern(line, pat)$/;"	f
XxdBack	.\vim73\menu.vim	/^func! s:XxdBack()$/;"	f
XxdConv	.\vim73\menu.vim	/^func! s:XxdConv()$/;"	f
XxdFind	.\vim73\menu.vim	/^func! s:XxdFind()$/;"	f
Y	.\vim73\macros\hanoi\hanoi.vim	/^map Y o0123456789Z0q$/;"	m
YaccParser	.\ctags58\yacc.c	/^extern parserDefinition* YaccParser ()$/;"	f
Z	.\vim73\macros\maze\maze.c	/^char*M,A,Z,E=40,J[40],T[40];main(C){for(*J=A=scanf(M="%d",&C);$/;"	v
Z	.\vim73\macros\maze\mazeansi.c	/^char*M,A,Z,E=40,J[80],T[3];main(C){for(M=J+E,*J=A=scanf("%d",&$/;"	v
Z	.\vim73\macros\maze\mazeclean.c	/^char *M, A, Z, E = 40, line[80], T[3];$/;"	v
ZipBrowseSelect	.\vim73\autoload\zip.vim	/^fun! s:ZipBrowseSelect()$/;"	f
["	.\vim73\ftplugin\vim.vim	/^nnoremap <silent><buffer> [" :call search('\\%(^\\s*".*\\n\\)\\%(^\\s*"\\)\\@!', "bW")<CR>$/;"	m
["	.\vim73\ftplugin\vim.vim	/^vnoremap <silent><buffer> [" :<C-U>exe "normal! gv"<Bar>call search('\\%(^\\s*".*\\n\\)\\%(^\\s*"\\)\\@!', "bW")<CR>$/;"	m
[#	.\vim73\ftplugin\hamster.vim	/^noremap <silent><buffer> [# :call search('^\\s*#\\@!', "bW")<CR>$/;"	m
[%	.\vim73\macros\matchit.vim	/^nnoremap <silent> [% :<C-U>call <SID>MultiMatch("bW", "n") <CR>$/;"	m
[%	.\vim73\macros\matchit.vim	/^onoremap <silent> [% v:<C-U>call <SID>MultiMatch("bW", "o") <CR>$/;"	m
[%	.\vim73\macros\matchit.vim	/^vmap [% <Esc>[%m'gv``$/;"	m
[M	.\vim73\ftplugin\ruby.vim	/^  nnoremap <silent> <buffer> [M :<C-U>call <SID>searchsyn('\\<end\\>','rubyDefine','b','n')<CR>$/;"	m
[[	.\vim73\ftplugin\abaqus.vim	/^noremap <silent><buffer> [[ ?^\\*\\a<CR>:nohlsearch<CR>$/;"	m
[[	.\vim73\ftplugin\cobol.vim	/^    noremap <silent> <buffer> [[ m':call search('\\c^\\%(\\s*\\<Bar>.\\{6\\}\\s\\+\\)\\zs[A-Za-z0-9-]\\+\\s\\+\\%(division\\<Bar>section\\)\\s*\\.','bW')<CR>$/;"	m
[[	.\vim73\ftplugin\hamster.vim	/^noremap <silent><buffer> [[ :call search('^\\s*sub\\>', "bW")<CR>$/;"	m
[[	.\vim73\ftplugin\python.vim	/^nnoremap <silent> <buffer> [[ :call <SID>Python_jump('?^\\(class\\\\|def\\)')<cr>$/;"	m
[[	.\vim73\ftplugin\ruby.vim	/^  nnoremap <silent> <buffer> [[ :<C-U>call <SID>searchsyn('\\<\\%(class\\<Bar>module\\)\\>','rubyModule\\<Bar>rubyClass','b','n')<CR>$/;"	m
[[	.\vim73\ftplugin\sql.vim	/^nmap <buffer> <silent> [[ :call search('\\\\c^\\\\s*begin\\\\>', 'bW' )<CR>$/;"	m
[[	.\vim73\ftplugin\sql.vim	/^vmap <buffer> <silent> [[ :<C-U>exec "normal! gv"<Bar>call search('\\\\c^\\\\s*begin\\\\>', 'bW' )<CR>$/;"	m
[[	.\vim73\ftplugin\vb.vim	/^nnoremap <buffer> <silent> [[ :call <SID>VbSearch('^\\s*\\(\\(private\\|public\\)\\s\\+\\)\\=\\(function\\\\|sub\\)', 'bW')<cr>$/;"	m
[[	.\vim73\ftplugin\vhdl.vim	/^noremap  <buffer><silent>[[ :<C-u>cal <SID>CountWrapper(':cal search("\\\\%(--.*\\\\)\\\\@<!\\\\%(\\\\<end\\\\s\\\\+\\\\)\\\\@<!\\\\<".b:vhdl_explore."\\\\>\\\\c\\\\<Bar>\\\\%^","bW")')<CR>$/;"	m
[[	.\vim73\ftplugin\vhdl.vim	/^vnoremap <buffer><silent>[[ :<C-u>cal <SID>CountWrapper('[[')<CR>$/;"	m
[[	.\vim73\ftplugin\vim.vim	/^nnoremap <silent><buffer> [[ m':call search('^\\s*fu\\%[nction]\\>', "bW")<CR>$/;"	m
[[	.\vim73\ftplugin\vim.vim	/^vnoremap <silent><buffer> [[ m':<C-U>exe "normal! gv"<Bar>call search('^\\s*fu\\%[nction]\\>', "bW")<CR>$/;"	m
[]	.\vim73\ftplugin\cobol.vim	/^    noremap <silent> <buffer> [] m':call <SID>toend('b')<CR>$/;"	m
[]	.\vim73\ftplugin\hamster.vim	/^noremap <silent><buffer> [] :call search('^\\s*endsub\\>', "bW")<CR>$/;"	m
[]	.\vim73\ftplugin\ruby.vim	/^  nnoremap <silent> <buffer> [] :<C-U>call <SID>searchsyn('\\<end\\>','rubyModule\\<Bar>rubyClass','b','n')<CR>$/;"	m
[]	.\vim73\ftplugin\sql.vim	/^nmap <buffer> <silent> [] :call search('\\\\c^\\\\s*end\\\\W*$', 'bW' )<CR>$/;"	m
[]	.\vim73\ftplugin\sql.vim	/^vmap <buffer> <silent> [] :<C-U>exec "normal! gv"<Bar>call search('\\\\c^\\\\s*end\\\\W*$', 'bW' )<CR>$/;"	m
[]	.\vim73\ftplugin\vb.vim	/^nnoremap <buffer> <silent> [] :call <SID>VbSearch('^\\s*\\<end\\>\\s\\+\\(function\\\\|sub\\)', 'bW')<cr>$/;"	m
[]	.\vim73\ftplugin\vhdl.vim	/^noremap  <buffer><silent>[] :<C-u>cal <SID>CountWrapper(':cal search("\\\\%(--.*\\\\)\\\\@<!\\\\<end\\\\s\\\\+".b:vhdl_explore."\\\\>\\\\c\\\\<Bar>\\\\%^","bW")')<CR>$/;"	m
[]	.\vim73\ftplugin\vhdl.vim	/^vnoremap <buffer><silent>[] :<C-u>cal <SID>CountWrapper('[]')<CR>$/;"	m
[]	.\vim73\ftplugin\vim.vim	/^nnoremap <silent><buffer> [] m':call search('^\\s*endf*\\%[unction]\\>', "bW")<CR>$/;"	m
[]	.\vim73\ftplugin\vim.vim	/^vnoremap <silent><buffer> [] m':<C-U>exe "normal! gv"<Bar>call search('^\\s*endf*\\%[unction]\\>', "bW")<CR>$/;"	m
[m	.\vim73\ftplugin\python.vim	/^nnoremap <silent> <buffer> [m :call <SID>Python_jump('?^\\s*\\(class\\\\|def\\)')<cr>$/;"	m
[m	.\vim73\ftplugin\ruby.vim	/^  nnoremap <silent> <buffer> [m :<C-U>call <SID>searchsyn('\\<def\\>','rubyDefine','b','n')<CR>$/;"	m
]"	.\vim73\ftplugin\vim.vim	/^nnoremap <silent><buffer> ]" :call search('^\\(\\s*".*\\n\\)\\@<!\\(\\s*"\\)', "W")<CR>$/;"	m
]"	.\vim73\ftplugin\vim.vim	/^vnoremap <silent><buffer> ]" :<C-U>exe "normal! gv"<Bar>call search('^\\(\\s*".*\\n\\)\\@<!\\(\\s*"\\)', "W")<CR>$/;"	m
]#	.\vim73\ftplugin\hamster.vim	/^noremap <silent><buffer> ]# :call search('^\\s*#\\@!', "W")<CR>$/;"	m
]%	.\vim73\macros\matchit.vim	/^nnoremap <silent> ]% :<C-U>call <SID>MultiMatch("W",  "n") <CR>$/;"	m
]%	.\vim73\macros\matchit.vim	/^onoremap <silent> ]% v:<C-U>call <SID>MultiMatch("W",  "o") <CR>$/;"	m
]%	.\vim73\macros\matchit.vim	/^vmap ]% <Esc>]%m'gv``$/;"	m
]M	.\vim73\ftplugin\ruby.vim	/^  nnoremap <silent> <buffer> ]M :<C-U>call <SID>searchsyn('\\<end\\>','rubyDefine','','n')<CR>$/;"	m
][	.\vim73\ftplugin\cobol.vim	/^    noremap <silent> <buffer> ][ m':call <SID>toend('')<CR>$/;"	m
][	.\vim73\ftplugin\hamster.vim	/^noremap <silent><buffer> ][ :call search('^\\s*endsub\\>', "W")<CR>$/;"	m
][	.\vim73\ftplugin\ruby.vim	/^  nnoremap <silent> <buffer> ][ :<C-U>call <SID>searchsyn('\\<end\\>','rubyModule\\<Bar>rubyClass','','n')<CR>$/;"	m
][	.\vim73\ftplugin\sql.vim	/^nmap <buffer> <silent> ][ :call search('\\\\c^\\\\s*end\\\\W*$', 'W' )<CR>$/;"	m
][	.\vim73\ftplugin\sql.vim	/^vmap <buffer> <silent> ][ :<C-U>exec "normal! gv"<Bar>call search('\\\\c^\\\\s*end\\\\W*$', 'W' )<CR>$/;"	m
][	.\vim73\ftplugin\vb.vim	/^nnoremap <buffer> <silent> ][ :call <SID>VbSearch('^\\s*\\<end\\>\\s\\+\\(function\\\\|sub\\)', 'W')<cr>$/;"	m
][	.\vim73\ftplugin\vhdl.vim	/^noremap  <buffer><silent>][ :<C-u>cal <SID>CountWrapper(':cal search("\\\\%(--.*\\\\)\\\\@<!\\\\<end\\\\s\\\\+".b:vhdl_explore."\\\\>\\\\c\\\\<Bar>\\\\%$","W")')<CR>$/;"	m
][	.\vim73\ftplugin\vhdl.vim	/^vnoremap <buffer><silent>][ :<C-u>cal <SID>CountWrapper('][')<CR>$/;"	m
][	.\vim73\ftplugin\vim.vim	/^nnoremap <silent><buffer> ][ m':call search('^\\s*endf*\\%[unction]\\>', "W")<CR>$/;"	m
][	.\vim73\ftplugin\vim.vim	/^vnoremap <silent><buffer> ][ m':<C-U>exe "normal! gv"<Bar>call search('^\\s*endf*\\%[unction]\\>', "W")<CR>$/;"	m
]]	.\vim73\ftplugin\abaqus.vim	/^noremap <silent><buffer> ]] \/^\\*\\a<CR>:nohlsearch<CR>$/;"	m
]]	.\vim73\ftplugin\cobol.vim	/^    noremap <silent> <buffer> ]] m':call search('\\c^\\%(\\s*\\<Bar>.\\{6\\}\\s\\+\\)\\zs[A-Za-z0-9-]\\+\\s\\+\\%(division\\<Bar>section\\)\\.','W')<CR>$/;"	m
]]	.\vim73\ftplugin\hamster.vim	/^noremap <silent><buffer> ]] :call search('^\\s*sub\\>', "W")<CR>$/;"	m
]]	.\vim73\ftplugin\python.vim	/^nnoremap <silent> <buffer> ]] :call <SID>Python_jump('\/^\\(class\\\\|def\\)')<cr>$/;"	m
]]	.\vim73\ftplugin\ruby.vim	/^  nnoremap <silent> <buffer> ]] :<C-U>call <SID>searchsyn('\\<\\%(class\\<Bar>module\\)\\>','rubyModule\\<Bar>rubyClass','','n')<CR>$/;"	m
]]	.\vim73\ftplugin\sql.vim	/^nmap <buffer> <silent> ]] :call search('\\\\c^\\\\s*begin\\\\>', 'W' )<CR>$/;"	m
]]	.\vim73\ftplugin\sql.vim	/^vmap <buffer> <silent> ]] :<C-U>exec "normal! gv"<Bar>call search('\\\\c^\\\\s*begin\\\\>', 'W' )<CR>$/;"	m
]]	.\vim73\ftplugin\vb.vim	/^nnoremap <buffer> <silent> ]] :call <SID>VbSearch('^\\s*\\(\\(private\\|public\\)\\s\\+\\)\\=\\(function\\\\|sub\\)', 'W')<cr>$/;"	m
]]	.\vim73\ftplugin\vhdl.vim	/^noremap  <buffer><silent>]] :<C-u>cal <SID>CountWrapper(':cal search("\\\\%(--.*\\\\)\\\\@<!\\\\%(\\\\<end\\\\s\\\\+\\\\)\\\\@<!\\\\<".b:vhdl_explore."\\\\>\\\\c\\\\<Bar>\\\\%$","W")')<CR>$/;"	m
]]	.\vim73\ftplugin\vhdl.vim	/^vnoremap <buffer><silent>]] :<C-u>cal <SID>CountWrapper(']]')<CR>$/;"	m
]]	.\vim73\ftplugin\vim.vim	/^nnoremap <silent><buffer> ]] m':call search('^\\s*fu\\%[nction]\\>', "W")<CR>$/;"	m
]]	.\vim73\ftplugin\vim.vim	/^vnoremap <silent><buffer> ]] m':<C-U>exe "normal! gv"<Bar>call search('^\\s*fu\\%[nction]\\>', "W")<CR>$/;"	m
]m	.\vim73\ftplugin\python.vim	/^nnoremap <silent> <buffer> ]m :call <SID>Python_jump('\/^\\s*\\(class\\\\|def\\)')<cr>$/;"	m
]m	.\vim73\ftplugin\ruby.vim	/^  nnoremap <silent> <buffer> ]m :<C-U>call <SID>searchsyn('\\<def\\>','rubyDefine','','n')<CR>$/;"	m
_ARGS_H	.\ctags58\args.h	12;"	d
_CTAGS_H	.\ctags58\ctags.h	12;"	d
_DEBUG_H	.\ctags58\debug.h	12;"	d
_ENTRY_H	.\ctags58\entry.h	12;"	d
_GENERAL_H	.\ctags58\general.h	12;"	d
_GET_H	.\ctags58\get.h	12;"	d
_KEYWORD_H	.\ctags58\keyword.h	12;"	d
_MAIN_H	.\ctags58\main.h	12;"	d
_OPTIONS_H	.\ctags58\options.h	12;"	d
_Open	.\ctags58\qdos.c	/^int (*_Open) (const char *, int, ...) = qopen;$/;"	v
_PARSERS_H	.\ctags58\parsers.h	15;"	d
_PARSE_H	.\ctags58\parse.h	12;"	d
_READ_H	.\ctags58\read.h	12;"	d
_REGEX_H	.\ctags58\gnu_regex\regex.h	23;"	d
_REGEX_INTERNAL_H	.\ctags58\gnu_regex\regex_internal.h	22;"	d
_RE_DEFINE_LOCALE_FUNCTIONS	.\ctags58\gnu_regex\regex_internal.h	64;"	d
_RE_SYNTAX_POSIX_COMMON	.\ctags58\gnu_regex\regex.h	229;"	d
_ROUTINES_H	.\ctags58\routines.h	12;"	d
_SORT_H	.\ctags58\sort.h	12;"	d
_STRLIST_H	.\ctags58\strlist.h	12;"	d
_VSTRING_H	.\ctags58\vstring.h	12;"	d
__ARGS	.\vim73\tools\xcmdsrv_client.c	32;"	d	file:
__CCFILTER_C__	.\vim73\tools\ccfilter.c	14;"	d	file:
__REPB_PREFIX	.\ctags58\gnu_regex\regex.h	/^  __RE_TRANSLATE_TYPE __REPB_PREFIX(translate);$/;"	p	struct:re_pattern_buffer	access:public	signature:(translate)
__REPB_PREFIX	.\ctags58\gnu_regex\regex.h	/^  char *__REPB_PREFIX(fastmap);$/;"	p	struct:re_pattern_buffer	access:public	signature:(fastmap)
__REPB_PREFIX	.\ctags58\gnu_regex\regex.h	/^  reg_syntax_t __REPB_PREFIX(syntax);$/;"	p	struct:re_pattern_buffer	access:public	signature:(syntax)
__REPB_PREFIX	.\ctags58\gnu_regex\regex.h	/^  unsigned __REPB_PREFIX(can_be_null) : 1;$/;"	p	struct:re_pattern_buffer	access:public	signature:(can_be_null)
__REPB_PREFIX	.\ctags58\gnu_regex\regex.h	/^  unsigned __REPB_PREFIX(fastmap_accurate) : 1;$/;"	p	struct:re_pattern_buffer	access:public	signature:(fastmap_accurate)
__REPB_PREFIX	.\ctags58\gnu_regex\regex.h	/^  unsigned __REPB_PREFIX(newline_anchor) : 1;$/;"	p	struct:re_pattern_buffer	access:public	signature:(newline_anchor)
__REPB_PREFIX	.\ctags58\gnu_regex\regex.h	/^  unsigned __REPB_PREFIX(no_sub) : 1;$/;"	p	struct:re_pattern_buffer	access:public	signature:(no_sub)
__REPB_PREFIX	.\ctags58\gnu_regex\regex.h	/^  unsigned __REPB_PREFIX(not_bol) : 1;$/;"	p	struct:re_pattern_buffer	access:public	signature:(not_bol)
__REPB_PREFIX	.\ctags58\gnu_regex\regex.h	/^  unsigned __REPB_PREFIX(not_eol) : 1;$/;"	p	struct:re_pattern_buffer	access:public	signature:(not_eol)
__REPB_PREFIX	.\ctags58\gnu_regex\regex.h	/^  unsigned __REPB_PREFIX(regs_allocated) : 2;$/;"	p	struct:re_pattern_buffer	access:public	signature:(regs_allocated)
__REPB_PREFIX	.\ctags58\gnu_regex\regex.h	/^  unsigned char *__REPB_PREFIX(buffer);$/;"	p	struct:re_pattern_buffer	access:public	signature:(buffer)
__REPB_PREFIX	.\ctags58\gnu_regex\regex.h	/^  unsigned long int __REPB_PREFIX(allocated);$/;"	p	struct:re_pattern_buffer	access:public	signature:(allocated)
__REPB_PREFIX	.\ctags58\gnu_regex\regex.h	/^  unsigned long int __REPB_PREFIX(used);$/;"	p	struct:re_pattern_buffer	access:public	signature:(used)
__REPB_PREFIX	.\ctags58\gnu_regex\regex.h	351;"	d
__REPB_PREFIX	.\ctags58\gnu_regex\regex.h	353;"	d
__RE_TRANSLATE_TYPE	.\ctags58\gnu_regex\regex.h	344;"	d
__anon19::ent	.\ctags58\e_mac.h	/^	struct dirent ent;$/;"	m	struct:__anon19	typeref:struct:__anon19::dirent	access:public
__anon19::file	.\ctags58\e_mac.h	/^	FSSpec file;$/;"	m	struct:__anon19	access:public
__anon19::index	.\ctags58\e_mac.h	/^	int index;$/;"	m	struct:__anon19	access:public
__anon21::count	.\ctags58\fortran.c	/^	unsigned int count;$/;"	m	struct:__anon21	file:	access:public
__anon21::list	.\ctags58\fortran.c	/^	tokenInfo* list;$/;"	m	struct:__anon21	file:	access:public
__anon21::max	.\ctags58\fortran.c	/^	unsigned int max;$/;"	m	struct:__anon21	file:	access:public
__anon26::rm_eo	.\ctags58\gnu_regex\regex.h	/^  regoff_t rm_eo;  \/* Byte offset from string's start to substring's end.  *\/$/;"	m	struct:__anon26	access:public
__anon26::rm_so	.\ctags58\gnu_regex\regex.h	/^  regoff_t rm_so;  \/* Byte offset from string's start to substring's start.  *\/$/;"	m	struct:__anon26	access:public
__anon28::alloc	.\ctags58\gnu_regex\regex_internal.h	/^  int alloc;$/;"	m	struct:__anon28	access:public
__anon28::elems	.\ctags58\gnu_regex\regex_internal.h	/^  int *elems;$/;"	m	struct:__anon28	access:public
__anon28::nelem	.\ctags58\gnu_regex\regex_internal.h	/^  int nelem;$/;"	m	struct:__anon28	access:public
__anon30::char_classes	.\ctags58\gnu_regex\regex_internal.h	/^  wctype_t *char_classes;$/;"	m	struct:__anon30	access:public
__anon30::coll_syms	.\ctags58\gnu_regex\regex_internal.h	/^  int32_t *coll_syms;$/;"	m	struct:__anon30	access:public
__anon30::equiv_classes	.\ctags58\gnu_regex\regex_internal.h	/^  int32_t *equiv_classes;$/;"	m	struct:__anon30	access:public
__anon30::mbchars	.\ctags58\gnu_regex\regex_internal.h	/^  wchar_t *mbchars;$/;"	m	struct:__anon30	access:public
__anon30::nchar_classes	.\ctags58\gnu_regex\regex_internal.h	/^  int nchar_classes;$/;"	m	struct:__anon30	access:public
__anon30::ncoll_syms	.\ctags58\gnu_regex\regex_internal.h	/^  int ncoll_syms;$/;"	m	struct:__anon30	access:public
__anon30::nequiv_classes	.\ctags58\gnu_regex\regex_internal.h	/^  int nequiv_classes;$/;"	m	struct:__anon30	access:public
__anon30::nmbchars	.\ctags58\gnu_regex\regex_internal.h	/^  int nmbchars;$/;"	m	struct:__anon30	access:public
__anon30::non_match	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned int non_match : 1;$/;"	m	struct:__anon30	access:public
__anon30::nranges	.\ctags58\gnu_regex\regex_internal.h	/^  int nranges;$/;"	m	struct:__anon30	access:public
__anon30::range_ends	.\ctags58\gnu_regex\regex_internal.h	/^  uint32_t *range_ends;$/;"	m	struct:__anon30	access:public
__anon30::range_ends	.\ctags58\gnu_regex\regex_internal.h	/^  wchar_t *range_ends;$/;"	m	struct:__anon30	access:public
__anon30::range_starts	.\ctags58\gnu_regex\regex_internal.h	/^  uint32_t *range_starts;$/;"	m	struct:__anon30	access:public
__anon30::range_starts	.\ctags58\gnu_regex\regex_internal.h	/^  wchar_t *range_starts;$/;"	m	struct:__anon30	access:public
__anon31::__anon32::c	.\ctags58\gnu_regex\regex_internal.h	/^    unsigned char c;		\/* for CHARACTER *\/$/;"	m	union:__anon31::__anon32	access:public
__anon31::__anon32::ctx_type	.\ctags58\gnu_regex\regex_internal.h	/^    re_context_type ctx_type;	\/* for ANCHOR *\/$/;"	m	union:__anon31::__anon32	access:public
__anon31::__anon32::idx	.\ctags58\gnu_regex\regex_internal.h	/^    int idx;			\/* for BACK_REF *\/$/;"	m	union:__anon31::__anon32	access:public
__anon31::__anon32::mbcset	.\ctags58\gnu_regex\regex_internal.h	/^    re_charset_t *mbcset;	\/* for COMPLEX_BRACKET *\/$/;"	m	union:__anon31::__anon32	access:public
__anon31::__anon32::sbcset	.\ctags58\gnu_regex\regex_internal.h	/^    re_bitset_ptr_t sbcset;	\/* for SIMPLE_BRACKET *\/$/;"	m	union:__anon31::__anon32	access:public
__anon31::accept_mb	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned int accept_mb : 1;$/;"	m	struct:__anon31	access:public
__anon31::constraint	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned int constraint : 10;	\/* context constraint *\/$/;"	m	struct:__anon31	access:public
__anon31::duplicated	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned int duplicated : 1;$/;"	m	struct:__anon31	access:public
__anon31::mb_partial	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned int mb_partial : 1;$/;"	m	struct:__anon31	access:public
__anon31::opr	.\ctags58\gnu_regex\regex_internal.h	/^  } opr;$/;"	m	struct:__anon31	typeref:union:__anon31::__anon32	access:public
__anon31::opt_subexp	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned int opt_subexp : 1;$/;"	m	struct:__anon31	access:public
__anon31::type	.\ctags58\gnu_regex\regex_internal.h	/^  re_token_type_t type : 8;$/;"	m	struct:__anon31	access:public
__anon31::type	.\ctags58\gnu_regex\regex_internal.h	/^  re_token_type_t type;$/;"	m	struct:__anon31	access:public
__anon31::word_char	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned int word_char : 1;$/;"	m	struct:__anon31	access:public
__anon33::alloc	.\ctags58\gnu_regex\regex_internal.h	/^  int alloc;$/;"	m	struct:__anon33	access:public
__anon33::array	.\ctags58\gnu_regex\regex_internal.h	/^  re_dfastate_t **array;$/;"	m	struct:__anon33	access:public
__anon33::next_idx	.\ctags58\gnu_regex\regex_internal.h	/^  int next_idx;$/;"	m	struct:__anon33	access:public
__anon34::node	.\ctags58\gnu_regex\regex_internal.h	/^  int node;$/;"	m	struct:__anon34	access:public
__anon34::path	.\ctags58\gnu_regex\regex_internal.h	/^  state_array_t path;$/;"	m	struct:__anon34	access:public
__anon34::str_idx	.\ctags58\gnu_regex\regex_internal.h	/^  int str_idx; \/* The position NODE match at.  *\/$/;"	m	struct:__anon34	access:public
__anon35::alasts	.\ctags58\gnu_regex\regex_internal.h	/^  int alasts; \/* Allocation size of LASTS.  *\/$/;"	m	struct:__anon35	access:public
__anon35::lasts	.\ctags58\gnu_regex\regex_internal.h	/^  re_sub_match_last_t **lasts;$/;"	m	struct:__anon35	access:public
__anon35::nlasts	.\ctags58\gnu_regex\regex_internal.h	/^  int nlasts; \/* The number of LASTS.  *\/$/;"	m	struct:__anon35	access:public
__anon35::node	.\ctags58\gnu_regex\regex_internal.h	/^  int node;$/;"	m	struct:__anon35	access:public
__anon35::path	.\ctags58\gnu_regex\regex_internal.h	/^  state_array_t *path;$/;"	m	struct:__anon35	access:public
__anon35::str_idx	.\ctags58\gnu_regex\regex_internal.h	/^  int str_idx;$/;"	m	struct:__anon35	access:public
__anon36::abkref_ents	.\ctags58\gnu_regex\regex_internal.h	/^  int abkref_ents;$/;"	m	struct:__anon36	access:public
__anon36::asub_tops	.\ctags58\gnu_regex\regex_internal.h	/^  int asub_tops;$/;"	m	struct:__anon36	access:public
__anon36::bkref_ents	.\ctags58\gnu_regex\regex_internal.h	/^  struct re_backref_cache_entry *bkref_ents;$/;"	m	struct:__anon36	typeref:struct:__anon36::re_backref_cache_entry	access:public
__anon36::dfa	.\ctags58\gnu_regex\regex_internal.h	/^  const re_dfa_t *const dfa;$/;"	m	struct:__anon36	access:public
__anon36::dfa	.\ctags58\gnu_regex\regex_internal.h	/^  const re_dfa_t *dfa;$/;"	m	struct:__anon36	access:public
__anon36::eflags	.\ctags58\gnu_regex\regex_internal.h	/^  int eflags;$/;"	m	struct:__anon36	access:public
__anon36::input	.\ctags58\gnu_regex\regex_internal.h	/^  re_string_t input;$/;"	m	struct:__anon36	access:public
__anon36::last_node	.\ctags58\gnu_regex\regex_internal.h	/^  int last_node;$/;"	m	struct:__anon36	access:public
__anon36::match_last	.\ctags58\gnu_regex\regex_internal.h	/^  int match_last;$/;"	m	struct:__anon36	access:public
__anon36::max_mb_elem_len	.\ctags58\gnu_regex\regex_internal.h	/^  int max_mb_elem_len;$/;"	m	struct:__anon36	access:public
__anon36::nbkref_ents	.\ctags58\gnu_regex\regex_internal.h	/^  int nbkref_ents;$/;"	m	struct:__anon36	access:public
__anon36::nsub_tops	.\ctags58\gnu_regex\regex_internal.h	/^  int nsub_tops;$/;"	m	struct:__anon36	access:public
__anon36::state_log	.\ctags58\gnu_regex\regex_internal.h	/^  re_dfastate_t **state_log;$/;"	m	struct:__anon36	access:public
__anon36::state_log_top	.\ctags58\gnu_regex\regex_internal.h	/^  int state_log_top;$/;"	m	struct:__anon36	access:public
__anon36::sub_tops	.\ctags58\gnu_regex\regex_internal.h	/^  re_sub_match_top_t **sub_tops;$/;"	m	struct:__anon36	access:public
__anon37::last_node	.\ctags58\gnu_regex\regex_internal.h	/^  int last_node;$/;"	m	struct:__anon37	access:public
__anon37::last_str_idx	.\ctags58\gnu_regex\regex_internal.h	/^  int last_str_idx;$/;"	m	struct:__anon37	access:public
__anon37::limited_states	.\ctags58\gnu_regex\regex_internal.h	/^  re_dfastate_t **limited_states;$/;"	m	struct:__anon37	access:public
__anon37::limits	.\ctags58\gnu_regex\regex_internal.h	/^  re_node_set limits;$/;"	m	struct:__anon37	access:public
__anon37::sifted_states	.\ctags58\gnu_regex\regex_internal.h	/^  re_dfastate_t **sifted_states;$/;"	m	struct:__anon37	access:public
__anon39::__anon40::ch	.\ctags58\gnu_regex\regex_internal.h	/^    unsigned char ch;$/;"	m	union:__anon39::__anon40	access:public
__anon39::__anon40::name	.\ctags58\gnu_regex\regex_internal.h	/^    unsigned char *name;$/;"	m	union:__anon39::__anon40	access:public
__anon39::__anon40::wch	.\ctags58\gnu_regex\regex_internal.h	/^    wchar_t wch;$/;"	m	union:__anon39::__anon40	access:public
__anon39::opr	.\ctags58\gnu_regex\regex_internal.h	/^  } opr;$/;"	m	struct:__anon39	typeref:union:__anon39::__anon40	access:public
__anon39::type	.\ctags58\gnu_regex\regex_internal.h	/^  bracket_elem_type type;$/;"	m	struct:__anon39	access:public
__anon43::__anon44::__anon45::kind	.\ctags58\lregex.c	/^			struct sKind kind;$/;"	m	struct:__anon43::__anon44::__anon45	typeref:struct:__anon43::__anon44::__anon45::sKind	file:	access:public
__anon43::__anon44::__anon45::name_pattern	.\ctags58\lregex.c	/^			char *name_pattern;$/;"	m	struct:__anon43::__anon44::__anon45	file:	access:public
__anon43::__anon44::__anon46::function	.\ctags58\lregex.c	/^			regexCallback function;$/;"	m	struct:__anon43::__anon44::__anon46	file:	access:public
__anon43::__anon44::callback	.\ctags58\lregex.c	/^		} callback;$/;"	m	union:__anon43::__anon44	typeref:struct:__anon43::__anon44::__anon46	file:	access:public
__anon43::__anon44::tag	.\ctags58\lregex.c	/^		} tag;$/;"	m	union:__anon43::__anon44	typeref:struct:__anon43::__anon44::__anon45	file:	access:public
__anon43::pattern	.\ctags58\lregex.c	/^	regex_t *pattern;$/;"	m	struct:__anon43	file:	access:public
__anon43::type	.\ctags58\lregex.c	/^	enum pType type;$/;"	m	struct:__anon43	typeref:enum:__anon43::pType	file:	access:public
__anon43::u	.\ctags58\lregex.c	/^	} u;$/;"	m	struct:__anon43	typeref:union:__anon43::__anon44	file:	access:public
__anon47::count	.\ctags58\lregex.c	/^	unsigned int count;$/;"	m	struct:__anon47	file:	access:public
__anon47::patterns	.\ctags58\lregex.c	/^	regexPattern *patterns;$/;"	m	struct:__anon47	file:	access:public
__anon49::bytes	.\ctags58\main.c	/^static struct { long files, lines, bytes; } Totals = { 0, 0, 0 };$/;"	m	struct:__anon49	file:	access:public
__anon49::files	.\ctags58\main.c	/^static struct { long files, lines, bytes; } Totals = { 0, 0, 0 };$/;"	m	struct:__anon49	file:	access:public
__anon49::lines	.\ctags58\main.c	/^static struct { long files, lines, bytes; } Totals = { 0, 0, 0 };$/;"	m	struct:__anon49	file:	access:public
__anon53::handler	.\ctags58\options.c	/^	parametricOptionHandler handler;  \/* routine to handle option *\/$/;"	m	struct:__anon53	file:	access:public
__anon53::initOnly	.\ctags58\options.c	/^	boolean initOnly;   \/* option must be specified before any files *\/$/;"	m	struct:__anon53	file:	access:public
__anon53::name	.\ctags58\options.c	/^	const char* name;   \/* name of option as specified by user *\/$/;"	m	struct:__anon53	file:	access:public
__anon54::initOnly	.\ctags58\options.c	/^	boolean initOnly;   \/* option must be specified before any files *\/$/;"	m	struct:__anon54	file:	access:public
__anon54::name	.\ctags58\options.c	/^	const char* name;   \/* name of option as specified by user *\/$/;"	m	struct:__anon54	file:	access:public
__anon54::pValue	.\ctags58\options.c	/^	boolean* pValue;    \/* pointer to option value *\/$/;"	m	struct:__anon54	file:	access:public
__anon56::currentExtensions	.\ctags58\parse.h	/^	stringList* currentExtensions; \/* current list of extensions *\/$/;"	m	struct:__anon56	access:public
__anon56::currentPatterns	.\ctags58\parse.h	/^	stringList* currentPatterns;   \/* current list of file name patterns *\/$/;"	m	struct:__anon56	access:public
__anon56::enabled	.\ctags58\parse.h	/^	boolean enabled;               \/* currently enabled? *\/$/;"	m	struct:__anon56	access:public
__anon56::extensions	.\ctags58\parse.h	/^	const char *const *extensions; \/* list of default extensions *\/$/;"	m	struct:__anon56	access:public
__anon56::id	.\ctags58\parse.h	/^	unsigned int id;               \/* id assigned to language *\/$/;"	m	struct:__anon56	access:public
__anon56::initialize	.\ctags58\parse.h	/^	parserInitialize initialize;   \/* initialization routine, if needed *\/$/;"	m	struct:__anon56	access:public
__anon56::kindCount	.\ctags58\parse.h	/^	unsigned int kindCount;        \/* size of `kinds' list *\/$/;"	m	struct:__anon56	access:public
__anon56::kinds	.\ctags58\parse.h	/^	kindOption* kinds;             \/* tag kinds handled by parser *\/$/;"	m	struct:__anon56	access:public
__anon56::name	.\ctags58\parse.h	/^	char* name;                    \/* name of language *\/$/;"	m	struct:__anon56	access:public
__anon56::parser	.\ctags58\parse.h	/^	simpleParser parser;           \/* simple parser (common case) *\/$/;"	m	struct:__anon56	access:public
__anon56::parser2	.\ctags58\parse.h	/^	rescanParser parser2;          \/* rescanning parser (unusual case) *\/$/;"	m	struct:__anon56	access:public
__anon56::patterns	.\ctags58\parse.h	/^	const char *const *patterns;   \/* list of default file name patterns *\/$/;"	m	struct:__anon56	access:public
__anon56::regex	.\ctags58\parse.h	/^	boolean regex;                 \/* is this a regex parser? *\/$/;"	m	struct:__anon56	access:public
__anon57::length	.\ctags58\parse.h	/^	size_t length;  \/* length of match *\/$/;"	m	struct:__anon57	access:public
__anon57::start	.\ctags58\parse.h	/^	size_t start;   \/* character index in line where match starts *\/$/;"	m	struct:__anon57	access:public
__anon5::keyword	.\ctags58\asm.c	/^	opKeyword keyword;$/;"	m	struct:__anon5	file:	access:public
__anon5::operator	.\ctags58\asm.c	/^	const char *operator;$/;"	m	struct:__anon5	file:	access:public
__anon62::buffer	.\ctags58\readtags.c	/^	char *buffer;$/;"	m	struct:__anon62	file:	access:public
__anon62::size	.\ctags58\readtags.c	/^	size_t size;$/;"	m	struct:__anon62	file:	access:public
__anon68::__anon69::error_number	.\ctags58\readtags.h	/^		int error_number;$/;"	m	struct:__anon68::__anon69	access:public
__anon68::__anon69::opened	.\ctags58\readtags.h	/^		int opened;$/;"	m	struct:__anon68::__anon69	access:public
__anon68::__anon70::format	.\ctags58\readtags.h	/^			short format;$/;"	m	struct:__anon68::__anon70	access:public
__anon68::__anon70::sort	.\ctags58\readtags.h	/^			sortType sort;$/;"	m	struct:__anon68::__anon70	access:public
__anon68::__anon71::author	.\ctags58\readtags.h	/^		const char *author;$/;"	m	struct:__anon68::__anon71	access:public
__anon68::__anon71::name	.\ctags58\readtags.h	/^		const char *name;$/;"	m	struct:__anon68::__anon71	access:public
__anon68::__anon71::url	.\ctags58\readtags.h	/^		const char *url;$/;"	m	struct:__anon68::__anon71	access:public
__anon68::__anon71::version	.\ctags58\readtags.h	/^		const char *version;$/;"	m	struct:__anon68::__anon71	access:public
__anon68::file	.\ctags58\readtags.h	/^	} file;$/;"	m	struct:__anon68	typeref:struct:__anon68::__anon70	access:public
__anon68::program	.\ctags58\readtags.h	/^	} program;$/;"	m	struct:__anon68	typeref:struct:__anon68::__anon71	access:public
__anon68::status	.\ctags58\readtags.h	/^	} status;$/;"	m	struct:__anon68	typeref:struct:__anon68::__anon69	access:public
__anon6::keyword	.\ctags58\asm.c	/^	opKeyword keyword;$/;"	m	struct:__anon6	file:	access:public
__anon6::kind	.\ctags58\asm.c	/^	AsmKind kind;$/;"	m	struct:__anon6	file:	access:public
__anon72::key	.\ctags58\readtags.h	/^	const char *key;$/;"	m	struct:__anon72	access:public
__anon72::value	.\ctags58\readtags.h	/^	const char *value;$/;"	m	struct:__anon72	access:public
__anon73::__anon74::lineNumber	.\ctags58\readtags.h	/^		unsigned long lineNumber;$/;"	m	struct:__anon73::__anon74	access:public
__anon73::__anon74::pattern	.\ctags58\readtags.h	/^		const char *pattern;$/;"	m	struct:__anon73::__anon74	access:public
__anon73::__anon75::count	.\ctags58\readtags.h	/^		unsigned short count;$/;"	m	struct:__anon73::__anon75	access:public
__anon73::__anon75::list	.\ctags58\readtags.h	/^		tagExtensionField *list;$/;"	m	struct:__anon73::__anon75	access:public
__anon73::address	.\ctags58\readtags.h	/^	} address;$/;"	m	struct:__anon73	typeref:struct:__anon73::__anon74	access:public
__anon73::fields	.\ctags58\readtags.h	/^	} fields;$/;"	m	struct:__anon73	typeref:struct:__anon73::__anon75	access:public
__anon73::file	.\ctags58\readtags.h	/^	const char *file;$/;"	m	struct:__anon73	access:public
__anon73::fileScope	.\ctags58\readtags.h	/^	short fileScope;$/;"	m	struct:__anon73	access:public
__anon73::kind	.\ctags58\readtags.h	/^	const char *kind;$/;"	m	struct:__anon73	access:public
__anon73::name	.\ctags58\readtags.h	/^	const char *name;$/;"	m	struct:__anon73	access:public
__anon76::exists	.\ctags58\routines.h	/^	boolean exists;$/;"	m	struct:__anon76	access:public
__anon76::isDirectory	.\ctags58\routines.h	/^	boolean isDirectory;$/;"	m	struct:__anon76	access:public
__anon76::isExecutable	.\ctags58\routines.h	/^	boolean isExecutable;$/;"	m	struct:__anon76	access:public
__anon76::isNormalFile	.\ctags58\routines.h	/^	boolean isNormalFile;$/;"	m	struct:__anon76	access:public
__anon76::isSetuid	.\ctags58\routines.h	/^	boolean isSetuid;$/;"	m	struct:__anon76	access:public
__anon76::isSymbolicLink	.\ctags58\routines.h	/^	boolean isSymbolicLink;$/;"	m	struct:__anon76	access:public
__anon76::name	.\ctags58\routines.h	/^	char* name;$/;"	m	struct:__anon76	access:public
__anon76::size	.\ctags58\routines.h	/^	unsigned long size;$/;"	m	struct:__anon76	access:public
__anon81::keyword	.\ctags58\sml.c	/^	const char *keyword;$/;"	m	struct:__anon81	file:	access:public
__anon81::kind	.\ctags58\sml.c	/^	smlKind kind;$/;"	m	struct:__anon81	file:	access:public
__anon86::keyword	.\ctags58\verilog.c	/^	const char *keyword;$/;"	m	struct:__anon86	file:	access:public
__anon86::kind	.\ctags58\verilog.c	/^	verilogKind kind;$/;"	m	struct:__anon86	file:	access:public
__anon89::always_show_dot_files	.\vimfiles\bundle\command-t\ruby\command-t\match.c	/^    int     always_show_dot_files;  \/\/ boolean$/;"	m	struct:__anon89	file:	access:public
__anon89::dot_file	.\vimfiles\bundle\command-t\ruby\command-t\match.c	/^    int     dot_file;               \/\/ boolean: true if str is a dot-file$/;"	m	struct:__anon89	file:	access:public
__anon89::haystack_len	.\vimfiles\bundle\command-t\ruby\command-t\match.c	/^    long    haystack_len;           \/\/ length of same$/;"	m	struct:__anon89	file:	access:public
__anon89::haystack_p	.\vimfiles\bundle\command-t\ruby\command-t\match.c	/^    char    *haystack_p;            \/\/ pointer to the path string to be searched$/;"	m	struct:__anon89	file:	access:public
__anon89::max_score_per_char	.\vimfiles\bundle\command-t\ruby\command-t\match.c	/^    double  max_score_per_char;$/;"	m	struct:__anon89	file:	access:public
__anon89::memo	.\vimfiles\bundle\command-t\ruby\command-t\match.c	/^    double  *memo;                  \/\/ memoization$/;"	m	struct:__anon89	file:	access:public
__anon89::needle_len	.\vimfiles\bundle\command-t\ruby\command-t\match.c	/^    long    needle_len;             \/\/ length of same$/;"	m	struct:__anon89	file:	access:public
__anon89::needle_p	.\vimfiles\bundle\command-t\ruby\command-t\match.c	/^    char    *needle_p;              \/\/ pointer to search string (needle)$/;"	m	struct:__anon89	file:	access:public
__anon89::never_show_dot_files	.\vimfiles\bundle\command-t\ruby\command-t\match.c	/^    int     never_show_dot_files;   \/\/ boolean$/;"	m	struct:__anon89	file:	access:public
__anon9::kind	.\ctags58\basic.c	/^	BasicKind kind;$/;"	m	struct:__anon9	file:	access:public
__anon9::skip	.\ctags58\basic.c	/^	int skip;$/;"	m	struct:__anon9	file:	access:public
__anon9::token	.\ctags58\basic.c	/^	char const *token;$/;"	m	struct:__anon9	file:	access:public
__attribute	.\ctags58\gnu_regex\regex_internal.h	127;"	d
__attribute	.\ctags58\gnu_regex\regex_internal.h	129;"	d
__btowc	.\ctags58\gnu_regex\regex_internal.h	118;"	d
__compat_regexec	.\ctags58\gnu_regex\regexec.c	/^__compat_regexec (const regex_t *__restrict preg,$/;"	f	signature:(const regex_t *__restrict preg, const char *__restrict string, size_t nmatch, regmatch_t pmatch[], int eflags)
__iswctype	.\ctags58\gnu_regex\regex_internal.h	117;"	d
__libc_lock_define	.\ctags58\gnu_regex\regex_internal.h	51;"	d
__libc_lock_init	.\ctags58\gnu_regex\regex_internal.h	52;"	d
__libc_lock_lock	.\ctags58\gnu_regex\regex_internal.h	53;"	d
__libc_lock_unlock	.\ctags58\gnu_regex\regex_internal.h	54;"	d
__libc_use_alloca	.\ctags58\gnu_regex\regex_internal.h	433;"	d
__libc_use_alloca	.\ctags58\gnu_regex\regex_internal.h	436;"	d
__mbrtowc	.\ctags58\gnu_regex\regex_internal.h	119;"	d
__mempcpy	.\ctags58\gnu_regex\regex_internal.h	120;"	d
__pad1	.\ctags58\e_mac.h	/^	unsigned short int __pad1;$/;"	m	struct:stat	access:public
__printf__	.\ctags58\general.h	61;"	d
__printf__	.\ctags58\general.h	64;"	d
__regfree	.\ctags58\gnu_regex\regex_internal.h	122;"	d
__restrict	.\ctags58\gnu_regex\regex.h	539;"	d
__restrict	.\ctags58\gnu_regex\regex.h	541;"	d
__restrict_arr	.\ctags58\gnu_regex\regex.h	549;"	d
__restrict_arr	.\ctags58\gnu_regex\regex.h	551;"	d
__unused__	.\ctags58\general.h	60;"	d
__unused__	.\ctags58\general.h	63;"	d
__wcrtomb	.\ctags58\gnu_regex\regex_internal.h	121;"	d
__wctype	.\ctags58\gnu_regex\regex_internal.h	116;"	d
_build_module	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e.vim	/^function! s:_build_module(sid)$/;"	f
_cmdwildcard	.\ctags58\qdos.c	/^int  (*_cmdwildcard) ()  = custom_expand;$/;"	v
_compare	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\data\list.vim	/^function! s:_compare(a, b)$/;"	f
_condetails	.\ctags58\qdos.c	/^struct WINDOWDEF _condetails = { 208, 1, 0, 7, 512, 256, 0, 0};$/;"	v	typeref:struct:WINDOWDEF
_consetup	.\ctags58\qdos.c	/^void (*_consetup) ()         = consetup_title;$/;"	v
_copyright	.\ctags58\qdos.c	/^char _copyright [32] = __DATE__;$/;"	v
_encode_name	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\system\cache.vim	/^function! s:_encode_name(cache_dir, filename)$/;"	f
_endmsg	.\ctags58\qdos.c	/^char *_endmsg        = "\\nPress a key to exit.";$/;"	v
_import	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e.vim	/^function! s:_import(name, scripts)$/;"	f
_j	.\vim73\macros\justify.vim	/^nmap _j :%call Justify('tw',4)<CR>$/;"	m
_j	.\vim73\macros\justify.vim	/^vmap _j :call Justify('tw',4)<CR>$/;"	m
_lexingState	.\ctags58\ocaml.c	/^typedef struct _lexingState {$/;"	s	file:
_lexingState::cp	.\ctags58\ocaml.c	/^	const unsigned char *cp;	\/* position in stream *\/$/;"	m	struct:_lexingState	file:	access:public
_lexingState::name	.\ctags58\ocaml.c	/^	vString *name;	\/* current parsed identifier\/operator *\/$/;"	m	struct:_lexingState	file:	access:public
_memincr	.\ctags58\qdos.c	/^long _memincr        = 10240;  \/* Big increments to cut fragmentation *\/$/;"	v
_prog_name	.\ctags58\qdos.c	/^char _prog_name []   = "ctags";$/;"	v
_redir	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e.vim	/^function! s:_redir(cmd)$/;"	f
_sContextKind	.\ctags58\ocaml.c	/^typedef enum _sContextKind {$/;"	g	file:
_sContextType	.\ctags58\ocaml.c	/^typedef enum _sContextType {$/;"	g	file:
_sOcamlContext	.\ctags58\ocaml.c	/^typedef struct _sOcamlContext {$/;"	s	file:
_sOcamlContext::callback	.\ctags58\ocaml.c	/^	parseNext callback;	\/* what to do when a context is pop'd *\/$/;"	m	struct:_sOcamlContext	file:	access:public
_sOcamlContext::contextName	.\ctags58\ocaml.c	/^	vString *contextName;	\/* name, if any, of the surrounding context *\/$/;"	m	struct:_sOcamlContext	file:	access:public
_sOcamlContext::kind	.\ctags58\ocaml.c	/^	contextKind kind;	\/* well if the context is strong or not *\/$/;"	m	struct:_sOcamlContext	file:	access:public
_sOcamlContext::type	.\ctags58\ocaml.c	/^	contextType type;$/;"	m	struct:_sOcamlContext	file:	access:public
_scripts	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e.vim	/^function! s:_scripts()$/;"	f
_stack	.\ctags58\qdos.c	/^long _stack          = 24576;  \/* Plenty of stack space *\/$/;"	v
_unify_path	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e.vim	/^  function! s:_unify_path(path)$/;"	f
_version	.\ctags58\qdos.c	/^char _version []     = PROGRAM_VERSION;$/;"	v
_wcwidth	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\prelude.vim	/^  function! s:_wcwidth(ucs)$/;"	f
a%	.\vim73\macros\matchit.vim	/^vmap a% <Esc>[%v]%$/;"	m
abbrev_segments	.\vimfiles\bundle\command-t\ruby\command-t\prompt.rb	/^    def abbrev_segments$/;"	f	class:CommandT.Prompt
abkref_ents	.\ctags58\gnu_regex\regex_internal.h	/^  int abkref_ents;$/;"	m	struct:__anon36	access:public
absoluteDirname	.\ctags58\routines.c	/^extern char* absoluteDirname (char *file)$/;"	f	signature:(char *file)
absoluteDirname	.\ctags58\routines.h	/^extern char* absoluteDirname (char *file);$/;"	p	signature:(char *file)
absoluteFilename	.\ctags58\routines.c	/^extern char* absoluteFilename (const char *file)$/;"	f	signature:(const char *file)
absoluteFilename	.\ctags58\routines.h	/^extern char* absoluteFilename (const char *file);$/;"	p	signature:(const char *file)
accept	.\ctags58\get.c	/^		boolean	accept;          \/* is a directive syntactically permitted? *\/$/;"	m	struct:sCppState::sDirective	file:	access:public
accept_mb	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned int accept_mb : 1;$/;"	m	struct:__anon31	access:public
accept_mb	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned int accept_mb : 1;$/;"	m	struct:re_dfastate_t	access:public
accept_selection	.\vimfiles\bundle\command-t\ruby\command-t\controller.rb	/^    def accept_selection options = {}$/;"	f	class:CommandT.Controller.quickfix
access	.\ctags58\c.c	/^	accessType access;           \/* access of current statement *\/$/;"	m	struct:sMemberInfo	file:	access:public
access	.\ctags58\entry.h	/^		const char* access;$/;"	m	struct:sTagEntryInfo::__anon17	access:public
access	.\ctags58\options.h	/^	boolean access;$/;"	m	struct:sExtFields	access:public
accessDefault	.\ctags58\c.c	/^	accessType accessDefault;    \/* access default for current statement *\/$/;"	m	struct:sMemberInfo	file:	access:public
accessField	.\ctags58\c.c	/^static const char* accessField (const statementInfo *const st)$/;"	f	file:	signature:(const statementInfo *const st)
accessString	.\ctags58\c.c	/^static const char *accessString (const accessType access)$/;"	f	file:	signature:(const accessType access)
accessType	.\ctags58\c.c	/^} accessType;$/;"	t	typeref:enum:eVisibilityType	file:
acquire_init_state_context	.\ctags58\gnu_regex\regexec.c	/^acquire_init_state_context (reg_errcode_t *err, const re_match_context_t *mctx,$/;"	f	signature:(reg_errcode_t *err, const re_match_context_t *mctx, int idx)
activeToken	.\ctags58\c.c	34;"	d	file:
active_reg_t	.\ctags58\gnu_regex\regex.h	/^typedef unsigned long int active_reg_t;$/;"	t
ada#Completion	.\vim73\autoload\ada.vim	/^function ada#Completion (cmd)$/;"	f
ada#Completion_End	.\vim73\autoload\ada.vim	/^function ada#Completion_End ()$/;"	f
ada#Create_Tags	.\vim73\autoload\ada.vim	/^function ada#Create_Tags (option)$/;"	f
ada#Insert_Backspace	.\vim73\autoload\ada.vim	/^function ada#Insert_Backspace ()$/;"	f
ada#Jump_Tag	.\vim73\autoload\ada.vim	/^function ada#Jump_Tag (Word, Mode)$/;"	f
ada#List_Tag	.\vim73\autoload\ada.vim	/^function ada#List_Tag (...)$/;"	f
ada#Map_Menu	.\vim73\autoload\ada.vim	/^function ada#Map_Menu (Text, Keys, Command)$/;"	f
ada#Map_Popup	.\vim73\autoload\ada.vim	/^function ada#Map_Popup (Text, Keys, Command)$/;"	f
ada#Pretty_Print_Folding	.\vim73\autoload\ada.vim	/^   function ada#Pretty_Print_Folding (Line)			     " {{{2$/;"	f
ada#Switch_Session	.\vim73\autoload\ada.vim	/^function ada#Switch_Session (New_Session)$/;"	f
ada#Switch_Syntax_Option	.\vim73\autoload\ada.vim	/^function ada#Switch_Syntax_Option (option)$/;"	f
ada#User_Complete	.\vim73\autoload\ada.vim	/^function! ada#User_Complete(findstart, base)$/;"	f
ada#Word	.\vim73\autoload\ada.vim	/^function ada#Word (...)$/;"	f
adacomplete#Complete	.\vim73\autoload\adacomplete.vim	/^function! adacomplete#Complete (findstart, base)$/;"	f
add!	.\vimfiles\bundle\command-t\ruby\command-t\match_window.rb	/^    def add! char$/;"	f	class:CommandT.MatchWindow
add!	.\vimfiles\bundle\command-t\ruby\command-t\prompt.rb	/^    def add! char$/;"	f	class:CommandT.Prompt
addCallbackRegex	.\ctags58\lregex.c	/^extern void addCallbackRegex ($/;"	f	signature:( const langType language __unused__, const char* const regex __unused__, const char* const flags __unused__, const regexCallback callback __unused__)
addCallbackRegex	.\ctags58\parse.h	/^extern void addCallbackRegex (const langType language, const char *const regex, const char *const flags, const regexCallback callback);$/;"	p	signature:(const langType language, const char *const regex, const char *const flags, const regexCallback callback)
addCompiledCallbackPattern	.\ctags58\lregex.c	/^static void addCompiledCallbackPattern ($/;"	f	file:	signature:( const langType language, regex_t* const pattern, const regexCallback callback)
addCompiledTagPattern	.\ctags58\lregex.c	/^static void addCompiledTagPattern ($/;"	f	file:	signature:( const langType language, regex_t* const pattern, char* const name, const char kind, char* const kindName, char *const description)
addContext	.\ctags58\c.c	/^static void addContext (statementInfo *const st, const tokenInfo* const token)$/;"	f	file:	signature:(statementInfo *const st, const tokenInfo* const token)
addContext	.\ctags58\flex.c	/^static void addContext (tokenInfo* const parent, const tokenInfo* const child)$/;"	f	file:	signature:(tokenInfo* const parent, const tokenInfo* const child)
addContext	.\ctags58\jscript.c	/^static void addContext (tokenInfo* const parent, const tokenInfo* const child)$/;"	f	file:	signature:(tokenInfo* const parent, const tokenInfo* const child)
addContextSeparator	.\ctags58\c.c	/^static void addContextSeparator (vString *const scope)$/;"	f	file:	signature:(vString *const scope)
addExtensionFields	.\ctags58\entry.c	/^static int addExtensionFields (const tagEntryInfo *const tag)$/;"	f	file:	signature:(const tagEntryInfo *const tag)
addExtensionList	.\ctags58\options.c	/^static void addExtensionList ($/;"	f	file:	signature:( stringList *const slist, const char *const elist, const boolean clear)
addGenericName	.\ctags58\eiffel.c	/^static void addGenericName (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
addIgnoreListFromFile	.\ctags58\options.c	/^static void addIgnoreListFromFile (const char *const fileName)$/;"	f	file:	signature:(const char *const fileName)
addKeyword	.\ctags58\keyword.c	/^extern void addKeyword (const char *const string, langType language, int value)$/;"	f	signature:(const char *const string, langType language, int value)
addKeyword	.\ctags58\keyword.h	/^extern void addKeyword (const char *const string, langType language, int value);$/;"	p	signature:(const char *const string, langType language, int value)
addLanguageExtensionMap	.\ctags58\parse.c	/^extern void addLanguageExtensionMap ($/;"	f	signature:( const langType language, const char* extension)
addLanguageExtensionMap	.\ctags58\parse.h	/^extern void addLanguageExtensionMap (const langType language, const char* extension);$/;"	p	signature:(const langType language, const char* extension)
addLanguageMap	.\ctags58\options.c	/^static char* addLanguageMap (const langType language, char* map)$/;"	f	file:	signature:(const langType language, char* map)
addLanguagePatternMap	.\ctags58\parse.c	/^extern void addLanguagePatternMap (const langType language, const char* ptrn)$/;"	f	signature:(const langType language, const char* ptrn)
addLanguagePatternMap	.\ctags58\parse.h	/^extern void addLanguagePatternMap (const langType language, const char* ptrn);$/;"	p	signature:(const langType language, const char* ptrn)
addLanguageRegex	.\ctags58\lregex.c	/^extern void addLanguageRegex ($/;"	f	signature:( const langType language __unused__, const char* const regex __unused__)
addLanguageRegex	.\ctags58\parse.h	/^extern void addLanguageRegex (const langType language, const char* const regex);$/;"	p	signature:(const langType language, const char* const regex)
addNestingLevel	.\ctags58\python.c	/^static void addNestingLevel(NestingLevels *nls, int indentation,$/;"	f	file:	signature:(NestingLevels *nls, int indentation, const vString *name, boolean is_class)
addOtherFields	.\ctags58\c.c	/^static void addOtherFields (tagEntryInfo* const tag, const tagType type,$/;"	f	file:	signature:(tagEntryInfo* const tag, const tagType type, const statementInfo *const st, vString *const scope, vString *const typeRef)
addParentClass	.\ctags58\c.c	/^static void addParentClass (statementInfo *const st, tokenInfo *const token)$/;"	f	file:	signature:(statementInfo *const st, tokenInfo *const token)
addPseudoTags	.\ctags58\entry.c	/^static void addPseudoTags (void)$/;"	f	file:	signature:(void)
addTag	.\ctags58\ocaml.c	/^static void addTag (vString * const ident, int kind)$/;"	f	file:	signature:(vString * const ident, int kind)
addTagRegex	.\ctags58\lregex.c	/^extern void addTagRegex ($/;"	f	signature:( const langType language __unused__, const char* const regex __unused__, const char* const name __unused__, const char* const kinds __unused__, const char* const flags __unused__)
addTagRegex	.\ctags58\parse.h	/^extern void addTagRegex (const langType language, const char* const regex, const char* const name, const char* const kinds, const char* const flags);$/;"	p	signature:(const langType language, const char* const regex, const char* const name, const char* const kinds, const char* const flags)
addToScope	.\ctags58\flex.c	/^static void addToScope (tokenInfo* const token, vString* const extra)$/;"	f	file:	signature:(tokenInfo* const token, vString* const extra)
addToScope	.\ctags58\jscript.c	/^static void addToScope (tokenInfo* const token, vString* const extra)$/;"	f	file:	signature:(tokenInfo* const token, vString* const extra)
addToScope	.\ctags58\sql.c	/^static void addToScope (tokenInfo* const token, vString* const extra)$/;"	f	file:	signature:(tokenInfo* const token, vString* const extra)
addTotals	.\ctags58\main.c	/^extern void addTotals ($/;"	f	signature:( const unsigned int files, const long unsigned int lines, const long unsigned int bytes)
addTotals	.\ctags58\main.h	/^extern void addTotals (const unsigned int files, const long unsigned int lines, const long unsigned int bytes);$/;"	p	signature:(const unsigned int files, const long unsigned int lines, const long unsigned int bytes)
add_epsilon_src_nodes	.\ctags58\gnu_regex\regexec.c	/^add_epsilon_src_nodes (const re_dfa_t *dfa, re_node_set *dest_nodes,$/;"	f	file:	signature:(const re_dfa_t *dfa, re_node_set *dest_nodes, const re_node_set *candidates)
add_item	.\ctags58\argproc.c	/^static add_item (head, tail, value, count)$/;"	f	file:
add_paths_for_directory	.\vimfiles\bundle\command-t\ruby\command-t\scanner\file_scanner.rb	/^    def add_paths_for_directory dir, accumulator$/;"	f	class:CommandT.FileScanner
added	.\ctags58\entry.h	/^	struct sNumTags { unsigned long added, prev; } numTags;$/;"	m	struct:eTagFile::sNumTags	access:public
address	.\ctags58\readtags.h	/^	} address;$/;"	m	struct:__anon73	typeref:struct:__anon73::__anon74	access:public
advanceToken	.\ctags58\c.c	/^static void advanceToken (statementInfo* const st)$/;"	f	file:	signature:(statementInfo* const st)
alasts	.\ctags58\gnu_regex\regex_internal.h	/^  int alasts; \/* Allocation size of LASTS.  *\/$/;"	m	struct:__anon35	access:public
all	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\data\list.vim	/^function! s:all(f, xs)$/;"	f
alloc	.\ctags58\gnu_regex\regex_internal.h	/^  int alloc;$/;"	m	struct:__anon28	access:public
alloc	.\ctags58\gnu_regex\regex_internal.h	/^  int alloc;$/;"	m	struct:__anon33	access:public
alloc	.\ctags58\gnu_regex\regex_internal.h	/^  int alloc;$/;"	m	struct:re_fail_stack_t	access:public
alloc	.\ctags58\gnu_regex\regex_internal.h	/^  int alloc;$/;"	m	struct:re_state_table_entry	access:public
allocated	.\ctags58\python.c	/^	int allocated;$/;"	m	struct:NestingLevels	file:	access:public
allsteps	.\vim73\ftplugin\cucumber.vim	/^function! s:allsteps()$/;"	f
always_show_dot_files	.\vimfiles\bundle\command-t\ruby\command-t\match.c	/^    int     always_show_dot_files;  \/\/ boolean$/;"	m	struct:__anon89	file:	access:public
analyze	.\ctags58\gnu_regex\regcomp.c	/^analyze (regex_t *preg)$/;"	f	file:	signature:(regex_t *preg)
analyze	.\ctags58\gnu_regex\regcomp.c	/^static reg_errcode_t analyze (regex_t *preg);$/;"	p	file:	signature:(regex_t *preg)
analyzeIdentifier	.\ctags58\c.c	/^static void analyzeIdentifier (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
analyzeKeyword	.\ctags58\c.c	/^static keywordId analyzeKeyword (const char *const name)$/;"	f	file:	signature:(const char *const name)
analyzeOperator	.\ctags58\asm.c	/^static opKeyword analyzeOperator (const vString *const op)$/;"	f	file:	signature:(const vString *const op)
analyzeParens	.\ctags58\c.c	/^static void analyzeParens (statementInfo *const st)$/;"	f	file:	signature:(statementInfo *const st)
analyzePostParens	.\ctags58\c.c	/^static void analyzePostParens (statementInfo *const st, parenInfo *const info)$/;"	f	file:	signature:(statementInfo *const st, parenInfo *const info)
analyzeToken	.\ctags58\keyword.c	/^extern int analyzeToken (vString *const name, langType language)$/;"	f	signature:(vString *const name, langType language)
analyzeToken	.\ctags58\keyword.h	/^extern int analyzeToken (vString *const name, langType language);$/;"	p	signature:(vString *const name, langType language)
analyze_dictionary_variable_line	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! s:analyze_dictionary_variable_line(line, keyword_dict, var_name) "{{{$/;"	f
analyze_function_line	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! s:analyze_function_line(line, keyword_dict, prototype) "{{{$/;"	f
analyze_variable_line	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! s:analyze_variable_line(line, keyword_dict) "{{{$/;"	f
ancestorClear	.\ctags58\fortran.c	/^static void ancestorClear (void)$/;"	f	file:	signature:(void)
ancestorCount	.\ctags58\fortran.c	372;"	d	file:
ancestorPop	.\ctags58\fortran.c	/^static void ancestorPop (void)$/;"	f	file:	signature:(void)
ancestorPush	.\ctags58\fortran.c	/^static void ancestorPush (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
ancestorScope	.\ctags58\fortran.c	/^static const tokenInfo* ancestorScope (void)$/;"	f	file:	signature:(void)
ancestorTop	.\ctags58\fortran.c	/^static const tokenInfo* ancestorTop (void)$/;"	f	file:	signature:(void)
and	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\data\list.vim	/^function! s:and(xs)$/;"	f
any	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\data\list.vim	/^function! s:any(f, xs)$/;"	f
append	.\ctags58\options.h	/^	boolean append;         \/* -a  append to "tags" file *\/$/;"	m	struct:sOptionValues	access:public
argDelete	.\ctags58\args.c	/^extern void argDelete (Arguments* const current)$/;"	f	signature:(Arguments* const current)
argDelete	.\ctags58\args.h	/^extern void argDelete (Arguments* const current);$/;"	p	signature:(Arguments* const current)
argForth	.\ctags58\args.c	/^extern void argForth (Arguments* const current)$/;"	f	signature:(Arguments* const current)
argForth	.\ctags58\args.h	/^extern void argForth (Arguments* const current);$/;"	p	signature:(Arguments* const current)
argItem	.\ctags58\args.c	/^extern char *argItem (const Arguments* const current)$/;"	f	signature:(const Arguments* const current)
argItem	.\ctags58\args.h	/^extern char *argItem (const Arguments* const current);$/;"	p	signature:(const Arguments* const current)
argNewFromArgv	.\ctags58\args.c	/^extern Arguments* argNewFromArgv (char* const* const argv)$/;"	f	signature:(char* const* const argv)
argNewFromArgv	.\ctags58\args.h	/^extern Arguments* argNewFromArgv (char* const* const argv);$/;"	p	signature:(char* const* const argv)
argNewFromFile	.\ctags58\args.c	/^extern Arguments* argNewFromFile (FILE* const fp)$/;"	f	signature:(FILE* const fp)
argNewFromFile	.\ctags58\args.h	/^extern Arguments* argNewFromFile (FILE* const fp);$/;"	p	signature:(FILE* const fp)
argNewFromLineFile	.\ctags58\args.c	/^extern Arguments* argNewFromLineFile (FILE* const fp)$/;"	f	signature:(FILE* const fp)
argNewFromLineFile	.\ctags58\args.h	/^extern Arguments* argNewFromLineFile (FILE* const fp);$/;"	p	signature:(FILE* const fp)
argNewFromString	.\ctags58\args.c	/^extern Arguments* argNewFromString (const char* const string)$/;"	f	signature:(const char* const string)
argNewFromString	.\ctags58\args.h	/^extern Arguments* argNewFromString (const char* const string);$/;"	p	signature:(const char* const string)
argOff	.\ctags58\args.c	/^extern boolean argOff (const Arguments* const current)$/;"	f	signature:(const Arguments* const current)
argOff	.\ctags58\args.h	/^extern boolean argOff (const Arguments* const current);$/;"	p	signature:(const Arguments* const current)
argSetLineMode	.\ctags58\args.c	/^extern void argSetLineMode (Arguments* const current)$/;"	f	signature:(Arguments* const current)
argSetLineMode	.\ctags58\args.h	/^extern void argSetLineMode (Arguments* const current);$/;"	p	signature:(Arguments* const current)
argSetWordMode	.\ctags58\args.c	/^extern void argSetWordMode (Arguments* const current)$/;"	f	signature:(Arguments* const current)
argSetWordMode	.\ctags58\args.h	/^extern void argSetWordMode (Arguments* const current);$/;"	p	signature:(Arguments* const current)
argType	.\ctags58\args.h	/^typedef enum { ARG_NONE, ARG_STRING, ARG_ARGV, ARG_FILE } argType;$/;"	t	typeref:enum:__anon1
arg_count	.\ctags58\argproc.c	/^	int arg_count;$/;"	m	struct:exit_control_block	file:	access:public
argproc_version	.\ctags58\argproc.c	/^char argproc_version [] = "@(#)argproc.c VMS uucp Version infopiz-1.0";$/;"	v
args	.\ctags58\options.h	/^	Arguments* args;$/;"	m	struct:sCookedArgs	access:public
argv	.\ctags58\args.h	/^			char* const* argv;$/;"	m	struct:sArgs::__anon2::sArgvArgs	access:public
argvArgs	.\ctags58\args.h	/^		} argvArgs;$/;"	m	union:sArgs::__anon2	typeref:struct:sArgs::__anon2::sArgvArgs	access:public
array	.\ctags58\gnu_regex\regex_internal.h	/^  re_dfastate_t **array;$/;"	m	struct:__anon33	access:public
array	.\ctags58\gnu_regex\regex_internal.h	/^  re_dfastate_t **array;$/;"	m	struct:re_state_table_entry	access:public
asmKeyword	.\ctags58\asm.c	/^} asmKeyword;$/;"	t	typeref:struct:__anon5	file:
aspKind	.\ctags58\asp.c	/^} aspKind;$/;"	t	typeref:enum:__anon7	file:
assignment	.\ctags58\c.c	/^	boolean		assignment;     \/* have we handled an '='? *\/$/;"	m	struct:sStatementInfo	file:	access:public
asub_tops	.\ctags58\gnu_regex\regex_internal.h	/^  int asub_tops;$/;"	m	struct:__anon36	access:public
async_load	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\cache.vim	/^function! s:async_load(argv, cache_dir, filename) "{{{$/;"	f
at	.\vim73\syntax\sed.vim	/^let __at = char2nr("@")$/;"	v
attribute_hidden	.\ctags58\gnu_regex\regcomp.c	/^const char __re_error_msgid[] attribute_hidden =$/;"	v
attribute_hidden	.\ctags58\gnu_regex\regcomp.c	/^const size_t __re_error_msgid_idx[] attribute_hidden =$/;"	v
attribute_hidden	.\ctags58\gnu_regex\regex_internal.h	123;"	d
author	.\ctags58\readtags.c	/^		char *author;$/;"	m	struct:sTagFile::__anon65	file:	access:public
author	.\ctags58\readtags.h	/^		const char *author;$/;"	m	struct:__anon68::__anon71	access:public
awkKind	.\ctags58\awk.c	/^} awkKind;$/;"	t	typeref:enum:eAwkKinds	file:
b	.\vim73\macros\less.vim	/^noremap <script> b <C-B><SID>L$/;"	m
b:	.\vim73\syntax\liquid.vim	/^      let b:{matchstr(s:type,'[^.]*')}_subtype = matchstr(s:type,'\\.\\zs.*')$/;"	v
b:InPHPcode	.\vim73\indent\php.vim	/^let b:InPHPcode = 0$/;"	v
b:InPHPcode_and_script	.\vim73\indent\php.vim	/^let b:InPHPcode_and_script = 0$/;"	v
b:InPHPcode_checked	.\vim73\indent\php.vim	/^let b:InPHPcode_checked = 0$/;"	v
b:InPHPcode_tofind	.\vim73\indent\php.vim	/^let b:InPHPcode_tofind = ""$/;"	v
b:PHP_BracesAtCodeLevel	.\vim73\indent\php.vim	/^    let b:PHP_BracesAtCodeLevel = 0$/;"	v
b:PHP_BracesAtCodeLevel	.\vim73\indent\php.vim	/^    let b:PHP_BracesAtCodeLevel = PHP_BracesAtCodeLevel$/;"	v
b:PHP_CurrentIndentLevel	.\vim73\indent\php.vim	/^let b:PHP_CurrentIndentLevel = b:PHP_default_indenting$/;"	v
b:PHP_InsideMultilineComment	.\vim73\indent\php.vim	/^let b:PHP_InsideMultilineComment = 0$/;"	v
b:PHP_LastIndentedWasComment	.\vim73\indent\php.vim	/^let b:PHP_LastIndentedWasComment = 0$/;"	v
b:PHP_autoformatcomment	.\vim73\indent\php.vim	/^    let b:PHP_autoformatcomment = 1$/;"	v
b:PHP_autoformatcomment	.\vim73\indent\php.vim	/^    let b:PHP_autoformatcomment = PHP_autoformatcomment$/;"	v
b:PHP_default_indenting	.\vim73\indent\php.vim	/^    let b:PHP_default_indenting = 0$/;"	v
b:PHP_default_indenting	.\vim73\indent\php.vim	/^    let b:PHP_default_indenting = PHP_default_indenting * &sw$/;"	v
b:PHP_indentbeforelast	.\vim73\indent\php.vim	/^let b:PHP_indentbeforelast = 0$/;"	v
b:PHP_indentinghuge	.\vim73\indent\php.vim	/^let b:PHP_indentinghuge = 0$/;"	v
b:PHP_lastindented	.\vim73\indent\php.vim	/^let b:PHP_lastindented = 0$/;"	v
b:PHP_oldchangetick	.\vim73\indent\php.vim	/^let b:PHP_oldchangetick = b:changedtick$/;"	v
b:PHP_outdentphpescape	.\vim73\indent\php.vim	/^    let b:PHP_outdentphpescape = 1$/;"	v
b:PHP_outdentphpescape	.\vim73\indent\php.vim	/^    let b:PHP_outdentphpescape = PHP_outdentphpescape$/;"	v
b:PHP_vintage_case_default_indent	.\vim73\indent\php.vim	/^    let b:PHP_vintage_case_default_indent = 0$/;"	v
b:PHP_vintage_case_default_indent	.\vim73\indent\php.vim	/^    let b:PHP_vintage_case_default_indent = 1$/;"	v
b:UserIsTypingComment	.\vim73\indent\php.vim	/^let b:UserIsTypingComment = 0$/;"	v
b:annotation_file_located	.\vim73\ftplugin\ocaml.vim	/^  let b:annotation_file_located = 0$/;"	v
b:autohotkey_syntax_sync_minlines	.\vim73\syntax\autohotkey.vim	/^  let b:autohotkey_syntax_sync_minlines = 50$/;"	v
b:autohotkey_syntax_sync_minlines	.\vim73\syntax\autohotkey.vim	/^  let b:autohotkey_syntax_sync_minlines = g:autohotkey_syntax_sync_minlines$/;"	v
b:bar	.\vimfiles\bundle\tlib_vim\spec\tlib\var.vim	/^let b:bar = 3$/;"	v
b:bar	.\vimfiles\bundle\tlib_vim\test\tlib.vim	/^let b:bar = 3$/;"	v
b:bdf_minlines	.\vim73\syntax\bdf.vim	/^  let b:bdf_minlines = 30$/;"	v
b:bdf_minlines	.\vim73\syntax\bdf.vim	/^  let b:bdf_minlines = bdf_minlines$/;"	v
b:browsefilter	.\vim73\ftplugin\abaqus.vim	/^    let b:browsefilter = "Abaqus Input Files (*.inp *.inc)\\t*.inp;*.inc\\n" .$/;"	v
b:browsefilter	.\vim73\ftplugin\ant.vim	/^    let b:browsefilter = "Build Files (build.xml)\\tbuild.xml\\n" .$/;"	v
b:browsefilter	.\vim73\ftplugin\aspvbs.vim	/^    let  b:browsefilter="ASP Files (*.asp)\\t*.asp\\n" . s:browsefilter$/;"	v
b:browsefilter	.\vim73\ftplugin\c.vim	/^    let b:browsefilter = "C Source Files (*.c)\\t*.c\\n" .$/;"	v
b:browsefilter	.\vim73\ftplugin\c.vim	/^    let b:browsefilter = "C++ Source Files (*.cpp *.c++)\\t*.cpp;*.c++\\n" .$/;"	v
b:browsefilter	.\vim73\ftplugin\c.vim	/^    let b:browsefilter = "Ch Source Files (*.ch *.chf)\\t*.ch;*.chf\\n" .$/;"	v
b:browsefilter	.\vim73\ftplugin\cobol.vim	/^  let b:browsefilter = "COBOL Source Files (*.cbl, *.cob)\\t*.cbl;*.cob;*.lib\\n".$/;"	v
b:browsefilter	.\vim73\ftplugin\config.vim	/^    let  b:browsefilter="Configure Scripts (configure.*, config.*)\\tconfigure*;config.*\\n" .$/;"	v
b:browsefilter	.\vim73\ftplugin\cs.vim	/^    let b:browsefilter = "C# Source Files (*.cs)\\t*.cs\\n" .$/;"	v
b:browsefilter	.\vim73\ftplugin\csh.vim	/^    let  b:browsefilter="csh Scripts (*.csh)\\t*.csh\\n" .$/;"	v
b:browsefilter	.\vim73\ftplugin\dosbatch.vim	/^  let b:browsefilter = "DOS Batch Files (*.bat, *.cmd)\\t*.bat;*.cmd\\nAll Files (*.*)\\t*.*\\n"$/;"	v
b:browsefilter	.\vim73\ftplugin\dtd.vim	/^    let  b:browsefilter="DTD Files (*.dtd)\\t*.dtd\\n" .$/;"	v
b:browsefilter	.\vim73\ftplugin\eruby.vim	/^  let b:browsefilter="eRuby Files (*.erb, *.rhtml)\\t*.erb;*.rhtml\\n" . s:browsefilter$/;"	v
b:browsefilter	.\vim73\ftplugin\fortran.vim	/^  let b:browsefilter = "Fortran Files (*.f;*.F;*.for;*.f77;*.f90;*.f95;*.fpp;*.ftn)\\t*.f;*.F;*.for;*.f77;*.f90;*.f95;*.fpp;*.ftn\\n" .$/;"	v
b:browsefilter	.\vim73\ftplugin\haml.vim	/^  let b:browsefilter="Haml Files (*.haml)\\t*.haml\\nSass Files (*.sass)\\t*.sass\\n" . s:browsefilter$/;"	v
b:browsefilter	.\vim73\ftplugin\html.vim	/^    let  b:browsefilter="HTML Files (*.html,*.htm)\\t*.htm;*.html\\n" .$/;"	v
b:browsefilter	.\vim73\ftplugin\ishd.vim	/^    let b:browsefilter = "InstallShield Files (*.rul)\\t*.rul\\n" .$/;"	v
b:browsefilter	.\vim73\ftplugin\java.vim	/^    let  b:browsefilter="Java Files (*.java)\\t*.java\\n" .$/;"	v
b:browsefilter	.\vim73\ftplugin\javascript.vim	/^    let  b:browsefilter="Javascript Files (*.js)\\t*.js\\n" .$/;"	v
b:browsefilter	.\vim73\ftplugin\jsp.vim	/^    let  b:browsefilter="JSP Files (*.jsp)\\t*.jsp\\n" . s:browsefilter$/;"	v
b:browsefilter	.\vim73\ftplugin\kwt.vim	/^    let b:browsefilter = "Kimwitu\/Kimwitu++ Files (*.k)\\t*.k\\n" .$/;"	v
b:browsefilter	.\vim73\ftplugin\liquid.vim	/^  let b:browsefilter = "\\n".b:browsefilter$/;"	v
b:browsefilter	.\vim73\ftplugin\liquid.vim	/^  let b:browsefilter = ''$/;"	v
b:browsefilter	.\vim73\ftplugin\liquid.vim	/^  let b:browsefilter="Liquid Files (*.liquid)\\t*.liquid" . b:browsefilter$/;"	v
b:browsefilter	.\vim73\ftplugin\msmessages.vim	/^  let b:browsefilter = "MS Message Files (*.mc)\\t*.mc\\n" .$/;"	v
b:browsefilter	.\vim73\ftplugin\occam.vim	/^  let b:browsefilter = "All Occam Files (*.occ *.inc)\\t*.occ;*.inc\\n" .$/;"	v
b:browsefilter	.\vim73\ftplugin\perl.vim	/^    let b:browsefilter = "Perl Source Files (*.pl)\\t*.pl\\n" .$/;"	v
b:browsefilter	.\vim73\ftplugin\perl6.vim	/^    let b:browsefilter = "Perl Source Files (*.pl)\\t*.pl\\n" .$/;"	v
b:browsefilter	.\vim73\ftplugin\php.vim	/^    let  b:browsefilter="PHP Files (*.php)\\t*.php\\n" . s:browsefilter$/;"	v
b:browsefilter	.\vim73\ftplugin\postscr.vim	/^  let b:browsefilter = "PostScript Files (*.ps)\\t*.ps\\n" .$/;"	v
b:browsefilter	.\vim73\ftplugin\pyrex.vim	/^    let  b:browsefilter = "Pyrex files (*.pyx,*.pxd)\\t*.pyx;*.pxd\\n" .$/;"	v
b:browsefilter	.\vim73\ftplugin\python.vim	/^    let b:browsefilter = "Python Files (*.py)\\t*.py\\n" .$/;"	v
b:browsefilter	.\vim73\ftplugin\ruby.vim	/^  let b:browsefilter = "Ruby Source Files (*.rb)\\t*.rb\\n" .$/;"	v
b:browsefilter	.\vim73\ftplugin\sgml.vim	/^    let  b:browsefilter="SGML Files (*.sgml,*.sgm)\\t*.sgm*\\n" . s:browsefilter$/;"	v
b:browsefilter	.\vim73\ftplugin\sh.vim	/^    let  b:browsefilter="Bourne Shell Scripts (*.sh)\\t*.sh\\n" .$/;"	v
b:browsefilter	.\vim73\ftplugin\sql.vim	/^    let b:browsefilter = "SQL Files (*.sql)\\t*.sql\\n" .$/;"	v
b:browsefilter	.\vim73\ftplugin\svg.vim	/^    let  b:browsefilter="SVG Files (*.svg)\\t*.svg\\n" . s:browsefilter$/;"	v
b:browsefilter	.\vim73\ftplugin\tcl.vim	/^    let b:browsefilter = "Tcl Source Files (.tcl)\\t*.tcl\\n" .$/;"	v
b:browsefilter	.\vim73\ftplugin\tcsh.vim	/^    let  b:browsefilter="tcsh Scripts (*.tcsh)\\t*.tcsh\\n" . s:browsefilter$/;"	v
b:browsefilter	.\vim73\ftplugin\verilog.vim	/^  let b:browsefilter = "Verilog Source Files (*.v)\\t*.v\\n" .$/;"	v
b:browsefilter	.\vim73\ftplugin\xhtml.vim	/^    let  b:browsefilter="XHTML files (*.xhtml, *.xhtm)\\t*.xhtml;*.xhtm\\n" . s:browsefilter$/;"	v
b:browsefilter	.\vim73\ftplugin\xml.vim	/^    let  b:browsefilter="XML Files (*.xml)\\t*.xml\\n" .$/;"	v
b:browsefilter	.\vim73\ftplugin\xsd.vim	/^    let  b:browsefilter="XSD Files (*.xsd)\\t*.xsd\\n" . s:browsefilter$/;"	v
b:browsefilter	.\vim73\ftplugin\xslt.vim	/^    let  b:browsefilter="XSLT Files (*.xsl,*.xslt)\\t*.xsl;*.xslt\\n" . b:browsefilter$/;"	v
b:browsefilter	.\vim73\syntax\lpc.vim	/^    let b:browsefilter = "LPC Source Files (*.c *.d *.h)\\t*.c;*.d;*.h\\n" .$/;"	v
b:c_minlines	.\vim73\syntax\c.vim	/^    let b:c_minlines = 15	" mostly for () constructs$/;"	v
b:c_minlines	.\vim73\syntax\c.vim	/^    let b:c_minlines = 50	" #if 0 constructs can be long$/;"	v
b:c_minlines	.\vim73\syntax\c.vim	/^  let b:c_minlines = c_minlines$/;"	v
b:c_minlines	.\vim73\syntax\c51.vim	/^    let b:c_minlines = 15	" mostly for () constructs$/;"	v
b:c_minlines	.\vim73\syntax\c51.vim	/^    let b:c_minlines = 50	" #if 0 constructs can be long$/;"	v
b:c_minlines	.\vim73\syntax\c51.vim	/^  let b:c_minlines = c_minlines$/;"	v
b:c_minlines	.\vim73\syntax\calendar.vim	/^    let b:c_minlines = 15       " mostly for () constructs$/;"	v
b:c_minlines	.\vim73\syntax\calendar.vim	/^    let b:c_minlines = 50       " #if 0 constructs can be long$/;"	v
b:c_minlines	.\vim73\syntax\calendar.vim	/^  let b:c_minlines = c_minlines$/;"	v
b:c_minlines	.\vim73\syntax\indent.vim	/^    let b:c_minlines = 15       " mostly for () constructs$/;"	v
b:c_minlines	.\vim73\syntax\indent.vim	/^    let b:c_minlines = 50       " #if 0 constructs can be long$/;"	v
b:c_minlines	.\vim73\syntax\indent.vim	/^  let b:c_minlines = c_minlines$/;"	v
b:c_minlines	.\vim73\syntax\lpc.vim	/^    let b:c_minlines = 15	" mostly for () constructs$/;"	v
b:c_minlines	.\vim73\syntax\lpc.vim	/^    let b:c_minlines = 50	" #if 0 constructs can be long$/;"	v
b:c_minlines	.\vim73\syntax\lpc.vim	/^  let b:c_minlines = c_minlines$/;"	v
b:comment_end	.\vim73\ftplugin\sql.vim	/^let b:comment_end = '\\\\(^\\\\s*'.b:comment_leader.'.*\\\\n\\\\)'.$/;"	v
b:comment_jump_over	.\vim73\ftplugin\sql.vim	/^let b:comment_jump_over  = "call search('".$/;"	v
b:comment_leader	.\vim73\ftplugin\sql.vim	/^let b:comment_leader = '\\\\(--\\\\\\|\\\\\/\\\\\/\\\\\\|\\\\*\\\\\\|\\\\\/\\\\*\\\\\\|\\\\*\\\\\/\\\\)'$/;"	v
b:comment_skip_back	.\vim73\ftplugin\sql.vim	/^let b:comment_skip_back  = "call search('".$/;"	v
b:comment_start	.\vim73\ftplugin\sql.vim	/^let b:comment_start  = '^\\\\(\\\\s*'.b:comment_leader.'.*\\\\n\\\\)\\\\@<!'.$/;"	v
b:cucumber_root	.\vim73\ftplugin\cucumber.vim	/^let b:cucumber_root = expand('%:p:h:s?.*[\\\/]\\%(features\\|stories\\)\\zs[\\\/].*??')$/;"	v
b:current_ftplugin	.\vim73\ftplugin\sql.vim	/^let b:current_ftplugin = 'sql'$/;"	v
b:current_indent	.\vim73\indent\sqlanywhere.vim	/^let b:current_indent = "sqlanywhere"$/;"	v
b:current_syntax	.\vim73\syntax\a2ps.vim	/^let b:current_syntax = "a2ps"$/;"	v
b:current_syntax	.\vim73\syntax\a65.vim	/^let b:current_syntax = "a65"$/;"	v
b:current_syntax	.\vim73\syntax\aap.vim	/^let b:current_syntax = "aap"$/;"	v
b:current_syntax	.\vim73\syntax\abap.vim	/^let b:current_syntax = "abap"$/;"	v
b:current_syntax	.\vim73\syntax\abaqus.vim	/^let b:current_syntax = "abaqus"$/;"	v
b:current_syntax	.\vim73\syntax\abc.vim	/^let b:current_syntax = "abc"$/;"	v
b:current_syntax	.\vim73\syntax\abel.vim	/^let b:current_syntax = "abel"$/;"	v
b:current_syntax	.\vim73\syntax\acedb.vim	/^let b:current_syntax = "acedb"$/;"	v
b:current_syntax	.\vim73\syntax\ada.vim	/^let b:current_syntax = "ada"$/;"	v
b:current_syntax	.\vim73\syntax\aflex.vim	/^let b:current_syntax = "aflex"$/;"	v
b:current_syntax	.\vim73\syntax\ahdl.vim	/^let b:current_syntax = "ahdl"$/;"	v
b:current_syntax	.\vim73\syntax\alsaconf.vim	/^let b:current_syntax = "alsaconf"$/;"	v
b:current_syntax	.\vim73\syntax\amiga.vim	/^let b:current_syntax = "amiga"$/;"	v
b:current_syntax	.\vim73\syntax\aml.vim	/^let b:current_syntax = "aml"$/;"	v
b:current_syntax	.\vim73\syntax\ampl.vim	/^let b:current_syntax = "ampl"$/;"	v
b:current_syntax	.\vim73\syntax\ant.vim	/^let b:current_syntax = "ant"$/;"	v
b:current_syntax	.\vim73\syntax\antlr.vim	/^let b:current_syntax = "antlr"$/;"	v
b:current_syntax	.\vim73\syntax\apache.vim	/^let b:current_syntax = "apache"$/;"	v
b:current_syntax	.\vim73\syntax\apachestyle.vim	/^let b:current_syntax = "apachestyle"$/;"	v
b:current_syntax	.\vim73\syntax\arch.vim	/^let b:current_syntax = "arch"$/;"	v
b:current_syntax	.\vim73\syntax\art.vim	/^let b:current_syntax = "art"$/;"	v
b:current_syntax	.\vim73\syntax\asm.vim	/^let b:current_syntax = "asm"$/;"	v
b:current_syntax	.\vim73\syntax\asm68k.vim	/^let b:current_syntax = "asm68k"$/;"	v
b:current_syntax	.\vim73\syntax\asmh8300.vim	/^let b:current_syntax = "asmh8300"$/;"	v
b:current_syntax	.\vim73\syntax\asn.vim	/^let b:current_syntax = "asn"$/;"	v
b:current_syntax	.\vim73\syntax\aspperl.vim	/^let b:current_syntax = "aspperl"$/;"	v
b:current_syntax	.\vim73\syntax\aspvbs.vim	/^let b:current_syntax = "aspvbs"$/;"	v
b:current_syntax	.\vim73\syntax\asterisk.vim	/^let b:current_syntax = "asterisk" $/;"	v
b:current_syntax	.\vim73\syntax\asteriskvm.vim	/^let b:current_syntax = "asteriskvm"$/;"	v
b:current_syntax	.\vim73\syntax\atlas.vim	/^let b:current_syntax = "atlas"$/;"	v
b:current_syntax	.\vim73\syntax\autohotkey.vim	/^let b:current_syntax = "autohotkey"$/;"	v
b:current_syntax	.\vim73\syntax\automake.vim	/^let b:current_syntax = "automake"$/;"	v
b:current_syntax	.\vim73\syntax\ave.vim	/^let b:current_syntax = "ave"$/;"	v
b:current_syntax	.\vim73\syntax\awk.vim	/^let b:current_syntax = "awk"$/;"	v
b:current_syntax	.\vim73\syntax\ayacc.vim	/^let b:current_syntax = "ayacc"$/;"	v
b:current_syntax	.\vim73\syntax\b.vim	/^let b:current_syntax = "b"$/;"	v
b:current_syntax	.\vim73\syntax\baan.vim	/^let b:current_syntax = "baan"$/;"	v
b:current_syntax	.\vim73\syntax\basic.vim	/^let b:current_syntax = "basic"$/;"	v
b:current_syntax	.\vim73\syntax\bc.vim	/^let b:current_syntax = "bc"$/;"	v
b:current_syntax	.\vim73\syntax\bdf.vim	/^let b:current_syntax = "bdf"$/;"	v
b:current_syntax	.\vim73\syntax\bib.vim	/^let b:current_syntax = "bib"$/;"	v
b:current_syntax	.\vim73\syntax\bindzone.vim	/^let b:current_syntax = "bindzone"$/;"	v
b:current_syntax	.\vim73\syntax\blank.vim	/^let b:current_syntax = "blank"$/;"	v
b:current_syntax	.\vim73\syntax\bst.vim	/^let b:current_syntax = "bst"$/;"	v
b:current_syntax	.\vim73\syntax\btm.vim	/^let b:current_syntax = "btm"$/;"	v
b:current_syntax	.\vim73\syntax\bzr.vim	/^let b:current_syntax = "bzr"$/;"	v
b:current_syntax	.\vim73\syntax\c.vim	/^let b:current_syntax = "c"$/;"	v
b:current_syntax	.\vim73\syntax\c51.vim	/^let b:current_syntax = "c"$/;"	v
b:current_syntax	.\vim73\syntax\cabal.vim	/^let b:current_syntax = "cabal"$/;"	v
b:current_syntax	.\vim73\syntax\calendar.vim	/^let b:current_syntax = "calendar"$/;"	v
b:current_syntax	.\vim73\syntax\catalog.vim	/^let b:current_syntax = "catalog"$/;"	v
b:current_syntax	.\vim73\syntax\cdl.vim	/^let b:current_syntax = "cdl"$/;"	v
b:current_syntax	.\vim73\syntax\cdrdaoconf.vim	/^let b:current_syntax = "cdrdaoconf"$/;"	v
b:current_syntax	.\vim73\syntax\cdrtoc.vim	/^let b:current_syntax = "cdrtoc"$/;"	v
b:current_syntax	.\vim73\syntax\cf.vim	/^let b:current_syntax = "cf"$/;"	v
b:current_syntax	.\vim73\syntax\cfg.vim	/^let b:current_syntax = "cfg"$/;"	v
b:current_syntax	.\vim73\syntax\ch.vim	/^let b:current_syntax = "ch"$/;"	v
b:current_syntax	.\vim73\syntax\chaiscript.vim	/^let b:current_syntax = "chaiscript"$/;"	v
b:current_syntax	.\vim73\syntax\change.vim	/^let b:current_syntax = "change"$/;"	v
b:current_syntax	.\vim73\syntax\changelog.vim	/^let b:current_syntax = "changelog"$/;"	v
b:current_syntax	.\vim73\syntax\cheetah.vim	/^let b:current_syntax = "cheetah"$/;"	v
b:current_syntax	.\vim73\syntax\chill.vim	/^let b:current_syntax = "chill"$/;"	v
b:current_syntax	.\vim73\syntax\chordpro.vim	/^let b:current_syntax = "chordpro"$/;"	v
b:current_syntax	.\vim73\syntax\cl.vim	/^let b:current_syntax = "cl"$/;"	v
b:current_syntax	.\vim73\syntax\clean.vim	/^let b:current_syntax = "clean"$/;"	v
b:current_syntax	.\vim73\syntax\clipper.vim	/^let b:current_syntax = "clipper"$/;"	v
b:current_syntax	.\vim73\syntax\cmake.vim	/^let b:current_syntax = "cmake"$/;"	v
b:current_syntax	.\vim73\syntax\cmusrc.vim	/^let b:current_syntax = "cmusrc"$/;"	v
b:current_syntax	.\vim73\syntax\cobol.vim	/^let b:current_syntax = "cobol"$/;"	v
b:current_syntax	.\vim73\syntax\conaryrecipe.vim	/^let b:current_syntax = "conaryrecipe"$/;"	v
b:current_syntax	.\vim73\syntax\conf.vim	/^let b:current_syntax = "conf"$/;"	v
b:current_syntax	.\vim73\syntax\config.vim	/^let b:current_syntax = "config"$/;"	v
b:current_syntax	.\vim73\syntax\context.vim	/^let b:current_syntax = "context"$/;"	v
b:current_syntax	.\vim73\syntax\cpp.vim	/^let b:current_syntax = "cpp"$/;"	v
b:current_syntax	.\vim73\syntax\crm.vim	/^let b:current_syntax = "crm"$/;"	v
b:current_syntax	.\vim73\syntax\crontab.vim	/^let b:current_syntax = "crontab"$/;"	v
b:current_syntax	.\vim73\syntax\cs.vim	/^let b:current_syntax = "cs"$/;"	v
b:current_syntax	.\vim73\syntax\csc.vim	/^let b:current_syntax = "csc"$/;"	v
b:current_syntax	.\vim73\syntax\csh.vim	/^let b:current_syntax = "csh"$/;"	v
b:current_syntax	.\vim73\syntax\csp.vim	/^let b:current_syntax = "csp"$/;"	v
b:current_syntax	.\vim73\syntax\css.vim	/^let b:current_syntax = "css"$/;"	v
b:current_syntax	.\vim73\syntax\cterm.vim	/^let b:current_syntax = "cterm"$/;"	v
b:current_syntax	.\vim73\syntax\cucumber.vim	/^let b:current_syntax = "cucumber"$/;"	v
b:current_syntax	.\vim73\syntax\cuda.vim	/^let b:current_syntax = "cuda"$/;"	v
b:current_syntax	.\vim73\syntax\cupl.vim	/^let b:current_syntax = "cupl"$/;"	v
b:current_syntax	.\vim73\syntax\cuplsim.vim	/^let b:current_syntax = "cuplsim"$/;"	v
b:current_syntax	.\vim73\syntax\cvs.vim	/^let b:current_syntax = "cvs"$/;"	v
b:current_syntax	.\vim73\syntax\cvsrc.vim	/^let b:current_syntax = "cvsrc"$/;"	v
b:current_syntax	.\vim73\syntax\cweb.vim	/^let b:current_syntax = "cweb"$/;"	v
b:current_syntax	.\vim73\syntax\cynlib.vim	/^let b:current_syntax = "cynlib"$/;"	v
b:current_syntax	.\vim73\syntax\cynpp.vim	/^let b:current_syntax = "cynpp"$/;"	v
b:current_syntax	.\vim73\syntax\d.vim	/^let b:current_syntax = "d"$/;"	v
b:current_syntax	.\vim73\syntax\datascript.vim	/^let b:current_syntax = "datascript"$/;"	v
b:current_syntax	.\vim73\syntax\dcd.vim	/^let b:current_syntax = "dcd"$/;"	v
b:current_syntax	.\vim73\syntax\dcl.vim	/^let b:current_syntax = "dcl"$/;"	v
b:current_syntax	.\vim73\syntax\debchangelog.vim	/^let b:current_syntax = "debchangelog"$/;"	v
b:current_syntax	.\vim73\syntax\debcontrol.vim	/^let b:current_syntax = "debcontrol"$/;"	v
b:current_syntax	.\vim73\syntax\debsources.vim	/^let b:current_syntax = "debsources"$/;"	v
b:current_syntax	.\vim73\syntax\def.vim	/^let b:current_syntax = "def"$/;"	v
b:current_syntax	.\vim73\syntax\denyhosts.vim	/^let b:current_syntax = "denyhosts"$/;"	v
b:current_syntax	.\vim73\syntax\desc.vim	/^let b:current_syntax = "desc"$/;"	v
b:current_syntax	.\vim73\syntax\desktop.vim	/^let b:current_syntax = "desktop"$/;"	v
b:current_syntax	.\vim73\syntax\dictconf.vim	/^let b:current_syntax = "dictconf"$/;"	v
b:current_syntax	.\vim73\syntax\dictdconf.vim	/^let b:current_syntax = "dictdconf"$/;"	v
b:current_syntax	.\vim73\syntax\diff.vim	/^let b:current_syntax = "diff"$/;"	v
b:current_syntax	.\vim73\syntax\dircolors.vim	/^let b:current_syntax = "dircolors"$/;"	v
b:current_syntax	.\vim73\syntax\diva.vim	/^let b:current_syntax = "diva"$/;"	v
b:current_syntax	.\vim73\syntax\django.vim	/^let b:current_syntax = "django"$/;"	v
b:current_syntax	.\vim73\syntax\docbk.vim	/^let b:current_syntax = "docbk"$/;"	v
b:current_syntax	.\vim73\syntax\dosbatch.vim	/^let b:current_syntax = "dosbatch"$/;"	v
b:current_syntax	.\vim73\syntax\dosini.vim	/^let b:current_syntax = "dosini"$/;"	v
b:current_syntax	.\vim73\syntax\dot.vim	/^let b:current_syntax = "dot"$/;"	v
b:current_syntax	.\vim73\syntax\doxygen.vim	/^    let b:current_syntax = "doxygen"$/;"	v
b:current_syntax	.\vim73\syntax\doxygen.vim	/^    let b:current_syntax = b:current_syntax.'.doxygen'$/;"	v
b:current_syntax	.\vim73\syntax\doxygen.vim	/^    let b:current_syntax=b:doxygen_syntax_save$/;"	v
b:current_syntax	.\vim73\syntax\dracula.vim	/^let b:current_syntax = "dracula"$/;"	v
b:current_syntax	.\vim73\syntax\dsl.vim	/^let b:current_syntax = "dsl"$/;"	v
b:current_syntax	.\vim73\syntax\dtd.vim	/^let b:current_syntax = "dtd"$/;"	v
b:current_syntax	.\vim73\syntax\dtml.vim	/^let b:current_syntax = "dtml"$/;"	v
b:current_syntax	.\vim73\syntax\dtrace.vim	/^let b:current_syntax = "dtrace"$/;"	v
b:current_syntax	.\vim73\syntax\dylan.vim	/^let b:current_syntax = "dylan"$/;"	v
b:current_syntax	.\vim73\syntax\dylanintr.vim	/^let b:current_syntax = "dylanintr"$/;"	v
b:current_syntax	.\vim73\syntax\dylanlid.vim	/^let b:current_syntax = "dylanlid"$/;"	v
b:current_syntax	.\vim73\syntax\ecd.vim	/^let b:current_syntax = "ecd"$/;"	v
b:current_syntax	.\vim73\syntax\edif.vim	/^let b:current_syntax = "edif"$/;"	v
b:current_syntax	.\vim73\syntax\eiffel.vim	/^let b:current_syntax = "eiffel"$/;"	v
b:current_syntax	.\vim73\syntax\elf.vim	/^let b:current_syntax = "elf"$/;"	v
b:current_syntax	.\vim73\syntax\elinks.vim	/^let b:current_syntax = "elinks"$/;"	v
b:current_syntax	.\vim73\syntax\elmfilt.vim	/^let b:current_syntax = "elmfilt"$/;"	v
b:current_syntax	.\vim73\syntax\erlang.vim	/^let b:current_syntax = "erlang"$/;"	v
b:current_syntax	.\vim73\syntax\eruby.vim	/^let b:current_syntax = 'eruby'$/;"	v
b:current_syntax	.\vim73\syntax\esmtprc.vim	/^let b:current_syntax="esmtprc"$/;"	v
b:current_syntax	.\vim73\syntax\esqlc.vim	/^let b:current_syntax = "esqlc"$/;"	v
b:current_syntax	.\vim73\syntax\esterel.vim	/^let b:current_syntax = "esterel"$/;"	v
b:current_syntax	.\vim73\syntax\eterm.vim	/^let b:current_syntax = "eterm"$/;"	v
b:current_syntax	.\vim73\syntax\eviews.vim	/^let b:current_syntax="eviews"$/;"	v
b:current_syntax	.\vim73\syntax\exim.vim	/^let b:current_syntax = "exim"$/;"	v
b:current_syntax	.\vim73\syntax\expect.vim	/^let b:current_syntax = "expect"$/;"	v
b:current_syntax	.\vim73\syntax\exports.vim	/^let b:current_syntax = "exports"$/;"	v
b:current_syntax	.\vim73\syntax\fan.vim	/^let b:current_syntax = "fan"$/;"	v
b:current_syntax	.\vim73\syntax\fasm.vim	/^let b:current_syntax = "fasm"$/;"	v
b:current_syntax	.\vim73\syntax\fdcc.vim	/^let b:current_syntax = "fdcc"$/;"	v
b:current_syntax	.\vim73\syntax\fetchmail.vim	/^let b:current_syntax = "fetchmail"$/;"	v
b:current_syntax	.\vim73\syntax\fgl.vim	/^let b:current_syntax = "fgl"$/;"	v
b:current_syntax	.\vim73\syntax\flexwiki.vim	/^let b:current_syntax="FlexWiki"$/;"	v
b:current_syntax	.\vim73\syntax\focexec.vim	/^let b:current_syntax = "focexec"$/;"	v
b:current_syntax	.\vim73\syntax\form.vim	/^  let b:current_syntax = "form"$/;"	v
b:current_syntax	.\vim73\syntax\forth.vim	/^let b:current_syntax = "forth"$/;"	v
b:current_syntax	.\vim73\syntax\fortran.vim	/^let b:current_syntax = "fortran"$/;"	v
b:current_syntax	.\vim73\syntax\foxpro.vim	/^let b:current_syntax = "foxpro"$/;"	v
b:current_syntax	.\vim73\syntax\framescript.vim	/^let b:current_syntax = "framescript"$/;"	v
b:current_syntax	.\vim73\syntax\freebasic.vim	/^let b:current_syntax = "freebasic"$/;"	v
b:current_syntax	.\vim73\syntax\fstab.vim	/^let b:current_syntax = "fstab"$/;"	v
b:current_syntax	.\vim73\syntax\fvwm.vim	/^let b:current_syntax = "fvwm"$/;"	v
b:current_syntax	.\vim73\syntax\fvwm2m4.vim	/^let b:current_syntax = 'fvwm2m4'$/;"	v
b:current_syntax	.\vim73\syntax\gdb.vim	/^let b:current_syntax = "gdb"$/;"	v
b:current_syntax	.\vim73\syntax\gdmo.vim	/^let b:current_syntax = "gdmo"$/;"	v
b:current_syntax	.\vim73\syntax\gedcom.vim	/^let b:current_syntax = "gedcom"$/;"	v
b:current_syntax	.\vim73\syntax\git.vim	/^let b:current_syntax = "git"$/;"	v
b:current_syntax	.\vim73\syntax\gitcommit.vim	/^let b:current_syntax = "gitcommit"$/;"	v
b:current_syntax	.\vim73\syntax\gitconfig.vim	/^let b:current_syntax = "gitconfig"$/;"	v
b:current_syntax	.\vim73\syntax\gitrebase.vim	/^let b:current_syntax = "gitrebase"$/;"	v
b:current_syntax	.\vim73\syntax\gitsendemail.vim	/^let b:current_syntax = "gitsendemail"$/;"	v
b:current_syntax	.\vim73\syntax\gkrellmrc.vim	/^let b:current_syntax = "gkrellmrc"$/;"	v
b:current_syntax	.\vim73\syntax\gnuplot.vim	/^let b:current_syntax = "gnuplot"$/;"	v
b:current_syntax	.\vim73\syntax\gp.vim	/^let b:current_syntax = "gp"$/;"	v
b:current_syntax	.\vim73\syntax\gpg.vim	/^let b:current_syntax = "gpg"$/;"	v
b:current_syntax	.\vim73\syntax\grads.vim	/^let b:current_syntax = "grads"$/;"	v
b:current_syntax	.\vim73\syntax\gretl.vim	/^let b:current_syntax="gretl"$/;"	v
b:current_syntax	.\vim73\syntax\groovy.vim	/^let b:current_syntax = "groovy"$/;"	v
b:current_syntax	.\vim73\syntax\group.vim	/^let b:current_syntax = "group"$/;"	v
b:current_syntax	.\vim73\syntax\grub.vim	/^let b:current_syntax = "grub"$/;"	v
b:current_syntax	.\vim73\syntax\gsp.vim	/^let b:current_syntax = "gsp"$/;"	v
b:current_syntax	.\vim73\syntax\gtkrc.vim	/^let b:current_syntax = "gtkrc"$/;"	v
b:current_syntax	.\vim73\syntax\haml.vim	/^let b:current_syntax = "haml"$/;"	v
b:current_syntax	.\vim73\syntax\hamster.vim	/^let b:current_syntax = "hamster"$/;"	v
b:current_syntax	.\vim73\syntax\haskell.vim	/^let b:current_syntax = "haskell"$/;"	v
b:current_syntax	.\vim73\syntax\haste.vim	/^let b:current_syntax = "haste"$/;"	v
b:current_syntax	.\vim73\syntax\hastepreproc.vim	/^let b:current_syntax = "hastepreproc"$/;"	v
b:current_syntax	.\vim73\syntax\hb.vim	/^let b:current_syntax = "hb"$/;"	v
b:current_syntax	.\vim73\syntax\help.vim	/^let b:current_syntax = "help"$/;"	v
b:current_syntax	.\vim73\syntax\hercules.vim	/^let b:current_syntax = "hercules"$/;"	v
b:current_syntax	.\vim73\syntax\hex.vim	/^let b:current_syntax = "hex"$/;"	v
b:current_syntax	.\vim73\syntax\hog.vim	/^let b:current_syntax = "hog"$/;"	v
b:current_syntax	.\vim73\syntax\hostconf.vim	/^let b:current_syntax = "hostconf"$/;"	v
b:current_syntax	.\vim73\syntax\html.vim	/^let b:current_syntax = "html"$/;"	v
b:current_syntax	.\vim73\syntax\htmlcheetah.vim	/^let b:current_syntax = "htmlcheetah"$/;"	v
b:current_syntax	.\vim73\syntax\htmldjango.vim	/^let b:current_syntax = "htmldjango"$/;"	v
b:current_syntax	.\vim73\syntax\htmlm4.vim	/^let b:current_syntax = "htmlm4"$/;"	v
b:current_syntax	.\vim73\syntax\htmlos.vim	/^let b:current_syntax = "htmlos"$/;"	v
b:current_syntax	.\vim73\syntax\ia64.vim	/^let b:current_syntax = "ia64"$/;"	v
b:current_syntax	.\vim73\syntax\ibasic.vim	/^let b:current_syntax = "ibasic"$/;"	v
b:current_syntax	.\vim73\syntax\icemenu.vim	/^let b:current_syntax = "IceMenu"$/;"	v
b:current_syntax	.\vim73\syntax\icon.vim	/^let b:current_syntax = "icon"$/;"	v
b:current_syntax	.\vim73\syntax\idl.vim	/^let b:current_syntax = "idl"$/;"	v
b:current_syntax	.\vim73\syntax\idlang.vim	/^let b:current_syntax = "idlang"$/;"	v
b:current_syntax	.\vim73\syntax\indent.vim	/^let b:current_syntax = "indent"$/;"	v
b:current_syntax	.\vim73\syntax\inform.vim	/^let b:current_syntax = "inform"$/;"	v
b:current_syntax	.\vim73\syntax\initex.vim	/^let b:current_syntax = "initex"$/;"	v
b:current_syntax	.\vim73\syntax\initng.vim	/^let b:current_syntax = "initng"$/;"	v
b:current_syntax	.\vim73\syntax\inittab.vim	/^let b:current_syntax = "inittab"$/;"	v
b:current_syntax	.\vim73\syntax\ishd.vim	/^let b:current_syntax = "ishd"$/;"	v
b:current_syntax	.\vim73\syntax\iss.vim	/^let b:current_syntax = "iss"$/;"	v
b:current_syntax	.\vim73\syntax\ist.vim	/^let b:current_syntax = "ist"$/;"	v
b:current_syntax	.\vim73\syntax\jal.vim	/^let b:current_syntax = "jal"$/;"	v
b:current_syntax	.\vim73\syntax\jam.vim	/^let b:current_syntax = "jam"$/;"	v
b:current_syntax	.\vim73\syntax\jargon.vim	/^let b:current_syntax = "jargon"$/;"	v
b:current_syntax	.\vim73\syntax\java.vim	/^let b:current_syntax = "java"$/;"	v
b:current_syntax	.\vim73\syntax\javacc.vim	/^let b:current_syntax = "javacc"$/;"	v
b:current_syntax	.\vim73\syntax\javascript.vim	/^let b:current_syntax = "javascript"$/;"	v
b:current_syntax	.\vim73\syntax\jess.vim	/^let b:current_syntax = "jess"$/;"	v
b:current_syntax	.\vim73\syntax\jgraph.vim	/^let b:current_syntax = "jgraph"$/;"	v
b:current_syntax	.\vim73\syntax\jproperties.vim	/^let b:current_syntax = "jproperties"$/;"	v
b:current_syntax	.\vim73\syntax\jsp.vim	/^let b:current_syntax = "jsp"$/;"	v
b:current_syntax	.\vim73\syntax\kconfig.vim	/^let b:current_syntax = "kconfig"$/;"	v
b:current_syntax	.\vim73\syntax\kix.vim	/^let b:current_syntax = "kix"$/;"	v
b:current_syntax	.\vim73\syntax\kscript.vim	/^let b:current_syntax = "kscript"$/;"	v
b:current_syntax	.\vim73\syntax\kwt.vim	/^let b:current_syntax = "kwt"$/;"	v
b:current_syntax	.\vim73\syntax\lace.vim	/^let b:current_syntax = "lace"$/;"	v
b:current_syntax	.\vim73\syntax\latte.vim	/^let b:current_syntax = "latte"$/;"	v
b:current_syntax	.\vim73\syntax\ld.vim	/^let b:current_syntax = "ld"$/;"	v
b:current_syntax	.\vim73\syntax\ldapconf.vim	/^let b:current_syntax = "ldapconf"$/;"	v
b:current_syntax	.\vim73\syntax\ldif.vim	/^let b:current_syntax = "ldif"$/;"	v
b:current_syntax	.\vim73\syntax\lex.vim	/^let b:current_syntax = "lex"$/;"	v
b:current_syntax	.\vim73\syntax\lftp.vim	/^let b:current_syntax = "lftp"$/;"	v
b:current_syntax	.\vim73\syntax\lhaskell.vim	/^let b:current_syntax = "lhaskell"$/;"	v
b:current_syntax	.\vim73\syntax\libao.vim	/^let b:current_syntax = "libao"$/;"	v
b:current_syntax	.\vim73\syntax\lifelines.vim	/^let b:current_syntax = "lifelines"$/;"	v
b:current_syntax	.\vim73\syntax\lilo.vim	/^let b:current_syntax = "lilo"$/;"	v
b:current_syntax	.\vim73\syntax\limits.vim	/^let b:current_syntax = "limits"$/;"	v
b:current_syntax	.\vim73\syntax\liquid.vim	/^let b:current_syntax = 'liquid'$/;"	v
b:current_syntax	.\vim73\syntax\lisp.vim	/^let b:current_syntax = "lisp"$/;"	v
b:current_syntax	.\vim73\syntax\lite.vim	/^let b:current_syntax = "lite"$/;"	v
b:current_syntax	.\vim73\syntax\litestep.vim	/^let b:current_syntax = "litestep"$/;"	v
b:current_syntax	.\vim73\syntax\loginaccess.vim	/^let b:current_syntax = "loginaccess"$/;"	v
b:current_syntax	.\vim73\syntax\logindefs.vim	/^let b:current_syntax = "logindefs"$/;"	v
b:current_syntax	.\vim73\syntax\logtalk.vim	/^let b:current_syntax = "logtalk"$/;"	v
b:current_syntax	.\vim73\syntax\lotos.vim	/^let b:current_syntax = "lotos"$/;"	v
b:current_syntax	.\vim73\syntax\lout.vim	/^let b:current_syntax = "lout"$/;"	v
b:current_syntax	.\vim73\syntax\lpc.vim	/^let b:current_syntax = "lpc"$/;"	v
b:current_syntax	.\vim73\syntax\lprolog.vim	/^let b:current_syntax = "lprolog"$/;"	v
b:current_syntax	.\vim73\syntax\lscript.vim	/^let b:current_syntax = "lscript"$/;"	v
b:current_syntax	.\vim73\syntax\lsl.vim	/^let b:current_syntax = "lsl"$/;"	v
b:current_syntax	.\vim73\syntax\lss.vim	/^let b:current_syntax = "lss"$/;"	v
b:current_syntax	.\vim73\syntax\lua.vim	/^let b:current_syntax = "lua"$/;"	v
b:current_syntax	.\vim73\syntax\lynx.vim	/^let b:current_syntax = "lynx"$/;"	v
b:current_syntax	.\vim73\syntax\m4.vim	/^let b:current_syntax = "m4"$/;"	v
b:current_syntax	.\vim73\syntax\mail.vim	/^let b:current_syntax = "mail"$/;"	v
b:current_syntax	.\vim73\syntax\mailaliases.vim	/^let b:current_syntax = "mailaliases"$/;"	v
b:current_syntax	.\vim73\syntax\mailcap.vim	/^let b:current_syntax = "mailcap"$/;"	v
b:current_syntax	.\vim73\syntax\make.vim	/^let b:current_syntax = "make"$/;"	v
b:current_syntax	.\vim73\syntax\man.vim	/^let b:current_syntax = "man"$/;"	v
b:current_syntax	.\vim73\syntax\manconf.vim	/^let b:current_syntax = "manconf"$/;"	v
b:current_syntax	.\vim73\syntax\maple.vim	/^let b:current_syntax = "maple"$/;"	v
b:current_syntax	.\vim73\syntax\markdown.vim	/^let b:current_syntax = "markdown"$/;"	v
b:current_syntax	.\vim73\syntax\masm.vim	/^let b:current_syntax = "masm"$/;"	v
b:current_syntax	.\vim73\syntax\mason.vim	/^let b:current_syntax = "mason"$/;"	v
b:current_syntax	.\vim73\syntax\master.vim	/^let b:current_syntax = "master"$/;"	v
b:current_syntax	.\vim73\syntax\matlab.vim	/^let b:current_syntax = "matlab"$/;"	v
b:current_syntax	.\vim73\syntax\maxima.vim	/^let b:current_syntax = "maxima"$/;"	v
b:current_syntax	.\vim73\syntax\mel.vim	/^let b:current_syntax = "mel"$/;"	v
b:current_syntax	.\vim73\syntax\messages.vim	/^let b:current_syntax = "messages"$/;"	v
b:current_syntax	.\vim73\syntax\mf.vim	/^let b:current_syntax = "mf"$/;"	v
b:current_syntax	.\vim73\syntax\mgl.vim	/^let b:current_syntax = "mgl"$/;"	v
b:current_syntax	.\vim73\syntax\mgp.vim	/^let b:current_syntax = "mgp"$/;"	v
b:current_syntax	.\vim73\syntax\mib.vim	/^let b:current_syntax = "mib"$/;"	v
b:current_syntax	.\vim73\syntax\mma.vim	/^let b:current_syntax = "mma"$/;"	v
b:current_syntax	.\vim73\syntax\mmix.vim	/^let b:current_syntax = "mmix"$/;"	v
b:current_syntax	.\vim73\syntax\mmp.vim	/^let b:current_syntax = "mmp"$/;"	v
b:current_syntax	.\vim73\syntax\modconf.vim	/^let b:current_syntax = "modconf"$/;"	v
b:current_syntax	.\vim73\syntax\model.vim	/^let b:current_syntax = "model"$/;"	v
b:current_syntax	.\vim73\syntax\modsim3.vim	/^let b:current_syntax = "modsim3"$/;"	v
b:current_syntax	.\vim73\syntax\modula2.vim	/^let b:current_syntax = "modula2"$/;"	v
b:current_syntax	.\vim73\syntax\modula3.vim	/^let b:current_syntax = "modula3"$/;"	v
b:current_syntax	.\vim73\syntax\monk.vim	/^let b:current_syntax = "monk"$/;"	v
b:current_syntax	.\vim73\syntax\moo.vim	/^let b:current_syntax = "moo"$/;"	v
b:current_syntax	.\vim73\syntax\mp.vim	/^let b:current_syntax = "mp"$/;"	v
b:current_syntax	.\vim73\syntax\mplayerconf.vim	/^let b:current_syntax = "mplayerconf"$/;"	v
b:current_syntax	.\vim73\syntax\mrxvtrc.vim	/^let b:current_syntax = "mrxvtrc"$/;"	v
b:current_syntax	.\vim73\syntax\msidl.vim	/^let b:current_syntax = "msidl"$/;"	v
b:current_syntax	.\vim73\syntax\msmessages.vim	/^let b:current_syntax = "msmessages"$/;"	v
b:current_syntax	.\vim73\syntax\msql.vim	/^let b:current_syntax = "msql"$/;"	v
b:current_syntax	.\vim73\syntax\mush.vim	/^let b:current_syntax = "mush"$/;"	v
b:current_syntax	.\vim73\syntax\muttrc.vim	/^let b:current_syntax = "muttrc"$/;"	v
b:current_syntax	.\vim73\syntax\mysql.vim	/^let b:current_syntax = "mysql"$/;"	v
b:current_syntax	.\vim73\syntax\named.vim	/^let b:current_syntax = "named"$/;"	v
b:current_syntax	.\vim73\syntax\nanorc.vim	/^let b:current_syntax = "nanorc"$/;"	v
b:current_syntax	.\vim73\syntax\nasm.vim	/^let b:current_syntax = "nasm"$/;"	v
b:current_syntax	.\vim73\syntax\nastran.vim	/^let b:current_syntax = "nastran"$/;"	v
b:current_syntax	.\vim73\syntax\natural.vim	/^let b:current_syntax = "natural"$/;"	v
b:current_syntax	.\vim73\syntax\ncf.vim	/^let b:current_syntax = "ncf"$/;"	v
b:current_syntax	.\vim73\syntax\netrc.vim	/^let b:current_syntax = "netrc"$/;"	v
b:current_syntax	.\vim73\syntax\netrw.vim	/^let   b:current_syntax = "netrwlist"$/;"	v
b:current_syntax	.\vim73\syntax\nqc.vim	/^let b:current_syntax = "nqc"$/;"	v
b:current_syntax	.\vim73\syntax\nroff.vim	/^let b:current_syntax = "nroff"$/;"	v
b:current_syntax	.\vim73\syntax\nsis.vim	/^let b:current_syntax = "nsis"$/;"	v
b:current_syntax	.\vim73\syntax\obj.vim	/^let b:current_syntax = "obj"$/;"	v
b:current_syntax	.\vim73\syntax\objc.vim	/^let b:current_syntax = "objc"$/;"	v
b:current_syntax	.\vim73\syntax\objcpp.vim	/^let b:current_syntax = "objcpp"$/;"	v
b:current_syntax	.\vim73\syntax\ocaml.vim	/^let b:current_syntax = "ocaml"$/;"	v
b:current_syntax	.\vim73\syntax\occam.vim	/^let b:current_syntax = "occam"$/;"	v
b:current_syntax	.\vim73\syntax\omnimark.vim	/^let b:current_syntax = "omnimark"$/;"	v
b:current_syntax	.\vim73\syntax\openroad.vim	/^let b:current_syntax = "openroad"$/;"	v
b:current_syntax	.\vim73\syntax\opl.vim	/^let b:current_syntax = "opl"$/;"	v
b:current_syntax	.\vim73\syntax\ora.vim	/^let b:current_syntax = "ora"$/;"	v
b:current_syntax	.\vim73\syntax\pamconf.vim	/^let b:current_syntax = "pamconf"$/;"	v
b:current_syntax	.\vim73\syntax\papp.vim	/^let b:current_syntax = "papp"$/;"	v
b:current_syntax	.\vim73\syntax\pascal.vim	/^let b:current_syntax = "pascal"$/;"	v
b:current_syntax	.\vim73\syntax\passwd.vim	/^let b:current_syntax = "passwd"$/;"	v
b:current_syntax	.\vim73\syntax\pcap.vim	/^let b:current_syntax = "pcap"$/;"	v
b:current_syntax	.\vim73\syntax\pccts.vim	/^let b:current_syntax = "pccts"$/;"	v
b:current_syntax	.\vim73\syntax\pdf.vim	/^let b:current_syntax = "pdf"$/;"	v
b:current_syntax	.\vim73\syntax\perl.vim	/^let b:current_syntax = "perl"$/;"	v
b:current_syntax	.\vim73\syntax\perl6.vim	/^let b:current_syntax = "perl6"$/;"	v
b:current_syntax	.\vim73\syntax\pf.vim	/^let b:current_syntax = "pf"$/;"	v
b:current_syntax	.\vim73\syntax\pfmain.vim	/^let b:current_syntax = "pfmain"$/;"	v
b:current_syntax	.\vim73\syntax\php.vim	/^let b:current_syntax = "php"$/;"	v
b:current_syntax	.\vim73\syntax\pic.vim	/^let b:current_syntax = "pic"$/;"	v
b:current_syntax	.\vim73\syntax\pike.vim	/^let b:current_syntax = "pike"$/;"	v
b:current_syntax	.\vim73\syntax\pilrc.vim	/^let b:current_syntax = "pilrc"$/;"	v
b:current_syntax	.\vim73\syntax\pine.vim	/^let b:current_syntax = "pine"$/;"	v
b:current_syntax	.\vim73\syntax\pinfo.vim	/^let b:current_syntax = "pinfo"$/;"	v
b:current_syntax	.\vim73\syntax\plaintex.vim	/^let b:current_syntax = "plaintex"$/;"	v
b:current_syntax	.\vim73\syntax\plm.vim	/^let b:current_syntax = "plm"$/;"	v
b:current_syntax	.\vim73\syntax\plp.vim	/^let b:current_syntax = "plp"$/;"	v
b:current_syntax	.\vim73\syntax\plsql.vim	/^let b:current_syntax = "plsql"$/;"	v
b:current_syntax	.\vim73\syntax\po.vim	/^let b:current_syntax = "po"$/;"	v
b:current_syntax	.\vim73\syntax\pod.vim	/^let b:current_syntax = "pod"$/;"	v
b:current_syntax	.\vim73\syntax\postscr.vim	/^let b:current_syntax = "postscr"$/;"	v
b:current_syntax	.\vim73\syntax\pov.vim	/^let b:current_syntax = "pov"$/;"	v
b:current_syntax	.\vim73\syntax\povini.vim	/^let b:current_syntax = "povini"$/;"	v
b:current_syntax	.\vim73\syntax\ppd.vim	/^let b:current_syntax = "ppd"$/;"	v
b:current_syntax	.\vim73\syntax\ppwiz.vim	/^let b:current_syntax = "ppwiz"$/;"	v
b:current_syntax	.\vim73\syntax\prescribe.vim	/^let b:current_syntax = "prescribe"$/;"	v
b:current_syntax	.\vim73\syntax\privoxy.vim	/^let b:current_syntax = "privoxy"$/;"	v
b:current_syntax	.\vim73\syntax\procmail.vim	/^let b:current_syntax = "procmail"$/;"	v
b:current_syntax	.\vim73\syntax\progress.vim	/^let b:current_syntax = "progress"$/;"	v
b:current_syntax	.\vim73\syntax\prolog.vim	/^let b:current_syntax = "prolog"$/;"	v
b:current_syntax	.\vim73\syntax\promela.vim	/^let b:current_syntax = "promela"$/;"	v
b:current_syntax	.\vim73\syntax\protocols.vim	/^let b:current_syntax = "protocols"$/;"	v
b:current_syntax	.\vim73\syntax\psf.vim	/^let b:current_syntax = "psf"$/;"	v
b:current_syntax	.\vim73\syntax\ptcap.vim	/^let b:current_syntax = "ptcap"$/;"	v
b:current_syntax	.\vim73\syntax\purifylog.vim	/^let b:current_syntax = "purifylog"$/;"	v
b:current_syntax	.\vim73\syntax\pyrex.vim	/^let b:current_syntax = "pyrex"$/;"	v
b:current_syntax	.\vim73\syntax\python.vim	/^let b:current_syntax = "python"$/;"	v
b:current_syntax	.\vim73\syntax\qf.vim	/^let b:current_syntax = "qf"$/;"	v
b:current_syntax	.\vim73\syntax\quake.vim	/^let b:current_syntax = "quake"$/;"	v
b:current_syntax	.\vim73\syntax\r.vim	/^let b:current_syntax="r"$/;"	v
b:current_syntax	.\vim73\syntax\racc.vim	/^let b:current_syntax = "racc"$/;"	v
b:current_syntax	.\vim73\syntax\radiance.vim	/^let b:current_syntax = "radiance"$/;"	v
b:current_syntax	.\vim73\syntax\ratpoison.vim	/^let b:current_syntax = "ratpoison"$/;"	v
b:current_syntax	.\vim73\syntax\rc.vim	/^let b:current_syntax = "rc"$/;"	v
b:current_syntax	.\vim73\syntax\rcs.vim	/^let b:current_syntax = "rcs"$/;"	v
b:current_syntax	.\vim73\syntax\rcslog.vim	/^let b:current_syntax = "rcslog"$/;"	v
b:current_syntax	.\vim73\syntax\readline.vim	/^let b:current_syntax = "readline"$/;"	v
b:current_syntax	.\vim73\syntax\rebol.vim	/^let b:current_syntax = "rebol"$/;"	v
b:current_syntax	.\vim73\syntax\registry.vim	/^let b:current_syntax = "registry"$/;"	v
b:current_syntax	.\vim73\syntax\remind.vim	/^let b:current_syntax = "remind"$/;"	v
b:current_syntax	.\vim73\syntax\resolv.vim	/^let b:current_syntax = "resolv"$/;"	v
b:current_syntax	.\vim73\syntax\reva.vim	/^let b:current_syntax = "reva"$/;"	v
b:current_syntax	.\vim73\syntax\rexx.vim	/^let b:current_syntax = "rexx"$/;"	v
b:current_syntax	.\vim73\syntax\rhelp.vim	/^let   b:current_syntax = "rhelp"$/;"	v
b:current_syntax	.\vim73\syntax\rib.vim	/^let b:current_syntax = "rib"$/;"	v
b:current_syntax	.\vim73\syntax\rnc.vim	/^let b:current_syntax = "rnc"$/;"	v
b:current_syntax	.\vim73\syntax\rnoweb.vim	/^let   b:current_syntax = "rnoweb"$/;"	v
b:current_syntax	.\vim73\syntax\robots.vim	/^let b:current_syntax = "robots"$/;"	v
b:current_syntax	.\vim73\syntax\rpcgen.vim	/^let b:current_syntax = "rpcgen"$/;"	v
b:current_syntax	.\vim73\syntax\rpl.vim	/^let b:current_syntax = "rpl"$/;"	v
b:current_syntax	.\vim73\syntax\rst.vim	/^let b:current_syntax = "rst"$/;"	v
b:current_syntax	.\vim73\syntax\rtf.vim	/^let b:current_syntax = "rtf"$/;"	v
b:current_syntax	.\vim73\syntax\ruby.vim	/^let b:current_syntax = "ruby"$/;"	v
b:current_syntax	.\vim73\syntax\samba.vim	/^let b:current_syntax = "samba"$/;"	v
b:current_syntax	.\vim73\syntax\sas.vim	/^let b:current_syntax = "sas"$/;"	v
b:current_syntax	.\vim73\syntax\sass.vim	/^let b:current_syntax = "sass"$/;"	v
b:current_syntax	.\vim73\syntax\sather.vim	/^let b:current_syntax = "sather"$/;"	v
b:current_syntax	.\vim73\syntax\scheme.vim	/^let b:current_syntax = "scheme"$/;"	v
b:current_syntax	.\vim73\syntax\scilab.vim	/^let b:current_syntax = "scilab"$/;"	v
b:current_syntax	.\vim73\syntax\screen.vim	/^let b:current_syntax = "screen"$/;"	v
b:current_syntax	.\vim73\syntax\scss.vim	/^let b:current_syntax = "scss"$/;"	v
b:current_syntax	.\vim73\syntax\sd.vim	/^let b:current_syntax = "sd"$/;"	v
b:current_syntax	.\vim73\syntax\sdc.vim	/^let b:current_syntax = "sdc"$/;"	v
b:current_syntax	.\vim73\syntax\sdl.vim	/^let b:current_syntax = "sdl"$/;"	v
b:current_syntax	.\vim73\syntax\sed.vim	/^let b:current_syntax = "sed"$/;"	v
b:current_syntax	.\vim73\syntax\sensors.vim	/^let b:current_syntax = "sensors"$/;"	v
b:current_syntax	.\vim73\syntax\services.vim	/^let b:current_syntax = "services"$/;"	v
b:current_syntax	.\vim73\syntax\setserial.vim	/^let b:current_syntax = "setserial"$/;"	v
b:current_syntax	.\vim73\syntax\sgml.vim	/^let b:current_syntax = "sgml"$/;"	v
b:current_syntax	.\vim73\syntax\sgmldecl.vim	/^let b:current_syntax = "sgmldecl"$/;"	v
b:current_syntax	.\vim73\syntax\sgmllnx.vim	/^let b:current_syntax = "sgmllnx"$/;"	v
b:current_syntax	.\vim73\syntax\sh.vim	/^ let b:current_syntax = "bash"$/;"	v
b:current_syntax	.\vim73\syntax\sh.vim	/^ let b:current_syntax = "ksh"$/;"	v
b:current_syntax	.\vim73\syntax\sh.vim	/^ let b:current_syntax = "sh"$/;"	v
b:current_syntax	.\vim73\syntax\sicad.vim	/^let b:current_syntax = "sicad"$/;"	v
b:current_syntax	.\vim73\syntax\sieve.vim	/^let b:current_syntax = "sieve"$/;"	v
b:current_syntax	.\vim73\syntax\simula.vim	/^let b:current_syntax = "simula"$/;"	v
b:current_syntax	.\vim73\syntax\sinda.vim	/^let b:current_syntax = "sinda"$/;"	v
b:current_syntax	.\vim73\syntax\sindacmp.vim	/^let b:current_syntax = "sindacmp"$/;"	v
b:current_syntax	.\vim73\syntax\sindaout.vim	/^let b:current_syntax = "sindaout"$/;"	v
b:current_syntax	.\vim73\syntax\sisu.vim	/^let b:current_syntax = "sisu"$/;"	v
b:current_syntax	.\vim73\syntax\skill.vim	/^let b:current_syntax = "skill"$/;"	v
b:current_syntax	.\vim73\syntax\sl.vim	/^let b:current_syntax = "sl"$/;"	v
b:current_syntax	.\vim73\syntax\slang.vim	/^let b:current_syntax = "slang"$/;"	v
b:current_syntax	.\vim73\syntax\slice.vim	/^let b:current_syntax = "slice"$/;"	v
b:current_syntax	.\vim73\syntax\slpconf.vim	/^let b:current_syntax = "slpconf"$/;"	v
b:current_syntax	.\vim73\syntax\slpreg.vim	/^let b:current_syntax = "slpreg"$/;"	v
b:current_syntax	.\vim73\syntax\slpspi.vim	/^let b:current_syntax = "slpspi"$/;"	v
b:current_syntax	.\vim73\syntax\slrnrc.vim	/^let b:current_syntax = "slrnrc"$/;"	v
b:current_syntax	.\vim73\syntax\slrnsc.vim	/^let b:current_syntax = "slrnsc"$/;"	v
b:current_syntax	.\vim73\syntax\sm.vim	/^let b:current_syntax = "sm"$/;"	v
b:current_syntax	.\vim73\syntax\smarty.vim	/^let b:current_syntax = "smarty"$/;"	v
b:current_syntax	.\vim73\syntax\smcl.vim	/^let b:current_syntax = "smcl"$/;"	v
b:current_syntax	.\vim73\syntax\smil.vim	/^let b:current_syntax = "smil"$/;"	v
b:current_syntax	.\vim73\syntax\smith.vim	/^let b:current_syntax = "smith"$/;"	v
b:current_syntax	.\vim73\syntax\sml.vim	/^let b:current_syntax = "sml"$/;"	v
b:current_syntax	.\vim73\syntax\snnsnet.vim	/^let b:current_syntax = "snnsnet"$/;"	v
b:current_syntax	.\vim73\syntax\snnspat.vim	/^let b:current_syntax = "snnspat"$/;"	v
b:current_syntax	.\vim73\syntax\snnsres.vim	/^let b:current_syntax = "snnsres"$/;"	v
b:current_syntax	.\vim73\syntax\snobol4.vim	/^let b:current_syntax = "snobol4"$/;"	v
b:current_syntax	.\vim73\syntax\spec.vim	/^let b:current_syntax = "spec"$/;"	v
b:current_syntax	.\vim73\syntax\specman.vim	/^let b:current_syntax = "specman"$/;"	v
b:current_syntax	.\vim73\syntax\spice.vim	/^let b:current_syntax = "spice"$/;"	v
b:current_syntax	.\vim73\syntax\splint.vim	/^let b:current_syntax = "splint"$/;"	v
b:current_syntax	.\vim73\syntax\spup.vim	/^let b:current_syntax = "spup"$/;"	v
b:current_syntax	.\vim73\syntax\spyce.vim	/^let b:current_syntax = "spyce"$/;"	v
b:current_syntax	.\vim73\syntax\sqlanywhere.vim	/^let b:current_syntax = "sqlanywhere"$/;"	v
b:current_syntax	.\vim73\syntax\sqlforms.vim	/^let b:current_syntax = "sqlforms"$/;"	v
b:current_syntax	.\vim73\syntax\sqlinformix.vim	/^let b:current_syntax = "sqlinformix"$/;"	v
b:current_syntax	.\vim73\syntax\sqlj.vim	/^let b:current_syntax = "sqlj"$/;"	v
b:current_syntax	.\vim73\syntax\sqloracle.vim	/^let b:current_syntax = "sql"$/;"	v
b:current_syntax	.\vim73\syntax\sqr.vim	/^let b:current_syntax = "sqr"$/;"	v
b:current_syntax	.\vim73\syntax\squid.vim	/^let b:current_syntax = "squid"$/;"	v
b:current_syntax	.\vim73\syntax\sshconfig.vim	/^let b:current_syntax = "sshconfig"$/;"	v
b:current_syntax	.\vim73\syntax\sshdconfig.vim	/^let b:current_syntax = "sshdconfig"$/;"	v
b:current_syntax	.\vim73\syntax\st.vim	/^let b:current_syntax = "st"$/;"	v
b:current_syntax	.\vim73\syntax\stata.vim	/^let b:current_syntax = "stata"$/;"	v
b:current_syntax	.\vim73\syntax\stp.vim	/^let b:current_syntax = "stp"$/;"	v
b:current_syntax	.\vim73\syntax\strace.vim	/^let b:current_syntax = "strace"$/;"	v
b:current_syntax	.\vim73\syntax\sudoers.vim	/^let b:current_syntax = "sudoers"$/;"	v
b:current_syntax	.\vim73\syntax\svg.vim	/^let b:current_syntax = "svg"$/;"	v
b:current_syntax	.\vim73\syntax\svn.vim	/^let b:current_syntax = "svn"$/;"	v
b:current_syntax	.\vim73\syntax\sysctl.vim	/^let b:current_syntax = "sysctl"$/;"	v
b:current_syntax	.\vim73\syntax\tads.vim	/^let b:current_syntax = "tads"$/;"	v
b:current_syntax	.\vim73\syntax\tags.vim	/^let b:current_syntax = "tags"$/;"	v
b:current_syntax	.\vim73\syntax\tak.vim	/^let b:current_syntax = "tak"$/;"	v
b:current_syntax	.\vim73\syntax\takcmp.vim	/^let b:current_syntax = "takcmp"$/;"	v
b:current_syntax	.\vim73\syntax\takout.vim	/^let b:current_syntax = "takout"$/;"	v
b:current_syntax	.\vim73\syntax\taskdata.vim	/^let b:current_syntax = "taskdata"$/;"	v
b:current_syntax	.\vim73\syntax\taskedit.vim	/^let b:current_syntax = "taskedit"$/;"	v
b:current_syntax	.\vim73\syntax\tcl.vim	/^let b:current_syntax = "tcl"$/;"	v
b:current_syntax	.\vim73\syntax\tcsh.vim	/^let b:current_syntax = 'tcsh'$/;"	v
b:current_syntax	.\vim73\syntax\terminfo.vim	/^let b:current_syntax = "terminfo"$/;"	v
b:current_syntax	.\vim73\syntax\tex.vim	/^let   b:current_syntax = "tex"$/;"	v
b:current_syntax	.\vim73\syntax\texinfo.vim	/^let b:current_syntax = "texinfo"$/;"	v
b:current_syntax	.\vim73\syntax\texmf.vim	/^let b:current_syntax = "texmf"$/;"	v
b:current_syntax	.\vim73\syntax\tf.vim	/^let b:current_syntax = "tf"$/;"	v
b:current_syntax	.\vim73\syntax\tidy.vim	/^let b:current_syntax = "tidy"$/;"	v
b:current_syntax	.\vim73\syntax\tilde.vim	/^let b:current_syntax = "tilde"$/;"	v
b:current_syntax	.\vim73\syntax\tli.vim	/^let b:current_syntax = "tli"$/;"	v
b:current_syntax	.\vim73\syntax\tpp.vim	/^let b:current_syntax = "tpp"$/;"	v
b:current_syntax	.\vim73\syntax\trasys.vim	/^let b:current_syntax = "trasys"$/;"	v
b:current_syntax	.\vim73\syntax\tsalt.vim	/^let b:current_syntax = "tsalt"$/;"	v
b:current_syntax	.\vim73\syntax\tsscl.vim	/^let b:current_syntax = "tsscl"$/;"	v
b:current_syntax	.\vim73\syntax\tssgm.vim	/^let b:current_syntax = "tssgm"$/;"	v
b:current_syntax	.\vim73\syntax\tssop.vim	/^let b:current_syntax = "tssop"$/;"	v
b:current_syntax	.\vim73\syntax\uc.vim	/^let b:current_syntax = "uc"$/;"	v
b:current_syntax	.\vim73\syntax\udevconf.vim	/^let b:current_syntax = "udevconf"$/;"	v
b:current_syntax	.\vim73\syntax\udevperm.vim	/^let b:current_syntax = "udevperm"$/;"	v
b:current_syntax	.\vim73\syntax\udevrules.vim	/^let b:current_syntax = "udevrules"$/;"	v
b:current_syntax	.\vim73\syntax\uil.vim	/^let b:current_syntax = "uil"$/;"	v
b:current_syntax	.\vim73\syntax\updatedb.vim	/^let b:current_syntax = "updatedb"$/;"	v
b:current_syntax	.\vim73\syntax\valgrind.vim	/^let b:current_syntax = "valgrind"$/;"	v
b:current_syntax	.\vim73\syntax\vb.vim	/^let b:current_syntax = "vb"$/;"	v
b:current_syntax	.\vim73\syntax\vera.vim	/^let b:current_syntax = "vera"$/;"	v
b:current_syntax	.\vim73\syntax\verilog.vim	/^let b:current_syntax = "verilog"$/;"	v
b:current_syntax	.\vim73\syntax\verilogams.vim	/^let b:current_syntax = "verilogams"$/;"	v
b:current_syntax	.\vim73\syntax\vgrindefs.vim	/^let b:current_syntax = "vgrindefs"$/;"	v
b:current_syntax	.\vim73\syntax\vhdl.vim	/^let b:current_syntax = "vhdl"$/;"	v
b:current_syntax	.\vim73\syntax\vim.vim	/^let b:current_syntax = "vim"$/;"	v
b:current_syntax	.\vim73\syntax\viminfo.vim	/^let b:current_syntax = "viminfo"$/;"	v
b:current_syntax	.\vim73\syntax\virata.vim	/^let b:current_syntax = "virata"$/;"	v
b:current_syntax	.\vim73\syntax\vmasm.vim	/^let b:current_syntax = "vmasm"$/;"	v
b:current_syntax	.\vim73\syntax\voscm.vim	/^let b:current_syntax = "voscm"$/;"	v
b:current_syntax	.\vim73\syntax\vrml.vim	/^let b:current_syntax = "vrml"$/;"	v
b:current_syntax	.\vim73\syntax\vsejcl.vim	/^let b:current_syntax = "vsejcl"$/;"	v
b:current_syntax	.\vim73\syntax\wdiff.vim	/^let b:current_syntax = "wdiff"$/;"	v
b:current_syntax	.\vim73\syntax\web.vim	/^let b:current_syntax = "web"$/;"	v
b:current_syntax	.\vim73\syntax\webmacro.vim	/^let b:current_syntax = "webmacro"$/;"	v
b:current_syntax	.\vim73\syntax\wget.vim	/^let b:current_syntax = "wget"$/;"	v
b:current_syntax	.\vim73\syntax\winbatch.vim	/^let b:current_syntax = "winbatch"$/;"	v
b:current_syntax	.\vim73\syntax\wml.vim	/^let b:current_syntax = "wml"$/;"	v
b:current_syntax	.\vim73\syntax\wsh.vim	/^let b:current_syntax = "wsh"$/;"	v
b:current_syntax	.\vim73\syntax\wsml.vim	/^let b:current_syntax = "wsml"$/;"	v
b:current_syntax	.\vim73\syntax\wvdial.vim	/^let b:current_syntax = "wvdial"$/;"	v
b:current_syntax	.\vim73\syntax\xbl.vim	/^let b:current_syntax = "xbl"$/;"	v
b:current_syntax	.\vim73\syntax\xdefaults.vim	/^let b:current_syntax = "xdefaults"$/;"	v
b:current_syntax	.\vim73\syntax\xf86conf.vim	/^let b:current_syntax = "xf86conf"$/;"	v
b:current_syntax	.\vim73\syntax\xhtml.vim	/^let b:current_syntax = "xhtml"$/;"	v
b:current_syntax	.\vim73\syntax\xinetd.vim	/^let b:current_syntax = "xinetd"$/;"	v
b:current_syntax	.\vim73\syntax\xkb.vim	/^let b:current_syntax = "xkb"$/;"	v
b:current_syntax	.\vim73\syntax\xmath.vim	/^let b:current_syntax = "xmath"$/;"	v
b:current_syntax	.\vim73\syntax\xml.vim	/^let b:current_syntax = "xml"$/;"	v
b:current_syntax	.\vim73\syntax\xmodmap.vim	/^let b:current_syntax = "xmodmap"$/;"	v
b:current_syntax	.\vim73\syntax\xpm.vim	/^let b:current_syntax = "xpm"$/;"	v
b:current_syntax	.\vim73\syntax\xpm2.vim	/^let b:current_syntax = "xpm2"$/;"	v
b:current_syntax	.\vim73\syntax\xs.vim	/^let b:current_syntax = "xs"$/;"	v
b:current_syntax	.\vim73\syntax\xxd.vim	/^let b:current_syntax = "xxd"$/;"	v
b:current_syntax	.\vim73\syntax\yacc.vim	/^let b:current_syntax = "yacc"$/;"	v
b:current_syntax	.\vim73\syntax\yaml.vim	/^let b:current_syntax = "yaml"$/;"	v
b:current_syntax	.\vim73\syntax\z8a.vim	/^let b:current_syntax = "z8a"$/;"	v
b:current_syntax	.\vim73\syntax\zsh.vim	/^let b:current_syntax = "zsh"$/;"	v
b:curret_syntax	.\vim73\syntax\tasm.vim	/^let b:curret_syntax = "tasm"$/;"	v
b:did_ftplugin	.\vim73\ftplugin\a2ps.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\aap.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\abaqus.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\ada.vim	/^let b:did_ftplugin = 45$/;"	v
b:did_ftplugin	.\vim73\ftplugin\alsaconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\ant.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\arch.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\aspvbs.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\bdf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\bst.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\c.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\calendar.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\cdrdaoconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\changelog.vim	/^  let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\cobol.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\conf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\config.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\context.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\crm.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\cs.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\csc.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\csh.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\css.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\cucumber.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\cvsrc.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\debchangelog.vim	/^let b:did_ftplugin=1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\debcontrol.vim	/^let b:did_ftplugin=1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\denyhosts.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\dictconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\dictdconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\diff.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\dircolors.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\dosbatch.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\dosini.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\dtd.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\dtrace.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\elinks.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\eruby.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\eterm.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\fetchmail.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\flexwiki.vim	/^let b:did_ftplugin = 1  " Don't load another plugin for this buffer$/;"	v
b:did_ftplugin	.\vim73\ftplugin\fortran.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\framescript.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\fvwm.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\git.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\gitcommit.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\gitconfig.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\gitrebase.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\gpg.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\group.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\grub.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\haml.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\hamster.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\haskell.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\help.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\hostconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\hostsaccess.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\html.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\indent.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\initex.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\ishd.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\java.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\javascript.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\jsp.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\kconfig.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\ld.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\lftp.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\libao.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\limits.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\liquid.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\lisp.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\logcheck.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\loginaccess.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\logindefs.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\logtalk.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\lprolog.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\lua.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\m4.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\mail.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\mailaliases.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\mailcap.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\make.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\man.vim	/^  let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\manconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\matlab.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\mf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\modconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\mp.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\mplayerconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\mrxvtrc.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\msmessages.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\muttrc.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\nanorc.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\netrc.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\nsis.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\ocaml.vim	/^let b:did_ftplugin=1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\occam.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\pamconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\pascal.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\passwd.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\pdf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\perl.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\perl6.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\php.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\pinfo.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\postscr.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\procmail.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\prolog.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\protocols.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\python.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\qf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\quake.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\racc.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\readline.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\reva.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\rnc.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\rpl.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\rst.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\ruby.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\sass.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\screen.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\sensors.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\services.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\setserial.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\sgml.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\sh.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\sieve.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\slpconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\slpreg.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\slpspi.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\spec.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\sql.vim	/^let b:did_ftplugin     = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\sshconfig.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\sudoers.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\svg.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\sysctl.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\tcl.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\tcsh.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\terminfo.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\udevconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\udevperm.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\udevrules.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\updatedb.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\vb.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\verilog.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\vhdl.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\vim.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\xdefaults.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\xf86conf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\xhtml.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\xinetd.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\xml.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\xmodmap.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\xsd.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\xslt.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\yaml.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.\vim73\ftplugin\zsh.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_indent	.\vim73\indent\ada.vim	/^let b:did_indent = 45$/;"	v
b:did_indent	.\vim73\indent\awk.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\bib.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\bst.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\c.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\cdl.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\ch.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\chaiscript.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\changelog.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\cmake.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\cobol.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\cpp.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\cs.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\css.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\cucumber.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\cuda.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\d.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\dictconf.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\dictdconf.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\dtrace.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\dylan.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\eiffel.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\erlang.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\eruby.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\eterm.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\fortran.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\framescript.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\gitconfig.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\haml.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\hamster.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\html.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\idlang.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\ishd.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\java.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\javascript.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\ld.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\lifelines.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\liquid.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\lisp.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\logtalk.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\lua.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\mail.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\make.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\matlab.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\mma.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\mp.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\objc.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\ocaml.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\occam.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\pascal.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\perl.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\perl6.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\php.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\postscr.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\pov.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\prolog.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\python.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\readline.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\rpl.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\rst.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\ruby.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\sass.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\sdl.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\sh.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\sml.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\sqlanywhere.vim	/^let b:did_indent     = 1$/;"	v
b:did_indent	.\vim73\indent\tcl.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\tcsh.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\tf.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\tilde.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\vb.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\verilog.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\vhdl.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\vim.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\xf86conf.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\xinetd.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\xml.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\indent\yacc.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.\vim73\syntax\spyce.vim	/^let b:did_indent = 1	     " don't perform HTML indentation!$/;"	v
b:docbk_type	.\vim73\syntax\docbk.vim	/^    let b:docbk_type = 'sgml'$/;"	v
b:docbk_type	.\vim73\syntax\docbk.vim	/^    let b:docbk_type = 'xml'$/;"	v
b:docbk_type	.\vim73\syntax\docbksgml.vim	/^let b:docbk_type="sgml"$/;"	v
b:docbk_type	.\vim73\syntax\docbkxml.vim	/^let b:docbk_type="xml"$/;"	v
b:doxygen_syntax_save	.\vim73\syntax\doxygen.vim	/^    let b:doxygen_syntax_save=b:current_syntax$/;"	v
b:enforce_freedesktop_standard	.\vim73\syntax\desktop.vim	/^	let b:enforce_freedesktop_standard = 0$/;"	v
b:enforce_freedesktop_standard	.\vim73\syntax\desktop.vim	/^	let b:enforce_freedesktop_standard = 1$/;"	v
b:eruby_nest_level	.\vim73\syntax\eruby.vim	/^  let b:eruby_nest_level = 1$/;"	v
b:eruby_nest_level	.\vim73\syntax\eruby.vim	/^  let b:eruby_nest_level = strlen(substitute(substitute(substitute(expand("%:t"),'@','','g'),'\\c\\.\\%(erb\\|rhtml\\)\\>','@','g'),'[^@]','','g'))$/;"	v
b:eruby_subtype	.\vim73\ftplugin\eruby.vim	/^    let b:eruby_subtype = 'html'$/;"	v
b:eruby_subtype	.\vim73\ftplugin\eruby.vim	/^    let b:eruby_subtype = 'javascript'$/;"	v
b:eruby_subtype	.\vim73\ftplugin\eruby.vim	/^    let b:eruby_subtype = 'ruby'$/;"	v
b:eruby_subtype	.\vim73\ftplugin\eruby.vim	/^    let b:eruby_subtype = 'text'$/;"	v
b:eruby_subtype	.\vim73\ftplugin\eruby.vim	/^    let b:eruby_subtype = 'yaml'$/;"	v
b:eruby_subtype	.\vim73\ftplugin\eruby.vim	/^    let b:eruby_subtype = g:eruby_default_subtype$/;"	v
b:eruby_subtype	.\vim73\ftplugin\eruby.vim	/^    let b:eruby_subtype = matchstr(&filetype,'^eruby\\.\\zs\\w\\+')$/;"	v
b:eruby_subtype	.\vim73\ftplugin\eruby.vim	/^    let b:eruby_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.erb\\|\\.eruby\\|\\.erubis\\)\\+$','',''),'\\.\\zs\\w\\+$')$/;"	v
b:eruby_subtype	.\vim73\ftplugin\eruby.vim	/^  let b:eruby_subtype = matchstr(s:lines,'eruby_subtype=\\zs\\w\\+')$/;"	v
b:eruby_subtype	.\vim73\syntax\eruby.vim	/^    let b:eruby_subtype = 'html'$/;"	v
b:eruby_subtype	.\vim73\syntax\eruby.vim	/^    let b:eruby_subtype = 'javascript'$/;"	v
b:eruby_subtype	.\vim73\syntax\eruby.vim	/^    let b:eruby_subtype = 'ruby'$/;"	v
b:eruby_subtype	.\vim73\syntax\eruby.vim	/^    let b:eruby_subtype = 'text'$/;"	v
b:eruby_subtype	.\vim73\syntax\eruby.vim	/^    let b:eruby_subtype = 'yaml'$/;"	v
b:eruby_subtype	.\vim73\syntax\eruby.vim	/^    let b:eruby_subtype = g:eruby_default_subtype$/;"	v
b:eruby_subtype	.\vim73\syntax\eruby.vim	/^    let b:eruby_subtype = matchstr(&filetype,'^eruby\\.\\zs\\w\\+')$/;"	v
b:eruby_subtype	.\vim73\syntax\eruby.vim	/^    let b:eruby_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.erb\\|\\.eruby\\|\\.erubis\\)\\+$','',''),'\\.\\zs\\w\\+$')$/;"	v
b:eruby_subtype	.\vim73\syntax\eruby.vim	/^  let b:eruby_subtype = matchstr(s:lines,'eruby_subtype=\\zs\\w\\+')$/;"	v
b:eruby_subtype_indentexpr	.\vim73\indent\eruby.vim	/^let b:eruby_subtype_indentexpr = &l:indentexpr$/;"	v
b:eterm_minlines	.\vim73\syntax\eterm.vim	/^  let b:eterm_minlines = 50$/;"	v
b:eterm_minlines	.\vim73\syntax\eterm.vim	/^  let b:eterm_minlines = eterm_minlines$/;"	v
b:extfname	.\vim73\syntax\tex.vim	/^let b:extfname=expand("%:e")$/;"	v
b:fortran_dialect	.\vim73\syntax\fortran.vim	/^    let b:fortran_dialect = "F"$/;"	v
b:fortran_dialect	.\vim73\syntax\fortran.vim	/^    let b:fortran_dialect = "elf"$/;"	v
b:fortran_dialect	.\vim73\syntax\fortran.vim	/^    let b:fortran_dialect = "f77"$/;"	v
b:fortran_dialect	.\vim73\syntax\fortran.vim	/^    let b:fortran_dialect = "f90"$/;"	v
b:fortran_dialect	.\vim73\syntax\fortran.vim	/^    let b:fortran_dialect = "f95"$/;"	v
b:fortran_dialect	.\vim73\syntax\fortran.vim	/^    let b:fortran_dialect = "unknown"$/;"	v
b:fortran_dialect	.\vim73\syntax\fortran.vim	/^    let b:fortran_dialect = matchstr(fortran_dialect,'\\<\\(f\\(9[05]\\|77\\)\\|elf\\|F\\)\\>')$/;"	v
b:fortran_dialect	.\vim73\syntax\fortran.vim	/^  let b:fortran_dialect = "unknown"$/;"	v
b:fortran_fixed_source	.\vim73\ftplugin\fortran.vim	/^	let b:fortran_fixed_source = 0$/;"	v
b:fortran_fixed_source	.\vim73\ftplugin\fortran.vim	/^    let b:fortran_fixed_source = 0$/;"	v
b:fortran_fixed_source	.\vim73\ftplugin\fortran.vim	/^    let b:fortran_fixed_source = 1$/;"	v
b:fortran_fixed_source	.\vim73\indent\fortran.vim	/^	let b:fortran_fixed_source = 0$/;"	v
b:fortran_fixed_source	.\vim73\indent\fortran.vim	/^    let b:fortran_fixed_source = 0$/;"	v
b:fortran_fixed_source	.\vim73\indent\fortran.vim	/^    let b:fortran_fixed_source = 1$/;"	v
b:fortran_fixed_source	.\vim73\syntax\fortran.vim	/^	let b:fortran_fixed_source = 0$/;"	v
b:fortran_fixed_source	.\vim73\syntax\fortran.vim	/^    let b:fortran_fixed_source = 0$/;"	v
b:fortran_fixed_source	.\vim73\syntax\fortran.vim	/^    let b:fortran_fixed_source = 1$/;"	v
b:fortran_retype	.\vim73\syntax\fortran.vim	/^  let b:fortran_retype = getline(1)." ".getline(2)." ".getline(3)$/;"	v
b:framescript_minlines	.\vim73\syntax\framescript.vim	/^let b:framescript_minlines = exists("framescript_minlines")$/;"	v
b:git_dir	.\vim73\ftplugin\git.vim	/^    let b:git_dir = $GIT_DIR$/;"	v
b:git_dir	.\vim73\ftplugin\git.vim	/^    let b:git_dir = matchstr(expand('%:p'),'.*\\.git\\>')$/;"	v
b:git_dir	.\vim73\ftplugin\git.vim	/^    let b:git_dir = substitute(b:git_dir,'\\\\','\/','g')$/;"	v
b:git_dir	.\vim73\ftplugin\gitcommit.vim	/^  let b:git_dir = expand("%:p:h")$/;"	v
b:hs_chs	.\vim73\syntax\chaskell.vim	/^let b:hs_chs=1$/;"	v
b:html_omni_flavor	.\vim73\ftplugin\html.vim	/^                let b:html_omni_flavor .= 'f'$/;"	v
b:html_omni_flavor	.\vim73\ftplugin\html.vim	/^                let b:html_omni_flavor .= 's'$/;"	v
b:html_omni_flavor	.\vim73\ftplugin\html.vim	/^                let b:html_omni_flavor .= 't'$/;"	v
b:html_omni_flavor	.\vim73\ftplugin\html.vim	/^                let b:html_omni_flavor = 'html40'$/;"	v
b:html_omni_flavor	.\vim73\ftplugin\html.vim	/^                let b:html_omni_flavor = 'html401'$/;"	v
b:html_omni_flavor	.\vim73\ftplugin\html.vim	/^                let b:html_omni_flavor = 'xhtml10'$/;"	v
b:html_omni_flavor	.\vim73\ftplugin\html.vim	/^            let b:html_omni_flavor = 'html32'$/;"	v
b:html_omni_flavor	.\vim73\ftplugin\html.vim	/^            let b:html_omni_flavor = 'html401t'$/;"	v
b:html_omni_flavor	.\vim73\ftplugin\html.vim	/^            let b:html_omni_flavor = 'xhtml10s'$/;"	v
b:html_omni_flavor	.\vim73\ftplugin\html.vim	/^            let b:html_omni_flavor = 'xhtml11'$/;"	v
b:i	.\vim73\syntax\hitest.vim	/^   let b:i = b:i + 1$/;"	v
b:i	.\vim73\syntax\hitest.vim	/^let b:i = 1$/;"	v
b:indent_use_syntax	.\vim73\indent\perl.vim	/^let b:indent_use_syntax = has("syntax")$/;"	v
b:indent_use_syntax	.\vim73\indent\perl6.vim	/^let b:indent_use_syntax = has("syntax")$/;"	v
b:is_bash	.\vim73\syntax\sh.vim	/^    let b:is_bash= 1$/;"	v
b:is_kornshell	.\vim73\syntax\sh.vim	/^    let b:is_kornshell= 1$/;"	v
b:is_sh	.\vim73\syntax\sh.vim	/^    let b:is_sh= 1$/;"	v
b:keymap	.\vim73\keymap\magyar_utf-8.vim	/^let b:keymap = "magyar"$/;"	v
b:keymap_name	.\vim73\keymap\accents.vim	/^let b:keymap_name = "acc"$/;"	v
b:keymap_name	.\vim73\keymap\arabic_utf-8.vim	/^let b:keymap_name = "arab"$/;"	v
b:keymap_name	.\vim73\keymap\bulgarian-bds.vim	/^let b:keymap_name = "bds"$/;"	v
b:keymap_name	.\vim73\keymap\bulgarian-phonetic.vim	/^let b:keymap_name = "pho"$/;"	v
b:keymap_name	.\vim73\keymap\canfr-win.vim	/^let b:keymap_name = "canfr"$/;"	v
b:keymap_name	.\vim73\keymap\croatian_cp1250.vim	/^let b:keymap_name = "croatian-cp1250"$/;"	v
b:keymap_name	.\vim73\keymap\croatian_iso-8859-2.vim	/^let b:keymap_name = "croatian-iso-8859-2"$/;"	v
b:keymap_name	.\vim73\keymap\croatian_utf-8.vim	/^let b:keymap_name = "croatian-UTF-8"$/;"	v
b:keymap_name	.\vim73\keymap\czech_utf-8.vim	/^let b:keymap_name = "czech"$/;"	v
b:keymap_name	.\vim73\keymap\dvorak.vim	/^let b:keymap_name = "en-dv"$/;"	v
b:keymap_name	.\vim73\keymap\esperanto_utf-8.vim	/^let b:keymap_name = "Eo"$/;"	v
b:keymap_name	.\vim73\keymap\greek_cp1253.vim	/^let b:keymap_name = "greek"$/;"	v
b:keymap_name	.\vim73\keymap\greek_cp737.vim	/^let b:keymap_name = "greek"$/;"	v
b:keymap_name	.\vim73\keymap\greek_iso-8859-7.vim	/^let b:keymap_name = "greek"$/;"	v
b:keymap_name	.\vim73\keymap\greek_utf-8.vim	/^let b:keymap_name = "grk"$/;"	v
b:keymap_name	.\vim73\keymap\hebrew_cp1255.vim	/^let b:keymap_name = "heb"$/;"	v
b:keymap_name	.\vim73\keymap\hebrew_iso-8859-8.vim	/^let b:keymap_name = "heb"$/;"	v
b:keymap_name	.\vim73\keymap\hebrew_utf-8.vim	/^let b:keymap_name = "heb"$/;"	v
b:keymap_name	.\vim73\keymap\hebrewp_cp1255.vim	/^let b:keymap_name = "hebp"$/;"	v
b:keymap_name	.\vim73\keymap\hebrewp_iso-8859-8.vim	/^let b:keymap_name = "hebp"$/;"	v
b:keymap_name	.\vim73\keymap\hebrewp_utf-8.vim	/^let b:keymap_name = "hebp"$/;"	v
b:keymap_name	.\vim73\keymap\kana.vim	/^let b:keymap_name = "kana"$/;"	v
b:keymap_name	.\vim73\keymap\lithuanian-baltic.vim	/^let b:keymap_name = "lt"$/;"	v
b:keymap_name	.\vim73\keymap\mongolian_utf-8.vim	/^let b:keymap_name = "mn"$/;"	v
b:keymap_name	.\vim73\keymap\persian-iranian_utf-8.vim	/^let b:keymap_name = "per"$/;"	v
b:keymap_name	.\vim73\keymap\pinyin.vim	/^let b:keymap_name = "py"$/;"	v
b:keymap_name	.\vim73\keymap\polish-slash_cp1250.vim	/^let b:keymap_name = "PL-slash-WIN"$/;"	v
b:keymap_name	.\vim73\keymap\polish-slash_cp852.vim	/^let b:keymap_name = "PL-slash-DOS"$/;"	v
b:keymap_name	.\vim73\keymap\polish-slash_iso-8859-2.vim	/^let b:keymap_name = "PL-slash-ISO"$/;"	v
b:keymap_name	.\vim73\keymap\polish-slash_utf-8.vim	/^let b:keymap_name = "PL-slash-UTF"$/;"	v
b:keymap_name	.\vim73\keymap\russian-dvorak.vim	/^let b:keymap_name = "ru"$/;"	v
b:keymap_name	.\vim73\keymap\russian-jcuken.vim	/^let b:keymap_name = "ru"$/;"	v
b:keymap_name	.\vim73\keymap\russian-jcukenwin.vim	/^let b:keymap_name = "ru"$/;"	v
b:keymap_name	.\vim73\keymap\russian-yawerty.vim	/^let b:keymap_name = "ru"$/;"	v
b:keymap_name	.\vim73\keymap\serbian-latin_utf-8.vim	/^let b:keymap_name = "serbian-UTF-8"$/;"	v
b:keymap_name	.\vim73\keymap\serbian_cp1250.vim	/^let b:keymap_name = "serbian-cp1250"$/;"	v
b:keymap_name	.\vim73\keymap\serbian_cp1251.vim	/^let b:keymap_name = "serbian-cp1251"$/;"	v
b:keymap_name	.\vim73\keymap\serbian_iso-8859-2.vim	/^let b:keymap_name = "serbian-iso-8859-2"$/;"	v
b:keymap_name	.\vim73\keymap\serbian_iso-8859-5.vim	/^let b:keymap_name = "serbian-iso-8859-5"$/;"	v
b:keymap_name	.\vim73\keymap\serbian_utf-8.vim	/^let b:keymap_name = "serbian-UTF-8"$/;"	v
b:keymap_name	.\vim73\keymap\sinhala-phonetic_utf-8.vim	/^let b:keymap_name = "sinhala"$/;"	v
b:keymap_name	.\vim73\keymap\slovak_cp1250.vim	/^let b:keymap_name = "sk"$/;"	v
b:keymap_name	.\vim73\keymap\slovak_iso-8859-2.vim	/^let b:keymap_name = "sk"$/;"	v
b:keymap_name	.\vim73\keymap\slovak_utf-8.vim	/^let b:keymap_name = "sk"$/;"	v
b:keymap_name	.\vim73\keymap\tamil_tscii.vim	/^let b:keymap_name = "tamil_tscii"$/;"	v
b:keymap_name	.\vim73\keymap\thaana-phonetic_utf-8.vim	/^let b:keymap_name= "thaana"$/;"	v
b:keymap_name	.\vim73\keymap\ukrainian-dvorak.vim	/^let b:keymap_name = "uk"$/;"	v
b:keymap_name	.\vim73\keymap\ukrainian-jcuken.vim	/^let b:keymap_name = "uk"$/;"	v
b:keymap_name	.\vim73\keymap\vietnamese-viqr_utf-8.vim	/^let b:keymap_name = "vietnamese"$/;"	v
b:lhs_markup	.\vim73\syntax\lhaskell.vim	/^	    let b:lhs_markup = "unknown"$/;"	v
b:lhs_markup	.\vim73\syntax\lhaskell.vim	/^	    let b:lhs_markup = matchstr(lhs_markup,'\\<\\%(tex\\|none\\)\\>')$/;"	v
b:lhs_markup	.\vim73\syntax\lhaskell.vim	/^	let b:lhs_markup = "plain"$/;"	v
b:lhs_markup	.\vim73\syntax\lhaskell.vim	/^	let b:lhs_markup = "tex"$/;"	v
b:lhs_markup	.\vim73\syntax\lhaskell.vim	/^	let b:lhs_markup = "unknown"$/;"	v
b:liquid_subtype	.\vim73\ftplugin\liquid.vim	/^    let b:liquid_subtype = g:liquid_default_subtype$/;"	v
b:liquid_subtype	.\vim73\ftplugin\liquid.vim	/^    let b:liquid_subtype = matchstr(&filetype,'^liquid\\.\\zs\\w\\+')$/;"	v
b:liquid_subtype	.\vim73\ftplugin\liquid.vim	/^    let b:liquid_subtype = matchstr(substitute(expand('%:t'),'\\c\\%(\\.liquid\\)\\+$','',''),'\\.\\zs\\w\\+$')$/;"	v
b:liquid_subtype	.\vim73\ftplugin\liquid.vim	/^  let b:liquid_subtype = matchstr(s:lines,'liquid_subtype=\\zs\\w\\+')$/;"	v
b:liquid_subtype	.\vim73\syntax\liquid.vim	/^    let b:liquid_subtype = g:liquid_default_subtype$/;"	v
b:liquid_subtype	.\vim73\syntax\liquid.vim	/^    let b:liquid_subtype = matchstr(&filetype,'^liquid\\.\\zs\\w\\+')$/;"	v
b:liquid_subtype	.\vim73\syntax\liquid.vim	/^    let b:liquid_subtype = matchstr(substitute(expand('%:t'),'\\c\\%(\\.liquid\\)\\+$','',''),'\\.\\zs\\w\\+$')$/;"	v
b:liquid_subtype	.\vim73\syntax\liquid.vim	/^    let b:liquid_subtype = s:subtype$/;"	v
b:liquid_subtype	.\vim73\syntax\liquid.vim	/^  let b:liquid_subtype = matchstr(s:lines,'liquid_subtype=\\zs\\w\\+')$/;"	v
b:liquid_subtype_indentexpr	.\vim73\indent\liquid.vim	/^let b:liquid_subtype_indentexpr = &l:indentexpr$/;"	v
b:main_syntax	.\vim73\syntax\groff.vim	/^let b:main_syntax = "nroff"$/;"	v
b:match_ignorecase	.\vim73\ftplugin\abaqus.vim	/^    let b:match_ignorecase = 1$/;"	v
b:match_ignorecase	.\vim73\ftplugin\aspvbs.vim	/^  let b:match_ignorecase = 1$/;"	v
b:match_ignorecase	.\vim73\ftplugin\cobol.vim	/^    let b:match_ignorecase=1$/;"	v
b:match_ignorecase	.\vim73\ftplugin\context.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	.\vim73\ftplugin\fortran.vim	/^  let b:match_ignorecase = 1$/;"	v
b:match_ignorecase	.\vim73\ftplugin\hamster.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	.\vim73\ftplugin\html.vim	/^    let b:match_ignorecase = 1$/;"	v
b:match_ignorecase	.\vim73\ftplugin\ishd.vim	/^    let b:match_ignorecase=0$/;"	v
b:match_ignorecase	.\vim73\ftplugin\lua.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	.\vim73\ftplugin\ocaml.vim	/^let b:match_ignorecase=0$/;"	v
b:match_ignorecase	.\vim73\ftplugin\plaintex.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	.\vim73\ftplugin\postscr.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	.\vim73\ftplugin\ruby.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	.\vim73\ftplugin\spec.vim	/^let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	.\vim73\ftplugin\sql.vim	/^    let b:match_ignorecase = 1$/;"	v
b:match_ignorecase	.\vim73\ftplugin\vb.vim	/^    let b:match_ignorecase=1$/;"	v
b:match_ignorecase	.\vim73\ftplugin\verilog.vim	/^  let b:match_ignorecase=0$/;"	v
b:match_ignorecase	.\vim73\ftplugin\vhdl.vim	/^  let b:match_ignorecase=1$/;"	v
b:match_ignorecase	.\vim73\ftplugin\vim.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	.\vim73\ftplugin\xml.vim	/^    let b:match_ignorecase=0$/;"	v
b:match_skip	.\vim73\ftplugin\c.vim	/^let b:match_skip = 's:comment\\|string\\|character'$/;"	v
b:match_skip	.\vim73\ftplugin\context.vim	/^  let b:match_skip = 'r:\\\\\\@<!\\%(\\\\\\\\\\)*%'$/;"	v
b:match_skip	.\vim73\ftplugin\dtrace.vim	/^let b:match_skip = 's:comment\\|string\\|character'$/;"	v
b:match_skip	.\vim73\ftplugin\ruby.vim	/^  let b:match_skip =$/;"	v
b:match_skip	.\vim73\ftplugin\vim.vim	/^  let b:match_skip = 'getline(".") =~ "^\\\\s*sy\\\\%[ntax]\\\\s\\\\+region" ||$/;"	v
b:match_words	.\vim73\ftplugin\abaqus.vim	/^    let b:match_words = $/;"	v
b:match_words	.\vim73\ftplugin\ada.vim	/^   let b:match_words =$/;"	v
b:match_words	.\vim73\ftplugin\aspvbs.vim	/^  let b:match_words =$/;"	v
b:match_words	.\vim73\ftplugin\c.vim	/^let b:match_words = &matchpairs$/;"	v
b:match_words	.\vim73\ftplugin\cobol.vim	/^    let b:match_words=$/;"	v
b:match_words	.\vim73\ftplugin\context.vim	/^  let b:match_words = '(:),\\[:],{:},\\\\(:\\\\),\\\\\\[:\\\\],' .$/;"	v
b:match_words	.\vim73\ftplugin\csc.vim	/^    let b:match_words=$/;"	v
b:match_words	.\vim73\ftplugin\csh.vim	/^    let b:match_words =$/;"	v
b:match_words	.\vim73\ftplugin\dtd.vim	/^    let b:match_words = '<!--:-->,<!:>'$/;"	v
b:match_words	.\vim73\ftplugin\dtrace.vim	/^let b:match_words = &matchpairs$/;"	v
b:match_words	.\vim73\ftplugin\eruby.vim	/^  let b:match_words = s:match_words$/;"	v
b:match_words	.\vim73\ftplugin\fortran.vim	/^  let b:match_words =$/;"	v
b:match_words	.\vim73\ftplugin\framescript.vim	/^  let b:match_words =$/;"	v
b:match_words	.\vim73\ftplugin\haml.vim	/^  let b:match_words = s:match_words$/;"	v
b:match_words	.\vim73\ftplugin\hamster.vim	/^  let b:match_words =$/;"	v
b:match_words	.\vim73\ftplugin\html.vim	/^    let b:match_words = '<:>,' .$/;"	v
b:match_words	.\vim73\ftplugin\ishd.vim	/^    let b:match_words=$/;"	v
b:match_words	.\vim73\ftplugin\jsp.vim	/^    let b:match_words = s:match_words$/;"	v
b:match_words	.\vim73\ftplugin\liquid.vim	/^  let b:match_words .= ','$/;"	v
b:match_words	.\vim73\ftplugin\liquid.vim	/^  let b:match_words .= '\\<\\%(if\\w*\\|unless\\|case\\)\\>:\\<\\%(elsif\\|else\\|when\\)\\>:\\<end\\%(if\\w*\\|unless\\|case\\)\\>,\\<\\%(for\\|tablerow\\)\\>:\\%({%\\s*\\)\\@<=empty\\>:\\<end\\%(for\\|tablerow\\)\\>,<\\(capture\\|comment\\|highlight\\)\\>:\\<end\\1\\>'$/;"	v
b:match_words	.\vim73\ftplugin\liquid.vim	/^  let b:match_words = ''$/;"	v
b:match_words	.\vim73\ftplugin\lua.vim	/^  let b:match_words =$/;"	v
b:match_words	.\vim73\ftplugin\matlab.vim	/^	let b:match_words = '\\<if\\>\\|\\<while\\>\\|\\<for\\>\\|\\<switch\\>:' .$/;"	v
b:match_words	.\vim73\ftplugin\ocaml.vim	/^let b:match_words = b:mw$/;"	v
b:match_words	.\vim73\ftplugin\pascal.vim	/^    let b:match_words='\\<\\%(begin\\|case\\|try\\)\\>:\\<end\\>'$/;"	v
b:match_words	.\vim73\ftplugin\pdf.vim	/^    let b:match_words = '\\<\\%(\\d\\+\\s\\+\\d\\+\\s\\+\\)obj\\>:\\<endobj\\>,\\<stream$:\\<endstream\\>,\\<xref\\>:\\<trailer\\>,<<:>>'$/;"	v
b:match_words	.\vim73\ftplugin\php.vim	/^    let b:match_words = '<?php:?>,\\<switch\\>:\\<endswitch\\>,' .$/;"	v
b:match_words	.\vim73\ftplugin\postscr.vim	/^  let b:match_words = '<<:>>,\\<begin\\>:\\<end\\>,\\<save\\>:\\<restore\\>,\\<gsave\\>:\\<grestore\\>'$/;"	v
b:match_words	.\vim73\ftplugin\ruby.vim	/^  let b:match_words =$/;"	v
b:match_words	.\vim73\ftplugin\sh.vim	/^    let b:match_words =$/;"	v
b:match_words	.\vim73\ftplugin\spec.vim	/^let b:match_words =$/;"	v
b:match_words	.\vim73\ftplugin\sql.vim	/^    let b:match_words =$/;"	v
b:match_words	.\vim73\ftplugin\tex.vim	/^  let b:match_words .= ',\\\\begin\\s*\\({\\a\\+\\*\\=}\\):\\\\end\\s*\\1'$/;"	v
b:match_words	.\vim73\ftplugin\vb.vim	/^    let b:match_words=$/;"	v
b:match_words	.\vim73\ftplugin\verilog.vim	/^  let b:match_words=$/;"	v
b:match_words	.\vim73\ftplugin\vhdl.vim	/^  let b:match_words =$/;"	v
b:match_words	.\vim73\ftplugin\vim.vim	/^  let b:match_words =$/;"	v
b:match_words	.\vim73\ftplugin\xhtml.vim	/^    let b:match_words = s:match_words$/;"	v
b:match_words	.\vim73\ftplugin\xml.vim	/^    let b:match_words =$/;"	v
b:match_words	.\vim73\syntax\cdl.vim	/^let b:match_words='\\<if\\>:\\<then\\>:\\<elseif\\>:\\<else\\>:\\<endif\\>'$/;"	v
b:mw	.\vim73\ftplugin\ocaml.vim	/^let b:mw = ''$/;"	v
b:mw	.\vim73\ftplugin\ocaml.vim	/^let b:mw = b:mw . ',\\<\\(for\\|while\\)\\>:\\<do\\>:\\<done\\>,'$/;"	v
b:mw	.\vim73\ftplugin\ocaml.vim	/^let b:mw = b:mw . ',\\<\\(match\\|try\\)\\>:\\<with\\>'$/;"	v
b:mw	.\vim73\ftplugin\ocaml.vim	/^let b:mw = b:mw . ',\\<\\(object\\|sig\\|struct\\|begin\\)\\>:\\<end\\>'$/;"	v
b:mw	.\vim73\ftplugin\ocaml.vim	/^let b:mw = b:mw . ',\\<if\\>:\\<then\\>:\\<else\\>'$/;"	v
b:mw	.\vim73\ftplugin\ocaml.vim	/^let b:mw = b:mw . ',\\<let\\>:\\<and\\>:\\(\\<in\\>\\|;;\\)'$/;"	v
b:nroff_is_groff	.\vim73\syntax\groff.vim	/^let b:nroff_is_groff = 1$/;"	v
b:optionsset	.\vim73\indent\php.vim	/^let b:optionsset = 0$/;"	v
b:pdf_tagstack	.\vim73\ftplugin\pdf.vim	/^    let b:pdf_tagstack = []$/;"	v
b:ruby_no_expensive	.\vim73\syntax\haml.vim	/^let b:ruby_no_expensive = 1$/;"	v
b:ruby_no_expensive	.\vim73\syntax\ruby.vim	/^  let b:ruby_no_expensive = 1$/;"	v
b:spell_options	.\vim73\syntax\groovy.vim	/^let b:spell_options="contained"$/;"	v
b:spell_options	.\vim73\syntax\java.vim	/^let b:spell_options="contained"$/;"	v
b:spell_options	.\vim73\syntax\wsml.vim	/^let b:spell_options="contained"$/;"	v
b:sql_compl_savefunc	.\vim73\ftplugin\sql.vim	/^    let b:sql_compl_savefunc = &omnifunc$/;"	v
b:sql_vis	.\vim73\ftplugin\sql.vim	/^    let b:sql_vis = 1$/;"	v
b:synhead	.\vim73\syntax\hitest.vim	/^	    let b:synhead = b:synhead."s"$/;"	v
b:synhead	.\vim73\syntax\hitest.vim	/^	 let b:synhead = b:synhead." - filetype"$/;"	v
b:synhead	.\vim73\syntax\hitest.vim	/^	 let b:synhead = b:synhead.":".@a$/;"	v
b:synhead	.\vim73\syntax\hitest.vim	/^   let b:synhead = "Syntax highlighting groups"$/;"	v
b:tex_stylish	.\vim73\syntax\tex.vim	/^  let b:tex_stylish= 0$/;"	v
b:tex_stylish	.\vim73\syntax\tex.vim	/^  let b:tex_stylish= 1$/;"	v
b:tex_stylish	.\vim73\syntax\tex.vim	/^ let b:tex_stylish= g:tex_stylish$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\a2ps.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\aap.vim	/^let b:undo_ftplugin = "setl fo< com< et<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\abaqus.vim	/^    let b:undo_ftplugin .= " foldexpr< foldmethod<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\abaqus.vim	/^    let b:undo_ftplugin .= "|unlet b:browsefilter"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\abaqus.vim	/^    let b:undo_ftplugin .= "|unlet b:match_ignorecase b:match_words"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\abaqus.vim	/^let b:undo_ftplugin .= "|unmap <buffer> [[|unmap <buffer> ]]"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\abaqus.vim	/^let b:undo_ftplugin = "setlocal include< includeexpr< isfname<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\alsaconf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\ant.vim	/^let b:undo_ftplugin = "unlet! b:browsefilter | " . s:undo_ftplugin$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\arch.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\aspvbs.vim	/^let b:undo_ftplugin = "unlet! b:match_words b:match_ignorecase b:browsefilter | " . s:undo_ftplugin$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\bdf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\bst.vim	/^let b:undo_ftplugin = "setlocal com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\c.vim	/^let b:undo_ftplugin = "setl fo< com< ofu< | if has('vms') | setl isk< | endif"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\calendar.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\cdrdaoconf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\changelog.vim	/^    let b:undo_ftplugin .= " tw<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\changelog.vim	/^  let b:undo_ftplugin = "setl com< fo< et< ai<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\cobol.vim	/^    let b:undo_ftplugin = b:undo_ftplugin .$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\cobol.vim	/^let b:undo_ftplugin = "setlocal com< cms< fo< et< tw<" .$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\conf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\config.vim	/^let b:undo_ftplugin = "unlet! b:browsefilter | " . b:undo_ftplugin$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\context.vim	/^let b:undo_ftplugin = "setl com< cms< def< inc< sua< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\crm.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\csc.vim	/^let b:undo_ftplugin = "unlet! b:match_words"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\csh.vim	/^let b:undo_ftplugin = "setlocal commentstring< formatoptions<" .$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\css.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo< ofu<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\cucumber.vim	/^  let b:undo_ftplugin .= "| sil! iunmap! <C-]>| sil! iunmap! <C-W>]| sil! iunmap! <C-W><C-]>| sil! iunmap! <C-W>}"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\cucumber.vim	/^let b:undo_ftplugin = "setl fo< com< cms< ofu<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\cvsrc.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\debchangelog.vim	/^let b:undo_ftplugin = "setlocal tw< comments< foldmethod< foldexpr< foldtext<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\debcontrol.vim	/^let b:undo_ftplugin = "setlocal tw< foldmethod< foldexpr< foldtext<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\denyhosts.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\dictconf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\dictdconf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\diff.vim	/^let b:undo_ftplugin = "setl modeline<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\dircolors.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\dosini.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\dtd.vim	/^let b:undo_ftplugin = "setlocal commentstring< comments< formatoptions<" .$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\dtrace.vim	/^let b:undo_ftplugin = "setl fo< com< cms< isk<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\elinks.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\eruby.vim	/^let b:undo_ftplugin = "setl cms< "$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\eterm.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\fetchmail.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\flexwiki.vim	/^let b:undo_ftplugin = "setl tw< wrap< lbr< et< ts< fenc< bomb< ff<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\fortran.vim	/^let b:undo_ftplugin = "setl fo< com< tw< cms< et< inc<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\framescript.vim	/^let b:undo_ftplugin = "setl com< cms< fo< inc< | unlet! b:matchwords"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\fvwm.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\git.vim	/^let b:undo_ftplugin = "setl keywordprg< path< includeexpr<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\gitcommit.vim	/^    let b:undo_ftplugin = ""$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\gitcommit.vim	/^  let b:undo_ftplugin = b:undo_ftplugin . "|setl tw<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\gitconfig.vim	/^let b:undo_ftplugin = "setl fo< com< cms<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\gitrebase.vim	/^  let b:undo_ftplugin = ""$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\gitrebase.vim	/^let b:undo_ftplugin = b:undo_ftplugin . "|nunmap <buffer> K"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\gitrebase.vim	/^let b:undo_ftplugin = b:undo_ftplugin."|setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\gpg.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\group.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\grub.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\haml.vim	/^let b:undo_ftplugin = "setl cms< com< "$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\hamster.vim	/^let b:undo_ftplugin = "setl fo< com< tw< commentstring<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\haskell.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\help.vim	/^let b:undo_ftplugin = "setl fo< tw< cole< cocu<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\hostconf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\hostsaccess.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\html.vim	/^let b:undo_ftplugin = "setlocal commentstring< matchpairs< omnifunc< comments< formatoptions<" .$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\indent.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\initex.vim	/^let b:undo_ftplugin = "setl com< cms< define< include< sua<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\java.vim	/^let b:undo_ftplugin = "setlocal suffixes< suffixesadd<" .$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\javascript.vim	/^let b:undo_ftplugin = "setl fo< ofu< com< cms<" $/;"	v
b:undo_ftplugin	.\vim73\ftplugin\jsp.vim	/^let b:undo_ftplugin = "unlet! b:browsefilter b:match_words | " . s:undo_ftplugin$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\kconfig.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\ld.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\lftp.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\libao.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\limits.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\liquid.vim	/^  let b:undo_ftplugin .= '|'$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\liquid.vim	/^  let b:undo_ftplugin = ''$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\liquid.vim	/^let b:undo_ftplugin .= 'setl cms< | unlet! b:browsefilter b:match_words'$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\logcheck.vim	/^let b:undo_ftplugin = "setl fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\loginaccess.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\logindefs.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\logtalk.vim	/^let b:undo_ftplugin = "setl ts< sw< fdm< fdc< ai< dict<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\m4.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\mail.vim	/^let b:undo_ftplugin = "setl modeline< tw< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\mailaliases.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\mailcap.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\make.vim	/^let b:undo_ftplugin = "setl et< sts< fo< com< cms< inc<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\manconf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\markdown.vim	/^let b:undo_ftplugin .= "|setl cms< com< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\matlab.vim	/^let b:undo_ftplugin = "setlocal suffixesadd< suffixes< "$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\mf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\modconf.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\mp.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\mplayerconf.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\mrxvtrc.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\msmessages.vim	/^let b:undo_ftplugin = "setl fo< com< cms< | unlet! b:browsefilter"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\muttrc.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\nanorc.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\netrc.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\nsis.vim	/^let b:undo_ftplugin = "setl com< cms< fo< def< inc<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\pamconf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\pascal.vim	/^let b:undo_ftplugin = "unlet! b:match_words"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\passwd.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\pdf.vim	/^let b:undo_ftplugin .= " | silent! nunmap <buffer> <C-]> | silent! nunmap <buffer> <C-T>"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\pdf.vim	/^let b:undo_ftplugin = "setlocal cms< com< | unlet! b:match_words"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\perl.vim	/^let b:undo_ftplugin = "setlocal fo< com< cms< inc< inex< def< isf< kp<" .$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\perl6.vim	/^let b:undo_ftplugin = "setlocal fo< com< cms< inc< inex< def< isk<" .$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\php.vim	/^let b:undo_ftplugin = "setlocal commentstring< include< omnifunc<" .$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\pinfo.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\plaintex.vim	/^let b:undo_ftplugin .= "| unlet! b:match_ignorecase b:match_skip b:match_words"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\procmail.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\prolog.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\protocols.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\qf.vim	/^let b:undo_ftplugin = "setl stl<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\quake.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\racc.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\readline.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\rnc.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\rst.vim	/^let b:undo_ftplugin = "setl com< cms< et< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\ruby.vim	/^    let b:undo_ftplugin = b:undo_ftplugin$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\ruby.vim	/^  let b:undo_ftplugin = b:undo_ftplugin$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\ruby.vim	/^let b:undo_ftplugin = "setl fo< inc< inex< sua< def< com< cms< path< kp<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\sass.vim	/^let b:undo_ftplugin = "setl cms< def< inc< inex< ofu< sua<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\screen.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\sensors.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\services.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\setserial.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\sgml.vim	/^let b:undo_ftplugin = "unlet! b:browsefilter | " . s:undo_ftplugin$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\sh.vim	/^let b:undo_ftplugin = "setlocal cms< | unlet! b:browsefilter b:match_words"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\sieve.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\slpconf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\slpreg.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\slpspi.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\sql.vim	/^let b:undo_ftplugin = "setl comments<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\sshconfig.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\sudoers.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\svg.vim	/^let b:undo_ftplugin = "unlet! b:browsefilter | " . s:undo_ftplugin$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\sysctl.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\tcl.vim	/^let b:undo_ftplugin = "setlocal fo< com< cms< inc< inex< def< isf< kp<" .$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\tcsh.vim	/^let b:undo_ftplugin = "unlet! b:browsefilter | " . s:undo_ftplugin$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\terminfo.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\tex.vim	/^let b:undo_ftplugin .= "| setl inex<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\udevconf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\udevperm.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\udevrules.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\updatedb.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\verilog.vim	/^let b:undo_ftplugin = "setlocal fo< com< tw<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\vim.vim	/^let b:undo_ftplugin = "setl fo< isk< com< tw< commentstring<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\xdefaults.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\xf86conf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\xhtml.vim	/^let b:undo_ftplugin = "unlet! b:browsefilter b:match_words | " . s:undo_ftplugin$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\xinetd.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\xml.vim	/^let b:undo_ftplugin = "setlocal commentstring< comments< formatoptions<" .$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\xmodmap.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\xsd.vim	/^let b:undo_ftplugin = "unlet! b:browsefilter | " . s:undo_ftplugin$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\yaml.vim	/^let b:undo_ftplugin = "setl com< cms< et< fo<"$/;"	v
b:undo_ftplugin	.\vim73\ftplugin\zsh.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_indent	.\vim73\indent\bib.vim	/^let b:undo_indent = "setl cin<"$/;"	v
b:undo_indent	.\vim73\indent\c.vim	/^let b:undo_indent = "setl cin<"$/;"	v
b:undo_indent	.\vim73\indent\changelog.vim	/^let b:undo_indent = "setl ai<"$/;"	v
b:undo_indent	.\vim73\indent\cpp.vim	/^let b:undo_indent = "setl cin<"$/;"	v
b:undo_indent	.\vim73\indent\cs.vim	/^let b:undo_indent = "setl cin<"$/;"	v
b:undo_indent	.\vim73\indent\cuda.vim	/^let b:undo_indent = "setl cin<"$/;"	v
b:undo_indent	.\vim73\indent\dtrace.vim	/^let b:undo_indent = "setl cin<"$/;"	v
b:undo_indent	.\vim73\indent\ishd.vim	/^let b:undo_indent = "setl ai< indentexpr< indentkeys<"$/;"	v
b:undo_indent	.\vim73\indent\java.vim	/^let b:undo_indent = "set cin< cino< indentkeys< indentexpr<"$/;"	v
b:undo_indent	.\vim73\indent\javascript.vim	/^let b:undo_indent = "setl cin<"$/;"	v
b:undo_indent	.\vim73\indent\lifelines.vim	/^let b:undo_indent = "setl cin< cino< cinw<"$/;"	v
b:undo_indent	.\vim73\indent\lisp.vim	/^let b:undo_indent = "setl ai< si<"$/;"	v
b:undo_indent	.\vim73\indent\rpl.vim	/^let b:undo_indent = "set ai< indentkeys< indentexpr<"$/;"	v
b:undo_indent	.\vim73\indent\vb.vim	/^let b:undo_indent = "set ai< indentexpr< indentkeys<"$/;"	v
b:various	.\vim73\syntax\hitest.vim	/^let b:various = &highlight.',:Normal,:Cursor,:,'$/;"	v
b:vera_minlines	.\vim73\syntax\vera.vim	/^    let b:vera_minlines = 15	" mostly for () constructs$/;"	v
b:vera_minlines	.\vim73\syntax\vera.vim	/^    let b:vera_minlines = 50	" #if 0 constructs can be long$/;"	v
b:vera_minlines	.\vim73\syntax\vera.vim	/^  let b:vera_minlines = vera_minlines$/;"	v
b:vhdl_explore	.\vim73\ftplugin\vhdl.vim	/^let b:vhdl_explore = '\\%(architecture\\|block\\|configuration\\|component\\|entity\\|function\\|package\\|procedure\\|process\\|record\\|units\\)'$/;"	v
b:xf86conf_xfree86_version	.\vim73\syntax\xf86conf.vim	/^		let b:xf86conf_xfree86_version = 4$/;"	v
b:xf86conf_xfree86_version	.\vim73\syntax\xf86conf.vim	/^		let b:xf86conf_xfree86_version = xf86conf_xfree86_version$/;"	v
b:xml_indent_close	.\vim73\indent\xml.vim	/^    let b:xml_indent_close = '.\\{-}<\/'$/;"	v
b:xml_indent_open	.\vim73\indent\xml.vim	/^    let b:xml_indent_open = '.\\{-}<\\a'$/;"	v
background_process	.\ctags58\argproc.c	/^background_process (argc, argv)$/;"	f
backspace	.\vimfiles\bundle\command-t\ruby\command-t\controller.rb	/^    def backspace$/;"	f	class:CommandT.Controller.quickfix
backspace!	.\vimfiles\bundle\command-t\ruby\command-t\match_window.rb	/^    def backspace!$/;"	f	class:CommandT.MatchWindow
backspace!	.\vimfiles\bundle\command-t\ruby\command-t\prompt.rb	/^    def backspace!$/;"	f	class:CommandT.Prompt
backward	.\ctags58\options.h	/^	boolean backward;       \/* -B  regexp patterns search backwards *\/$/;"	m	struct:sOptionValues	access:public
baseFilename	.\ctags58\routines.c	/^extern const char *baseFilename (const char *const filePath)$/;"	f	signature:(const char *const filePath)
baseFilename	.\ctags58\routines.h	/^extern const char *baseFilename (const char *const filePath);$/;"	p	signature:(const char *const filePath)
beginEtagsFile	.\ctags58\entry.c	/^extern void beginEtagsFile (void)$/;"	f	signature:(void)
beginEtagsFile	.\ctags58\entry.h	/^extern void beginEtagsFile (void);$/;"	p	signature:(void)
begin_end_nest_lvl	.\ctags58\sql.c	/^	int         begin_end_nest_lvl;$/;"	m	struct:sTokenInfoSQL	file:	access:public
betaKind	.\ctags58\beta.c	/^} betaKind;$/;"	t	typeref:enum:__anon10	file:
bin_tree_storage_t	.\ctags58\gnu_regex\regex_internal.h	/^struct bin_tree_storage_t$/;"	s
bin_tree_storage_t	.\ctags58\gnu_regex\regex_internal.h	/^typedef struct bin_tree_storage_t bin_tree_storage_t;$/;"	t	typeref:struct:bin_tree_storage_t
bin_tree_storage_t::data	.\ctags58\gnu_regex\regex_internal.h	/^  bin_tree_t data[BIN_TREE_STORAGE_SIZE];$/;"	m	struct:bin_tree_storage_t	access:public
bin_tree_storage_t::next	.\ctags58\gnu_regex\regex_internal.h	/^  struct bin_tree_storage_t *next;$/;"	m	struct:bin_tree_storage_t	typeref:struct:bin_tree_storage_t::bin_tree_storage_t	access:public
bin_tree_t	.\ctags58\gnu_regex\regex_internal.h	/^struct bin_tree_t$/;"	s
bin_tree_t	.\ctags58\gnu_regex\regex_internal.h	/^typedef struct bin_tree_t bin_tree_t;$/;"	t	typeref:struct:bin_tree_t
bin_tree_t::first	.\ctags58\gnu_regex\regex_internal.h	/^  struct bin_tree_t *first;$/;"	m	struct:bin_tree_t	typeref:struct:bin_tree_t::bin_tree_t	access:public
bin_tree_t::left	.\ctags58\gnu_regex\regex_internal.h	/^  struct bin_tree_t *left;$/;"	m	struct:bin_tree_t	typeref:struct:bin_tree_t::bin_tree_t	access:public
bin_tree_t::next	.\ctags58\gnu_regex\regex_internal.h	/^  struct bin_tree_t *next;$/;"	m	struct:bin_tree_t	typeref:struct:bin_tree_t::bin_tree_t	access:public
bin_tree_t::node_idx	.\ctags58\gnu_regex\regex_internal.h	/^  int node_idx;$/;"	m	struct:bin_tree_t	access:public
bin_tree_t::parent	.\ctags58\gnu_regex\regex_internal.h	/^  struct bin_tree_t *parent;$/;"	m	struct:bin_tree_t	typeref:struct:bin_tree_t::bin_tree_t	access:public
bin_tree_t::right	.\ctags58\gnu_regex\regex_internal.h	/^  struct bin_tree_t *right;$/;"	m	struct:bin_tree_t	typeref:struct:bin_tree_t::bin_tree_t	access:public
bin_tree_t::token	.\ctags58\gnu_regex\regex_internal.h	/^  re_token_t token;$/;"	m	struct:bin_tree_t	access:public
bitset_clear	.\ctags58\gnu_regex\regex_internal.h	150;"	d
bitset_contain	.\ctags58\gnu_regex\regex_internal.h	152;"	d
bitset_copy	.\ctags58\gnu_regex\regex_internal.h	156;"	d
bitset_empty	.\ctags58\gnu_regex\regex_internal.h	154;"	d
bitset_mask	.\ctags58\gnu_regex\regex_internal.h	/^bitset_mask (bitset_t dest, const bitset_t src)$/;"	f	signature:(bitset_t dest, const bitset_t src)
bitset_merge	.\ctags58\gnu_regex\regex_internal.h	/^bitset_merge (bitset_t dest, const bitset_t src)$/;"	f	signature:(bitset_t dest, const bitset_t src)
bitset_not	.\ctags58\gnu_regex\regex_internal.h	/^bitset_not (bitset_t set)$/;"	f	signature:(bitset_t set)
bitset_set	.\ctags58\gnu_regex\regex_internal.h	148;"	d
bitset_set_all	.\ctags58\gnu_regex\regex_internal.h	155;"	d
bitset_t	.\ctags58\gnu_regex\regex_internal.h	/^typedef bitset_word_t bitset_t[BITSET_WORDS];$/;"	t
bitset_word_t	.\ctags58\gnu_regex\regex_internal.h	/^typedef unsigned long int bitset_word_t;$/;"	t
bkref_ents	.\ctags58\gnu_regex\regex_internal.h	/^  struct re_backref_cache_entry *bkref_ents;$/;"	m	struct:__anon36	typeref:struct:__anon36::re_backref_cache_entry	access:public
blitzbasic_keywords	.\ctags58\basic.c	/^static KeyWord blitzbasic_keywords[] = {$/;"	v	file:
blockName	.\ctags58\c.c	/^	tokenInfo*	blockName;      \/* name of current block *\/$/;"	m	struct:sStatementInfo	file:	access:public
bmenu_priority	.\vim73\menu.vim	/^  let bmenu_priority = 60$/;"	v
boolString	.\ctags58\c.c	570;"	d	file:
boolean	.\ctags58\general.h	/^typedef bool boolean;$/;"	t
boolean	.\ctags58\general.h	/^typedef enum { FALSE, TRUE } boolean;$/;"	t	typeref:enum:__anon23
boolean	.\ctags58\general.h	/^typedef int boolean;$/;"	t
boolean	.\ctags58\main.c	57;"	d	file:
boolean	.\ctags58\main.c	63;"	d	file:
booleanOption	.\ctags58\options.c	/^} booleanOption;$/;"	t	typeref:struct:__anon54	file:
booleanType	.\ctags58\general.h	/^typedef enum { FALSE, TRUE } booleanType;$/;"	t	typeref:enum:__anon22
bracket_elem_t	.\ctags58\gnu_regex\regex_internal.h	/^} bracket_elem_t;$/;"	t	typeref:struct:__anon39
bracket_elem_type	.\ctags58\gnu_regex\regex_internal.h	/^} bracket_elem_type;$/;"	t	typeref:enum:__anon38
branchChosen	.\ctags58\get.c	/^	boolean branchChosen;       \/* branch already selected *\/$/;"	m	struct:sConditionalInfo	file:	access:public
break	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\data\list.vim	/^function! s:break(f, xs)$/;"	f
breakLine	.\ctags58\options.h	/^	unsigned long breakLine;\/* -b  source line at which to call lineBreak() *\/$/;"	m	struct:sOptionValues	access:public
bsub	.\vim73\ftplugin\cucumber.vim	/^function! s:bsub(target,pattern,replacement)$/;"	f
buf_utils#GotoBuf	.\vimfiles\bundle\vim-addon-mw-utils\autoload\buf_utils.vim	/^fun! buf_utils#GotoBuf(buf_identifier, opts)$/;"	f
buffer	.\ctags58\readtags.c	/^	char *buffer;$/;"	m	struct:__anon62	file:	access:public
buffer	.\ctags58\vstring.h	/^	char   *buffer;  \/* location of buffer *\/$/;"	m	struct:sVString	access:public
buffer	.\vimfiles\bundle\command-t\spec\command-t\scanner\buffer_scanner_spec.rb	/^  def buffer name$/;"	f
buffer_finder	.\vimfiles\bundle\command-t\ruby\command-t\controller.rb	/^    def buffer_finder$/;"	f	class:CommandT.Controller.quickfix.ensure_appropriate_window_selection
buffer_shiftwidth	.\vim73\indent\sh.vim	/^function s:buffer_shiftwidth()$/;"	f
bufs_len	.\ctags58\gnu_regex\regex_internal.h	/^  int bufs_len;$/;"	m	struct:re_string_t	access:public
buildAsmKeywordHash	.\ctags58\asm.c	/^static void buildAsmKeywordHash (void)$/;"	f	file:	signature:(void)
buildEiffelKeywordHash	.\ctags58\eiffel.c	/^static void buildEiffelKeywordHash (void)$/;"	f	file:	signature:(void)
buildFlexKeywordHash	.\ctags58\flex.c	/^static void buildFlexKeywordHash (void)$/;"	f	file:	signature:(void)
buildFortranKeywordHash	.\ctags58\fortran.c	/^static void buildFortranKeywordHash (void)$/;"	f	file:	signature:(void)
buildJsKeywordHash	.\ctags58\jscript.c	/^static void buildJsKeywordHash (void)$/;"	f	file:	signature:(void)
buildKeywordHash	.\ctags58\c.c	/^static void buildKeywordHash (const langType language, unsigned int idx)$/;"	f	file:	signature:(const langType language, unsigned int idx)
buildSqlKeywordHash	.\ctags58\sql.c	/^static void buildSqlKeywordHash (void)$/;"	f	file:	signature:(void)
buildTexKeywordHash	.\ctags58\tex.c	/^static void buildTexKeywordHash (void)$/;"	f	file:	signature:(void)
build_charclass	.\ctags58\gnu_regex\regcomp.c	/^build_charclass (RE_TRANSLATE_TYPE trans, bitset_t sbcset,$/;"	f	file:	signature:(RE_TRANSLATE_TYPE trans, bitset_t sbcset, re_charset_t *mbcset, int *char_class_alloc, const unsigned char *class_name, reg_syntax_t syntax)
build_charclass	.\ctags58\gnu_regex\regcomp.c	/^static reg_errcode_t build_charclass (RE_TRANSLATE_TYPE trans,$/;"	p	file:	signature:(RE_TRANSLATE_TYPE trans, bitset_t sbcset, const unsigned char *class_name, reg_syntax_t syntax)
build_charclass	.\ctags58\gnu_regex\regcomp.c	/^static reg_errcode_t build_charclass (RE_TRANSLATE_TYPE trans,$/;"	p	file:	signature:(RE_TRANSLATE_TYPE trans, bitset_t sbcset, re_charset_t *mbcset, int *char_class_alloc, const unsigned char *class_name, reg_syntax_t syntax)
build_charclass_op	.\ctags58\gnu_regex\regcomp.c	/^build_charclass_op (re_dfa_t *dfa, RE_TRANSLATE_TYPE trans,$/;"	f	file:	signature:(re_dfa_t *dfa, RE_TRANSLATE_TYPE trans, const unsigned char *class_name, const unsigned char *extra, int non_match, reg_errcode_t *err)
build_charclass_op	.\ctags58\gnu_regex\regcomp.c	/^static bin_tree_t *build_charclass_op (re_dfa_t *dfa,$/;"	p	file:	signature:(re_dfa_t *dfa, RE_TRANSLATE_TYPE trans, const unsigned char *class_name, const unsigned char *extra, int non_match, reg_errcode_t *err)
build_collating_symbol	.\ctags58\gnu_regex\regcomp.c	/^build_collating_symbol (bitset_t sbcset, re_charset_t *mbcset,$/;"	f	file:	signature:(bitset_t sbcset, re_charset_t *mbcset, int *coll_sym_alloc, const unsigned char *name)
build_equiv_class	.\ctags58\gnu_regex\regcomp.c	/^build_equiv_class (bitset_t sbcset, re_charset_t *mbcset,$/;"	f	file:	signature:(bitset_t sbcset, re_charset_t *mbcset, int *equiv_class_alloc, const unsigned char *name)
build_equiv_class	.\ctags58\gnu_regex\regcomp.c	/^static reg_errcode_t build_equiv_class (bitset_t sbcset,$/;"	p	file:	signature:(bitset_t sbcset, const unsigned char *name)
build_equiv_class	.\ctags58\gnu_regex\regcomp.c	/^static reg_errcode_t build_equiv_class (bitset_t sbcset,$/;"	p	file:	signature:(bitset_t sbcset, re_charset_t *mbcset, int *equiv_class_alloc, const unsigned char *name)
build_quietly	.\vimfiles\bundle\command-t\multi-spec.sh	/^function build_quietly()$/;"	f
build_range_exp	.\ctags58\gnu_regex\regcomp.c	/^build_range_exp (bitset_t sbcset, re_charset_t *mbcset, int *range_alloc,$/;"	f	file:	signature:(bitset_t sbcset, re_charset_t *mbcset, int *range_alloc, bracket_elem_t *start_elem, bracket_elem_t *end_elem)
build_sifted_states	.\ctags58\gnu_regex\regexec.c	/^build_sifted_states (const re_match_context_t *mctx, re_sift_context_t *sctx,$/;"	f	file:	signature:(const re_match_context_t *mctx, re_sift_context_t *sctx, int str_idx, re_node_set *cur_dest)
build_trtable	.\ctags58\gnu_regex\regexec.c	/^build_trtable (const re_dfa_t *dfa, re_dfastate_t *state)$/;"	f	file:	signature:(const re_dfa_t *dfa, re_dfastate_t *state)
build_upper_buffer	.\ctags58\gnu_regex\regex_internal.c	/^build_upper_buffer (re_string_t *pstr)$/;"	f	file:	signature:(re_string_t *pstr)
build_wcs_buffer	.\ctags58\gnu_regex\regex_internal.c	/^build_wcs_buffer (re_string_t *pstr)$/;"	f	file:	signature:(re_string_t *pstr)
build_wcs_upper_buffer	.\ctags58\gnu_regex\regex_internal.c	/^build_wcs_upper_buffer (re_string_t *pstr)$/;"	f	file:	signature:(re_string_t *pstr)
bundle.path	.\vimfiles\bundle\vundle\autoload\vundle\config.vim	/^func! s:bundle.path()$/;"	f
byteCount	.\ctags58\entry.h	/^		size_t byteCount;$/;"	m	struct:eTagFile::sEtags	access:public
bytes	.\ctags58\main.c	/^static struct { long files, lines, bytes; } Totals = { 0, 0, 0 };$/;"	m	struct:__anon49	file:	access:public
c	.\ctags58\gnu_regex\regex_internal.h	/^    unsigned char c;		\/* for CHARACTER *\/$/;"	m	union:__anon31::__anon32	access:public
cArgDelete	.\ctags58\options.c	/^extern void cArgDelete (cookedArgs* const current)$/;"	f	signature:(cookedArgs* const current)
cArgDelete	.\ctags58\options.h	/^extern void cArgDelete (cookedArgs* const current);$/;"	p	signature:(cookedArgs* const current)
cArgForth	.\ctags58\options.c	/^extern void cArgForth (cookedArgs* const current)$/;"	f	signature:(cookedArgs* const current)
cArgForth	.\ctags58\options.h	/^extern void cArgForth (cookedArgs* const current);$/;"	p	signature:(cookedArgs* const current)
cArgIsOption	.\ctags58\options.c	/^extern boolean cArgIsOption (cookedArgs* const current)$/;"	f	signature:(cookedArgs* const current)
cArgIsOption	.\ctags58\options.h	/^extern boolean cArgIsOption (cookedArgs* const current);$/;"	p	signature:(cookedArgs* const current)
cArgItem	.\ctags58\options.c	/^extern const char* cArgItem (cookedArgs* const current)$/;"	f	signature:(cookedArgs* const current)
cArgItem	.\ctags58\options.h	/^extern const char* cArgItem (cookedArgs* const current);$/;"	p	signature:(cookedArgs* const current)
cArgNewFromArgv	.\ctags58\options.c	/^extern cookedArgs* cArgNewFromArgv (char* const* const argv)$/;"	f	signature:(char* const* const argv)
cArgNewFromArgv	.\ctags58\options.h	/^extern cookedArgs* cArgNewFromArgv (char* const* const argv);$/;"	p	signature:(char* const* const argv)
cArgNewFromFile	.\ctags58\options.c	/^extern cookedArgs* cArgNewFromFile (FILE* const fp)$/;"	f	signature:(FILE* const fp)
cArgNewFromFile	.\ctags58\options.h	/^extern cookedArgs* cArgNewFromFile (FILE* const fp);$/;"	p	signature:(FILE* const fp)
cArgNewFromLineFile	.\ctags58\options.c	/^extern cookedArgs* cArgNewFromLineFile (FILE* const fp)$/;"	f	signature:(FILE* const fp)
cArgNewFromLineFile	.\ctags58\options.h	/^extern cookedArgs* cArgNewFromLineFile (FILE* const fp);$/;"	p	signature:(FILE* const fp)
cArgNewFromString	.\ctags58\options.c	/^extern cookedArgs* cArgNewFromString (const char* string)$/;"	f	signature:(const char* string)
cArgNewFromString	.\ctags58\options.h	/^extern cookedArgs* cArgNewFromString (const char* string);$/;"	p	signature:(const char* string)
cArgOff	.\ctags58\options.c	/^extern boolean cArgOff (cookedArgs* const current)$/;"	f	signature:(cookedArgs* const current)
cArgOff	.\ctags58\options.h	/^extern boolean cArgOff (cookedArgs* const current);$/;"	p	signature:(cookedArgs* const current)
cArgOptionPending	.\ctags58\options.c	/^static boolean cArgOptionPending (cookedArgs* const current)$/;"	f	file:	signature:(cookedArgs* const current)
cArgRead	.\ctags58\options.c	/^static void cArgRead (cookedArgs *const current)$/;"	f	file:	signature:(cookedArgs *const current)
cCommandTMatch	.\vimfiles\bundle\command-t\ruby\command-t\ext.c	/^VALUE cCommandTMatch    = 0; \/\/ class CommandT::Match$/;"	v
cCommandTMatcher	.\vimfiles\bundle\command-t\ruby\command-t\ext.c	/^VALUE cCommandTMatcher  = 0; \/\/ class CommandT::Matcher$/;"	v
cKind	.\ctags58\c.c	/^} cKind;$/;"	t	typeref:enum:__anon12	file:
cTagKind	.\ctags58\c.c	/^static cKind cTagKind (const tagType type)$/;"	f	file:	signature:(const tagType type)
c_comment_strings	.\vim73\gvimrc_example.vim	/^  let c_comment_strings=1$/;"	v
cached_file_contents#CachedFileContents	.\vimfiles\bundle\vim-addon-mw-utils\autoload\cached_file_contents.vim	/^function! cached_file_contents#CachedFileContents(file, func, ...) abort$/;"	f
cached_file_contents#ClearScanCache	.\vimfiles\bundle\vim-addon-mw-utils\autoload\cached_file_contents.vim	/^fun! cached_file_contents#ClearScanCache()$/;"	f
cached_file_contents#Test	.\vimfiles\bundle\vim-addon-mw-utils\autoload\cached_file_contents.vim	/^fun! cached_file_contents#Test()$/;"	f
caching	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\dictionary_complete.vim	/^function! s:caching() "{{{$/;"	f
caching	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\syntax_complete.vim	/^function! s:caching() "{{{$/;"	f
caching_completion_from_dict	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! s:caching_completion_from_dict(dict_name) "{{{$/;"	f
caching_current_buffer	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\buffer_complete.vim	/^function! s:caching_current_buffer(start, end) "{{{$/;"	f
caching_current_buffer	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\member_complete.vim	/^function! s:caching_current_buffer(start, end) "{{{$/;"	f
caching_current_files	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\filename_complete.vim	/^function! s:caching_current_files() "{{{$/;"	f
caching_dictionary	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\dictionary_complete.vim	/^function! s:caching_dictionary(filetype)$/;"	f
caching_from_dict	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! s:caching_from_dict(dict_name, kind) "{{{$/;"	f
caching_from_syn	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\syntax_complete.vim	/^function! s:caching_from_syn(filetype) "{{{$/;"	f
caching_prototype_from_dict	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! s:caching_prototype_from_dict(dict_name) "{{{$/;"	f
calc_eclosure	.\ctags58\gnu_regex\regcomp.c	/^calc_eclosure (re_dfa_t *dfa)$/;"	f	file:	signature:(re_dfa_t *dfa)
calc_eclosure	.\ctags58\gnu_regex\regcomp.c	/^static reg_errcode_t calc_eclosure (re_dfa_t *dfa);$/;"	p	file:	signature:(re_dfa_t *dfa)
calc_eclosure_iter	.\ctags58\gnu_regex\regcomp.c	/^calc_eclosure_iter (re_node_set *new_set, re_dfa_t *dfa, int node, int root)$/;"	f	file:	signature:(re_node_set *new_set, re_dfa_t *dfa, int node, int root)
calc_eclosure_iter	.\ctags58\gnu_regex\regcomp.c	/^static reg_errcode_t calc_eclosure_iter (re_node_set *new_set, re_dfa_t *dfa,$/;"	p	file:	signature:(re_node_set *new_set, re_dfa_t *dfa, int node, int root)
calc_first	.\ctags58\gnu_regex\regcomp.c	/^calc_first (void *extra, bin_tree_t *node)$/;"	f	file:	signature:(void *extra, bin_tree_t *node)
calc_first	.\ctags58\gnu_regex\regcomp.c	/^static reg_errcode_t calc_first (void *extra, bin_tree_t *node);$/;"	p	file:	signature:(void *extra, bin_tree_t *node)
calc_inveclosure	.\ctags58\gnu_regex\regcomp.c	/^calc_inveclosure (re_dfa_t *dfa)$/;"	f	file:	signature:(re_dfa_t *dfa)
calc_inveclosure	.\ctags58\gnu_regex\regcomp.c	/^static reg_errcode_t calc_inveclosure (re_dfa_t *dfa);$/;"	p	file:	signature:(re_dfa_t *dfa)
calc_next	.\ctags58\gnu_regex\regcomp.c	/^calc_next (void *extra, bin_tree_t *node)$/;"	f	file:	signature:(void *extra, bin_tree_t *node)
calc_next	.\ctags58\gnu_regex\regcomp.c	/^static reg_errcode_t calc_next (void *extra, bin_tree_t *node);$/;"	p	file:	signature:(void *extra, bin_tree_t *node)
calc_state_hash	.\ctags58\gnu_regex\regex_internal.c	/^calc_state_hash (const re_node_set *nodes, unsigned int context)$/;"	f	file:	signature:(const re_node_set *nodes, unsigned int context)
callback	.\ctags58\lregex.c	/^		} callback;$/;"	m	union:__anon43::__anon44	typeref:struct:__anon43::__anon44::__anon46	file:	access:public
callback	.\ctags58\ocaml.c	/^	parseNext callback;	\/* what to do when a context is pop'd *\/$/;"	m	struct:_sOcamlContext	file:	access:public
canMatch	.\ctags58\ruby.c	/^static boolean canMatch (const unsigned char** s, const char* literal)$/;"	f	file:	signature:(const unsigned char** s, const char* literal)
cancel	.\vimfiles\bundle\command-t\ruby\command-t\controller.rb	/^    def cancel$/;"	f	class:CommandT.Controller.quickfix
canonicalizePath	.\ctags58\routines.c	/^static void canonicalizePath (char *const path __unused__)$/;"	f	file:	signature:(char *const path __unused__)
capitalize	.\vim73\ftplugin\changelog.vim	/^  function! s:capitalize(word)$/;"	f
capture	.\vimfiles\bundle\command-t\ruby\command-t\vim.rb	/^    def self.capture cmd$/;"	F	class:CommandT.VIM
catFile	.\ctags58\sort.c	/^extern void catFile (const char *const name)$/;"	f	signature:(const char *const name)
catFile	.\ctags58\sort.h	/^extern void catFile (const char *const name);$/;"	p	signature:(const char *const name)
ccomplete#Complete	.\vim73\autoload\ccomplete.vim	/^function! ccomplete#Complete(findstart, base)$/;"	f
ch	.\ctags58\gnu_regex\regex_internal.h	/^    unsigned char ch;$/;"	m	union:__anon39::__anon40	access:public
changelogMenu	.\vim73\ftplugin\debchangelog.vim	/^augroup changelogMenu$/;"	a
charIsIn	.\ctags58\ruby.c	/^static boolean charIsIn (char ch, const char* list)$/;"	f	file:	signature:(char ch, const char* list)
char_classes	.\ctags58\gnu_regex\regex_internal.h	/^  wctype_t *char_classes;$/;"	m	struct:__anon30	access:public
char_range	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\data\list.vim	/^function! s:char_range(from, to)$/;"	f
chars	.\vim73\syntax\xpm.vim	/^	 let chars = escape(chars, '\/\\*^$.~[]')$/;"	v
chars	.\vim73\syntax\xpm.vim	/^	 let chars = substitute(chars, '.$', '', '')$/;"	v
chars	.\vim73\syntax\xpm.vim	/^	 let chars = substitute(s, '"\\(.\\{'.cpp.'}\\s\\).*"', '\\1', '')$/;"	v
chars	.\vim73\syntax\xpm.vim	/^let chars  = ""$/;"	v
chars	.\vim73\syntax\xpm2.vim	/^	let chars = escape(chars, '\/\\*^$.~[]')$/;"	v
chars	.\vim73\syntax\xpm2.vim	/^	let chars = substitute(chars, "[ \\t][ \\t]*", "\\\\\\\\s\\\\\\\\+", "g")$/;"	v
chars	.\vim73\syntax\xpm2.vim	/^	let chars = substitute(chars, '\\\\s\\\\+$', '', '')$/;"	v
chars	.\vim73\syntax\xpm2.vim	/^	let chars = substitute(s, '\\(.\\{'.cpp.'}\\s\\+\\).*', '\\1', '')$/;"	v
chars	.\vim73\syntax\xpm2.vim	/^  let chars  = ""$/;"	v
check	.\vim73\autoload\gzip.vim	/^fun s:check(cmd)$/;"	f
checkForLabel	.\ctags58\fortran.c	/^static void checkForLabel (void)$/;"	f	file:	signature:(void)
checkOptionOrder	.\ctags58\options.c	/^static void checkOptionOrder (const char* const option)$/;"	f	file:	signature:(const char* const option)
checkOptions	.\ctags58\options.c	/^extern void checkOptions (void)$/;"	f	signature:(void)
checkOptions	.\ctags58\options.h	/^extern void checkOptions (void);$/;"	p	signature:(void)
checkParent	.\ctags58\python.c	/^static void checkParent(NestingLevels *nls, int indent, vString *parent)$/;"	f	file:	signature:(NestingLevels *nls, int indent, vString *parent)
checkRegex	.\ctags58\lregex.c	/^extern void checkRegex (void)$/;"	f	signature:(void)
checkRegex	.\ctags58\parse.h	/^extern void checkRegex (void);$/;"	p	signature:(void)
checkSameFile	.\ctags58\options.c	/^static boolean checkSameFile (const char *const fileName)$/;"	f	file:	signature:(const char *const fileName)
checkStatementEnd	.\ctags58\c.c	/^static void checkStatementEnd (statementInfo *const st)$/;"	f	file:	signature:(statementInfo *const st)
check_arrival	.\ctags58\gnu_regex\regexec.c	/^check_arrival (re_match_context_t *mctx, state_array_t *path, int top_node,$/;"	f	file:	signature:(re_match_context_t *mctx, state_array_t *path, int top_node, int top_str, int last_node, int last_str, int type)
check_arrival_add_next_nodes	.\ctags58\gnu_regex\regexec.c	/^check_arrival_add_next_nodes (re_match_context_t *mctx, int str_idx,$/;"	f	file:	signature:(re_match_context_t *mctx, int str_idx, re_node_set *cur_nodes, re_node_set *next_nodes)
check_arrival_expand_ecl	.\ctags58\gnu_regex\regexec.c	/^check_arrival_expand_ecl (const re_dfa_t *dfa, re_node_set *cur_nodes,$/;"	f	file:	signature:(const re_dfa_t *dfa, re_node_set *cur_nodes, int ex_subexp, int type)
check_arrival_expand_ecl_sub	.\ctags58\gnu_regex\regexec.c	/^check_arrival_expand_ecl_sub (const re_dfa_t *dfa, re_node_set *dst_nodes,$/;"	f	file:	signature:(const re_dfa_t *dfa, re_node_set *dst_nodes, int target, int ex_subexp, int type)
check_buffer	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\include_complete.vim	/^function! s:check_buffer(bufnumber, is_force) "{{{$/;"	f
check_cache	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\buffer_complete.vim	/^function! s:check_cache() "{{{$/;"	f
check_cache	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\include_complete.vim	/^function! s:check_cache() "{{{$/;"	f
check_changed_buffer	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\buffer_complete.vim	/^function! s:check_changed_buffer(bufnumber) "{{{$/;"	f
check_dst_limits	.\ctags58\gnu_regex\regexec.c	/^check_dst_limits (const re_match_context_t *mctx, re_node_set *limits,$/;"	f	file:	signature:(const re_match_context_t *mctx, re_node_set *limits, int dst_node, int dst_idx, int src_node, int src_idx)
check_dst_limits_calc_pos	.\ctags58\gnu_regex\regexec.c	/^check_dst_limits_calc_pos (const re_match_context_t *mctx, int limit,$/;"	f	file:	signature:(const re_match_context_t *mctx, int limit, int subexp_idx, int from_node, int str_idx, int bkref_idx)
check_dst_limits_calc_pos_1	.\ctags58\gnu_regex\regexec.c	/^check_dst_limits_calc_pos_1 (const re_match_context_t *mctx, int boundaries,$/;"	f	file:	signature:(const re_match_context_t *mctx, int boundaries, int subexp_idx, int from_node, int bkref_idx)
check_halt_node_context	.\ctags58\gnu_regex\regexec.c	/^check_halt_node_context (const re_dfa_t *dfa, int node, unsigned int context)$/;"	f	file:	signature:(const re_dfa_t *dfa, int node, unsigned int context)
check_halt_state_context	.\ctags58\gnu_regex\regexec.c	/^check_halt_state_context (const re_match_context_t *mctx,$/;"	f	file:	signature:(const re_match_context_t *mctx, const re_dfastate_t *state, int idx)
check_in_do_auto_complete	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\handler.vim	/^function! s:check_in_do_auto_complete() "{{{$/;"	f
check_matching	.\ctags58\gnu_regex\regexec.c	/^check_matching (re_match_context_t *mctx, int fl_longest_match,$/;"	f	file:	signature:(re_match_context_t *mctx, int fl_longest_match, int *p_match_first)
check_node_accept	.\ctags58\gnu_regex\regexec.c	/^check_node_accept (const re_match_context_t *mctx, const re_token_t *node,$/;"	f	file:	signature:(const re_match_context_t *mctx, const re_token_t *node, int idx)
check_node_accept_bytes	.\ctags58\gnu_regex\regexec.c	/^check_node_accept_bytes (const re_dfa_t *dfa, int node_idx,$/;"	f	file:	signature:(const re_dfa_t *dfa, int node_idx, const re_string_t *input, int str_idx)
check_old_cache	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\system\cache.vim	/^function! s:check_old_cache(cache_dir, filename)$/;"	f
check_recache	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\buffer_complete.vim	/^function! s:check_recache() "{{{$/;"	f
check_ruby_1_9_2	.\vimfiles\bundle\command-t\spec\command-t\controller_spec.rb	/^  def check_ruby_1_9_2$/;"	f
check_shell	.\vim73\tools\shtags.pl	/^sub check_shell$/;"	s
check_source	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\buffer_complete.vim	/^function! s:check_source() "{{{$/;"	f
check_subexp_limits	.\ctags58\gnu_regex\regexec.c	/^check_subexp_limits (const re_dfa_t *dfa, re_node_set *dest_nodes,$/;"	f	file:	signature:(const re_dfa_t *dfa, re_node_set *dest_nodes, const re_node_set *candidates, re_node_set *limits, struct re_backref_cache_entry *bkref_ents, int str_idx)
check_subexp_matching_top	.\ctags58\gnu_regex\regexec.c	/^check_subexp_matching_top (re_match_context_t *mctx, re_node_set *cur_nodes,$/;"	f	file:	signature:(re_match_context_t *mctx, re_node_set *cur_nodes, int str_idx)
child_chan	.\ctags58\argproc.c	/^static short child_chan;\/* I\/O Channel for Pipe Mailbox					*\/$/;"	v	file:
child_st	.\ctags58\argproc.c	/^static int child_st [2];		\/* Event Flag set when child process completes	*\/$/;"	v	file:
chill_minlines	.\vim73\syntax\chill.vim	/^  let chill_minlines = 15$/;"	v
choose	.\vim73\ftplugin\gitrebase.vim	/^function! s:choose(word)$/;"	f
chooseBranch	.\ctags58\get.c	/^static void chooseBranch (void)$/;"	f	file:	signature:(void)
chsize	.\ctags58\entry.c	68;"	d	file:
classDecl	.\ctags58\ocaml.c	/^static void classDecl (vString * const ident, ocaToken what)$/;"	f	file:	signature:(vString * const ident, ocaToken what)
className	.\ctags58\eiffel.c	/^	vString*  className;$/;"	m	struct:sTokenInfo	file:	access:public
clean_filename	.\vimfiles\bundle\command-t\vendor\vimball\vimball.rb	/^    def clean_filename(filename)$/;"	f
clean_state_log_if_needed	.\ctags58\gnu_regex\regexec.c	/^clean_state_log_if_needed (re_match_context_t *mctx, int next_state_log_idx)$/;"	f	file:	signature:(re_match_context_t *mctx, int next_state_log_idx)
cleanupPreviousParser	.\ctags58\ocaml.c	/^static void cleanupPreviousParser ( void )$/;"	f	file:	signature:( void )
clear	.\vimfiles\bundle\command-t\ruby\command-t\controller.rb	/^    def clear$/;"	f	class:CommandT.Controller.quickfix
clear	.\vimfiles\bundle\command-t\ruby\command-t\match_window.rb	/^    def clear$/;"	f	class:CommandT.MatchWindow.match_with_syntax_highlight
clear!	.\vimfiles\bundle\command-t\ruby\command-t\prompt.rb	/^    def clear!$/;"	f	class:CommandT.Prompt
clearLanguageMap	.\ctags58\parse.c	/^extern void clearLanguageMap (const langType language)$/;"	f	signature:(const langType language)
clearLanguageMap	.\ctags58\parse.h	/^extern void clearLanguageMap (const langType language);$/;"	p	signature:(const langType language)
clearPatternSet	.\ctags58\lregex.c	/^static void clearPatternSet (const langType language)$/;"	f	file:	signature:(const langType language)
clearStack	.\ctags58\ocaml.c	/^static void clearStack ( void )$/;"	f	file:	signature:( void )
clock	.\ctags58\main.c	/^static clock_t clock (void)$/;"	f	file:	signature:(void)
clock	.\ctags58\main.c	417;"	d	file:
close	.\ctags58\entry.c	70;"	d	file:
close	.\vimfiles\bundle\command-t\ruby\command-t\match_window.rb	/^    def close$/;"	f	class:CommandT.MatchWindow
closeTagFile	.\ctags58\entry.c	/^extern void closeTagFile (const boolean resize)$/;"	f	signature:(const boolean resize)
closeTagFile	.\ctags58\entry.h	/^extern void closeTagFile (const boolean resize);$/;"	p	signature:(const boolean resize)
close_preview_window	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\handler.vim	/^function! s:close_preview_window() "{{{$/;"	f
closedir	.\ctags58\e_mac.h	/^extern int closedir(DIR* dirp);$/;"	p	signature:(DIR* dirp)
closedir	.\ctags58\mac.c	/^int closedir(DIR *dirp)$/;"	f	signature:(DIR *dirp)
col1	.\vim73\syntax\colortest.vim	/^  let col1 = substitute(expand("<cword>"), '\\(\\a\\+\\)_on_\\a\\+', '\\1', "")$/;"	v
col2	.\vim73\syntax\colortest.vim	/^  let col2 = substitute(expand("<cword>"), '\\a\\+_on_\\(\\a\\+\\)', '\\1', "")$/;"	v
coll_syms	.\ctags58\gnu_regex\regex_internal.h	/^  int32_t *coll_syms;$/;"	m	struct:__anon30	access:public
color	.\vim73\syntax\xpm.vim	/^		     let color = ""$/;"	v
color	.\vim73\syntax\xpm.vim	/^		  let color = substitute(s, '".*\\sm\\s\\+\\(.\\{-}\\)\\s*\\(s\\s.*\\)*\\s*"', '\\1', '')$/;"	v
color	.\vim73\syntax\xpm.vim	/^	       let color = substitute(s, '".*\\sg4\\s\\+\\(.\\{-}\\)\\s*\\([ms]\\s.*\\)*\\s*"', '\\1', '')$/;"	v
color	.\vim73\syntax\xpm.vim	/^	    let color = substitute(color, '\\(\\x\\)\\(\\x\\)\\(\\x\\)', '0\\10\\20\\3', '')$/;"	v
color	.\vim73\syntax\xpm.vim	/^	    let color = substitute(color, '\\(\\x\\x\\)\\x', '\\1', 'g')$/;"	v
color	.\vim73\syntax\xpm.vim	/^	    let color = substitute(color, '\\(\\x\\x\\)\\x\\x', '\\1', 'g')$/;"	v
color	.\vim73\syntax\xpm.vim	/^	    let color = substitute(s, '".*\\sg\\s\\+\\(.\\{-}\\)\\s*\\(\\(g4\\|[ms]\\)\\s.*\\)*\\s*"', '\\1', '')$/;"	v
color	.\vim73\syntax\xpm.vim	/^	 let color = substitute(s, '".*\\sc\\s\\+\\(.\\{-}\\)\\s*\\(\\(g4\\=\\|[ms]\\)\\s.*\\)*\\s*"', '\\1', '')$/;"	v
color	.\vim73\syntax\xpm.vim	/^let color  = ""$/;"	v
color	.\vim73\syntax\xpm2.vim	/^		let color = ""$/;"	v
color	.\vim73\syntax\xpm2.vim	/^	      let color = substitute(s, '.*\\sm\\s\\+\\(.\\{-}\\)\\s*\\(s\\s.*\\)*\\s*', '\\1', '')$/;"	v
color	.\vim73\syntax\xpm2.vim	/^	    let color = substitute(s, '.*\\sg4\\s\\+\\(.\\{-}\\)\\s*\\([ms]\\s.*\\)*\\s*', '\\1', '')$/;"	v
color	.\vim73\syntax\xpm2.vim	/^	  let color = substitute(color, '\\(\\x\\)\\(\\x\\)\\(\\x\\)', '0\\10\\20\\3', '')$/;"	v
color	.\vim73\syntax\xpm2.vim	/^	  let color = substitute(color, '\\(\\x\\x\\)\\x', '\\1', 'g')$/;"	v
color	.\vim73\syntax\xpm2.vim	/^	  let color = substitute(color, '\\(\\x\\x\\)\\x\\x', '\\1', 'g')$/;"	v
color	.\vim73\syntax\xpm2.vim	/^	  let color = substitute(s, '.*\\sg\\s\\+\\(.\\{-}\\)\\s*\\(\\(g4\\|[ms]\\)\\s.*\\)*\\s*', '\\1', '')$/;"	v
color	.\vim73\syntax\xpm2.vim	/^	let color = substitute(s, '.*\\sc\\s\\+\\(.\\{-}\\)\\s*\\(\\(g4\\=\\|[ms]\\)\\s.*\\)*\\s*', '\\1', '')$/;"	v
color	.\vim73\syntax\xpm2.vim	/^  let color  = ""$/;"	v
colors	.\vim73\syntax\xpm.vim	/^	 let colors = substitute(s, '"\\s*\\d\\+\\s\\+\\d\\+\\s\\+\\(\\d\\+\\).*"', '\\1', '')$/;"	v
colors	.\vim73\syntax\xpm.vim	/^let colors = 0$/;"	v
colors	.\vim73\syntax\xpm2.vim	/^	let colors = substitute(s, '\\s*\\d\\+\\s\\+\\d\\+\\s\\+\\(\\d\\+\\).*', '\\1', '')$/;"	v
colors	.\vim73\syntax\xpm2.vim	/^  let colors = 0$/;"	v
colors_name	.\vim73\colors\darkblue.vim	/^let colors_name = "darkblue"$/;"	v
colors_name	.\vim73\colors\default.vim	/^let colors_name = "default"$/;"	v
colors_name	.\vim73\colors\delek.vim	/^let colors_name = "delek"$/;"	v
colors_name	.\vim73\colors\evening.vim	/^let colors_name = "evening"$/;"	v
colors_name	.\vim73\colors\morning.vim	/^let colors_name = "morning"$/;"	v
colors_name	.\vim73\colors\peachpuff.vim	/^let colors_name = "peachpuff"$/;"	v
colors_name	.\vim73\colors\shine.vim	/^let colors_name = "shine"$/;"	v
colors_name	.\vim73\colors\slate.vim	/^let colors_name = "slate"$/;"	v
combinePathAndFile	.\ctags58\routines.c	/^extern vString *combinePathAndFile ($/;"	f	signature:( const char *const path, const char *const file)
combinePathAndFile	.\ctags58\routines.h	/^extern vString *combinePathAndFile (const char *const path, const char *const file);$/;"	p	signature:(const char *const path, const char *const file)
comeAfter	.\ctags58\ocaml.c	/^parseNext comeAfter;$/;"	v
commProperty	.\vim73\tools\xcmdsrv_client.c	/^static Atom	commProperty = None;$/;"	v	file:
commWindow	.\vim73\tools\xcmdsrv_client.c	/^static Window	commWindow = None;$/;"	v	file:
comp_alpha	.\vimfiles\bundle\command-t\ruby\command-t\matcher.c	/^int comp_alpha(const void *a, const void *b)$/;"	f	signature:(const void *a, const void *b)
comp_score	.\vimfiles\bundle\command-t\ruby\command-t\matcher.c	/^int comp_score(const void *a, const void *b)$/;"	f	signature:(const void *a, const void *b)
compare	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters\sorter_length.vim	/^function! s:compare(i1, i2)$/;"	f
compare	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters\sorter_rank.vim	/^function! s:compare(i1, i2)$/;"	f
compareString	.\ctags58\strlist.c	/^static boolean compareString ($/;"	f	file:	signature:( const char *const string, vString *const itm)
compareStringInsensitive	.\ctags58\strlist.c	/^static boolean compareStringInsensitive ($/;"	f	file:	signature:( const char *const string, vString *const itm)
compareTags	.\ctags58\sort.c	/^static int compareTags (const void *const one, const void *const two)$/;"	f	file:	signature:(const void *const one, const void *const two)
compareTagsFolded	.\ctags58\sort.c	/^static int compareTagsFolded(const void *const one, const void *const two)$/;"	f	file:	signature:(const void *const one, const void *const two)
compare_pos	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\context_filetype.vim	/^function! s:compare_pos(i1, i2)$/;"	f
compare_source_rank	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\complete.vim	/^function! s:compare_source_rank(i1, i2)$/;"	f
compileRegex	.\ctags58\lregex.c	/^static regex_t* compileRegex (const char* const regexp, const char* const flags)$/;"	f	file:	signature:(const char* const regexp, const char* const flags)
completed_bkref_map	.\ctags58\gnu_regex\regex_internal.h	/^  bitset_word_t completed_bkref_map;$/;"	m	struct:re_dfa_t	access:public
computeModuleName	.\ctags58\ocaml.c	/^static void computeModuleName ( void )$/;"	f	file:	signature:( void )
concat	.\ctags58\routines.c	/^static char* concat (const char *s1, const char *s2, const char *s3)$/;"	f	file:	signature:(const char *s1, const char *s2, const char *s3)
concat	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\data\list.vim	/^function! s:concat(list)$/;"	f
conditionalInfo	.\ctags58\get.c	/^} conditionalInfo;$/;"	t	typeref:struct:sConditionalInfo	file:
constraint	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned int constraint : 10;	\/* context constraint *\/$/;"	m	struct:__anon31	access:public
constructParentString	.\ctags58\python.c	/^static boolean constructParentString(NestingLevels *nls, int indent,$/;"	f	file:	signature:(NestingLevels *nls, int indent, vString *result)
constructorValidation	.\ctags58\ocaml.c	/^static void constructorValidation (vString * const ident, ocaToken what)$/;"	f	file:	signature:(vString * const ident, ocaToken what)
context	.\ctags58\c.c	/^	tokenInfo*	context;        \/* accumulated scope of current statement *\/$/;"	m	struct:sStatementInfo	file:	access:public
context	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned int context : 4;$/;"	m	struct:re_dfastate_t	access:public
contextDescription	.\ctags58\ocaml.c	/^static const char *contextDescription (contextType t)$/;"	f	file:	signature:(contextType t)
contextKind	.\ctags58\ocaml.c	/^} contextKind;$/;"	t	typeref:enum:_sContextKind	file:
contextName	.\ctags58\ocaml.c	/^	vString *contextName;	\/* name, if any, of the surrounding context *\/$/;"	m	struct:_sOcamlContext	file:	access:public
contextType	.\ctags58\ocaml.c	/^} contextType;$/;"	t	typeref:enum:_sContextType	file:
contextTypeSuffix	.\ctags58\ocaml.c	/^static char contextTypeSuffix (contextType t)$/;"	f	file:	signature:(contextType t)
converter.filter	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters\converter_abbr.vim	/^function! s:converter.filter(context) "{{{$/;"	f
converter.filter	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters\converter_case.vim	/^function! s:converter.filter(context) "{{{$/;"	f
converter.filter	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters\converter_delimiter.vim	/^function! s:converter.filter(context) "{{{$/;"	f
converter.filter	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters\converter_nothing.vim	/^function! s:converter.filter(context) "{{{$/;"	f
converter.filter	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters\converter_remove_next_keyword.vim	/^function! s:converter.filter(context) "{{{$/;"	f
cookedArgs	.\ctags58\options.h	/^} cookedArgs;$/;"	t	typeref:struct:sCookedArgs
copyBytes	.\ctags58\entry.c	/^extern void copyBytes (FILE* const fromFp, FILE* const toFp, const long size)$/;"	f	signature:(FILE* const fromFp, FILE* const toFp, const long size)
copyBytes	.\ctags58\entry.h	/^extern void copyBytes (FILE* const fromFp, FILE* const toFp, const long size);$/;"	p	signature:(FILE* const fromFp, FILE* const toFp, const long size)
copyFile	.\ctags58\entry.c	/^extern void copyFile (const char *const from, const char *const to, const long size)$/;"	f	signature:(const char *const from, const char *const to, const long size)
copyFile	.\ctags58\entry.h	/^extern void copyFile (const char *const from, const char *const to, const long size);$/;"	p	signature:(const char *const from, const char *const to, const long size)
copyName	.\ctags58\readtags.c	/^static void copyName (tagFile *const file)$/;"	f	file:	signature:(tagFile *const file)
copyToken	.\ctags58\c.c	/^static void copyToken (tokenInfo *const dest, const tokenInfo *const src)$/;"	f	file:	signature:(tokenInfo *const dest, const tokenInfo *const src)
copyToken	.\ctags58\eiffel.c	/^static void copyToken (tokenInfo* dst, const tokenInfo *src)$/;"	f	file:	signature:(tokenInfo* dst, const tokenInfo *src)
copyToken	.\ctags58\flex.c	/^static void copyToken (tokenInfo *const dest, tokenInfo *const src)$/;"	f	file:	signature:(tokenInfo *const dest, tokenInfo *const src)
copyToken	.\ctags58\jscript.c	/^static void copyToken (tokenInfo *const dest, tokenInfo *const src)$/;"	f	file:	signature:(tokenInfo *const dest, tokenInfo *const src)
copyToken	.\ctags58\tex.c	/^static void copyToken (tokenInfo *const dest, tokenInfo *const src)$/;"	f	file:	signature:(tokenInfo *const dest, tokenInfo *const src)
count	.\ctags58\entry.h	/^	unsigned int count;        \/* number of additional extension flags *\/$/;"	m	struct:sTagFields	access:public
count	.\ctags58\fortran.c	/^	unsigned int count;$/;"	m	struct:__anon21	file:	access:public
count	.\ctags58\lregex.c	/^	unsigned int count;$/;"	m	struct:__anon47	file:	access:public
count	.\ctags58\readtags.h	/^		unsigned short count;$/;"	m	struct:__anon73::__anon75	access:public
count	.\ctags58\strlist.h	/^	unsigned int count;$/;"	m	struct:sStringList	access:public
count	.\vim73\indent\bst.vim	/^function! s:count(string,char)$/;"	f
count	.\vim73\indent\liquid.vim	/^function! s:count(string,pattern)$/;"	f
count_braces	.\vim73\indent\css.vim	/^function s:count_braces(lnum, count_open)$/;"	f
count_braces	.\vim73\indent\ld.vim	/^function s:count_braces(lnum, count_open)$/;"	f
count_braces	.\vim73\indent\tcl.vim	/^function s:count_braces(lnum, count_open)$/;"	f
count_braces	.\vim73\indent\xinetd.vim	/^function s:count_braces(lnum, count_open)$/;"	f
cp	.\ctags58\ocaml.c	/^	const unsigned char *cp;	\/* position in stream *\/$/;"	m	struct:_lexingState	file:	access:public
cpo_save	.\vim73\ftplugin\hamster.vim	/^let cpo_save = &cpo$/;"	v
cpp	.\vim73\syntax\xpm.vim	/^	 let cpp = substitute(s, '"\\s*\\d\\+\\s\\+\\d\\+\\s\\+\\d\\+\\s\\+\\(\\d\\+\\).*"', '\\1', '')$/;"	v
cpp	.\vim73\syntax\xpm.vim	/^let cpp    = 0$/;"	v
cpp	.\vim73\syntax\xpm2.vim	/^	let cpp = substitute(s, '\\s*\\d\\+\\s\\+\\d\\+\\s\\+\\d\\+\\s\\+\\(\\d\\+\\).*', '\\1', '')$/;"	v
cpp	.\vim73\syntax\xpm2.vim	/^  let cpp    = 0$/;"	v
cppBeginStatement	.\ctags58\get.c	/^extern void cppBeginStatement (void)$/;"	f	signature:(void)
cppBeginStatement	.\ctags58\get.h	/^extern void cppBeginStatement (void);$/;"	p	signature:(void)
cppEndStatement	.\ctags58\get.c	/^extern void cppEndStatement (void)$/;"	f	signature:(void)
cppEndStatement	.\ctags58\get.h	/^extern void cppEndStatement (void);$/;"	p	signature:(void)
cppGetc	.\ctags58\get.c	/^extern int cppGetc (void)$/;"	f	signature:(void)
cppGetc	.\ctags58\get.h	/^extern int cppGetc (void);$/;"	p	signature:(void)
cppInit	.\ctags58\get.c	/^extern void cppInit (const boolean state, const boolean hasAtLiteralStrings)$/;"	f	signature:(const boolean state, const boolean hasAtLiteralStrings)
cppInit	.\ctags58\get.h	/^extern void cppInit (const boolean state, const boolean hasAtLiteralStrings);$/;"	p	signature:(const boolean state, const boolean hasAtLiteralStrings)
cppState	.\ctags58\get.c	/^} cppState;$/;"	t	typeref:struct:sCppState	file:
cppTerminate	.\ctags58\get.c	/^extern void cppTerminate (void)$/;"	f	signature:(void)
cppTerminate	.\ctags58\get.h	/^extern void cppTerminate (void);$/;"	p	signature:(void)
cppUngetc	.\ctags58\get.c	/^extern void cppUngetc (const int c)$/;"	f	signature:(const int c)
cppUngetc	.\ctags58\get.h	/^extern void cppUngetc (const int c);$/;"	p	signature:(const int c)
createPascalTag	.\ctags58\pascal.c	/^static void createPascalTag ($/;"	f	file:	signature:( tagEntryInfo* const tag, const vString* const name, const int kind)
createRegexTag	.\ctags58\parse.h	/^typedef void (*createRegexTag) (const vString* const name);$/;"	t
createTags	.\ctags58\c.c	/^static void createTags (const unsigned int nestLevel, statementInfo *const parent);$/;"	p	file:	signature:(const unsigned int nestLevel, statementInfo *const parent)
createTags	.\ctags58\c.c	/^static void createTags (const unsigned int nestLevel,$/;"	f	file:	signature:(const unsigned int nestLevel, statementInfo *const parent)
createTagsForAmigaWildcard	.\ctags58\main.c	/^static boolean createTagsForAmigaWildcard (const char *const pattern)$/;"	f	file:	signature:(const char *const pattern)
createTagsForArgs	.\ctags58\main.c	/^static boolean createTagsForArgs (cookedArgs *const args)$/;"	f	file:	signature:(cookedArgs *const args)
createTagsForEntry	.\ctags58\main.c	/^static boolean createTagsForEntry (const char *const entryName)$/;"	f	file:	signature:(const char *const entryName)
createTagsForEntry	.\ctags58\main.c	/^static boolean createTagsForEntry (const char *const entryName);$/;"	p	file:	signature:(const char *const entryName)
createTagsForFile	.\ctags58\parse.c	/^static boolean createTagsForFile ($/;"	f	file:	signature:( const char *const fileName, const langType language, const unsigned int passCount)
createTagsForWildcardArg	.\ctags58\main.c	/^static boolean createTagsForWildcardArg (const char *const arg)$/;"	f	file:	signature:(const char *const arg)
createTagsForWildcardEntry	.\ctags58\main.c	/^static boolean createTagsForWildcardEntry ($/;"	f	file:	signature:( const char *const pattern, const size_t dirLength, const char *const entryName)
createTagsForWildcardUsingFindfirst	.\ctags58\main.c	/^static boolean createTagsForWildcardUsingFindfirst (const char *const pattern)$/;"	f	file:	signature:(const char *const pattern)
createTagsFromFileInput	.\ctags58\main.c	/^static boolean createTagsFromFileInput (FILE *const fp, const boolean filter)$/;"	f	file:	signature:(FILE *const fp, const boolean filter)
createTagsFromListFile	.\ctags58\main.c	/^static boolean createTagsFromListFile (const char *const fileName)$/;"	f	file:	signature:(const char *const fileName)
createTagsWithFallback	.\ctags58\parse.c	/^static boolean createTagsWithFallback ($/;"	f	file:	signature:( const char *const fileName, const langType language)
create_cd_newstate	.\ctags58\gnu_regex\regex_internal.c	/^create_cd_newstate (const re_dfa_t *dfa, const re_node_set *nodes,$/;"	f	file:	signature:(const re_dfa_t *dfa, const re_node_set *nodes, unsigned int context, unsigned int hash)
create_changelog	.\vimfiles\bundle\vundle\autoload\vundle\scripts.vim	/^func! s:create_changelog() abort$/;"	f
create_ci_newstate	.\ctags58\gnu_regex\regex_internal.c	/^create_ci_newstate (const re_dfa_t *dfa, const re_node_set *nodes,$/;"	f	file:	signature:(const re_dfa_t *dfa, const re_node_set *nodes, unsigned int hash)
create_hash	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\system\cache.vim	/^function! s:create_hash(dir, str)$/;"	f
create_initial_state	.\ctags58\gnu_regex\regcomp.c	/^create_initial_state (re_dfa_t *dfa)$/;"	f	file:	signature:(re_dfa_t *dfa)
create_initial_state	.\ctags58\gnu_regex\regcomp.c	/^static reg_errcode_t create_initial_state (re_dfa_t *dfa);$/;"	p	file:	signature:(re_dfa_t *dfa)
create_token_tree	.\ctags58\gnu_regex\regcomp.c	/^create_token_tree (re_dfa_t *dfa, bin_tree_t *left, bin_tree_t *right,$/;"	f	file:	signature:(re_dfa_t *dfa, bin_tree_t *left, bin_tree_t *right, const re_token_t *token)
create_token_tree	.\ctags58\gnu_regex\regcomp.c	/^static bin_tree_t *create_token_tree (re_dfa_t *dfa,$/;"	p	file:	signature:(re_dfa_t *dfa, bin_tree_t *left, bin_tree_t *right, const re_token_t *token)
create_tree	.\ctags58\gnu_regex\regcomp.c	/^create_tree (re_dfa_t *dfa, bin_tree_t *left, bin_tree_t *right,$/;"	f	file:	signature:(re_dfa_t *dfa, bin_tree_t *left, bin_tree_t *right, re_token_type_t type)
create_tree	.\ctags58\gnu_regex\regcomp.c	/^static bin_tree_t *create_tree (re_dfa_t *dfa,$/;"	p	file:	signature:(re_dfa_t *dfa, bin_tree_t *left, bin_tree_t *right, re_token_type_t type)
csc_minlines	.\vim73\syntax\csc.vim	/^	let csc_minlines = 50	" mostly for () constructs$/;"	v
csharpKind	.\ctags58\c.c	/^} csharpKind;$/;"	t	typeref:enum:__anon13	file:
csharpTagKind	.\ctags58\c.c	/^static csharpKind csharpTagKind (const tagType type)$/;"	f	file:	signature:(const tagType type)
csscomplete#CompleteCSS	.\vim73\autoload\csscomplete.vim	/^function! csscomplete#CompleteCSS(findstart, base)$/;"	f
ctx_type	.\ctags58\gnu_regex\regex_internal.h	/^    re_context_type ctx_type;	\/* for ANCHOR *\/$/;"	m	union:__anon31::__anon32	access:public
cur_idx	.\ctags58\gnu_regex\regex_internal.h	/^  int cur_idx;$/;"	m	struct:re_string_t	access:public
cur_state	.\ctags58\gnu_regex\regex_internal.h	/^  mbstate_t cur_state;$/;"	m	struct:re_string_t	access:public
currentConditional	.\ctags58\get.c	/^static conditionalInfo *currentConditional (void)$/;"	f	file:	signature:(void)
currentExtensions	.\ctags58\parse.h	/^	stringList* currentExtensions; \/* current list of extensions *\/$/;"	m	struct:__anon56	access:public
currentLine	.\ctags58\read.h	/^	const unsigned char* currentLine;  \/* current line being worked on *\/$/;"	m	struct:sInputFile	access:public
currentPatterns	.\ctags58\parse.h	/^	stringList* currentPatterns;   \/* current list of file name patterns *\/$/;"	m	struct:__anon56	access:public
current_compiler	.\vim73\compiler\ant.vim	/^let current_compiler = "ant"$/;"	v
current_compiler	.\vim73\compiler\bcc.vim	/^let current_compiler = "bcc"$/;"	v
current_compiler	.\vim73\compiler\bdf.vim	/^let current_compiler = "bdf"$/;"	v
current_compiler	.\vim73\compiler\checkstyle.vim	/^let current_compiler = "checkstyle"$/;"	v
current_compiler	.\vim73\compiler\cs.vim	/^let current_compiler = "cs"$/;"	v
current_compiler	.\vim73\compiler\cucumber.vim	/^let current_compiler = "cucumber"$/;"	v
current_compiler	.\vim73\compiler\decada.vim	/^let current_compiler = "decada"$/;"	v
current_compiler	.\vim73\compiler\dot.vim	/^let current_compiler = "dot"$/;"	v
current_compiler	.\vim73\compiler\eruby.vim	/^let current_compiler = "eruby"$/;"	v
current_compiler	.\vim73\compiler\fortran_F.vim	/^let current_compiler = "fortran_F"$/;"	v
current_compiler	.\vim73\compiler\fortran_cv.vim	/^let current_compiler = "fortran_cv"$/;"	v
current_compiler	.\vim73\compiler\fortran_elf90.vim	/^let current_compiler = "fortran_elf90"$/;"	v
current_compiler	.\vim73\compiler\fortran_g77.vim	/^let current_compiler = "fortran_g77"$/;"	v
current_compiler	.\vim73\compiler\fortran_lf95.vim	/^let current_compiler = "fortran_lf95"$/;"	v
current_compiler	.\vim73\compiler\fpc.vim	/^let current_compiler = "fpc"$/;"	v
current_compiler	.\vim73\compiler\gcc.vim	/^let current_compiler = "gcc"$/;"	v
current_compiler	.\vim73\compiler\gnat.vim	/^let current_compiler = "gnat"$/;"	v
current_compiler	.\vim73\compiler\hp_acc.vim	/^let current_compiler = "hp_acc"$/;"	v
current_compiler	.\vim73\compiler\icc.vim	/^let current_compiler = "icc"$/;"	v
current_compiler	.\vim73\compiler\intel.vim	/^let current_compiler = "intel"$/;"	v
current_compiler	.\vim73\compiler\irix5_c.vim	/^let current_compiler = "irix5_c"$/;"	v
current_compiler	.\vim73\compiler\irix5_cpp.vim	/^let current_compiler = "irix5_cpp"$/;"	v
current_compiler	.\vim73\compiler\javac.vim	/^let current_compiler = "javac"$/;"	v
current_compiler	.\vim73\compiler\jikes.vim	/^let current_compiler = "jikes"$/;"	v
current_compiler	.\vim73\compiler\mcs.vim	/^let current_compiler = "mcs"$/;"	v
current_compiler	.\vim73\compiler\mips_c.vim	/^let current_compiler = "mips_c"$/;"	v
current_compiler	.\vim73\compiler\mipspro_c89.vim	/^let current_compiler = "mipspro_c89"$/;"	v
current_compiler	.\vim73\compiler\mipspro_cpp.vim	/^let current_compiler = "mipspro_cpp"$/;"	v
current_compiler	.\vim73\compiler\modelsim_vcom.vim	/^let current_compiler = "modelsim_vcom"$/;"	v
current_compiler	.\vim73\compiler\msvc.vim	/^let current_compiler = "msvc"$/;"	v
current_compiler	.\vim73\compiler\neato.vim	/^let current_compiler = "neato"$/;"	v
current_compiler	.\vim73\compiler\onsgmls.vim	/^let current_compiler = "onsgmls"$/;"	v
current_compiler	.\vim73\compiler\pbx.vim	/^let current_compiler = "pbx"$/;"	v
current_compiler	.\vim73\compiler\perl.vim	/^let current_compiler = "perl"$/;"	v
current_compiler	.\vim73\compiler\php.vim	/^let current_compiler = "php"$/;"	v
current_compiler	.\vim73\compiler\pyunit.vim	/^let current_compiler = "pyunit"$/;"	v
current_compiler	.\vim73\compiler\rspec.vim	/^let current_compiler = "rspec"$/;"	v
current_compiler	.\vim73\compiler\rst.vim	/^let current_compiler = "rst"$/;"	v
current_compiler	.\vim73\compiler\ruby.vim	/^let current_compiler = "ruby"$/;"	v
current_compiler	.\vim73\compiler\rubyunit.vim	/^let current_compiler = "rubyunit"$/;"	v
current_compiler	.\vim73\compiler\se.vim	/^let current_compiler = "se"$/;"	v
current_compiler	.\vim73\compiler\splint.vim	/^let current_compiler = "splint"$/;"	v
current_compiler	.\vim73\compiler\tcl.vim	/^let current_compiler = "tcl"$/;"	v
current_compiler	.\vim73\compiler\tex.vim	/^		let current_compiler = "latex"$/;"	v
current_compiler	.\vim73\compiler\tex.vim	/^		let current_compiler = b:tex_flavor$/;"	v
current_compiler	.\vim73\compiler\tex.vim	/^		let current_compiler = g:tex_flavor$/;"	v
current_compiler	.\vim73\compiler\tex.vim	/^	let current_compiler = 'make'$/;"	v
current_compiler	.\vim73\compiler\tidy.vim	/^let current_compiler = "tidy"$/;"	v
current_compiler	.\vim73\compiler\xmllint.vim	/^let current_compiler = "xmllint"$/;"	v
current_compiler	.\vim73\compiler\xmlwf.vim	/^let current_compiler = "xmlwf"$/;"	v
currentdrive	.\ctags58\routines.c	129;"	d	file:
currentdrive	.\ctags58\routines.c	133;"	d	file:
currentdrive	.\ctags58\routines.c	135;"	d	file:
currentdrive	.\ctags58\routines.c	137;"	d	file:
cursor_end	.\vimfiles\bundle\command-t\ruby\command-t\controller.rb	/^    def cursor_end$/;"	f	class:CommandT.Controller.quickfix
cursor_end	.\vimfiles\bundle\command-t\ruby\command-t\prompt.rb	/^    def cursor_end$/;"	f	class:CommandT.Prompt
cursor_left	.\vimfiles\bundle\command-t\ruby\command-t\controller.rb	/^    def cursor_left$/;"	f	class:CommandT.Controller.quickfix
cursor_left	.\vimfiles\bundle\command-t\ruby\command-t\prompt.rb	/^    def cursor_left$/;"	f	class:CommandT.Prompt
cursor_right	.\vimfiles\bundle\command-t\ruby\command-t\controller.rb	/^    def cursor_right$/;"	f	class:CommandT.Controller.quickfix
cursor_right	.\vimfiles\bundle\command-t\ruby\command-t\prompt.rb	/^    def cursor_right$/;"	f	class:CommandT.Prompt
cursor_start	.\vimfiles\bundle\command-t\ruby\command-t\controller.rb	/^    def cursor_start$/;"	f	class:CommandT.Controller.quickfix
cursor_start	.\vimfiles\bundle\command-t\ruby\command-t\prompt.rb	/^    def cursor_start$/;"	f	class:CommandT.Prompt
custom_expand	.\ctags58\qdos.c	/^int  custom_expand (char * param, char ***argvptr, int *argcptr);$/;"	p	file:	signature:(char * param, char ***argvptr, int *argcptr)
custom_expand	.\ctags58\qdos.c	/^int custom_expand (char * param, char ***argvptr, int *argcptr)$/;"	f	signature:(char * param, char ***argvptr, int *argcptr)
cycle	.\vim73\ftplugin\gitrebase.vim	/^function! s:cycle()$/;"	f
d	.\vim73\macros\less.vim	/^noremap <script> d <C-D><SID>L$/;"	m
d.Continue	.\vimfiles\bundle\vim-addon-mw-utils\autoload\tovl\ui\filter_list.vim	/^  fun d.Continue()$/;"	f
d.CurrentItem	.\vimfiles\bundle\vim-addon-mw-utils\autoload\tovl\ui\filter_list.vim	/^  fun d.CurrentItem()$/;"	f
d.DoContinue	.\vimfiles\bundle\vim-addon-mw-utils\autoload\tovl\ui\filter_list.vim	/^  fun d.DoContinue(v)$/;"	f
d.FilterFromKeyboard	.\vimfiles\bundle\vim-addon-mw-utils\autoload\tovl\ui\filter_list.vim	/^  fun d.FilterFromKeyboard(keep, start, ...)$/;"	f
d.FilterItem	.\vimfiles\bundle\vim-addon-mw-utils\autoload\tovl\ui\filter_list.vim	/^  fun d.FilterItem(items, filter, cursorAt)$/;"	f
d.FilteredItems	.\vimfiles\bundle\vim-addon-mw-utils\autoload\tovl\ui\filter_list.vim	/^  fun d.FilteredItems()$/;"	f
d.MapToOriginal	.\vimfiles\bundle\vim-addon-mw-utils\autoload\tovl\ui\filter_list.vim	/^  fun d.MapToOriginal(v)$/;"	f
d.NewBufferAndInit	.\vimfiles\bundle\vim-addon-mw-utils\autoload\tovl\ui\filter_list.vim	/^  fun d.NewBufferAndInit()$/;"	f
d.RemoveFilters	.\vimfiles\bundle\vim-addon-mw-utils\autoload\tovl\ui\filter_list.vim	/^  fun d.RemoveFilters()$/;"	f
d.SelectByIdOrFilter	.\vimfiles\bundle\vim-addon-mw-utils\autoload\tovl\ui\filter_list.vim	/^  fun d.SelectByIdOrFilter()$/;"	f
d.ShowAppliedFilters	.\vimfiles\bundle\vim-addon-mw-utils\autoload\tovl\ui\filter_list.vim	/^  fun d.ShowAppliedFilters()$/;"	f
d.ToggleAlignment	.\vimfiles\bundle\vim-addon-mw-utils\autoload\tovl\ui\filter_list.vim	/^  fun d.ToggleAlignment()$/;"	f
d.UpdateDisplay	.\vimfiles\bundle\vim-addon-mw-utils\autoload\tovl\ui\filter_list.vim	/^  fun d.UpdateDisplay()$/;"	f
d_name	.\ctags58\e_mac.h	/^	char d_name[64];$/;"	m	struct:dirent	access:public
data	.\ctags58\gnu_regex\regex_internal.h	/^  bin_tree_t data[BIN_TREE_STORAGE_SIZE];$/;"	m	struct:bin_tree_storage_t	access:public
dbp	.\ctags58\pascal.c	/^static const unsigned char* dbp;$/;"	v	file:
debug	.\ctags58\debug.h	29;"	d
debugCppIgnore	.\ctags58\debug.c	/^extern void debugCppIgnore (const boolean ignore)$/;"	f	signature:(const boolean ignore)
debugCppIgnore	.\ctags58\debug.h	/^extern void debugCppIgnore (const boolean ignore);$/;"	p	signature:(const boolean ignore)
debugCppNest	.\ctags58\debug.c	/^extern void debugCppNest (const boolean begin, const unsigned int level)$/;"	f	signature:(const boolean begin, const unsigned int level)
debugCppNest	.\ctags58\debug.h	/^extern void debugCppNest (const boolean begin, const unsigned int level);$/;"	p	signature:(const boolean begin, const unsigned int level)
debugEntry	.\ctags58\debug.c	/^extern void debugEntry (const tagEntryInfo *const tag)$/;"	f	signature:(const tagEntryInfo *const tag)
debugEntry	.\ctags58\debug.h	/^extern void debugEntry (const tagEntryInfo *const tag);$/;"	p	signature:(const tagEntryInfo *const tag)
debugLevel	.\ctags58\options.h	/^	long debugLevel;        \/* -D  debugging output *\/$/;"	m	struct:sOptionValues	access:public
debugParseNest	.\ctags58\debug.c	/^extern void debugParseNest (const boolean increase, const unsigned int level)$/;"	f	signature:(const boolean increase, const unsigned int level)
debugParseNest	.\ctags58\debug.h	/^extern void debugParseNest (const boolean increase, const unsigned int level);$/;"	p	signature:(const boolean increase, const unsigned int level)
debugPrintf	.\ctags58\debug.c	/^extern void debugPrintf ($/;"	f	signature:( const enum eDebugLevels level, const char *const format, ... )
debugPutc	.\ctags58\debug.c	/^extern void debugPutc (const int level, const int c)$/;"	f	signature:(const int level, const int c)
debugPutc	.\ctags58\debug.h	/^extern void debugPutc (const int level, const int c);$/;"	p	signature:(const int level, const int c)
decada#Make	.\vim73\autoload\decada.vim	/^function decada#Make () dict					     " {{{1$/;"	f
decada#New	.\vim73\autoload\decada.vim	/^function decada#New ()						     " }}}1$/;"	f
decada#Set_Session	.\vim73\autoload\decada.vim	/^function decada#Set_Session (...) dict				     " {{{1$/;"	f
decada#Unit_Name	.\vim73\autoload\decada.vim	/^function decada#Unit_Name () dict				     " {{{1$/;"	f
declString	.\ctags58\c.c	/^static const char *declString (const declType declaration)$/;"	f	file:	signature:(const declType declaration)
declToTagType	.\ctags58\c.c	/^static tagType declToTagType (const declType declaration)$/;"	f	file:	signature:(const declType declaration)
declType	.\ctags58\c.c	/^} declType;$/;"	t	typeref:enum:eDeclaration	file:
declaration	.\ctags58\c.c	/^	declType	declaration;    \/* specifier associated with TOKEN_SPEC *\/$/;"	m	struct:sStatementInfo	file:	access:public
decrease	.\vim73\ftplugin\cobol.vim	/^function! s:decrease(...)$/;"	f
def_comment	.\vim73\syntax\cdrtoc.vim	/^function s:def_comment(name, nextgroup)$/;"	f
def_keyword	.\vim73\syntax\cdrtoc.vim	/^function s:def_keyword(name, nextgroup, keyword)$/;"	f
def_keywords	.\vim73\syntax\cdrtoc.vim	/^function s:def_keywords(name, nextgroup, keywords)$/;"	f
def_match	.\vim73\syntax\cdrtoc.vim	/^function s:def_match(name, nextgroup, pattern)$/;"	f
def_region	.\vim73\syntax\cdrtoc.vim	/^function s:def_region(name, nextgroup, start, skip, end, matchgroup, contains)$/;"	f
default_open_command	.\vimfiles\bundle\command-t\ruby\command-t\controller.rb	/^    def default_open_command$/;"	f	class:CommandT.Controller.quickfix
delete	.\vimfiles\bundle\command-t\ruby\command-t\controller.rb	/^    def delete$/;"	f	class:CommandT.Controller.quickfix
delete	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\system\cache.vim	/^function! s:delete(cache_dir, filename)$/;"	f
delete!	.\vimfiles\bundle\command-t\ruby\command-t\prompt.rb	/^    def delete!$/;"	f	class:CommandT.Prompt
deleteAllStatements	.\ctags58\c.c	/^static void deleteAllStatements (void)$/;"	f	file:	signature:(void)
deleteStatement	.\ctags58\c.c	/^static void deleteStatement (void)$/;"	f	file:	signature:(void)
deleteToken	.\ctags58\c.c	/^static void deleteToken (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
deleteToken	.\ctags58\eiffel.c	/^static void deleteToken (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
deleteToken	.\ctags58\flex.c	/^static void deleteToken (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
deleteToken	.\ctags58\fortran.c	/^static void deleteToken (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
deleteToken	.\ctags58\jscript.c	/^static void deleteToken (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
deleteToken	.\ctags58\sql.c	/^static void deleteToken (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
deleteToken	.\ctags58\tex.c	/^static void deleteToken (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
deleteToken	.\ctags58\vhdl.c	/^static void deleteToken (tokenInfo * const token)$/;"	f	file:	signature:(tokenInfo * const token)
deleted	.\vim73\spell\fixdup.vim	/^      let deleted += 1$/;"	v
deleted	.\vim73\spell\fixdup.vim	/^let deleted = 0$/;"	v
description	.\ctags58\lregex.c	/^	char* description;$/;"	m	struct:sKind	file:	access:public
description	.\ctags58\options.c	/^	const char *description;$/;"	m	struct:sOptionDescription	file:	access:public
description	.\ctags58\parse.h	/^	const char* description;  \/* displayed in --help output *\/$/;"	m	struct:sKindOption	access:public
determineInterpreter	.\ctags58\parse.c	/^static vString* determineInterpreter (const char* const cmd)$/;"	f	file:	signature:(const char* const cmd)
dev_t	.\ctags58\e_mac.h	/^typedef unsigned long  dev_t;$/;"	t
dfa	.\ctags58\gnu_regex\regex_internal.h	/^  const re_dfa_t *const dfa;$/;"	m	struct:__anon36	access:public
dfa	.\ctags58\gnu_regex\regex_internal.h	/^  const re_dfa_t *dfa;$/;"	m	struct:__anon36	access:public
did_OPL_syntax_inits	.\vim73\syntax\opl.vim	/^    let did_OPL_syntax_inits = 1$/;"	v
did_VRML_syntax_inits	.\vim73\syntax\vrml.vim	/^    let did_VRML_syntax_inits = 1$/;"	v
did_a65_syntax_inits	.\vim73\syntax\a65.vim	/^    let did_a65_syntax_inits = 1$/;"	v
did_abap_syntax_inits	.\vim73\syntax\abap.vim	/^    let did_abap_syntax_inits = 1$/;"	v
did_abaqus_syn_inits	.\vim73\syntax\abaqus.vim	/^		let did_abaqus_syn_inits = 1$/;"	v
did_abc_syn_inits	.\vim73\syntax\abc.vim	/^    let did_abc_syn_inits = 1$/;"	v
did_abel_syn_inits	.\vim73\syntax\abel.vim	/^    let did_abel_syn_inits = 1$/;"	v
did_acedb_syn_inits	.\vim73\syntax\acedb.vim	/^    let did_acedb_syn_inits = 1$/;"	v
did_aflex_syntax_inits	.\vim73\syntax\aflex.vim	/^      let did_aflex_syntax_inits = 1$/;"	v
did_ahdl_syn_inits	.\vim73\syntax\ahdl.vim	/^    let did_ahdl_syn_inits = 1$/;"	v
did_ahdl_syn_inits	.\vim73\syntax\ppd.vim	/^    let did_ahdl_syn_inits = 1$/;"	v
did_amiga_syn_inits	.\vim73\syntax\amiga.vim	/^    let did_amiga_syn_inits = 1$/;"	v
did_aml_syntax_inits	.\vim73\syntax\aml.vim	/^    let did_aml_syntax_inits = 1$/;"	v
did_ampl_syntax_inits	.\vim73\syntax\ampl.vim	/^    let did_ampl_syntax_inits = 1$/;"	v
did_antlr_syntax_inits	.\vim73\syntax\antlr.vim	/^      let did_antlr_syntax_inits = 1$/;"	v
did_apache_syntax_inits	.\vim73\syntax\apache.vim	/^		let did_apache_syntax_inits = 1$/;"	v
did_apachestyle_syn_inits	.\vim73\syntax\apachestyle.vim	/^    let did_apachestyle_syn_inits = 1$/;"	v
did_asm68k_syntax_inits	.\vim73\syntax\asm68k.vim	/^    let did_asm68k_syntax_inits = 1$/;"	v
did_asm_syntax_inits	.\vim73\syntax\asm.vim	/^    let did_asm_syntax_inits = 1$/;"	v
did_asn_syn_inits	.\vim73\syntax\asn.vim	/^    let did_asn_syn_inits = 1$/;"	v
did_aspvbs_syn_inits	.\vim73\syntax\aspvbs.vim	/^    let did_aspvbs_syn_inits = 1$/;"	v
did_atlas_syntax_inits	.\vim73\syntax\atlas.vim	/^    let did_atlas_syntax_inits = 1$/;"	v
did_automake_syntax_inits	.\vim73\syntax\automake.vim	/^    let did_automake_syntax_inits = 1$/;"	v
did_ave_syn_inits	.\vim73\syntax\ave.vim	/^	let did_ave_syn_inits = 1$/;"	v
did_awk_syn_inits	.\vim73\syntax\awk.vim	/^    let did_awk_syn_inits = 1$/;"	v
did_ayacc_syntax_inits	.\vim73\syntax\ayacc.vim	/^      let did_ayacc_syntax_inits = 1$/;"	v
did_b_syntax_inits	.\vim73\syntax\b.vim	/^      let did_b_syntax_inits = 1$/;"	v
did_baan_syn_inits	.\vim73\syntax\baan.vim	/^    let did_baan_syn_inits = 1$/;"	v
did_basic_syntax_inits	.\vim73\syntax\basic.vim	/^    let did_basic_syntax_inits = 1$/;"	v
did_bc_syntax_inits	.\vim73\syntax\bc.vim	/^    let did_bc_syntax_inits = 1$/;"	v
did_bib_syn_inits	.\vim73\syntax\bib.vim	/^    let did_bib_syn_inits = 1$/;"	v
did_bind_zone_syn_inits	.\vim73\syntax\bindzone.vim	/^    let did_bind_zone_syn_inits = 1$/;"	v
did_blank_syntax_inits	.\vim73\syntax\blank.vim	/^    let did_blank_syntax_inits = 1$/;"	v
did_bst_syn_inits	.\vim73\syntax\bst.vim	/^        let did_bst_syn_inits = 1$/;"	v
did_btm_syntax_inits	.\vim73\syntax\btm.vim	/^    let did_btm_syntax_inits = 1$/;"	v
did_bzr_syn_inits	.\vim73\syntax\bzr.vim	/^    let did_bzr_syn_inits = 1$/;"	v
did_c_syn_inits	.\vim73\syntax\pf.vim	/^    let did_c_syn_inits = 1$/;"	v
did_cabal_syn_inits	.\vim73\syntax\cabal.vim	/^    let did_cabal_syn_inits = 1$/;"	v
did_cabal_syn_inits	.\vim73\syntax\obj.vim	/^    let did_cabal_syn_inits = 1$/;"	v
did_cfg_syn_inits	.\vim73\syntax\cfg.vim	/^	let did_cfg_syn_inits = 1$/;"	v
did_ch_syntax_inits	.\vim73\syntax\ch.vim	/^    let did_ch_syntax_inits = 1$/;"	v
did_ch_syntax_inits	.\vim73\syntax\chill.vim	/^    let did_ch_syntax_inits = 1$/;"	v
did_change_syntax_inits	.\vim73\syntax\change.vim	/^    let did_change_syntax_inits = 1$/;"	v
did_changelog_syntax_inits	.\vim73\syntax\changelog.vim	/^    let did_changelog_syntax_inits = 1$/;"	v
did_cheetah_syn_inits	.\vim73\syntax\cheetah.vim	/^		let did_cheetah_syn_inits = 1$/;"	v
did_cl_syntax_inits	.\vim73\syntax\cl.vim	/^		let did_cl_syntax_inits = 1$/;"	v
did_clean_syntax_init	.\vim73\syntax\clean.vim	/^    let did_clean_syntax_init = 1$/;"	v
did_clipper_syntax_inits	.\vim73\syntax\clipper.vim	/^    let did_clipper_syntax_inits = 1$/;"	v
did_cmake_syntax_inits	.\vim73\syntax\cmake.vim	/^    let did_cmake_syntax_inits = 1$/;"	v
did_cobol_syntax_inits	.\vim73\syntax\cobol.vim	/^    let did_cobol_syntax_inits = 1$/;"	v
did_conf_syntax_inits	.\vim73\syntax\asterisk.vim	/^    let did_conf_syntax_inits = 1$/;"	v
did_conf_syntax_inits	.\vim73\syntax\asteriskvm.vim	/^    let did_conf_syntax_inits = 1$/;"	v
did_config_syntax_inits	.\vim73\syntax\config.vim	/^    let did_config_syntax_inits = 1$/;"	v
did_config_syntax_inits	.\vim73\syntax\fstab.vim	/^		let did_config_syntax_inits = 1$/;"	v
did_config_syntax_inits	.\vim73\syntax\resolv.vim	/^		let did_config_syntax_inits = 1$/;"	v
did_config_syntax_inits	.\vim73\syntax\sd.vim	/^                let did_config_syntax_inits = 1$/;"	v
did_cpp_syntax_inits	.\vim73\syntax\cpp.vim	/^    let did_cpp_syntax_inits = 1$/;"	v
did_crontab_syn_inits	.\vim73\syntax\crontab.vim	/^    let did_crontab_syn_inits = 1$/;"	v
did_csc_syntax_inits	.\vim73\syntax\cdl.vim	/^		let did_csc_syntax_inits = 1$/;"	v
did_csc_syntax_inits	.\vim73\syntax\csc.vim	/^		let did_csc_syntax_inits = 1$/;"	v
did_csh_syntax_inits	.\vim73\syntax\csh.vim	/^    let did_csh_syntax_inits = 1$/;"	v
did_csp_syn_inits	.\vim73\syntax\csp.vim	/^    let did_csp_syn_inits = 1$/;"	v
did_css_syn_inits	.\vim73\syntax\css.vim	/^    let did_css_syn_inits = 1$/;"	v
did_css_syn_inits	.\vim73\syntax\javacc.vim	/^    let did_css_syn_inits = 1$/;"	v
did_cterm_syntax_inits	.\vim73\syntax\cterm.vim	/^    let did_cterm_syntax_inits = 1$/;"	v
did_cupl_syn_inits	.\vim73\syntax\cupl.vim	/^    let did_cupl_syn_inits = 1$/;"	v
did_cuplsim_syn_inits	.\vim73\syntax\cuplsim.vim	/^    let did_cuplsim_syn_inits = 1$/;"	v
did_cvs_syn_inits	.\vim73\syntax\cvs.vim	/^		let did_cvs_syn_inits = 1$/;"	v
did_cweb_syntax_inits	.\vim73\syntax\cweb.vim	/^    let did_cweb_syntax_inits = 1$/;"	v
did_cynlib_syntax_inits	.\vim73\syntax\cynlib.vim	/^    let did_cynlib_syntax_inits = 1$/;"	v
did_cynpp_syntax_inits	.\vim73\syntax\cynpp.vim	/^    let did_cynpp_syntax_inits = 1$/;"	v
did_dcd_syntax_inits	.\vim73\syntax\dcd.vim	/^    let did_dcd_syntax_inits = 1$/;"	v
did_dcl_syntax_inits	.\vim73\syntax\dcl.vim	/^    let did_dcl_syntax_inits = 1$/;"	v
did_debchangelog_syn_inits	.\vim73\syntax\debchangelog.vim	/^    let did_debchangelog_syn_inits = 1$/;"	v
did_debcontrol_syn_inits	.\vim73\syntax\debcontrol.vim	/^    let did_debcontrol_syn_inits = 1$/;"	v
did_def_syntax_inits	.\vim73\syntax\def.vim	/^    let did_def_syntax_inits = 1$/;"	v
did_desc_syntax_inits	.\vim73\syntax\desc.vim	/^    let did_desc_syntax_inits = 1$/;"	v
did_diva_syntax_inits	.\vim73\syntax\diva.vim	/^		let did_diva_syntax_inits = 1$/;"	v
did_django_syn_inits	.\vim73\syntax\django.vim	/^    let did_django_syn_inits = 1$/;"	v
did_docbk_syn_inits	.\vim73\syntax\docbk.vim	/^    let did_docbk_syn_inits = 1$/;"	v
did_dosbatch_syntax_inits	.\vim73\syntax\dosbatch.vim	/^    let did_dosbatch_syntax_inits = 1$/;"	v
did_dosini_syntax_inits	.\vim73\syntax\desktop.vim	/^		let did_dosini_syntax_inits = 1$/;"	v
did_dosini_syntax_inits	.\vim73\syntax\dosini.vim	/^    let did_dosini_syntax_inits = 1$/;"	v
did_dot_syntax_inits	.\vim73\syntax\dot.vim	/^    let did_dot_syntax_inits = 1$/;"	v
did_dracula_syn_inits	.\vim73\syntax\dracula.vim	/^    let did_dracula_syn_inits = 1$/;"	v
did_drchip_netrwlist_syntax	.\vim73\syntax\netrw.vim	/^ let did_drchip_netrwlist_syntax= 1$/;"	v
did_drchip_tags_inits	.\vim73\syntax\tags.vim	/^    let did_drchip_tags_inits = 1$/;"	v
did_dtd_syn_inits	.\vim73\syntax\dtd.vim	/^	let did_dtd_syn_inits = 1$/;"	v
did_dtml_syntax_inits	.\vim73\syntax\dtml.vim	/^    let did_dtml_syntax_inits = 1$/;"	v
did_dummy_syn_inits	.\vim73\syntax\ist.vim	/^    let did_dummy_syn_inits = 1$/;"	v
did_dylan_intr_syntax_inits	.\vim73\syntax\dylanintr.vim	/^    let did_dylan_intr_syntax_inits = 1$/;"	v
did_dylan_lid_syntax_inits	.\vim73\syntax\dylanlid.vim	/^    let did_dylan_lid_syntax_inits = 1$/;"	v
did_dylan_syntax_inits	.\vim73\syntax\dylan.vim	/^    let did_dylan_syntax_inits = 1$/;"	v
did_ecd_syn_inits	.\vim73\syntax\ecd.vim	/^    let did_ecd_syn_inits = 1$/;"	v
did_edif_syntax_inits	.\vim73\syntax\edif.vim	/^    let did_edif_syntax_inits = 1$/;"	v
did_eiffel_syntax_inits	.\vim73\syntax\eiffel.vim	/^    let did_eiffel_syntax_inits = 1$/;"	v
did_elf_syn_inits	.\vim73\syntax\elf.vim	/^		let did_elf_syn_inits = 1$/;"	v
did_elmfilt_syntax_inits	.\vim73\syntax\elmfilt.vim	/^    let did_elmfilt_syntax_inits = 1$/;"	v
did_erlang_inits	.\vim73\syntax\erlang.vim	/^        let did_erlang_inits = 1$/;"	v
did_esqlc_syntax_inits	.\vim73\syntax\esqlc.vim	/^    let did_esqlc_syntax_inits = 1$/;"	v
did_esterel_syntax_inits	.\vim73\syntax\esterel.vim	/^    let did_esterel_syntax_inits = 1$/;"	v
did_exim_syntax_inits	.\vim73\syntax\exim.vim	/^		let did_exim_syntax_inits = 1$/;"	v
did_expect_syntax_inits	.\vim73\syntax\expect.vim	/^    let did_expect_syntax_inits = 1$/;"	v
did_exports_syntax_inits	.\vim73\syntax\exports.vim	/^    let did_exports_syntax_inits = 1$/;"	v
did_fdcc_syn_inits	.\vim73\syntax\fdcc.vim	/^    let did_fdcc_syn_inits = 1$/;"	v
did_fgl_syntax_inits	.\vim73\syntax\fgl.vim	/^    let did_fgl_syntax_inits = 1$/;"	v
did_focexec_syntax_inits	.\vim73\syntax\focexec.vim	/^    let did_focexec_syntax_inits = 1$/;"	v
did_form_syn_inits	.\vim73\syntax\form.vim	/^    let did_form_syn_inits = 1$/;"	v
did_forth_syn_inits	.\vim73\syntax\forth.vim	/^	let did_forth_syn_inits = 1$/;"	v
did_fortran_syn_inits	.\vim73\syntax\fortran.vim	/^    let did_fortran_syn_inits = 1$/;"	v
did_foxpro_syn_inits	.\vim73\syntax\foxpro.vim	/^	let did_foxpro_syn_inits = 1$/;"	v
did_gdb_syn_inits	.\vim73\syntax\gdb.vim	/^    let did_gdb_syn_inits = 1$/;"	v
did_gdmo_syntax_inits	.\vim73\syntax\gdmo.vim	/^    let did_gdmo_syntax_inits = 1$/;"	v
did_gedcom_syntax_inits	.\vim73\syntax\gedcom.vim	/^    let did_gedcom_syntax_inits = 1$/;"	v
did_gnuplot_syntax_inits	.\vim73\syntax\gnuplot.vim	/^    let did_gnuplot_syntax_inits = 1$/;"	v
did_gp_syn_inits	.\vim73\syntax\gp.vim	/^    let did_gp_syn_inits = 1$/;"	v
did_groovy_syn_inits	.\vim73\syntax\groovy.vim	/^    let did_groovy_syn_inits = 1$/;"	v
did_gs_syn_inits	.\vim73\syntax\grads.vim	/^	let did_gs_syn_inits = 1$/;"	v
did_gtkrc_syntax_inits	.\vim73\syntax\gkrellmrc.vim	/^		let did_gtkrc_syntax_inits = 1$/;"	v
did_gtkrc_syntax_inits	.\vim73\syntax\gtkrc.vim	/^		let did_gtkrc_syntax_inits = 1$/;"	v
did_hamster_syn_inits	.\vim73\syntax\hamster.vim	/^        let did_hamster_syn_inits = 1$/;"	v
did_hb_syntax_inits	.\vim73\syntax\hb.vim	/^    let did_hb_syntax_inits = 1$/;"	v
did_hercules_syntax_inits	.\vim73\syntax\hercules.vim	/^    let did_hercules_syntax_inits = 1$/;"	v
did_hex_syntax_inits	.\vim73\syntax\hex.vim	/^    let did_hex_syntax_inits = 1$/;"	v
did_hitachi_syntax_inits	.\vim73\syntax\asmh8300.vim	/^    let did_hitachi_syntax_inits = 1$/;"	v
did_hog_syn_inits	.\vim73\syntax\hog.vim	/^    let did_hog_syn_inits = 1$/;"	v
did_hs_syntax_inits	.\vim73\syntax\haskell.vim	/^    let did_hs_syntax_inits = 1$/;"	v
did_html_syn_inits	.\vim73\syntax\html.vim	/^    let did_html_syn_inits = 1$/;"	v
did_htmlos_syn_inits	.\vim73\syntax\htmlos.vim	/^    let did_htmlos_syn_inits = 1$/;"	v
did_ia64_syn_inits	.\vim73\syntax\ia64.vim	/^		let did_ia64_syn_inits = 1$/;"	v
did_icon_syn_inits	.\vim73\syntax\icon.vim	/^    let did_icon_syn_inits = 1$/;"	v
did_idl_syntax_inits	.\vim73\syntax\idl.vim	/^  let did_idl_syntax_inits = 1$/;"	v
did_idlang_syn_inits	.\vim73\syntax\idlang.vim	/^    let did_idlang_syn_inits = 1$/;"	v
did_indent_on	.\vim73\indent.vim	/^let did_indent_on = 1$/;"	v
did_inform_syn_inits	.\vim73\syntax\inform.vim	/^    let did_inform_syn_inits = 1$/;"	v
did_inittab_syntax_inits	.\vim73\syntax\inittab.vim	/^    let did_inittab_syntax_inits = 1$/;"	v
did_install_default_menus	.\vim73\menu.vim	/^let did_install_default_menus = 1$/;"	v
did_install_syntax_menu	.\vim73\menu.vim	/^  let did_install_syntax_menu = 1$/;"	v
did_is_syntax_inits	.\vim73\syntax\ishd.vim	/^    let did_is_syntax_inits = 1$/;"	v
did_iss_syntax_inits	.\vim73\syntax\iss.vim	/^    let did_iss_syntax_inits = 1$/;"	v
did_jal_syn_inits	.\vim73\syntax\jal.vim	/^  let did_jal_syn_inits = 1$/;"	v
did_jam_syn_inits	.\vim73\syntax\jam.vim	/^    let did_jam_syn_inits = 1$/;"	v
did_jargon_syntax_inits	.\vim73\syntax\jargon.vim	/^		let did_jargon_syntax_inits = 1$/;"	v
did_java_syn_inits	.\vim73\syntax\java.vim	/^    let did_java_syn_inits = 1$/;"	v
did_javascript_syn_inits	.\vim73\syntax\javascript.vim	/^    let did_javascript_syn_inits = 1$/;"	v
did_jess_syntax_inits	.\vim73\syntax\jess.vim	/^    let did_jess_syntax_inits = 1$/;"	v
did_jgraph_syn_inits	.\vim73\syntax\jgraph.vim	/^    let did_jgraph_syn_inits = 1$/;"	v
did_jproperties_syntax_inits	.\vim73\syntax\jproperties.vim	/^    let did_jproperties_syntax_inits = 1$/;"	v
did_jsp_syn_inits	.\vim73\syntax\jsp.vim	/^    let did_jsp_syn_inits = 1$/;"	v
did_kix_syn_inits	.\vim73\syntax\kix.vim	/^		let did_kix_syn_inits=1$/;"	v
did_kscript_syntax_inits	.\vim73\syntax\kscript.vim	/^    let did_kscript_syntax_inits = 1$/;"	v
did_kwt_syn_inits	.\vim73\syntax\kwt.vim	/^	let did_kwt_syn_inits = 1$/;"	v
did_lace_syntax_inits	.\vim73\syntax\lace.vim	/^    let did_lace_syntax_inits = 1$/;"	v
did_latte_syntax_inits	.\vim73\syntax\latte.vim	/^    let did_latte_syntax_inits = 1$/;"	v
did_ldif_syn_inits	.\vim73\syntax\ldif.vim	/^    let did_ldif_syn_inits = 1$/;"	v
did_lifelines_syn_inits	.\vim73\syntax\lifelines.vim	/^    let did_lifelines_syn_inits = 1$/;"	v
did_lilo_syntax_inits	.\vim73\syntax\lilo.vim	/^    let did_lilo_syntax_inits = 1$/;"	v
did_lite_syn_inits	.\vim73\syntax\lite.vim	/^    let did_lite_syn_inits = 1$/;"	v
did_load_filetypes	.\vim73\filetype.vim	/^let did_load_filetypes = 1$/;"	v
did_load_ftplugin	.\vim73\ftplugin.vim	/^let did_load_ftplugin = 1$/;"	v
did_logtalk_syn_inits	.\vim73\syntax\logtalk.vim	/^		let did_logtalk_syn_inits = 1$/;"	v
did_lotos_syntax_inits	.\vim73\syntax\lotos.vim	/^    let did_lotos_syntax_inits = 1$/;"	v
did_lout_syn_inits	.\vim73\syntax\lout.vim	/^		let did_lout_syn_inits = 1$/;"	v
did_lpc_syn_inits	.\vim73\syntax\lpc.vim	/^    let did_lpc_syn_inits = 1$/;"	v
did_lprolog_syntax_inits	.\vim73\syntax\lprolog.vim	/^    let did_lprolog_syntax_inits = 1$/;"	v
did_lscript_syntax_inits	.\vim73\syntax\lscript.vim	/^    let did_lscript_syntax_inits = 1$/;"	v
did_lss_syntax_inits	.\vim73\syntax\lss.vim	/^    let did_lss_syntax_inits = 1$/;"	v
did_lua_syntax_inits	.\vim73\syntax\lua.vim	/^    let did_lua_syntax_inits = 1$/;"	v
did_m4_syn_inits	.\vim73\syntax\m4.vim	/^    let did_m4_syn_inits = 1$/;"	v
did_macro_syntax_inits	.\vim73\syntax\vmasm.vim	/^    let did_macro_syntax_inits = 1$/;"	v
did_mailcap_syntax_inits	.\vim73\syntax\mailcap.vim	/^    let did_mailcap_syntax_inits = 1$/;"	v
did_make_syn_inits	.\vim73\syntax\make.vim	/^    let did_make_syn_inits = 1$/;"	v
did_man_syn_inits	.\vim73\syntax\man.vim	/^    let did_man_syn_inits = 1$/;"	v
did_maplev_syntax_inits	.\vim73\syntax\maple.vim	/^    let did_maplev_syntax_inits = 1$/;"	v
did_masm_syntax_inits	.\vim73\syntax\masm.vim	/^    let did_masm_syntax_inits = 1$/;"	v
did_mason_syn_inits	.\vim73\syntax\mason.vim	/^		let did_mason_syn_inits = 1$/;"	v
did_master_syntax_inits	.\vim73\syntax\master.vim	/^    let did_master_syntax_inits = 1$/;"	v
did_matlab_syntax_inits	.\vim73\syntax\matlab.vim	/^    let did_matlab_syntax_inits = 1$/;"	v
did_maxima_syntax_inits	.\vim73\syntax\maxima.vim	/^    let did_maxima_syntax_inits = 1$/;"	v
did_mel_syntax_inits	.\vim73\syntax\mel.vim	/^    let did_mel_syntax_inits = 1$/;"	v
did_menu_trans	.\vim73\lang\menu_af_af.latin1.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	.\vim73\lang\menu_ca_es.latin1.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	.\vim73\lang\menu_chinese_gb.936.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	.\vim73\lang\menu_chinese_taiwan.950.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	.\vim73\lang\menu_cs_cz.iso_8859-2.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	.\vim73\lang\menu_czech_czech_republic.1250.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	.\vim73\lang\menu_czech_czech_republic.ascii.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	.\vim73\lang\menu_de_de.latin1.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	.\vim73\lang\menu_en_gb.latin1.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	.\vim73\lang\menu_eo.utf-8.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	.\vim73\lang\menu_es_es.latin1.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	.\vim73\lang\menu_fi_fi.latin1.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	.\vim73\lang\menu_fr_fr.latin1.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	.\vim73\lang\menu_hu_hu.iso_8859-2.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	.\vim73\lang\menu_hu_hu.utf-8.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	.\vim73\lang\menu_it_it.latin1.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	.\vim73\lang\menu_ja_jp.euc-jp.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	.\vim73\lang\menu_ja_jp.utf-8.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	.\vim73\lang\menu_japanese_japan.932.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	.\vim73\lang\menu_ko_kr.euckr.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	.\vim73\lang\menu_ko_kr.utf-8.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	.\vim73\lang\menu_nl_nl.latin1.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	.\vim73\lang\menu_no_no.latin1.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	.\vim73\lang\menu_pl_pl.iso_8859-2.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	.\vim73\lang\menu_pl_pl.utf-8.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	.\vim73\lang\menu_polish_poland.1250.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	.\vim73\lang\menu_pt_br.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	.\vim73\lang\menu_pt_pt.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	.\vim73\lang\menu_ru_ru.koi8-r.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	.\vim73\lang\menu_ru_ru.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	.\vim73\lang\menu_sk_sk.iso_8859-2.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	.\vim73\lang\menu_sl_si.cp1250.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	.\vim73\lang\menu_sl_si.latin2.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	.\vim73\lang\menu_sl_si.utf-8.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	.\vim73\lang\menu_slovak_slovak_republic.1250.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	.\vim73\lang\menu_sr_rs.ascii.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	.\vim73\lang\menu_sr_rs.iso_8859-2.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	.\vim73\lang\menu_sr_rs.iso_8859-5.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	.\vim73\lang\menu_sr_rs.utf-8.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	.\vim73\lang\menu_sv_se.latin1.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	.\vim73\lang\menu_uk_ua.cp1251.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	.\vim73\lang\menu_uk_ua.koi8-u.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	.\vim73\lang\menu_vi_vn.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	.\vim73\lang\menu_zh_cn.gb2312.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	.\vim73\lang\menu_zh_cn.utf-8.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	.\vim73\lang\menu_zh_tw.utf-8.vim	/^let did_menu_trans = 1$/;"	v
did_mf_syntax_inits	.\vim73\syntax\mf.vim	/^    let did_mf_syntax_inits = 1$/;"	v
did_mgl_syn_inits	.\vim73\syntax\mgl.vim	/^    let did_mgl_syn_inits = 1$/;"	v
did_mgp_syn_inits	.\vim73\syntax\mgp.vim	/^    let did_mgp_syn_inits = 1$/;"	v
did_mgp_syn_inits	.\vim73\syntax\mgp.vim	/^  let did_mgp_syn_inits = 1$/;"	v
did_mma_syn_inits	.\vim73\syntax\mma.vim	/^		let did_mma_syn_inits = 1$/;"	v
did_mmix_syntax_inits	.\vim73\syntax\mmix.vim	/^    let did_mmix_syntax_inits = 1$/;"	v
did_mmp_syntax_inits	.\vim73\syntax\mmp.vim	/^  let did_mmp_syntax_inits=1$/;"	v
did_modsim3_syntax_inits	.\vim73\syntax\modsim3.vim	/^    let did_modsim3_syntax_inits = 1$/;"	v
did_modula2_syntax_inits	.\vim73\syntax\modula2.vim	/^    let did_modula2_syntax_inits = 1$/;"	v
did_modula3_syntax_inits	.\vim73\syntax\modula3.vim	/^    let did_modula3_syntax_inits = 1$/;"	v
did_monk_syntax_inits	.\vim73\syntax\monk.vim	/^    let did_monk_syntax_inits = 1$/;"	v
did_mp_syntax_inits	.\vim73\syntax\mp.vim	/^    let did_mp_syntax_inits = 1$/;"	v
did_msidl_syntax_inits	.\vim73\syntax\msidl.vim	/^    let did_msidl_syntax_inits = 1$/;"	v
did_msql_syn_inits	.\vim73\syntax\msql.vim	/^    let did_msql_syn_inits = 1$/;"	v
did_mupad_syntax_inits	.\vim73\syntax\mupad.vim	/^    let did_mupad_syntax_inits = 1$/;"	v
did_mush_syntax_inits	.\vim73\syntax\mush.vim	/^    let did_mush_syntax_inits = 1$/;"	v
did_muttrc_syntax_inits	.\vim73\syntax\muttrc.vim	/^    let did_muttrc_syntax_inits = 1$/;"	v
did_mysql_syn_inits	.\vim73\syntax\mysql.vim	/^    let did_mysql_syn_inits = 1$/;"	v
did_named_syn_inits	.\vim73\syntax\named.vim	/^    let did_named_syn_inits = 1$/;"	v
did_nasm_syntax_inits	.\vim73\syntax\nasm.vim	/^    let did_nasm_syntax_inits = 1$/;"	v
did_nastran_syntax_inits	.\vim73\syntax\nastran.vim	/^     let did_nastran_syntax_inits = 1$/;"	v
did_natural_syntax_inits	.\vim73\syntax\natural.vim	/^    let did_natural_syntax_inits = 1$/;"	v
did_ncf_syntax_inits	.\vim73\syntax\ncf.vim	/^	let did_ncf_syntax_inits = 1$/;"	v
did_nqc_syn_inits	.\vim73\syntax\nqc.vim	/^    let did_nqc_syn_inits = 1$/;"	v
did_nroff_syn_inits	.\vim73\syntax\nroff.vim	/^		let did_nroff_syn_inits = 1$/;"	v
did_nsys_syn_inits	.\vim73\syntax\nsis.vim	/^    let did_nsys_syn_inits = 1$/;"	v
did_objc_syntax_inits	.\vim73\syntax\objc.vim	/^    let did_objc_syntax_inits = 1$/;"	v
did_ocaml_syntax_inits	.\vim73\syntax\ocaml.vim	/^    let did_ocaml_syntax_inits = 1$/;"	v
did_occam_syntax_inits	.\vim73\syntax\occam.vim	/^    let did_occam_syntax_inits = 1$/;"	v
did_omnimark_syntax_inits	.\vim73\syntax\omnimark.vim	/^    let did_omnimark_syntax_inits = 1$/;"	v
did_openroad_syntax_inits	.\vim73\syntax\openroad.vim	/^		let did_openroad_syntax_inits = 1$/;"	v
did_optwin_syntax_inits	.\vim73\optwin.vim	/^    let did_optwin_syntax_inits = 1$/;"	v
did_ora_syn_inits	.\vim73\syntax\ora.vim	/^    let did_ora_syn_inits = 1$/;"	v
did_pascal_syn_inits	.\vim73\syntax\pascal.vim	/^    let did_pascal_syn_inits = 1$/;"	v
did_pcap_syntax_inits	.\vim73\syntax\pcap.vim	/^    let did_pcap_syntax_inits = 1$/;"	v
did_pccts_syntax_inits	.\vim73\syntax\pccts.vim	/^    let did_pccts_syntax_inits = 1$/;"	v
did_perl6_syntax_inits	.\vim73\syntax\perl6.vim	/^        let did_perl6_syntax_inits = 1$/;"	v
did_php_syn_inits	.\vim73\syntax\php.vim	/^    let did_php_syn_inits = 1$/;"	v
did_pic16f84_syntax_inits	.\vim73\syntax\pic.vim	/^    let did_pic16f84_syntax_inits = 1$/;"	v
did_pike_syntax_inits	.\vim73\syntax\pike.vim	/^    let did_pike_syntax_inits = 1$/;"	v
did_pilrc_syntax_inits	.\vim73\syntax\pilrc.vim	/^	let did_pilrc_syntax_inits = 1$/;"	v
did_pine_syn_inits	.\vim73\syntax\pine.vim	/^    let did_pine_syn_inits = 1$/;"	v
did_plm_syntax_inits	.\vim73\syntax\plm.vim	/^    let did_plm_syntax_inits = 1$/;"	v
did_plsql_syn_inits	.\vim73\syntax\plsql.vim	/^    let did_plsql_syn_inits = 1$/;"	v
did_po_syn_inits	.\vim73\syntax\po.vim	/^    let did_po_syn_inits = 1$/;"	v
did_pod_syntax_inits	.\vim73\syntax\pod.vim	/^    let did_pod_syntax_inits = 1$/;"	v
did_postscr_syntax_inits	.\vim73\syntax\postscr.vim	/^    let did_postscr_syntax_inits = 1$/;"	v
did_ppwiz_syn_inits	.\vim73\syntax\ppwiz.vim	/^		let did_ppwiz_syn_inits = 1$/;"	v
did_prescribe_syn_inits	.\vim73\syntax\prescribe.vim	/^    let did_prescribe_syn_inits = 1$/;"	v
did_procmail_syntax_inits	.\vim73\syntax\procmail.vim	/^    let did_procmail_syntax_inits = 1$/;"	v
did_progress_syntax_inits	.\vim73\syntax\progress.vim	/^	let did_progress_syntax_inits = 1$/;"	v
did_prolog_syn_inits	.\vim73\syntax\prolog.vim	/^    let did_prolog_syn_inits = 1$/;"	v
did_psf_syntax_inits	.\vim73\syntax\psf.vim	/^    let did_psf_syntax_inits = 1$/;"	v
did_ptcap_syntax_inits	.\vim73\syntax\ptcap.vim	/^	let did_ptcap_syntax_inits = 1$/;"	v
did_purifyLog_syntax_inits	.\vim73\syntax\purifylog.vim	/^    let did_purifyLog_syntax_inits = 1$/;"	v
did_pyrex_syntax_inits	.\vim73\syntax\pyrex.vim	/^    let did_pyrex_syntax_inits = 1$/;"	v
did_python_syn_inits	.\vim73\syntax\python.vim	/^    let did_python_syn_inits = 1$/;"	v
did_r_syn_inits	.\vim73\syntax\eviews.vim	/^    let did_r_syn_inits = 1$/;"	v
did_r_syn_inits	.\vim73\syntax\gretl.vim	/^    let did_r_syn_inits = 1$/;"	v
did_r_syn_inits	.\vim73\syntax\r.vim	/^    let did_r_syn_inits = 1$/;"	v
did_radiance_syn_inits	.\vim73\syntax\radiance.vim	/^    let did_radiance_syn_inits = 1$/;"	v
did_ratpoison_syn_inits	.\vim73\syntax\ratpoison.vim	/^    let did_ratpoison_syn_inits = 1$/;"	v
did_rc_syntax_inits	.\vim73\syntax\rc.vim	/^    let did_rc_syntax_inits = 1$/;"	v
did_rcs_syn_inits	.\vim73\syntax\rcs.vim	/^    let did_rcs_syn_inits = 1$/;"	v
did_rcslog_syntax_inits	.\vim73\syntax\rcslog.vim	/^    let did_rcslog_syntax_inits = 1$/;"	v
did_rebol_syntax_inits	.\vim73\syntax\rebol.vim	/^    let did_rebol_syntax_inits = 1$/;"	v
did_registry_syntax_inits	.\vim73\syntax\registry.vim	/^    let did_registry_syntax_inits = 1$/;"	v
did_remind_syn_inits	.\vim73\syntax\remind.vim	/^    let did_remind_syn_inits = 1$/;"	v
did_reva_syntax_inits	.\vim73\syntax\reva.vim	/^    let did_reva_syntax_inits=1$/;"	v
did_rexx_syn_inits	.\vim73\syntax\rexx.vim	/^    let did_rexx_syn_inits = 1$/;"	v
did_rhelp_syntax_inits	.\vim73\syntax\rhelp.vim	/^    let did_rhelp_syntax_inits = 1$/;"	v
did_rib_syntax_inits	.\vim73\syntax\rib.vim	/^    let did_rib_syntax_inits = 1$/;"	v
did_robots_syntax_inits	.\vim73\syntax\robots.vim	/^    let did_robots_syntax_inits = 1$/;"	v
did_rpcgen_syntax_inits	.\vim73\syntax\rpcgen.vim	/^    let did_rpcgen_syntax_inits = 1$/;"	v
did_rpl_syntax_inits	.\vim73\syntax\rpl.vim	/^    let did_rpl_syntax_inits = 1$/;"	v
did_rtf_syntax_inits	.\vim73\syntax\rtf.vim	/^    let did_rtf_syntax_inits = 1$/;"	v
did_samba_syn_inits	.\vim73\syntax\samba.vim	/^    let did_samba_syn_inits = 1$/;"	v
did_sas_syntax_inits	.\vim73\syntax\sas.vim	/^      let did_sas_syntax_inits = 1$/;"	v
did_sather_syn_inits	.\vim73\syntax\sather.vim	/^    let did_sather_syn_inits = 1$/;"	v
did_scheme_syntax_inits	.\vim73\syntax\scheme.vim	/^    let did_scheme_syntax_inits = 1$/;"	v
did_scilab_syntax_inits	.\vim73\syntax\scilab.vim	/^		let did_scilab_syntax_inits = 1$/;"	v
did_sdl_syn_inits	.\vim73\syntax\sdl.vim	/^	let did_sdl_syn_inits = 1$/;"	v
did_sed_syntax_inits	.\vim73\syntax\sed.vim	/^	let did_sed_syntax_inits = 1$/;"	v
did_sgmldecl_syntax_init	.\vim73\syntax\sgmldecl.vim	/^    let did_sgmldecl_syntax_init = 1$/;"	v
did_sgmllnx_syn_inits	.\vim73\syntax\sgmllnx.vim	/^    let did_sgmllnx_syn_inits = 1$/;"	v
did_sicad_syntax_inits	.\vim73\syntax\sicad.vim	/^    let did_sicad_syntax_inits = 1$/;"	v
did_simula_syntax_inits	.\vim73\syntax\simula.vim	/^	let did_simula_syntax_inits = 1$/;"	v
did_sinda_syntax_inits	.\vim73\syntax\sinda.vim	/^    let did_sinda_syntax_inits = 1$/;"	v
did_sindacmp_syntax_inits	.\vim73\syntax\sindacmp.vim	/^    let did_sindacmp_syntax_inits = 1$/;"	v
did_sindaout_syntax_inits	.\vim73\syntax\sindaout.vim	/^    let did_sindaout_syntax_inits = 1$/;"	v
did_skill_syntax_inits	.\vim73\syntax\skill.vim	/^    let did_skill_syntax_inits = 1$/;"	v
did_sl_syntax_inits	.\vim73\syntax\sl.vim	/^    let did_sl_syntax_inits = 1$/;"	v
did_slang_syntax_inits	.\vim73\syntax\slang.vim	/^    let did_slang_syntax_inits = 1$/;"	v
did_slice_syn_inits	.\vim73\syntax\slice.vim	/^    let did_slice_syn_inits = 1$/;"	v
did_slrnrc_syntax_inits	.\vim73\syntax\slrnrc.vim	/^    let did_slrnrc_syntax_inits = 1$/;"	v
did_slrnsc_syntax_inits	.\vim73\syntax\slrnsc.vim	/^    let did_slrnsc_syntax_inits = 1$/;"	v
did_smarty_syn_inits	.\vim73\syntax\smarty.vim	/^    let did_smarty_syn_inits = 1$/;"	v
did_smil_syntax_inits	.\vim73\syntax\sm.vim	/^    let did_smil_syntax_inits = 1$/;"	v
did_smil_syntax_inits	.\vim73\syntax\smil.vim	/^    let did_smil_syntax_inits = 1$/;"	v
did_smith_syntax_inits	.\vim73\syntax\smith.vim	/^    let did_smith_syntax_inits = 1$/;"	v
did_sml_syntax_inits	.\vim73\syntax\sml.vim	/^    let did_sml_syntax_inits = 1$/;"	v
did_snnsnet_syn_inits	.\vim73\syntax\snnsnet.vim	/^    let did_snnsnet_syn_inits = 1$/;"	v
did_snnspat_syn_inits	.\vim73\syntax\snnspat.vim	/^    let did_snnspat_syn_inits = 1$/;"	v
did_snnsres_syn_inits	.\vim73\syntax\snnsres.vim	/^    let did_snnsres_syn_inits = 1$/;"	v
did_snobol4_syntax_inits	.\vim73\syntax\snobol4.vim	/^    let did_snobol4_syntax_inits = 1$/;"	v
did_spec_syntax_inits	.\vim73\syntax\spec.vim	/^    let did_spec_syntax_inits = 1$/;"	v
did_specman_syn_inits	.\vim73\syntax\specman.vim	/^    let did_specman_syn_inits = 1$/;"	v
did_spice_syntax_inits	.\vim73\syntax\spice.vim	/^    let did_spice_syntax_inits = 1$/;"	v
did_splint_syntax_inits	.\vim73\syntax\splint.vim	/^    let did_splint_syntax_inits = 1$/;"	v
did_spup_syn_inits	.\vim73\syntax\spup.vim	/^		let did_spup_syn_inits = 1$/;"	v
did_sql_syn_inits	.\vim73\syntax\sqlanywhere.vim	/^        let did_sql_syn_inits = 1$/;"	v
did_sql_syn_inits	.\vim73\syntax\sqlinformix.vim	/^    let did_sql_syn_inits = 1$/;"	v
did_sql_syn_inits	.\vim73\syntax\sqloracle.vim	/^    let did_sql_syn_inits = 1$/;"	v
did_sqlforms_syn_inits	.\vim73\syntax\sqlforms.vim	/^	let did_sqlforms_syn_inits = 1$/;"	v
did_sqlj_syn_inits	.\vim73\syntax\sqlj.vim	/^    let did_sqlj_syn_inits = 1$/;"	v
did_sqr_syn_inits	.\vim73\syntax\sqr.vim	/^    let did_sqr_syn_inits = 1$/;"	v
did_squid_syntax_inits	.\vim73\syntax\squid.vim	/^    let did_squid_syntax_inits = 1$/;"	v
did_sshconfig_syntax_inits	.\vim73\syntax\sshconfig.vim	/^    let did_sshconfig_syntax_inits = 1$/;"	v
did_sshdconfig_syntax_inits	.\vim73\syntax\sshdconfig.vim	/^    let did_sshdconfig_syntax_inits = 1$/;"	v
did_st_syntax_inits	.\vim73\syntax\st.vim	/^    let did_st_syntax_inits = 1$/;"	v
did_stp_syn_inits	.\vim73\syntax\stp.vim	/^    let did_stp_syn_inits = 1$/;"	v
did_strace_syntax_inits	.\vim73\syntax\strace.vim	/^		let did_strace_syntax_inits = 1$/;"	v
did_svn_syn_inits	.\vim73\syntax\svn.vim	/^    let did_svn_syn_inits = 1$/;"	v
did_tads_syn_inits	.\vim73\syntax\tads.vim	/^    let did_tads_syn_inits = 1$/;"	v
did_tak_syntax_inits	.\vim73\syntax\tak.vim	/^    let did_tak_syntax_inits = 1$/;"	v
did_takcmp_syntax_inits	.\vim73\syntax\takcmp.vim	/^    let did_takcmp_syntax_inits = 1$/;"	v
did_takout_syntax_inits	.\vim73\syntax\takout.vim	/^    let did_takout_syntax_inits = 1$/;"	v
did_tasm_syntax_inits	.\vim73\syntax\tasm.vim	/^    let did_tasm_syntax_inits = 1$/;"	v
did_tcl_syntax_inits	.\vim73\syntax\tcl.vim	/^    let did_tcl_syntax_inits = 1$/;"	v
did_tex_syntax_inits	.\vim73\syntax\lhaskell.vim	/^    let did_tex_syntax_inits = 1$/;"	v
did_tex_syntax_inits	.\vim73\syntax\tex.vim	/^ let did_tex_syntax_inits = 1$/;"	v
did_tex_syntax_inits	.\vim73\syntax\tex.vim	/^ let did_tex_syntax_inits= 2$/;"	v
did_texinfo_syn_inits	.\vim73\syntax\texinfo.vim	/^    let did_texinfo_syn_inits = 1$/;"	v
did_texmf_syntax_inits	.\vim73\syntax\texmf.vim	/^    let did_texmf_syntax_inits = 1$/;"	v
did_tf_syn_inits	.\vim73\syntax\tf.vim	/^    let did_tf_syn_inits = 1$/;"	v
did_tidy_syn_inits	.\vim73\syntax\tidy.vim	/^    let did_tidy_syn_inits = 1$/;"	v
did_tli_syntax_inits	.\vim73\syntax\tli.vim	/^    let did_tli_syntax_inits = 1$/;"	v
did_toolbar_tmenu	.\vim73\menu.vim	/^  let did_toolbar_tmenu = 1$/;"	v
did_tpp_syn_inits	.\vim73\syntax\tpp.vim	/^    let did_tpp_syn_inits = 1$/;"	v
did_trasys_syntax_inits	.\vim73\syntax\trasys.vim	/^    let did_trasys_syntax_inits = 1$/;"	v
did_tsalt_syntax_inits	.\vim73\syntax\tsalt.vim	/^    let did_tsalt_syntax_inits = 1$/;"	v
did_tsscl_syntax_inits	.\vim73\syntax\tsscl.vim	/^    let did_tsscl_syntax_inits = 1$/;"	v
did_tssgm_syntax_inits	.\vim73\syntax\tssgm.vim	/^    let did_tssgm_syntax_inits = 1$/;"	v
did_tssop_syntax_inits	.\vim73\syntax\tssop.vim	/^    let did_tssop_syntax_inits = 1$/;"	v
did_uc_syntax_inits	.\vim73\syntax\uc.vim	/^    let did_uc_syntax_inits = 1$/;"	v
did_uil_syn_inits	.\vim73\syntax\uil.vim	/^    let did_uil_syn_inits = 1$/;"	v
did_vb_syntax_inits	.\vim73\syntax\vb.vim	/^		let did_vb_syntax_inits = 1$/;"	v
did_vera_syn_inits	.\vim73\syntax\vera.vim	/^    let did_vera_syn_inits = 1$/;"	v
did_verilog_syn_inits	.\vim73\syntax\verilog.vim	/^      let did_verilog_syn_inits = 1$/;"	v
did_verilogams_syn_inits	.\vim73\syntax\verilogams.vim	/^      let did_verilogams_syn_inits = 1$/;"	v
did_vhdl_syntax_inits	.\vim73\syntax\vhdl.vim	/^    let did_vhdl_syntax_inits = 1$/;"	v
did_virata_syntax_inits	.\vim73\syntax\virata.vim	/^    let did_virata_syntax_inits = 1$/;"	v
did_vsejcl_syntax	.\vim73\syntax\vsejcl.vim	/^    let did_vsejcl_syntax = 1$/;"	v
did_wdiff_syn_inits	.\vim73\syntax\wdiff.vim	/^    let did_wdiff_syn_inits = 1$/;"	v
did_wdiff_syn_inits	.\vim73\syntax\wdiff.vim	/^  let did_wdiff_syn_inits = 1$/;"	v
did_webmacro_syn_inits	.\vim73\syntax\webmacro.vim	/^    let did_webmacro_syn_inits = 1$/;"	v
did_wget_syn_inits	.\vim73\syntax\wget.vim	/^    let did_wget_syn_inits = 1$/;"	v
did_winbatch_syntax_inits	.\vim73\syntax\winbatch.vim	/^    let did_winbatch_syntax_inits = 1$/;"	v
did_wml_syn_inits	.\vim73\syntax\wml.vim	/^    let did_wml_syn_inits = 1$/;"	v
did_wml_syn_inits	.\vim73\syntax\wml.vim	/^  let did_wml_syn_inits = 1$/;"	v
did_wsml_syn_inits	.\vim73\syntax\wsml.vim	/^       let did_wsml_syn_inits = 1$/;"	v
did_xdefaults_syntax_inits	.\vim73\syntax\xdefaults.vim	/^    let did_xdefaults_syntax_inits = 1$/;"	v
did_xkb_syntax_inits	.\vim73\syntax\xkb.vim	/^		let did_xkb_syntax_inits = 1$/;"	v
did_xmath_syntax_inits	.\vim73\syntax\xmath.vim	/^    let did_xmath_syntax_inits = 1$/;"	v
did_xpm2_syntax_inits	.\vim73\syntax\xpm2.vim	/^    let did_xpm2_syntax_inits = 1$/;"	v
did_xpm_syntax_inits	.\vim73\syntax\xpm.vim	/^    let did_xpm_syntax_inits = 1$/;"	v
did_xxd_syntax_inits	.\vim73\syntax\xxd.vim	/^    let did_xxd_syntax_inits = 1$/;"	v
did_z8a_syntax_inits	.\vim73\syntax\z8a.vim	/^    let did_z8a_syntax_inits = 1$/;"	v
diffcomplete	.\vim73\ftplugin\gitcommit.vim	/^function! s:diffcomplete(A,L,P)$/;"	f
directive	.\ctags58\get.c	/^	} directive;$/;"	m	struct:sCppState	typeref:struct:sCppState::sDirective	file:	access:public
directiveDefine	.\ctags58\get.c	/^static void directiveDefine (const int c)$/;"	f	file:	signature:(const int c)
directiveHash	.\ctags58\get.c	/^static boolean directiveHash (const int c)$/;"	f	file:	signature:(const int c)
directiveIf	.\ctags58\get.c	/^static boolean directiveIf (const int c)$/;"	f	file:	signature:(const int c)
directivePragma	.\ctags58\get.c	/^static void directivePragma (int c)$/;"	f	file:	signature:(int c)
directory	.\ctags58\entry.h	/^	char *directory;$/;"	m	struct:eTagFile	access:public
dirent	.\ctags58\e_mac.h	/^struct dirent {$/;"	s
dirent::d_name	.\ctags58\e_mac.h	/^	char d_name[64];$/;"	m	struct:dirent	access:public
dirtySpecialParam	.\ctags58\ocaml.c	/^static boolean dirtySpecialParam = FALSE;$/;"	v	file:
disableLanguageKinds	.\ctags58\parse.c	/^static void disableLanguageKinds (const langType language)$/;"	f	file:	signature:(const langType language)
disableRegexKinds	.\ctags58\lregex.c	/^extern void disableRegexKinds (const langType language __unused__)$/;"	f	signature:(const langType language __unused__)
disableRegexKinds	.\ctags58\parse.h	/^extern void disableRegexKinds (const langType language);$/;"	p	signature:(const langType language)
discardTypeList	.\ctags58\c.c	/^static void discardTypeList (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
display_neco	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\commands.vim	/^function! s:display_neco(number) "{{{$/;"	f
dispose	.\vimfiles\bundle\command-t\ruby\command-t\prompt.rb	/^    def dispose$/;"	f	class:CommandT.Prompt
do_install	.\vimfiles\bundle\command-t\vendor\vimball\vimball.rb	/^    def do_install(file)$/;"	f
do_list	.\vimfiles\bundle\command-t\vendor\vimball\vimball.rb	/^    def do_list(file)$/;"	f
do_vba	.\vimfiles\bundle\command-t\vendor\vimball\vimball.rb	/^    def do_vba(recipe)$/;"	f
doc_dict.search	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\include_complete.vim	/^function! s:doc_dict.search(cur_text) "{{{$/;"	f
doc_dict.search	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! s:doc_dict.search(cur_text) "{{{$/;"	f
dodigits	.\vim73\ftplugin\pdf.vim	/^function! s:dodigits(digits)$/;"	f
doesFileExist	.\ctags58\routines.c	/^extern boolean doesFileExist (const char *const fileName)$/;"	f	signature:(const char *const fileName)
doesFileExist	.\ctags58\routines.h	/^extern boolean doesFileExist (const char *const fileName);$/;"	p	signature:(const char *const fileName)
dolu	.\vim73\tutor\tutor.cs	/^  2. Dr¾ klávesu pro pohyb dolu (j), dokud se její funkce nezopakuje.$/;"	m	signature:(j)
doobject	.\vim73\ftplugin\pdf.vim	/^function! s:doobject(string)$/;"	f
dosbatch_cmdextversion	.\vim73\syntax\dosbatch.vim	/^  let dosbatch_cmdextversion = 2$/;"	v
dot_file	.\vimfiles\bundle\command-t\ruby\command-t\match.c	/^    int     dot_file;               \/\/ boolean: true if str is a dot-file$/;"	m	struct:__anon89	file:	access:public
doubletriple	.\ctags58\python.c	/^static char const * const doubletriple = "\\"\\"\\"";$/;"	v	file:
doxygengroup	.\vim73\syntax\doxygen.vim	/^    aug doxygengroup$/;"	a
dprint	.\vim73\autoload\rubycomplete.vim	/^function! s:dprint(msg)$/;"	f
dtd_cpo_save__	.\vim73\syntax\dtd.vim	/^    let __dtd_cpo_save__ = &cpo$/;"	v
dump_failure	.\vimfiles\bundle\command-t\spec\vim_formatter.rb	/^        def dump_failure counter, failure$/;"	f	class:Spec.Runner.Formatter.VimFormatter
dump_pending	.\vimfiles\bundle\command-t\spec\vim_formatter.rb	/^        def dump_pending; end$/;"	f	class:Spec.Runner.Formatter.VimFormatter
dump_summary	.\vimfiles\bundle\command-t\spec\vim_formatter.rb	/^        def dump_summary duration, example_count, failure_count, pending_count$/;"	f	class:Spec.Runner.Formatter.VimFormatter
duplicate	.\ctags58\readtags.c	/^static char *duplicate (const char *str)$/;"	f	file:	signature:(const char *str)
duplicate_node	.\ctags58\gnu_regex\regcomp.c	/^duplicate_node (re_dfa_t *dfa, int org_idx, unsigned int constraint)$/;"	f	file:	signature:(re_dfa_t *dfa, int org_idx, unsigned int constraint)
duplicate_node	.\ctags58\gnu_regex\regcomp.c	/^static int duplicate_node (re_dfa_t *dfa, int org_idx, unsigned int constraint);$/;"	p	file:	signature:(re_dfa_t *dfa, int org_idx, unsigned int constraint)
duplicate_node_closure	.\ctags58\gnu_regex\regcomp.c	/^duplicate_node_closure (re_dfa_t *dfa, int top_org_node, int top_clone_node,$/;"	f	file:	signature:(re_dfa_t *dfa, int top_org_node, int top_clone_node, int root_node, unsigned int init_constraint)
duplicate_tree	.\ctags58\gnu_regex\regcomp.c	/^duplicate_tree (const bin_tree_t *root, re_dfa_t *dfa)$/;"	f	file:	signature:(const bin_tree_t *root, re_dfa_t *dfa)
duplicate_tree	.\ctags58\gnu_regex\regcomp.c	/^static bin_tree_t *duplicate_tree (const bin_tree_t *src, re_dfa_t *dfa);$/;"	p	file:	signature:(const bin_tree_t *src, re_dfa_t *dfa)
duplicated	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned int duplicated : 1;$/;"	m	struct:__anon31	access:public
e	.\vim73\macros\hanoi\hanoi.vim	/^map e "fy2l$/;"	m
e	.\vim73\macros\less.vim	/^map e <CR>$/;"	m
eAwkKinds	.\ctags58\awk.c	/^typedef enum eAwkKinds {$/;"	g	file:
eCalloc	.\ctags58\routines.c	/^extern void *eCalloc (const size_t count, const size_t size)$/;"	f	signature:(const size_t count, const size_t size)
eCalloc	.\ctags58\routines.h	/^extern void *eCalloc (const size_t count, const size_t size);$/;"	p	signature:(const size_t count, const size_t size)
eCharacters	.\ctags58\read.h	/^enum eCharacters {$/;"	g
eCppLimits	.\ctags58\get.c	/^enum eCppLimits {$/;"	g	file:
eDebugLevels	.\ctags58\debug.h	/^enum eDebugLevels {$/;"	g
eDeclaration	.\ctags58\c.c	/^typedef enum eDeclaration {$/;"	g	file:
eErrorTypes	.\ctags58\routines.h	/^enum eErrorTypes { FATAL = 1, WARNING = 2, PERROR = 4 };$/;"	g
eException	.\ctags58\c.c	/^typedef enum eException {$/;"	g	file:
eException	.\ctags58\eiffel.c	/^typedef enum eException { ExceptionNone, ExceptionEOF } exception_t;$/;"	g	file:
eException	.\ctags58\flex.c	/^typedef enum eException { ExceptionNone, ExceptionEOF } exception_t;$/;"	g	file:
eException	.\ctags58\fortran.c	/^typedef enum eException {$/;"	g	file:
eException	.\ctags58\jscript.c	/^typedef enum eException { ExceptionNone, ExceptionEOF } exception_t;$/;"	g	file:
eException	.\ctags58\sql.c	/^typedef enum eException { ExceptionNone, ExceptionEOF } exception_t;$/;"	g	file:
eException	.\ctags58\tex.c	/^typedef enum eException { ExceptionNone, ExceptionEOF } exception_t;$/;"	g	file:
eException	.\ctags58\verilog.c	/^typedef enum eException { ExceptionNone, ExceptionEOF } exception_t;$/;"	g	file:
eException	.\ctags58\vhdl.c	/^typedef enum eException { ExceptionNone, ExceptionEOF } exception_t;$/;"	g	file:
eFortranLineType	.\ctags58\fortran.c	/^typedef enum eFortranLineType {$/;"	g	file:
eFree	.\ctags58\routines.c	/^extern void eFree (void *const ptr)$/;"	f	signature:(void *const ptr)
eFree	.\ctags58\routines.h	/^extern void eFree (void *const ptr);$/;"	p	signature:(void *const ptr)
eImplementation	.\ctags58\c.c	/^typedef enum eImplementation {$/;"	g	file:
eKeywordId	.\ctags58\c.c	/^typedef enum eKeywordId {$/;"	g	file:
eKeywordId	.\ctags58\eiffel.c	/^typedef enum eKeywordId {$/;"	g	file:
eKeywordId	.\ctags58\flex.c	/^typedef enum eKeywordId {$/;"	g	file:
eKeywordId	.\ctags58\fortran.c	/^typedef enum eKeywordId {$/;"	g	file:
eKeywordId	.\ctags58\jscript.c	/^typedef enum eKeywordId {$/;"	g	file:
eKeywordId	.\ctags58\sql.c	/^typedef enum eKeywordId {$/;"	g	file:
eKeywordId	.\ctags58\tex.c	/^typedef enum eKeywordId {$/;"	g	file:
eKeywordId	.\ctags58\vhdl.c	/^typedef enum eKeywordId {$/;"	g	file:
eLocate	.\ctags58\options.h	/^typedef enum eLocate {$/;"	g
eMalloc	.\ctags58\routines.c	/^extern void *eMalloc (const size_t size)$/;"	f	signature:(const size_t size)
eMalloc	.\ctags58\routines.h	/^extern void *eMalloc (const size_t size);$/;"	p	signature:(const size_t size)
eOptionLimits	.\ctags58\options.c	/^enum eOptionLimits {$/;"	g	file:
eRealloc	.\ctags58\routines.c	/^extern void *eRealloc (void *const ptr, const size_t size)$/;"	f	signature:(void *const ptr, const size_t size)
eRealloc	.\ctags58\routines.h	/^extern void *eRealloc (void *const ptr, const size_t size);$/;"	p	signature:(void *const ptr, const size_t size)
eStat	.\ctags58\routines.c	/^extern fileStatus *eStat (const char *const fileName)$/;"	f	signature:(const char *const fileName)
eStat	.\ctags58\routines.h	/^extern fileStatus *eStat (const char *const fileName);$/;"	p	signature:(const char *const fileName)
eStatFree	.\ctags58\routines.c	/^extern void eStatFree (fileStatus *status)$/;"	f	signature:(fileStatus *status)
eStatFree	.\ctags58\routines.h	/^extern void eStatFree (fileStatus *status);$/;"	p	signature:(fileStatus *status)
eState	.\ctags58\get.c	/^enum eState {$/;"	g	file:
eStrdup	.\ctags58\routines.c	/^extern char* eStrdup (const char* str)$/;"	f	signature:(const char* str)
eStrdup	.\ctags58\routines.h	/^extern char* eStrdup (const char* str);$/;"	p	signature:(const char* str)
eTagFile	.\ctags58\entry.h	/^typedef struct eTagFile {$/;"	s
eTagFile::directory	.\ctags58\entry.h	/^	char *directory;$/;"	m	struct:eTagFile	access:public
eTagFile::etags	.\ctags58\entry.h	/^	} etags;$/;"	m	struct:eTagFile	typeref:struct:eTagFile::sEtags	access:public
eTagFile::fp	.\ctags58\entry.h	/^	FILE *fp;$/;"	m	struct:eTagFile	access:public
eTagFile::max	.\ctags58\entry.h	/^	struct sMax { size_t line, tag, file; } max;$/;"	m	struct:eTagFile	typeref:struct:eTagFile::sMax	access:public
eTagFile::name	.\ctags58\entry.h	/^	char *name;$/;"	m	struct:eTagFile	access:public
eTagFile::numTags	.\ctags58\entry.h	/^	struct sNumTags { unsigned long added, prev; } numTags;$/;"	m	struct:eTagFile	typeref:struct:eTagFile::sNumTags	access:public
eTagFile::sEtags	.\ctags58\entry.h	/^	struct sEtags {$/;"	s	struct:eTagFile	access:public
eTagFile::sEtags::byteCount	.\ctags58\entry.h	/^		size_t byteCount;$/;"	m	struct:eTagFile::sEtags	access:public
eTagFile::sEtags::fp	.\ctags58\entry.h	/^		FILE *fp;$/;"	m	struct:eTagFile::sEtags	access:public
eTagFile::sEtags::name	.\ctags58\entry.h	/^		char *name;$/;"	m	struct:eTagFile::sEtags	access:public
eTagFile::sMax	.\ctags58\entry.h	/^	struct sMax { size_t line, tag, file; } max;$/;"	s	struct:eTagFile	access:public
eTagFile::sMax::file	.\ctags58\entry.h	/^	struct sMax { size_t line, tag, file; } max;$/;"	m	struct:eTagFile::sMax	access:public
eTagFile::sMax::line	.\ctags58\entry.h	/^	struct sMax { size_t line, tag, file; } max;$/;"	m	struct:eTagFile::sMax	access:public
eTagFile::sMax::tag	.\ctags58\entry.h	/^	struct sMax { size_t line, tag, file; } max;$/;"	m	struct:eTagFile::sMax	access:public
eTagFile::sNumTags	.\ctags58\entry.h	/^	struct sNumTags { unsigned long added, prev; } numTags;$/;"	s	struct:eTagFile	access:public
eTagFile::sNumTags::added	.\ctags58\entry.h	/^	struct sNumTags { unsigned long added, prev; } numTags;$/;"	m	struct:eTagFile::sNumTags	access:public
eTagFile::sNumTags::prev	.\ctags58\entry.h	/^	struct sNumTags { unsigned long added, prev; } numTags;$/;"	m	struct:eTagFile::sNumTags	access:public
eTagFile::vLine	.\ctags58\entry.h	/^	vString *vLine;$/;"	m	struct:eTagFile	access:public
eTagScope	.\ctags58\c.c	/^typedef enum eTagScope {$/;"	g	file:
eTagType	.\ctags58\c.c	/^typedef enum eTagType {$/;"	g	file:
eTagType	.\ctags58\fortran.c	/^typedef enum eTagType {$/;"	g	file:
eTokenType	.\ctags58\c.c	/^typedef enum eTokenType {$/;"	g	file:
eTokenType	.\ctags58\eiffel.c	/^typedef enum eTokenType {$/;"	g	file:
eTokenType	.\ctags58\flex.c	/^typedef enum eTokenType {$/;"	g	file:
eTokenType	.\ctags58\fortran.c	/^typedef enum eTokenType {$/;"	g	file:
eTokenType	.\ctags58\jscript.c	/^typedef enum eTokenType {$/;"	g	file:
eTokenType	.\ctags58\sql.c	/^typedef enum eTokenType {$/;"	g	file:
eTokenType	.\ctags58\tex.c	/^typedef enum eTokenType {$/;"	g	file:
eTokenType	.\ctags58\vhdl.c	/^typedef enum eTokenType {$/;"	g	file:
eVisibilityType	.\ctags58\c.c	/^typedef enum eVisibilityType {$/;"	g	file:
eatComment	.\ctags58\ocaml.c	/^static void eatComment (lexingState * st)$/;"	f	file:	signature:(lexingState * st)
eatNumber	.\ctags58\ocaml.c	/^static ocamlKeyword eatNumber (lexingState * st)$/;"	f	file:	signature:(lexingState * st)
eatOperator	.\ctags58\ocaml.c	/^static ocamlKeyword eatOperator (lexingState * st)$/;"	f	file:	signature:(lexingState * st)
eatString	.\ctags58\ocaml.c	/^static void eatString (lexingState * st)$/;"	f	file:	signature:(lexingState * st)
eatWhiteSpace	.\ctags58\ocaml.c	/^static void eatWhiteSpace (lexingState * st)$/;"	f	file:	signature:(lexingState * st)
echogets	.\vim73\tools\ccfilter.c	/^char *echogets(char *s, int echo) {$/;"	f	signature:(char *s, int echo)
eclosures	.\ctags58\gnu_regex\regex_internal.h	/^  re_node_set *eclosures;$/;"	m	struct:re_dfa_t	access:public
edests	.\ctags58\gnu_regex\regex_internal.h	/^  re_node_set *edests;$/;"	m	struct:re_dfa_t	access:public
eflags	.\ctags58\gnu_regex\regex_internal.h	/^  int eflags;$/;"	m	struct:__anon36	access:public
eiffelKind	.\ctags58\eiffel.c	/^} eiffelKind;$/;"	t	typeref:enum:__anon16	file:
elems	.\ctags58\gnu_regex\regex_internal.h	/^  int *elems;$/;"	m	struct:__anon28	access:public
emitRubyTag	.\ctags58\ruby.c	/^static void emitRubyTag (vString* name, rubyKind kind)$/;"	f	file:	signature:(vString* name, rubyKind kind)
enableLanguage	.\ctags58\parse.c	/^extern void enableLanguage (const langType language, const boolean state)$/;"	f	signature:(const langType language, const boolean state)
enableLanguage	.\ctags58\parse.h	/^extern void enableLanguage (const langType language, const boolean state);$/;"	p	signature:(const langType language, const boolean state)
enableLanguageKind	.\ctags58\parse.c	/^static boolean enableLanguageKind ($/;"	f	file:	signature:( const langType language, const int kind, const boolean mode)
enableLanguages	.\ctags58\parse.c	/^extern void enableLanguages (const boolean state)$/;"	f	signature:(const boolean state)
enableLanguages	.\ctags58\parse.h	/^extern void enableLanguages (const boolean state);$/;"	p	signature:(const boolean state)
enableRegexKind	.\ctags58\lregex.c	/^extern boolean enableRegexKind ($/;"	f	signature:( const langType language __unused__, const int kind __unused__, const boolean mode __unused__)
enableRegexKind	.\ctags58\parse.h	/^extern boolean enableRegexKind (const langType language, const int kind, const boolean mode);$/;"	p	signature:(const langType language, const int kind, const boolean mode)
enabled	.\ctags58\lregex.c	/^	boolean enabled;$/;"	m	struct:sKind	file:	access:public
enabled	.\ctags58\parse.h	/^	boolean enabled;               \/* currently enabled? *\/$/;"	m	struct:__anon56	access:public
enabled	.\ctags58\parse.h	/^	boolean enabled;          \/* are tags for kind enabled? *\/$/;"	m	struct:sKindOption	access:public
encoding	.\vim73\keymap\hebrew.vim	/^	let encoding = 'cp1255'$/;"	v
encoding	.\vim73\keymap\hebrew.vim	/^	let encoding = 'iso-8859-8'$/;"	v
encoding	.\vim73\keymap\hebrew.vim	/^let encoding = &enc$/;"	v
encoding	.\vim73\keymap\hebrewp.vim	/^	let encoding = 'cp1255'$/;"	v
encoding	.\vim73\keymap\hebrewp.vim	/^	let encoding = 'iso-8859-8'$/;"	v
encoding	.\vim73\keymap\hebrewp.vim	/^let encoding = &enc$/;"	v
encoding	.\vim73\keymap\persian.vim	/^	let encoding = 'utf-8'$/;"	v
encoding	.\vim73\keymap\persian.vim	/^let encoding = &enc$/;"	v
encoding	.\vim73\keymap\polish-slash.vim	/^	let encoding = 'cp1250'$/;"	v
encoding	.\vim73\keymap\polish-slash.vim	/^	let encoding = 'iso-8859-2'$/;"	v
encoding	.\vim73\keymap\polish-slash.vim	/^let encoding = &enc$/;"	v
encoding	.\vim73\keymap\serbian.vim	/^	let encoding = 'cp1250'$/;"	v
encoding	.\vim73\keymap\serbian.vim	/^	let encoding = 'iso-8859-2'$/;"	v
encoding	.\vim73\keymap\serbian.vim	/^let encoding = &enc$/;"	v
encoding	.\vim73\keymap\slovak.vim	/^	let encoding = 'cp1250'$/;"	v
encoding	.\vim73\keymap\slovak.vim	/^	let encoding = 'iso-8859-2'$/;"	v
encoding	.\vim73\keymap\slovak.vim	/^let encoding = &enc$/;"	v
end	.\ctags58\gnu_regex\regex.h	/^  regoff_t *end;$/;"	m	struct:re_registers	access:public
end	.\vim73\vimtutor.bat	/^:end$/;"	l
endEtagsFile	.\ctags58\entry.c	/^extern void endEtagsFile (const char *const name)$/;"	f	signature:(const char *const name)
endEtagsFile	.\ctags58\entry.h	/^extern void endEtagsFile (const char *const name);$/;"	p	signature:(const char *const name)
endtoken	.\ctags58\pascal.c	64;"	d	file:
ensure_appropriate_window_selection	.\vimfiles\bundle\command-t\ruby\command-t\controller.rb	/^    def ensure_appropriate_window_selection$/;"	f	class:CommandT.Controller.quickfix
ensure_cache_under_limit	.\vimfiles\bundle\command-t\ruby\command-t\scanner\file_scanner.rb	/^    def ensure_cache_under_limit$/;"	f	class:CommandT.FileScanner
ensure_dir_exists	.\vimfiles\bundle\command-t\vendor\vimball\vimball.rb	/^    def ensure_dir_exists(dir)$/;"	f
ent	.\ctags58\e_mac.h	/^	struct dirent ent;$/;"	m	struct:__anon19	typeref:struct:__anon19::dirent	access:public
enterUnnamedScope	.\ctags58\ruby.c	/^static void enterUnnamedScope (void)$/;"	f	file:	signature:(void)
entrance_nodes	.\ctags58\gnu_regex\regex_internal.h	/^  re_node_set *entrance_nodes;$/;"	m	struct:re_dfastate_t	access:public
env_reload#ReloadEnv	.\vimfiles\bundle\vim-addon-mw-utils\autoload\env_reload.vim	/^fun! env_reload#ReloadEnv(bash_export_command_output)$/;"	f
eof	.\ctags58\read.h	/^	boolean     eof;           \/* have we reached the end of file? *\/$/;"	m	struct:sInputFile	access:public
eps_reachable_subexps_map	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned short int eps_reachable_subexps_map;$/;"	m	struct:re_backref_cache_entry	access:public
eps_via_nodes	.\ctags58\gnu_regex\regex_internal.h	/^  re_node_set eps_via_nodes;$/;"	m	struct:re_fail_stack_ent_t	access:public
equiv_classes	.\ctags58\gnu_regex\regex_internal.h	/^  int32_t *equiv_classes;$/;"	m	struct:__anon30	access:public
erlangKind	.\ctags58\erlang.c	/^} erlangKind;$/;"	t	typeref:enum:__anon18	file:
error	.\ctags58\routines.c	/^extern void error ($/;"	f	signature:( const errorSelection selection, const char *const format, ...)
errorSelection	.\ctags58\routines.h	/^typedef int errorSelection;$/;"	t
error_number	.\ctags58\readtags.h	/^		int error_number;$/;"	m	struct:__anon68::__anon69	access:public
errout	.\ctags58\e_msoft.h	17;"	d
errout	.\ctags58\general.h	48;"	d
escape	.\vim73\autoload\gzip.vim	/^fun s:escape(name)$/;"	f
escape	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\util.vim	/^function! s:escape(path)"{{{$/;"	f
escape_file_searching	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\prelude.vim	/^function! s:escape_file_searching(buffer_name)$/;"	f
escape_for_single_quotes	.\vimfiles\bundle\command-t\ruby\command-t\vim.rb	/^    def self.escape_for_single_quotes str$/;"	F	class:CommandT.VIM
escape_pattern	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\prelude.vim	/^function! s:escape_pattern(str)$/;"	f
etags	.\ctags58\entry.h	/^	} etags;$/;"	m	struct:eTagFile	typeref:struct:eTagFile::sEtags	access:public
etags	.\ctags58\options.h	/^	boolean etags;          \/* -e  output Emacs style tags file *\/$/;"	m	struct:sOptionValues	access:public
etagsInclude	.\ctags58\main.c	/^static boolean etagsInclude (void)$/;"	f	file:	signature:(void)
etagsInclude	.\ctags58\options.h	/^	stringList* etagsInclude;\/* --etags-include  list of TAGS files to include*\/$/;"	m	struct:sOptionValues	access:public
evaluate	.\vimfiles\bundle\command-t\spec\spec_helper.rb	/^    def evaluate(*args); end$/;"	f	class:VIM
exCmd	.\ctags58\options.h	/^} exCmd;$/;"	t	typeref:enum:eLocate
exceptionDecl	.\ctags58\ocaml.c	/^static void exceptionDecl (vString * const ident, ocaToken what)$/;"	f	file:	signature:(vString * const ident, ocaToken what)
exception_t	.\ctags58\c.c	/^} exception_t;$/;"	t	typeref:enum:eException	file:
exception_t	.\ctags58\eiffel.c	/^typedef enum eException { ExceptionNone, ExceptionEOF } exception_t;$/;"	t	typeref:enum:eException	file:
exception_t	.\ctags58\flex.c	/^typedef enum eException { ExceptionNone, ExceptionEOF } exception_t;$/;"	t	typeref:enum:eException	file:
exception_t	.\ctags58\fortran.c	/^} exception_t;$/;"	t	typeref:enum:eException	file:
exception_t	.\ctags58\jscript.c	/^typedef enum eException { ExceptionNone, ExceptionEOF } exception_t;$/;"	t	typeref:enum:eException	file:
exception_t	.\ctags58\sql.c	/^typedef enum eException { ExceptionNone, ExceptionEOF } exception_t;$/;"	t	typeref:enum:eException	file:
exception_t	.\ctags58\tex.c	/^typedef enum eException { ExceptionNone, ExceptionEOF } exception_t;$/;"	t	typeref:enum:eException	file:
exception_t	.\ctags58\verilog.c	/^typedef enum eException { ExceptionNone, ExceptionEOF } exception_t;$/;"	t	typeref:enum:eException	file:
exception_t	.\ctags58\vhdl.c	/^typedef enum eException { ExceptionNone, ExceptionEOF } exception_t;$/;"	t	typeref:enum:eException	file:
exists	.\ctags58\routines.h	/^	boolean exists;$/;"	m	struct:__anon76	access:public
exists	.\vimfiles\bundle\command-t\ruby\command-t\vim.rb	/^    def self.exists? str$/;"	F	class:CommandT.VIM
exists_current_source	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\buffer_complete.vim	/^function! s:exists_current_source() "{{{$/;"	f
exit_block	.\ctags58\argproc.c	/^	} exit_block =$/;"	v	typeref:struct:exit_control_block	file:
exit_control_block	.\ctags58\argproc.c	/^static struct exit_control_block$/;"	s	file:
exit_control_block::arg_count	.\ctags58\argproc.c	/^	int arg_count;$/;"	m	struct:exit_control_block	file:	access:public
exit_control_block::exit_routine	.\ctags58\argproc.c	/^	int	(*exit_routine) ();$/;"	m	struct:exit_control_block	file:	access:public
exit_control_block::exit_status	.\ctags58\argproc.c	/^	int exit_status;$/;"	m	struct:exit_control_block	file:	access:public
exit_control_block::flink	.\ctags58\argproc.c	/^	struct exit_control_block *flink;$/;"	m	struct:exit_control_block	typeref:struct:exit_control_block::exit_control_block	file:	access:public
exit_control_block::status_address	.\ctags58\argproc.c	/^	int *status_address;$/;"	m	struct:exit_control_block	file:	access:public
exit_handler	.\ctags58\argproc.c	/^static exit_handler (status)$/;"	f	file:
exit_routine	.\ctags58\argproc.c	/^	int	(*exit_routine) ();$/;"	m	struct:exit_control_block	file:	access:public
exit_status	.\ctags58\argproc.c	/^	int exit_status;$/;"	m	struct:exit_control_block	file:	access:public
expand_bkref_cache	.\ctags58\gnu_regex\regexec.c	/^expand_bkref_cache (re_match_context_t *mctx, re_node_set *cur_nodes,$/;"	f	file:	signature:(re_match_context_t *mctx, re_node_set *cur_nodes, int cur_str, int subexp_num, int type)
expand_path	.\vimfiles\bundle\vundle\autoload\vundle\config.vim	/^func! s:expand_path(path) abort$/;"	f
expand_wild_cards	.\ctags58\argproc.c	/^static expand_wild_cards ();$/;"	p	file:
expand_wild_cards	.\ctags58\argproc.c	/^static expand_wild_cards (item, head, tail, count)$/;"	f	file:
exportLocalInfo	.\ctags58\ocaml.c	/^boolean exportLocalInfo = FALSE;$/;"	v
extend_buffers	.\ctags58\gnu_regex\regexec.c	/^extend_buffers (re_match_context_t *mctx)$/;"	f	file:	signature:(re_match_context_t *mctx)
extensionFields	.\ctags58\entry.h	/^	} extensionFields;  \/* list of extension fields*\/$/;"	m	struct:sTagEntryInfo	typeref:struct:sTagEntryInfo::__anon17	access:public
extensionFields	.\ctags58\options.h	/^	struct sExtFields extensionFields;\/* --fields  extension field control *\/$/;"	m	struct:sOptionValues	typeref:struct:sOptionValues::sExtFields	access:public
extensionFields	.\ctags58\readtags.c	/^static int extensionFields;$/;"	v	file:
extensions	.\ctags58\parse.h	/^	const char *const *extensions; \/* list of default extensions *\/$/;"	m	struct:__anon56	access:public
externalSortTags	.\ctags58\sort.c	/^extern void externalSortTags (const boolean toStdout)$/;"	f	signature:(const boolean toStdout)
externalSortTags	.\ctags58\sort.h	/^extern void externalSortTags (const boolean toStdout);$/;"	p	signature:(const boolean toStdout)
extract_name	.\ctags58\basic.c	/^static char const *extract_name (char const *pos, vString * name)$/;"	f	file:	signature:(char const *pos, vString * name)
extract_name	.\ctags58\lua.c	/^static void extract_name (const char *begin, const char *end, vString *name)$/;"	f	file:	signature:(const char *begin, const char *end, vString *name)
f	.\vim73\macros\less.vim	/^map f <Space>$/;"	m
failedSort	.\ctags58\sort.c	/^static void failedSort (FILE *const fp, const char* msg)$/;"	f	file:	signature:(FILE *const fp, const char* msg)
featureName	.\ctags58\eiffel.c	/^	vString*  featureName;$/;"	m	struct:sTokenInfo	file:	access:public
fetch_number	.\ctags58\gnu_regex\regcomp.c	/^fetch_number (re_string_t *input, re_token_t *token, reg_syntax_t syntax)$/;"	f	file:	signature:(re_string_t *input, re_token_t *token, reg_syntax_t syntax)
fetch_number	.\ctags58\gnu_regex\regcomp.c	/^static int fetch_number (re_string_t *input, re_token_t *token,$/;"	p	file:	signature:(re_string_t *input, re_token_t *token, reg_syntax_t syntax)
fetch_scripts	.\vimfiles\bundle\vundle\autoload\vundle\scripts.vim	/^func! s:fetch_scripts(to)$/;"	f
fetch_token	.\ctags58\gnu_regex\regcomp.c	/^fetch_token (re_token_t *result, re_string_t *input, reg_syntax_t syntax)$/;"	f	file:	signature:(re_token_t *result, re_string_t *input, reg_syntax_t syntax)
ff_name	.\ctags58\e_msoft.h	72;"	d
ffblk	.\ctags58\e_msoft.h	70;"	d
fgetpos	.\ctags58\routines.c	/^extern int fgetpos (FILE *stream, fpos_t *pos)$/;"	f	signature:(FILE *stream, fpos_t *pos)
fgetpos	.\ctags58\routines.h	/^extern int fgetpos  (FILE *stream, fpos_t *pos);$/;"	p	signature:(FILE *stream, fpos_t *pos)
field	.\ctags58\entry.c	282;"	d	file:
fields	.\ctags58\readtags.c	/^	} fields;$/;"	m	struct:sTagFile	typeref:struct:sTagFile::__anon64	file:	access:public
fields	.\ctags58\readtags.h	/^	} fields;$/;"	m	struct:__anon73	typeref:struct:__anon73::__anon75	access:public
file	.\ctags58\e_mac.h	/^	FSSpec file;$/;"	m	struct:__anon19	access:public
file	.\ctags58\entry.h	/^	struct sMax { size_t line, tag, file; } max;$/;"	m	struct:eTagFile::sMax	access:public
file	.\ctags58\readtags.h	/^	const char *file;$/;"	m	struct:__anon73	access:public
file	.\ctags58\readtags.h	/^	} file;$/;"	m	struct:__anon68	typeref:struct:__anon68::__anon70	access:public
fileArgs	.\ctags58\args.h	/^		} fileArgs;$/;"	m	union:sArgs::__anon2	typeref:struct:sArgs::__anon2::sFileArgs	access:public
fileClose	.\ctags58\read.c	/^extern void fileClose (void)$/;"	f	signature:(void)
fileClose	.\ctags58\read.h	/^extern void fileClose (void);$/;"	p	signature:(void)
fileEOF	.\ctags58\read.c	/^extern boolean fileEOF (void)$/;"	f	signature:(void)
fileEOF	.\ctags58\read.h	/^extern boolean fileEOF (void);$/;"	p	signature:(void)
fileExtension	.\ctags58\routines.c	/^extern const char *fileExtension (const char *const fileName)$/;"	f	signature:(const char *const fileName)
fileExtension	.\ctags58\routines.h	/^extern const char *fileExtension (const char *const fileName);$/;"	p	signature:(const char *const fileName)
fileGetc	.\ctags58\eiffel.c	/^static int fileGetc (void)$/;"	f	file:	signature:(void)
fileGetc	.\ctags58\read.c	/^extern int fileGetc (void)$/;"	f	signature:(void)
fileGetc	.\ctags58\read.h	/^extern int fileGetc (void);$/;"	p	signature:(void)
fileList	.\ctags58\options.h	/^	char *fileList;         \/* -L  name of file containing names of files *\/$/;"	m	struct:sOptionValues	access:public
fileNameMatched	.\ctags58\strlist.c	/^static boolean fileNameMatched ($/;"	f	file:	signature:( const vString* const vpattern, const char* const fileName)
fileNames	.\ctags58\options.h	/^	boolean fileNames;      \/* include tags for source file names *\/$/;"	m	struct:sInclude	access:public
fileNewline	.\ctags58\read.c	/^static void fileNewline (void)$/;"	f	file:	signature:(void)
fileOpen	.\ctags58\read.c	/^extern boolean fileOpen (const char *const fileName, const langType language)$/;"	f	signature:(const char *const fileName, const langType language)
fileOpen	.\ctags58\read.h	/^extern boolean fileOpen (const char *const fileName, const langType language);$/;"	p	signature:(const char *const fileName, const langType language)
filePosition	.\ctags58\c.c	/^	fpos_t        filePosition;  \/* file position of line containing name *\/$/;"	m	struct:sTokenInfo	file:	access:public
filePosition	.\ctags58\entry.h	/^	fpos_t      filePosition;     \/* file position of line containing tag *\/$/;"	m	struct:sTagEntryInfo	access:public
filePosition	.\ctags58\flex.c	/^	fpos_t 			filePosition;$/;"	m	struct:sTokenInfo	file:	access:public
filePosition	.\ctags58\fortran.c	/^	fpos_t filePosition;$/;"	m	struct:sTokenInfo	file:	access:public
filePosition	.\ctags58\jscript.c	/^	fpos_t 			filePosition;$/;"	m	struct:sTokenInfo	file:	access:public
filePosition	.\ctags58\read.h	/^	fpos_t      filePosition;  \/* file position of current line *\/$/;"	m	struct:sInputFile	access:public
filePosition	.\ctags58\sql.c	/^	fpos_t filePosition;$/;"	m	struct:sTokenInfoSQL	file:	access:public
filePosition	.\ctags58\tex.c	/^	fpos_t 			filePosition;$/;"	m	struct:sTokenInfo	file:	access:public
filePosition	.\ctags58\vhdl.c	/^	fpos_t filePosition;		\/* file position of line containing name *\/$/;"	m	struct:sTokenInfo	file:	access:public
fileReadLine	.\ctags58\read.c	/^extern const unsigned char *fileReadLine (void)$/;"	f	signature:(void)
fileReadLine	.\ctags58\read.h	/^extern const unsigned char *fileReadLine (void);$/;"	p	signature:(void)
fileScope	.\ctags58\entry.h	/^		const char* fileScope;$/;"	m	struct:sTagEntryInfo::__anon17	access:public
fileScope	.\ctags58\options.h	/^	boolean fileScope;      \/* include tags of file scope only *\/$/;"	m	struct:sInclude	access:public
fileScope	.\ctags58\options.h	/^	boolean fileScope;$/;"	m	struct:sExtFields	access:public
fileScope	.\ctags58\readtags.h	/^	short fileScope;$/;"	m	struct:__anon73	access:public
fileSkipToCharacter	.\ctags58\read.c	/^extern int fileSkipToCharacter (int c)$/;"	f	signature:(int c)
fileSkipToCharacter	.\ctags58\read.h	/^extern int fileSkipToCharacter (int c);$/;"	p	signature:(int c)
fileStatus	.\ctags58\routines.h	/^} fileStatus; $/;"	t	typeref:struct:__anon76
fileUngetc	.\ctags58\eiffel.c	/^static int fileUngetc (c)$/;"	f	file:
fileUngetc	.\ctags58\read.c	/^extern void fileUngetc (int c)$/;"	f	signature:(int c)
fileUngetc	.\ctags58\read.h	/^extern void fileUngetc (int c);$/;"	p	signature:(int c)
file_finder	.\vimfiles\bundle\command-t\ruby\command-t\controller.rb	/^    def file_finder$/;"	f	class:CommandT.Controller.quickfix.ensure_appropriate_window_selection
file_write	.\vimfiles\bundle\command-t\vendor\vimball\vimball.rb	/^    def file_write(filename, mode='w', &block)$/;"	f
filename	.\vim73\indent\sql.vim	/^        let filename = b:sql_type_override$/;"	v
filename	.\vim73\indent\sql.vim	/^        let filename = g:sql_type_default$/;"	v
filename	.\vim73\indent\sql.vim	/^let filename = 'sqlanywhere'$/;"	v
filename	.\vim73\syntax\sql.vim	/^        let filename = b:sql_type_override$/;"	v
filename	.\vim73\syntax\sql.vim	/^        let filename = g:sql_type_default$/;"	v
filename	.\vim73\syntax\sql.vim	/^let filename = 'sqloracle'$/;"	v
filename_on_disk	.\vimfiles\bundle\command-t\vendor\vimball\vimball.rb	/^    def filename_on_disk(name, file, filename)$/;"	f
filereadable	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\system\cache.vim	/^function! s:filereadable(cache_dir, filename)$/;"	f
files	.\ctags58\main.c	/^static struct { long files, lines, bytes; } Totals = { 0, 0, 0 };$/;"	m	struct:__anon49	file:	access:public
filesRequired	.\ctags58\options.c	/^extern boolean filesRequired (void)$/;"	f	signature:(void)
filesRequired	.\ctags58\options.h	/^extern boolean filesRequired (void);$/;"	p	signature:(void)
filetypedetect	.\vim73\filetype.vim	/^augroup filetypedetect$/;"	a
filetypeindent	.\vim73\indent.vim	/^augroup filetypeindent$/;"	a
filetypeplugin	.\vim73\ftplugin.vim	/^augroup filetypeplugin$/;"	a
filter	.\ctags58\options.h	/^	boolean filter;         \/* --filter  behave as filter: files in, tags out *\/$/;"	m	struct:sOptionValues	access:public
filterTerminator	.\ctags58\options.h	/^	char* filterTerminator; \/* --filter-terminator  string to output *\/$/;"	m	struct:sOptionValues	access:public
find	.\ctags58\readtags.c	/^static tagResult find (tagFile *const file, tagEntry *const entry,$/;"	f	file:	signature:(tagFile *const file, tagEntry *const entry, const char *const name, const int options)
find	.\vimfiles\bundle\command-t\ruby\command-t\match_window.rb	/^    def find char$/;"	f	class:CommandT.MatchWindow
findAsmTags	.\ctags58\asm.c	/^static void findAsmTags (void)$/;"	f	file:	signature:(void)
findAspTags	.\ctags58\asp.c	/^static void findAspTags (void)$/;"	f	file:	signature:(void)
findAwkTags	.\ctags58\awk.c	/^static void findAwkTags (void)$/;"	f	file:	signature:(void)
findBasicTags	.\ctags58\basic.c	/^static void findBasicTags (void)$/;"	f	file:	signature:(void)
findBetaTags	.\ctags58\beta.c	/^static void findBetaTags (void)$/;"	f	file:	signature:(void)
findBinary	.\ctags58\readtags.c	/^static tagResult findBinary (tagFile *const file)$/;"	f	file:	signature:(tagFile *const file)
findCTags	.\ctags58\c.c	/^static boolean findCTags (const unsigned int passCount)$/;"	f	file:	signature:(const unsigned int passCount)
findCmdTerm	.\ctags58\flex.c	/^static void findCmdTerm (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
findCmdTerm	.\ctags58\jscript.c	/^static void findCmdTerm (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
findCmdTerm	.\ctags58\sql.c	/^static void findCmdTerm (tokenInfo *const token, const boolean check_first)$/;"	f	file:	signature:(tokenInfo *const token, const boolean check_first)
findDefinitionOrClass	.\ctags58\python.c	/^static const char *findDefinitionOrClass (const char *cp)$/;"	f	file:	signature:(const char *cp)
findEiffelTags	.\ctags58\eiffel.c	/^static void findEiffelTags (void)$/;"	f	file:	signature:(void)
findErlangTags	.\ctags58\erlang.c	/^static void findErlangTags (void)$/;"	f	file:	signature:(void)
findFeatureEnd	.\ctags58\eiffel.c	/^static void findFeatureEnd (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
findFirstMatchBefore	.\ctags58\readtags.c	/^static tagResult findFirstMatchBefore (tagFile *const file)$/;"	f	file:	signature:(tagFile *const file)
findFirstNonMatchBefore	.\ctags58\readtags.c	/^static void findFirstNonMatchBefore (tagFile *const file)$/;"	f	file:	signature:(tagFile *const file)
findFlexTags	.\ctags58\flex.c	/^static void findFlexTags (void)$/;"	f	file:	signature:(void)
findFortranTags	.\ctags58\fortran.c	/^static boolean findFortranTags (const unsigned int passCount)$/;"	f	file:	signature:(const unsigned int passCount)
findJsTags	.\ctags58\jscript.c	/^static void findJsTags (void)$/;"	f	file:	signature:(void)
findKeyword	.\ctags58\eiffel.c	/^static void findKeyword (tokenInfo *const token, const keywordId keyword)$/;"	f	file:	signature:(tokenInfo *const token, const keywordId keyword)
findLispTags	.\ctags58\lisp.c	/^static void findLispTags (void)$/;"	f	file:	signature:(void)
findLuaTags	.\ctags58\lua.c	/^static void findLuaTags (void)$/;"	f	file:	signature:(void)
findMakeTags	.\ctags58\make.c	/^static void findMakeTags (void)$/;"	f	file:	signature:(void)
findNext	.\ctags58\readtags.c	/^static tagResult findNext (tagFile *const file, tagEntry *const entry)$/;"	f	file:	signature:(tagFile *const file, tagEntry *const entry)
findNextIdentifier	.\ctags58\sml.c	/^static smlKind findNextIdentifier (const unsigned char **cp)$/;"	f	file:	signature:(const unsigned char **cp)
findOcamlTags	.\ctags58\ocaml.c	/^static void findOcamlTags (void)$/;"	f	file:	signature:(void)
findPascalTags	.\ctags58\pascal.c	/^static void findPascalTags (void)$/;"	f	file:	signature:(void)
findPerlTags	.\ctags58\perl.c	/^static void findPerlTags (void)$/;"	f	file:	signature:(void)
findPythonTags	.\ctags58\python.c	/^static void findPythonTags (void)$/;"	f	file:	signature:(void)
findReferences	.\ctags58\eiffel.c	/^static void findReferences (void)$/;"	f	file:	signature:(void)
findRegexTags	.\ctags58\lregex.c	/^extern void findRegexTags (void)$/;"	f	signature:(void)
findRegexTags	.\ctags58\parse.h	/^extern void findRegexTags (void);$/;"	p	signature:(void)
findRubyTags	.\ctags58\ruby.c	/^static void findRubyTags (void)$/;"	f	file:	signature:(void)
findSchemeTags	.\ctags58\scheme.c	/^static void findSchemeTags (void)$/;"	f	file:	signature:(void)
findScopeHierarchy	.\ctags58\c.c	/^static void findScopeHierarchy (vString *const string,$/;"	f	file:	signature:(vString *const string, const statementInfo *const st)
findSequential	.\ctags58\readtags.c	/^static tagResult findSequential (tagFile *const file)$/;"	f	file:	signature:(tagFile *const file)
findShTags	.\ctags58\sh.c	/^static void findShTags (void)$/;"	f	file:	signature:(void)
findSmlTags	.\ctags58\sml.c	/^static void findSmlTags (void)$/;"	f	file:	signature:(void)
findSqlTags	.\ctags58\sql.c	/^static void findSqlTags (void)$/;"	f	file:	signature:(void)
findTag	.\ctags58\readtags.c	/^static void findTag (const char *const name, const int options)$/;"	f	file:	signature:(const char *const name, const int options)
findTag	.\ctags58\verilog.c	/^static void findTag (vString *const name)$/;"	f	file:	signature:(vString *const name)
findTclTags	.\ctags58\tcl.c	/^static void findTclTags (void)$/;"	f	file:	signature:(void)
findTexTags	.\ctags58\tex.c	/^static void findTexTags (void)$/;"	f	file:	signature:(void)
findToken	.\ctags58\eiffel.c	/^static void findToken (tokenInfo *const token, const tokenType type)$/;"	f	file:	signature:(tokenInfo *const token, const tokenType type)
findToken	.\ctags58\sql.c	/^static void findToken (tokenInfo *const token, const tokenType type)$/;"	f	file:	signature:(tokenInfo *const token, const tokenType type)
findVariable	.\ctags58\python.c	/^static const char *findVariable(const char *line)$/;"	f	file:	signature:(const char *line)
findVerilogTags	.\ctags58\verilog.c	/^static void findVerilogTags (void)$/;"	f	file:	signature:(void)
findVhdlTags	.\ctags58\vhdl.c	/^static void findVhdlTags (void)$/;"	f	file:	signature:(void)
findVimTags	.\ctags58\vim.c	/^static void findVimTags (void)$/;"	f	file:	signature:(void)
find_collation_sequence_value	.\ctags58\gnu_regex\regexec.c	/^find_collation_sequence_value (const unsigned char *mbs, size_t mbs_len)$/;"	f	file:	signature:(const unsigned char *mbs, size_t mbs_len)
find_continued_lnum	.\vim73\indent\sh.vim	/^function! s:find_continued_lnum(lnum)$/;"	f
find_recover_state	.\ctags58\gnu_regex\regexec.c	/^find_recover_state (reg_errcode_t *err, re_match_context_t *mctx)$/;"	f	signature:(reg_errcode_t *err, re_match_context_t *mctx)
find_subexp_node	.\ctags58\gnu_regex\regexec.c	/^find_subexp_node (const re_dfa_t *dfa, const re_node_set *nodes,$/;"	f	file:	signature:(const re_dfa_t *dfa, const re_node_set *nodes, int subexp_idx, int type)
find_triple_end	.\ctags58\python.c	/^static void find_triple_end(char const *string, char const **which)$/;"	f	file:	signature:(char const *string, char const **which)
find_triple_start	.\ctags58\python.c	/^static char const *find_triple_start(char const *string, char const **which)$/;"	f	file:	signature:(char const *string, char const **which)
findfirst_t	.\ctags58\e_msoft.h	53;"	d
findfirst_t	.\ctags58\e_msoft.h	55;"	d
findfirst_t	.\ctags58\e_msoft.h	69;"	d
first	.\ctags58\gnu_regex\regex_internal.h	/^  struct bin_tree_t *first;$/;"	m	struct:bin_tree_t	typeref:struct:bin_tree_t::bin_tree_t	access:public
first_line	.\vim73\ftplugin\changelog.vim	/^  function! s:first_line(string)$/;"	f
fix_beginfigs	.\vim73\ftplugin\mp.vim	/^  function! s:fix_beginfigs()$/;"	f
flatten	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\data\list.vim	/^function! s:flatten(list)$/;"	f
flexKind	.\ctags58\flex.c	/^} flexKind;$/;"	t	typeref:enum:__anon20	file:
flink	.\ctags58\argproc.c	/^	struct exit_control_block *flink;$/;"	m	struct:exit_control_block	typeref:struct:exit_control_block::exit_control_block	file:	access:public
flush	.\vimfiles\bundle\command-t\ruby\command-t\controller.rb	/^    def flush$/;"	f	class:CommandT.Controller.quickfix
flush	.\vimfiles\bundle\command-t\ruby\command-t\finder\file_finder.rb	/^    def flush$/;"	f	class:CommandT.FileFinder
flush	.\vimfiles\bundle\command-t\ruby\command-t\scanner\file_scanner.rb	/^    def flush$/;"	f	class:CommandT.FileScanner
focus	.\vimfiles\bundle\command-t\ruby\command-t\match_window.rb	/^    def focus$/;"	f	class:CommandT.MatchWindow
focus	.\vimfiles\bundle\command-t\ruby\command-t\prompt.rb	/^    def focus$/;"	f	class:CommandT.Prompt
foldl	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\data\list.vim	/^function! s:foldl(f, init, xs)$/;"	f
foldl1	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\data\list.vim	/^function! s:foldl1(f, xs)$/;"	f
foldr	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\data\list.vim	/^function! s:foldr(f, init, xs)$/;"	f
foldr1	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\data\list.vim	/^function! s:foldr1(f, xs)$/;"	f
followLinks	.\ctags58\options.h	/^	boolean followLinks;    \/* --link  follow symbolic links? *\/$/;"	m	struct:sOptionValues	access:public
fopen	.\ctags58\e_mac.h	137;"	d
fopen	.\ctags58\mac.c	192;"	d	file:
format	.\ctags58\readtags.c	/^	short format;$/;"	m	struct:sTagFile	file:	access:public
format	.\ctags58\readtags.h	/^			short format;$/;"	m	struct:__anon68::__anon70	access:public
fortran_free_source	.\vim73\syntax\sinda.vim	/^let fortran_free_source=1$/;"	v
fortran_free_source	.\vim73\syntax\tak.vim	/^let fortran_free_source=1$/;"	v
fortran_free_source	.\vim73\syntax\trasys.vim	/^let fortran_free_source=1$/;"	v
fp	.\ctags58\args.h	/^			FILE* fp;$/;"	m	struct:sArgs::__anon2::sFileArgs	access:public
fp	.\ctags58\entry.h	/^		FILE *fp;$/;"	m	struct:eTagFile::sEtags	access:public
fp	.\ctags58\entry.h	/^	FILE *fp;$/;"	m	struct:eTagFile	access:public
fp	.\ctags58\read.h	/^	FILE       *fp;            \/* stream used for reading the file *\/$/;"	m	struct:sInputFile	access:public
fp	.\ctags58\readtags.c	/^	FILE* fp;$/;"	m	struct:sTagFile	file:	access:public
fpos_t	.\ctags58\general.h	106;"	d
freeKeywordTable	.\ctags58\keyword.c	/^extern void freeKeywordTable (void)$/;"	f	signature:(void)
freeKeywordTable	.\ctags58\keyword.h	/^extern void freeKeywordTable (void);$/;"	p	signature:(void)
freeList	.\ctags58\options.c	/^extern void freeList (stringList** const pList)$/;"	f	signature:(stringList** const pList)
freeList	.\ctags58\options.h	/^extern void freeList (stringList** const pString);$/;"	p	signature:(stringList** const pString)
freeOptionResources	.\ctags58\options.c	/^extern void freeOptionResources (void)$/;"	f	signature:(void)
freeOptionResources	.\ctags58\options.h	/^extern void freeOptionResources (void);$/;"	p	signature:(void)
freeParserResources	.\ctags58\parse.c	/^extern void freeParserResources (void)$/;"	f	signature:(void)
freeParserResources	.\ctags58\parse.h	/^extern void freeParserResources (void);$/;"	p	signature:(void)
freeRegexResources	.\ctags58\lregex.c	/^extern void freeRegexResources (void)$/;"	f	signature:(void)
freeRegexResources	.\ctags58\parse.h	/^extern void freeRegexResources (void);$/;"	p	signature:(void)
freeRoutineResources	.\ctags58\routines.c	/^extern void freeRoutineResources (void)$/;"	f	signature:(void)
freeRoutineResources	.\ctags58\routines.h	/^extern void freeRoutineResources (void);$/;"	p	signature:(void)
freeSourceFileResources	.\ctags58\read.c	/^extern void freeSourceFileResources (void)$/;"	f	signature:(void)
freeSourceFileResources	.\ctags58\read.h	/^extern void freeSourceFileResources (void);$/;"	p	signature:(void)
freeString	.\ctags58\options.c	/^static void freeString (char **const pString)$/;"	f	file:	signature:(char **const pString)
freeTagFileResources	.\ctags58\entry.c	/^extern void freeTagFileResources (void)$/;"	f	signature:(void)
freeTagFileResources	.\ctags58\entry.h	/^extern void freeTagFileResources (void);$/;"	p	signature:(void)
free_charset	.\ctags58\gnu_regex\regcomp.c	/^free_charset (re_charset_t *cset)$/;"	f	file:	signature:(re_charset_t *cset)
free_charset	.\ctags58\gnu_regex\regcomp.c	/^static void free_charset (re_charset_t *cset);$/;"	p	file:	signature:(re_charset_t *cset)
free_dfa_content	.\ctags58\gnu_regex\regcomp.c	/^free_dfa_content (re_dfa_t *dfa)$/;"	f	file:	signature:(re_dfa_t *dfa)
free_fail_stack_return	.\ctags58\gnu_regex\regexec.c	/^free_fail_stack_return (struct re_fail_stack_t *fs)$/;"	f	file:	signature:(struct re_fail_stack_t *fs)
free_state	.\ctags58\gnu_regex\regex_internal.c	/^free_state (re_dfastate_t *state)$/;"	f	file:	signature:(re_dfastate_t *state)
free_token	.\ctags58\gnu_regex\regcomp.c	/^free_token (re_token_t *node)$/;"	f	file:	signature:(re_token_t *node)
free_token	.\ctags58\gnu_regex\regcomp.c	/^static void free_token (re_token_t *node);$/;"	p	file:	signature:(re_token_t *node)
free_tree	.\ctags58\gnu_regex\regcomp.c	/^free_tree (void *extra, bin_tree_t *node)$/;"	f	file:	signature:(void *extra, bin_tree_t *node)
free_tree	.\ctags58\gnu_regex\regcomp.c	/^static reg_errcode_t free_tree (void *extra, bin_tree_t *node);$/;"	p	file:	signature:(void *extra, bin_tree_t *node)
free_workarea_compile	.\ctags58\gnu_regex\regcomp.c	/^free_workarea_compile (regex_t *preg)$/;"	f	file:	signature:(regex_t *preg)
free_workarea_compile	.\ctags58\gnu_regex\regcomp.c	/^static void free_workarea_compile (regex_t *preg);$/;"	p	file:	signature:(regex_t *preg)
freebasic_keywords	.\ctags58\basic.c	/^static KeyWord freebasic_keywords[] = {$/;"	v	file:
fsetpos	.\ctags58\routines.c	/^extern int fsetpos (FILE *stream, fpos_t const *pos)$/;"	f	signature:(FILE *stream, fpos_t const *pos)
fsetpos	.\ctags58\routines.h	/^extern int fsetpos  (FILE *stream, fpos_t *pos);$/;"	p	signature:(FILE *stream, fpos_t *pos)
fstat	.\ctags58\e_mac.h	/^int fstat(int fildes, struct stat *buf);$/;"	p	signature:(int fildes, struct stat *buf)
ftruncate	.\ctags58\entry.c	/^extern int ftruncate (int fd, off_t length);$/;"	p	file:	signature:(int fd, off_t length)
funcref#Call	.\vimfiles\bundle\vim-addon-mw-utils\autoload\funcref.vim	/^function! funcref#Call(...)$/;"	f
funcref#Function	.\vimfiles\bundle\vim-addon-mw-utils\autoload\funcref.vim	/^function! funcref#Function(name,...)$/;"	f
function	.\ctags58\lregex.c	/^			regexCallback function;$/;"	m	struct:__anon43::__anon44::__anon46	file:	access:public
g	.\vim73\macros\hanoi\hanoi.vim	/^map g IL$/;"	m
g	.\vim73\macros\less.vim	/^noremap <script> g gg<SID>L$/;"	m
g	.\vim73\macros\life\life.vim	/^map g IR$/;"	m
g	.\vim73\macros\urm\urm.vim	/^map g 1G\/^[(as;.]$/;"	m
g%	.\vim73\macros\matchit.vim	/^nnoremap <silent> g% :<C-U>call <SID>Match_wrapper('',0,'n') <CR>$/;"	m
g%	.\vim73\macros\matchit.vim	/^onoremap <silent> g% v:<C-U>call <SID>Match_wrapper('',0,'o') <CR>$/;"	m
g%	.\vim73\macros\matchit.vim	/^vnoremap <silent> g% :<C-U>call <SID>Match_wrapper('',0,'v') <CR>m'gv``$/;"	m
g:GetLatestVimScripts_allowautoinstall	.\vim73\autoload\getscript.vim	/^ let g:GetLatestVimScripts_allowautoinstall= 1$/;"	v
g:GetLatestVimScripts_mv	.\vim73\autoload\getscript.vim	/^   let g:GetLatestVimScripts_mv= "mv"$/;"	v
g:GetLatestVimScripts_mv	.\vim73\autoload\getscript.vim	/^   let g:GetLatestVimScripts_mv= "ren"$/;"	v
g:GetLatestVimScripts_options	.\vim73\autoload\getscript.vim	/^  let g:GetLatestVimScripts_options = ""$/;"	v
g:GetLatestVimScripts_options	.\vim73\autoload\getscript.vim	/^  let g:GetLatestVimScripts_options= ""$/;"	v
g:GetLatestVimScripts_options	.\vim73\autoload\getscript.vim	/^  let g:GetLatestVimScripts_options= "-q -O"$/;"	v
g:GetLatestVimScripts_options	.\vim73\autoload\getscript.vim	/^  let g:GetLatestVimScripts_options= "-s -O"$/;"	v
g:GetLatestVimScripts_wget	.\vim73\autoload\getscript.vim	/^  let g:GetLatestVimScripts_wget    = 'echo "GetLatestVimScripts needs wget or curl"'$/;"	v
g:GetLatestVimScripts_wget	.\vim73\autoload\getscript.vim	/^  let g:GetLatestVimScripts_wget= "curl"$/;"	v
g:GetLatestVimScripts_wget	.\vim73\autoload\getscript.vim	/^  let g:GetLatestVimScripts_wget= "wget"$/;"	v
g:ada#Comment	.\vim73\autoload\ada.vim	/^let g:ada#Comment	   = "\\\\v^(\\"[^\\"]*\\"|'.'|[^\\"']){-}\\\\zs\\\\s*--.*"$/;"	v
g:ada#Ctags_Kinds	.\vim73\autoload\ada.vim	/^let g:ada#Ctags_Kinds = {$/;"	v
g:ada#DotWordRegex	.\vim73\autoload\ada.vim	/^let g:ada#DotWordRegex	   = '\\a\\w*\\(\\_s*\\.\\_s*\\a\\w*\\)*'$/;"	v
g:ada#Keywords	.\vim73\autoload\ada.vim	/^	let g:ada#Keywords += [{$/;"	v
g:ada#Keywords	.\vim73\autoload\ada.vim	/^       let g:ada#Keywords += [{$/;"	v
g:ada#Keywords	.\vim73\autoload\ada.vim	/^    let g:ada#Keywords += [{$/;"	v
g:ada#Keywords	.\vim73\autoload\ada.vim	/^let g:ada#Keywords	   = []$/;"	v
g:ada#WordRegex	.\vim73\autoload\ada.vim	/^let g:ada#WordRegex	   = '\\a\\w*'$/;"	v
g:ada_default_compiler	.\vim73\ftplugin\ada.vim	/^      let g:ada_default_compiler = 'decada'$/;"	v
g:ada_default_compiler	.\vim73\ftplugin\ada.vim	/^      let g:ada_default_compiler = 'gnat'$/;"	v
g:bar	.\vimfiles\bundle\tlib_vim\spec\tlib\var.vim	/^let g:bar = 2$/;"	v
g:bar	.\vimfiles\bundle\tlib_vim\test\tlib.vim	/^let g:bar = 2$/;"	v
g:bmenu_max_pathlen	.\vim73\menu.vim	/^  let g:bmenu_max_pathlen = 35$/;"	v
g:changelog_date_end_entry_search	.\vim73\ftplugin\changelog.vim	/^    let g:changelog_date_end_entry_search = '^\\s*$'$/;"	v
g:changelog_date_entry_search	.\vim73\ftplugin\changelog.vim	/^    let g:changelog_date_entry_search = '^\\s*%d\\_s*%u'$/;"	v
g:changelog_dateformat	.\vim73\ftplugin\changelog.vim	/^      let g:changelog_dateformat = "%Y-%m-%d"$/;"	v
g:changelog_dateformat	.\vim73\ftplugin\changelog.vim	/^      let g:changelog_dateformat = g:changelog_timeformat$/;"	v
g:changelog_new_date_format	.\vim73\ftplugin\changelog.vim	/^    let g:changelog_new_date_format = "%d  %u\\n\\n\\t* %c\\n\\n"$/;"	v
g:changelog_new_entry_format	.\vim73\ftplugin\changelog.vim	/^    let g:changelog_new_entry_format = "\\t* %c"$/;"	v
g:colors_name	.\vim73\colors\blue.vim	/^let g:colors_name = "blue"$/;"	v
g:colors_name	.\vim73\colors\desert.vim	/^let g:colors_name="desert"$/;"	v
g:colors_name	.\vim73\colors\elflord.vim	/^let g:colors_name = "elflord"$/;"	v
g:colors_name	.\vim73\colors\koehler.vim	/^let g:colors_name = "koehler"$/;"	v
g:colors_name	.\vim73\colors\murphy.vim	/^let g:colors_name = "murphy"$/;"	v
g:colors_name	.\vim73\colors\pablo.vim	/^let g:colors_name = "pablo"$/;"	v
g:colors_name	.\vim73\colors\ron.vim	/^let g:colors_name = "ron"$/;"	v
g:colors_name	.\vim73\colors\torte.vim	/^let g:colors_name = "torte"$/;"	v
g:colors_name	.\vim73\colors\zellner.vim	/^let g:colors_name = "zellner"$/;"	v
g:command_t_loaded	.\vimfiles\bundle\command-t\plugin\command-t.vim	/^let g:command_t_loaded = 1$/;"	v
g:context_include	.\vim73\syntax\context.vim	/^  let g:context_include = ['mp', 'javascript', 'xml']$/;"	v
g:ctags_command	.\vim73\menu.vim	/^    let g:ctags_command = "ctags -R ."$/;"	v
g:ctags_command	.\vim73\menu.vim	/^    let g:ctags_command = "mc vim:ctags *.*"$/;"	v
g:cucumber_languages	.\vim73\syntax\cucumber.vim	/^let g:cucumber_languages = {$/;"	v
g:debchangelog_listbugs_severities	.\vim73\ftplugin\debchangelog.vim	/^  let g:debchangelog_listbugs_severities = 'critical,grave,serious,important,normal,minor,wishlist'$/;"	v
g:decada	.\vim73\compiler\decada.vim	/^   let g:decada = decada#New ()$/;"	v
g:did_changelog_ftplugin	.\vim73\ftplugin\debchangelog.vim	/^let g:did_changelog_ftplugin = 1$/;"	v
g:did_cobol_ftplugin_functions	.\vim73\ftplugin\cobol.vim	/^let g:did_cobol_ftplugin_functions = 1$/;"	v
g:did_ocaml_switch	.\vim73\ftplugin\ocaml.vim	/^  let g:did_ocaml_switch = 1$/;"	v
g:did_ruby_ftplugin_functions	.\vim73\ftplugin\ruby.vim	/^let g:did_ruby_ftplugin_functions = 1$/;"	v
g:doxygen_end_punctuation	.\vim73\syntax\doxygen.vim	/^      let g:doxygen_end_punctuation='[.]'$/;"	v
g:eruby_default_subtype	.\vim73\ftplugin\eruby.vim	/^  let g:eruby_default_subtype = "html"$/;"	v
g:eruby_default_subtype	.\vim73\syntax\eruby.vim	/^  let g:eruby_default_subtype = "html"$/;"	v
g:foo	.\vimfiles\bundle\tlib_vim\spec\tlib\var.vim	/^let g:foo = 1$/;"	v
g:foo	.\vimfiles\bundle\tlib_vim\test\tlib.vim	/^let g:foo = 1$/;"	v
g:ft_ignore_pat	.\vim73\filetype.vim	/^  let g:ft_ignore_pat = '\\.\\(Z\\|gz\\|bz2\\|zip\\|tgz\\)$'$/;"	v
g:ftplugin_sql_objects	.\vim73\ftplugin\sql.vim	/^    let g:ftplugin_sql_objects = 'function,procedure,event,' .$/;"	v
g:ftplugin_sql_omni_key	.\vim73\ftplugin\sql.vim	/^    let g:ftplugin_sql_omni_key = '<C-C>'$/;"	v
g:ftplugin_sql_omni_key_left	.\vim73\ftplugin\sql.vim	/^    let g:ftplugin_sql_omni_key_left = '<Left>'$/;"	v
g:ftplugin_sql_omni_key_right	.\vim73\ftplugin\sql.vim	/^    let g:ftplugin_sql_omni_key_right = '<Right>'$/;"	v
g:ftplugin_sql_statements	.\vim73\ftplugin\sql.vim	/^    let g:ftplugin_sql_statements = 'create'$/;"	v
g:getscript_cygwin	.\vim73\autoload\getscript.vim	/^   let g:getscript_cygwin= 0$/;"	v
g:getscript_cygwin	.\vim73\autoload\getscript.vim	/^   let g:getscript_cygwin= 1$/;"	v
g:getscript_cygwin	.\vim73\autoload\getscript.vim	/^  let g:getscript_cygwin= 0$/;"	v
g:gnat	.\vim73\compiler\gnat.vim	/^   let g:gnat = gnat#New ()$/;"	v
g:haml_self_closing_tags	.\vim73\indent\haml.vim	/^  let g:haml_self_closing_tags = 'meta|link|img|hr|br'$/;"	v
g:is_kornshell	.\vim73\syntax\sh.vim	/^   let g:is_kornshell= g:is_posix$/;"	v
g:liquid_default_subtype	.\vim73\ftplugin\liquid.vim	/^  let g:liquid_default_subtype = 'html'$/;"	v
g:liquid_default_subtype	.\vim73\syntax\liquid.vim	/^  let g:liquid_default_subtype = 'html'$/;"	v
g:liquid_highlight_types	.\vim73\syntax\liquid.vim	/^  let g:liquid_highlight_types = []$/;"	v
g:loaded_2html_plugin	.\vim73\plugin\tohtml.vim	/^let g:loaded_2html_plugin = 'vim7.3_v6'$/;"	v
g:loaded_getscript	.\vim73\autoload\getscript.vim	/^let g:loaded_getscript= "v32"$/;"	v
g:loaded_getscriptPlugin	.\vim73\plugin\getscriptPlugin.vim	/^let g:loaded_getscriptPlugin = "v32"$/;"	v
g:loaded_matchparen	.\vim73\plugin\matchparen.vim	/^let g:loaded_matchparen = 1$/;"	v
g:loaded_neocomplcache	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^let g:loaded_neocomplcache = 1$/;"	v
g:loaded_neocomplcache_buffer_complete	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache\buffer_complete.vim	/^let g:loaded_neocomplcache_buffer_complete = 1$/;"	v
g:loaded_neocomplcache_dictionary_complete	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache\dictionary_complete.vim	/^let g:loaded_neocomplcache_dictionary_complete = 1$/;"	v
g:loaded_neocomplcache_include_complete	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache\include_complete.vim	/^let g:loaded_neocomplcache_include_complete = 1$/;"	v
g:loaded_neocomplcache_syntax_complete	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache\syntax_complete.vim	/^let g:loaded_neocomplcache_syntax_complete = 1$/;"	v
g:loaded_neocomplcache_tags_complete	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache\tags_complete.vim	/^let g:loaded_neocomplcache_tags_complete = 1$/;"	v
g:loaded_netrw	.\vim73\autoload\netrw.vim	/^let g:loaded_netrw = "v140"$/;"	v
g:loaded_netrwFileHandlers	.\vim73\autoload\netrwFileHandlers.vim	/^let g:loaded_netrwFileHandlers= "v10"$/;"	v
g:loaded_netrwPlugin	.\vim73\plugin\netrwPlugin.vim	/^let g:loaded_netrwPlugin = "v140"$/;"	v
g:loaded_netrwSettings	.\vim73\autoload\netrwSettings.vim	/^let g:loaded_netrwSettings = "v13"$/;"	v
g:loaded_sql_completion	.\vim73\autoload\sqlcomplete.vim	/^let g:loaded_sql_completion = 100$/;"	v
g:loaded_syntax_completion	.\vim73\autoload\syntaxcomplete.vim	/^let g:loaded_syntax_completion = 70$/;"	v
g:loaded_tar	.\vim73\autoload\tar.vim	/^let g:loaded_tar= "v26"$/;"	v
g:loaded_tarPlugin	.\vim73\plugin\tarPlugin.vim	/^let g:loaded_tarPlugin = "v26"$/;"	v
g:loaded_vimball	.\vim73\autoload\vimball.vim	/^let g:loaded_vimball = "v31"$/;"	v
g:loaded_vimballPlugin	.\vim73\plugin\vimballPlugin.vim	/^let g:loaded_vimballPlugin = "v31"$/;"	v
g:loaded_zip	.\vim73\autoload\zip.vim	/^let g:loaded_zip= "v23"$/;"	v
g:loaded_zipPlugin	.\vim73\plugin\zipPlugin.vim	/^let g:loaded_zipPlugin = "v23"$/;"	v
g:menutrans_fileformat_choices	.\vim73\lang\menu_eo.utf-8.vim	/^let g:menutrans_fileformat_choices = " &Unikso \\n &Dos \\n &Mak \\n &Rezigni "$/;"	v
g:menutrans_fileformat_choices	.\vim73\lang\menu_fi_fi.latin1.vim	/^let g:menutrans_fileformat_choices = " &Unix \\n &Dos \\n &Mac \\n &Peru "$/;"	v
g:menutrans_fileformat_choices	.\vim73\lang\menu_fr_fr.latin1.vim	/^let g:menutrans_fileformat_choices = " &Unix \\n &Dos \\n &Mac \\n &Annuler "$/;"	v
g:menutrans_fileformat_choices	.\vim73\lang\menu_ja_jp.euc-jp.vim	/^let g:menutrans_fileformat_choices = "&Unix\\n&Dos\\n&Mac\\n¥­¥ã¥ó¥»¥ë(&C)"$/;"	v
g:menutrans_fileformat_choices	.\vim73\lang\menu_ja_jp.utf-8.vim	/^let g:menutrans_fileformat_choices = "&Unix\\n&Dos\\n&Mac\\nã­ã£ã³ã»ã«(&C)"$/;"	v
g:menutrans_fileformat_choices	.\vim73\lang\menu_japanese_japan.932.vim	/^let g:menutrans_fileformat_choices = "&Unix\\n&Dos\\n&Mac\\nLZ(&C)"$/;"	v
g:menutrans_fileformat_choices	.\vim73\lang\menu_pl_pl.iso_8859-2.vim	/^let g:menutrans_fileformat_choices = "&Unix\\n&Dos\\n&Mac\\n&Anuluj"$/;"	v
g:menutrans_fileformat_choices	.\vim73\lang\menu_pl_pl.utf-8.vim	/^let g:menutrans_fileformat_choices = "&Unix\\n&Dos\\n&Mac\\n&Anuluj"$/;"	v
g:menutrans_fileformat_choices	.\vim73\lang\menu_polish_poland.1250.vim	/^let g:menutrans_fileformat_choices = "&Unix\\n&Dos\\n&Mac\\n&Anuluj"$/;"	v
g:menutrans_fileformat_choices	.\vim73\lang\menu_ru_ru.koi8-r.vim	/^let g:menutrans_fileformat_choices = "&Unix\\n&Dos\\n&Mac\\nï&ÔÍÅÎÁ"$/;"	v
g:menutrans_fileformat_choices	.\vim73\lang\menu_ru_ru.vim	/^let g:menutrans_fileformat_choices = "&Unix\\n&Dos\\n&Mac\\nÐ&ÑÐ¼ÐµÐ½Ð°"$/;"	v
g:menutrans_fileformat_choices	.\vim73\lang\menu_sl_si.cp1250.vim	/^let g:menutrans_fileformat_choices = "&Unix\\n&Dos\\n&Mac\\n&Preklièi"$/;"	v
g:menutrans_fileformat_choices	.\vim73\lang\menu_sl_si.latin2.vim	/^let g:menutrans_fileformat_choices = "&Unix\\n&Dos\\n&Mac\\n&Preklièi"$/;"	v
g:menutrans_fileformat_choices	.\vim73\lang\menu_sl_si.utf-8.vim	/^let g:menutrans_fileformat_choices = "&Unix\\n&Dos\\n&Mac\\n&PrekliÄi"$/;"	v
g:menutrans_fileformat_choices	.\vim73\lang\menu_vi_vn.vim	/^let g:menutrans_fileformat_choices = "&Unix\\n&Dos\\n&Mac\\n&Há»§y bá»"$/;"	v
g:menutrans_fileformat_dialog	.\vim73\lang\menu_ca_es.latin1.vim	/^let g:menutrans_fileformat_dialog = "Seleccioneu el format per escriure el fitxer."$/;"	v
g:menutrans_fileformat_dialog	.\vim73\lang\menu_de_de.latin1.vim	/^let g:menutrans_fileformat_dialog = "Wählen Sie ein Datei-Format aus"$/;"	v
g:menutrans_fileformat_dialog	.\vim73\lang\menu_eo.utf-8.vim	/^let g:menutrans_fileformat_dialog = "Elektu la formaton de la skribonta dosiero."$/;"	v
g:menutrans_fileformat_dialog	.\vim73\lang\menu_es_es.latin1.vim	/^let g:menutrans_fileformat_dialog = "Seleccione el formato para escribir el archivo"$/;"	v
g:menutrans_fileformat_dialog	.\vim73\lang\menu_fi_fi.latin1.vim	/^let g:menutrans_fileformat_dialog = "Anaa tiedoston kirjoitusmuoto."$/;"	v
g:menutrans_fileformat_dialog	.\vim73\lang\menu_fr_fr.latin1.vim	/^let g:menutrans_fileformat_dialog = "Choisissez le format dans lequel écrire le fichier."$/;"	v
g:menutrans_fileformat_dialog	.\vim73\lang\menu_hu_hu.iso_8859-2.vim	/^let g:menutrans_fileformat_dialog = "Válaszd ki a fájl formátumát"$/;"	v
g:menutrans_fileformat_dialog	.\vim73\lang\menu_hu_hu.utf-8.vim	/^let g:menutrans_fileformat_dialog = "VÃ¡laszd ki a fÃ¡jl formÃ¡tumÃ¡t"$/;"	v
g:menutrans_fileformat_dialog	.\vim73\lang\menu_it_it.latin1.vim	/^let g:menutrans_fileformat_dialog = "Scegli formato con cui scrivere il file"$/;"	v
g:menutrans_fileformat_dialog	.\vim73\lang\menu_ja_jp.euc-jp.vim	/^let g:menutrans_fileformat_dialog = "¥Õ¥¡¥¤¥ë½ÐÎÏ¤ÎºÝ¤Î²þ¹Ôµ­¹æ¤Î·Á¼°¤òÁª¤ó¤Ç¤¯¤À¤µ¤¤."$/;"	v
g:menutrans_fileformat_dialog	.\vim73\lang\menu_ja_jp.utf-8.vim	/^let g:menutrans_fileformat_dialog = "ãã¡ã¤ã«åºåã®éã®æ¹è¡è¨å·ã®å½¢å¼ãé¸ãã§ãã ãã."$/;"	v
g:menutrans_fileformat_dialog	.\vim73\lang\menu_japanese_japan.932.vim	/^let g:menutrans_fileformat_dialog = "t@CoÍÌÛÌüsLÌ`®ðIñÅ­¾³¢."$/;"	v
g:menutrans_fileformat_dialog	.\vim73\lang\menu_nl_nl.latin1.vim	/^let g:menutrans_fileformat_dialog = "Selecteer formaat voor het schrijven van het bestand"$/;"	v
g:menutrans_fileformat_dialog	.\vim73\lang\menu_no_no.latin1.vim	/^	let g:menutrans_fileformat_dialog = "Velg filformat som filen skal lagres med"$/;"	v
g:menutrans_fileformat_dialog	.\vim73\lang\menu_pl_pl.iso_8859-2.vim	/^let g:menutrans_fileformat_dialog = "Wybierz format w którym ten plik ma byæ zapisany"$/;"	v
g:menutrans_fileformat_dialog	.\vim73\lang\menu_pl_pl.utf-8.vim	/^let g:menutrans_fileformat_dialog = "Wybierz format w ktÃ³rym ten plik ma byÄ zapisany"$/;"	v
g:menutrans_fileformat_dialog	.\vim73\lang\menu_polish_poland.1250.vim	/^let g:menutrans_fileformat_dialog = "Wybierz format w którym ten plik ma byæ zapisany"$/;"	v
g:menutrans_fileformat_dialog	.\vim73\lang\menu_pt_br.vim	/^let g:menutrans_fileformat_dialog = "Selecione o formato para gravar o arquivo"$/;"	v
g:menutrans_fileformat_dialog	.\vim73\lang\menu_pt_pt.vim	/^let g:menutrans_fileformat_dialog = "Selecione o formato para gravar o arquivo"$/;"	v
g:menutrans_fileformat_dialog	.\vim73\lang\menu_ru_ru.koi8-r.vim	/^let g:menutrans_fileformat_dialog = "÷ÙÂÅÒÉÔÅ ÆÏÒÍÁÔ ÆÁÊÌÁ."$/;"	v
g:menutrans_fileformat_dialog	.\vim73\lang\menu_ru_ru.vim	/^let g:menutrans_fileformat_dialog = "ÐÑÐ±ÐµÑÐ¸ÑÐµ ÑÐ¾ÑÐ¼Ð°Ñ ÑÐ°Ð¹Ð»Ð°."$/;"	v
g:menutrans_fileformat_dialog	.\vim73\lang\menu_sl_si.cp1250.vim	/^let g:menutrans_fileformat_dialog = "Izberite format datoteke"$/;"	v
g:menutrans_fileformat_dialog	.\vim73\lang\menu_sl_si.latin2.vim	/^let g:menutrans_fileformat_dialog = "Izberite format datoteke"$/;"	v
g:menutrans_fileformat_dialog	.\vim73\lang\menu_sl_si.utf-8.vim	/^let g:menutrans_fileformat_dialog = "Izberite format datoteke"$/;"	v
g:menutrans_fileformat_dialog	.\vim73\lang\menu_sr_rs.ascii.vim	/^let g:menutrans_fileformat_dialog = "Izaberite vrstu datoteke"$/;"	v
g:menutrans_fileformat_dialog	.\vim73\lang\menu_sr_rs.iso_8859-2.vim	/^let g:menutrans_fileformat_dialog = "Izaberite vrstu datoteke"$/;"	v
g:menutrans_fileformat_dialog	.\vim73\lang\menu_sr_rs.iso_8859-5.vim	/^let g:menutrans_fileformat_dialog = "¸×ÐÑÕàØâÕ Òàáâã ÔÐâÞâÕÚÕ"$/;"	v
g:menutrans_fileformat_dialog	.\vim73\lang\menu_sr_rs.utf-8.vim	/^let g:menutrans_fileformat_dialog = "ÐÐ·Ð°Ð±ÐµÑÐ¸ÑÐµ Ð²ÑÑÑÑ Ð´Ð°ÑÐ¾ÑÐµÐºÐµ"$/;"	v
g:menutrans_fileformat_dialog	.\vim73\lang\menu_sv_se.latin1.vim	/^let g:menutrans_fileformat_dialog = "Välj filformat som filen ska sparas med"$/;"	v
g:menutrans_fileformat_dialog	.\vim73\lang\menu_uk_ua.cp1251.vim	/^let g:menutrans_fileformat_dialog = "Âèáåð³òü ôîðìàò ôàéëó"$/;"	v
g:menutrans_fileformat_dialog	.\vim73\lang\menu_uk_ua.koi8-u.vim	/^let g:menutrans_fileformat_dialog = "÷ÉÂÅÒ¦ÔØ ÆÏÒÍÁÔ ÆÁÊÌÕ"$/;"	v
g:menutrans_fileformat_dialog	.\vim73\lang\menu_vi_vn.vim	/^let g:menutrans_fileformat_dialog = "HÃ£y chá»n Äá»nh dáº¡ng táº­p tin."$/;"	v
g:menutrans_help_dialog	.\vim73\lang\menu_ca_es.latin1.vim	/^let g:menutrans_help_dialog = "Introduïu el terme sobre el qual necessiteu ajuda.\\n\\nUseu el prefix i_ per ordres d'entrada (p.ex.: i_CTRL-X)\\nUseu el prefix c_ per ordres de la línia d'ordres (p.ex.: c_<Del>)\\nUseu el prefix ' per noms d'opcions (p.ex.: 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	.\vim73\lang\menu_de_de.latin1.vim	/^let g:menutrans_help_dialog = "Geben Sie einen Befehl oder ein Wort ein, für das Sie Hilfe benötigen:\\n\\nVerwenden Sie i_ für Eingabe ('input') Befehle (z.B.: i_CTRL-X)\\nVerwenden Sie c_ für Befehls-Zeilen ('command-line') Befehle (z.B.: c_<Del>)\\nVerwenden Sie ' für Options-Namen (z.B.: 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	.\vim73\lang\menu_eo.utf-8.vim	/^let g:menutrans_help_dialog = "Tajpu komandon aÅ­ serÄendan vorton en la helparo.\\n\\nAldonu i_ por la komandoj de la enmeta reÄimo (ekz: i_CTRL-X)\\nAldonu c_ por redakto de la komanda linio (ekz: c_<Del>)\\nÄirkaÅ­i la opciojn per apostrofoj (ekz: 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	.\vim73\lang\menu_es_es.latin1.vim	/^let g:menutrans_help_dialog = "Introduzca un nombre de comando o palabra para obtener ayuda;\\n\\nAnteponga i_ para comandos de entrada (e.g.: i_CTRL-X)\\nAnteponga c_ para comandos de la línea de comandos (e.g.: c_<Del>)\\nAnteponga ` para un nombre de opción (e.g.: `shiftwidth`)"$/;"	v
g:menutrans_help_dialog	.\vim73\lang\menu_fi_fi.latin1.vim	/^let g:menutrans_help_dialog = "Anna komento tai sana, jota haetaan ohjeesta.\\n\\nAloita i_:llä syöttötilan komentoja varten (esim. i_CTRL-X)\\nAloita c_:llä komentoriviä varten (esim. c_<Del>)\\nKirjoita asetukset puolilainausmerkkeijin (esim. 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	.\vim73\lang\menu_fr_fr.latin1.vim	/^let g:menutrans_help_dialog = "Entrez une commande ou un mot à rechercher dans l'aide.\\n\\nAjoutez i_ pour les commandes du mode Insertion (ex: i_CTRL-X)\\nAjoutez c_ pour l'édition de la ligne de commande (ex: c_<Del>)\\nEntourez les options avec des apostrophes (ex: 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	.\vim73\lang\menu_it_it.latin1.vim	/^let g:menutrans_help_dialog = "Batti un comando o una parola per cercare aiuto:\\n\\nPremetti i_ per comandi in modo Input (ad.es.: i_CTRL-X)\\nPremetti c_ per comandi che editano la linea-comandi (ad.es.: c_<Del>)\\nPremetti ' per un nome di opzione (ad.es.: 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	.\vim73\lang\menu_ja_jp.euc-jp.vim	/^let g:menutrans_help_dialog = "¥Ø¥ë¥×¤ò¸¡º÷¤·¤¿¤¤¥³¥Þ¥ó¥É¤â¤·¤¯¤ÏÃ±¸ì¤òÆþÎÏ¤·¤Æ¤¯¤À¤µ¤¤:\\n\\nÁÞÆþ¥â¡¼¥É¤Î¥³¥Þ¥ó¥É¤Ë¤Ï i_ ¤òÀèÆ¬¤ËÉÕ²Ã¤·¤Þ¤¹. (Îã: i_CTRL-X)\\n¥³¥Þ¥ó¥É¥é¥¤¥óÊÔ½¸¥³¥Þ¥ó¥É¤Ë¤Ï c_ ¤òÀèÆ¬¤ËÉÕ²Ã¤·¤Þ¤¹. (Îã: c_<Del>)\\n¥ª¥×¥·¥ç¥ó¤ÎÌ¾Á°¤Ë¤Ï ' ¤òÉÕ²Ã¤·¤Þ¤¹. (Îã: 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	.\vim73\lang\menu_ja_jp.utf-8.vim	/^let g:menutrans_help_dialog = "ãã«ããæ¤ç´¢ãããã³ãã³ããããã¯åèªãå¥åãã¦ãã ãã:\\n\\næ¿å¥ã¢ã¼ãã®ã³ãã³ãã«ã¯ i_ ãåé ­ã«ä»å ãã¾ã. (ä¾: i_CTRL-X)\\nã³ãã³ãã©ã¤ã³ç·¨éã³ãã³ãã«ã¯ c_ ãåé ­ã«ä»å ãã¾ã. (ä¾: c_<Del>)\\nãªãã·ã§ã³ã®ååã«ã¯ ' ãä»å ãã¾ã. (ä¾: 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	.\vim73\lang\menu_japanese_japan.932.vim	/^let g:menutrans_help_dialog = "wvðõµ½¢R}hàµ­ÍPêðüÍµÄ­¾³¢:\\n\\n}ü[hÌR}hÉÍ i_ ðæªÉtÁµÜ·. (á: i_CTRL-X)\\nR}hCÒWR}hÉÍ c_ ðæªÉtÁµÜ·. (á: c_<Del>)\\nIvVÌ¼OÉÍ ' ðtÁµÜ·. (á: 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	.\vim73\lang\menu_no_no.latin1.vim	/^	let g:menutrans_help_dialog = "Skriv en kommando eller ord du vil ha hjelp om:\\n\\nLegg til i_ i begynnelsen for inndatametoder (f.eks.: i_CTRL-X)\\nLegg til c_ i begynnelsen for kommandoer som redigerer kommandolinjen (f.eks.: c_<Del>)\\nLegg til ' i begynnelsen for et valgnavn (f.eks.: 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	.\vim73\lang\menu_pt_br.vim	/^let g:menutrans_help_dialog = "Digite um comando ou palavra para obter ajuda;\\n\\nAnteponha i_ para comandos de entrada (ex.: i_CTRL-X)\\nAnteponha c_ para comandos da linha de comandos (ex.: c_<Del>)\\nAnteponha ` para um nome de opção (ex.: `shiftwidth`)"$/;"	v
g:menutrans_help_dialog	.\vim73\lang\menu_pt_pt.vim	/^let g:menutrans_help_dialog = "Digite um comando ou palavra para obter ajuda;\\n\\nAnteponha i_ para comandos de entrada (ex.: i_CTRL-X)\\nAnteponha c_ para comandos da linha de comandos (ex.: c_<Del>)\\nAnteponha ` para um nome de opção (ex.: `shiftwidth`)"$/;"	v
g:menutrans_help_dialog	.\vim73\lang\menu_ru_ru.koi8-r.vim	/^let g:menutrans_help_dialog = "÷×ÅÄÉÔÅ ËÏÍÁÎÄÕ ÉÌÉ ÓÌÏ×Ï ÄÌÑ ÐÏÉÓËÁ:\\n\\näÏÂÁ×ØÔÅ i_ ÄÌÑ ÐÏÉÓËÁ ËÏÍÁÎÄ ÒÅÖÉÍÁ ÷ÓÔÁ×ËÉ (ÎÁÐÒÉÍÅÒ, i_CTRL-X)\\näÏÂÁ×ØÔÅ c_ ÄÌÑ ÐÏÉÓËÁ ËÏÍÁÎÄ ïÂÙÞÎÏÇÏ ÒÅÖÉÍÁ (ÎÁÐÒÉÍÅÒ, Ó_<Del>)\\näÏÂÁ×ØÔÅ ' ÄÌÑ ÐÏÉÓËÁ ÓÐÒÁ×ËÉ ÐÏ ÏÐÃÉÉ (ÎÁÐÒÉÍÅÒ, 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	.\vim73\lang\menu_ru_ru.vim	/^let g:menutrans_help_dialog = "ÐÐ²ÐµÐ´Ð¸ÑÐµ ÐºÐ¾Ð¼Ð°Ð½Ð´Ñ Ð¸Ð»Ð¸ ÑÐ»Ð¾Ð²Ð¾ Ð´Ð»Ñ Ð¿Ð¾Ð¸ÑÐºÐ°:\\n\\nÐÐ¾Ð±Ð°Ð²ÑÑÐµ i_ Ð´Ð»Ñ Ð¿Ð¾Ð¸ÑÐºÐ° ÐºÐ¾Ð¼Ð°Ð½Ð´ ÑÐµÐ¶Ð¸Ð¼Ð° ÐÑÑÐ°Ð²ÐºÐ¸ (Ð½Ð°Ð¿ÑÐ¸Ð¼ÐµÑ, i_CTRL-X)\\nÐÐ¾Ð±Ð°Ð²ÑÑÐµ c_ Ð´Ð»Ñ Ð¿Ð¾Ð¸ÑÐºÐ° ÐºÐ¾Ð¼Ð°Ð½Ð´ ÐÐ±ÑÑÐ½Ð¾Ð³Ð¾ ÑÐµÐ¶Ð¸Ð¼Ð° (Ð½Ð°Ð¿ÑÐ¸Ð¼ÐµÑ, Ñ_<Del>)\\nÐÐ¾Ð±Ð°Ð²ÑÑÐµ ' Ð´Ð»Ñ Ð¿Ð¾Ð¸ÑÐºÐ° ÑÐ¿ÑÐ°Ð²ÐºÐ¸ Ð¿Ð¾ Ð¾Ð¿ÑÐ¸Ð¸ (Ð½Ð°Ð¿ÑÐ¸Ð¼ÐµÑ, 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	.\vim73\lang\menu_sl_si.cp1250.vim	/^let g:menutrans_help_dialog = "Vnesite ukaz ali besedo, za katero elite pomoè:\\n\\nUporabite predpono i_ za ukaze v naèinu za pisanje (npr.: i_CTRL-X)\\nUporabite predpono c_ za ukaze v ukazni vrstici (command-line) (npr.: c_<Del>)\\nUporabite predpono ' za imena opcij (npr.: 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	.\vim73\lang\menu_sl_si.latin2.vim	/^let g:menutrans_help_dialog = "Vnesite ukaz ali besedo, za katero ¾elite pomoè:\\n\\nUporabite predpono i_ za ukaze v naèinu za pisanje (npr.: i_CTRL-X)\\nUporabite predpono c_ za ukaze v ukazni vrstici (command-line) (npr.: c_<Del>)\\nUporabite predpono ' za imena opcij (npr.: 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	.\vim73\lang\menu_sl_si.utf-8.vim	/^let g:menutrans_help_dialog = "Vnesite ukaz ali besedo, za katero Å¾elite pomoÄ:\\n\\nUporabite predpono i_ za ukaze v naÄinu za pisanje (npr.: i_CTRL-X)\\nUporabite predpono c_ za ukaze v ukazni vrstici (command-line) (npr.: c_<Del>)\\nUporabite predpono ' za imena opcij (npr.: 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	.\vim73\lang\menu_vi_vn.vim	/^let g:menutrans_help_dialog = "HÃ£y nháº­p cÃ¢u lá»nh hoáº·c tá»« khÃ³a tÃ¬m kiáº¿m:\\n\\nThÃªm i_ Äá» tÃ¬m kiáº¿m cÃ¢u lá»nh cá»§a cháº¿ Äá» Nháº­p Input (VÃ­ dá»¥, i_CTRL-X)\\nThÃªm c_ Äá» tÃ¬m kiáº¿m cÃ¢u lá»nh cá»§a cháº¿ Äá» soáº¡n tháº£o dÃ²ng lá»nh (VÃ­ dá»¥, Ñ_<Del>)\\nThÃªm ' Äá» tÃ¬m kiáº¿m trá»£ giÃºp cho má»t tÃ¹y chá»n (vÃ­ dá»¥, 'shiftwidth')"$/;"	v
g:menutrans_no_file	.\vim73\lang\menu_ca_es.latin1.vim	/^let g:menutrans_no_file = "[Cap fitxer]"$/;"	v
g:menutrans_no_file	.\vim73\lang\menu_de_de.latin1.vim	/^let g:menutrans_no_file = "[Keine Datei]"$/;"	v
g:menutrans_no_file	.\vim73\lang\menu_eo.utf-8.vim	/^let g:menutrans_no_file = "[Neniu dosiero]"$/;"	v
g:menutrans_no_file	.\vim73\lang\menu_es_es.latin1.vim	/^let g:menutrans_no_file = "[Sin archivo]"$/;"	v
g:menutrans_no_file	.\vim73\lang\menu_fi_fi.latin1.vim	/^let g:menutrans_no_file = "[Ei tiedostoja]"$/;"	v
g:menutrans_no_file	.\vim73\lang\menu_fr_fr.latin1.vim	/^let g:menutrans_no_file = "[Aucun fichier]"$/;"	v
g:menutrans_no_file	.\vim73\lang\menu_it_it.latin1.vim	/^let g:menutrans_no_file = "[Senza nome]"$/;"	v
g:menutrans_no_file	.\vim73\lang\menu_ja_jp.euc-jp.vim	/^let g:menutrans_no_file = "[ÌµÂê]"$/;"	v
g:menutrans_no_file	.\vim73\lang\menu_ja_jp.utf-8.vim	/^let g:menutrans_no_file = "[ç¡é¡]"$/;"	v
g:menutrans_no_file	.\vim73\lang\menu_japanese_japan.932.vim	/^let g:menutrans_no_file = "[³è]"$/;"	v
g:menutrans_no_file	.\vim73\lang\menu_no_no.latin1.vim	/^	let g:menutrans_no_file = "[Uten navn]"$/;"	v
g:menutrans_no_file	.\vim73\lang\menu_pt_br.vim	/^let g:menutrans_no_file = "[Sem arquivos]"$/;"	v
g:menutrans_no_file	.\vim73\lang\menu_pt_pt.vim	/^let g:menutrans_no_file = "[Sem arquivos]"$/;"	v
g:menutrans_no_file	.\vim73\lang\menu_sl_si.cp1250.vim	/^let g:menutrans_no_file = "[Brez datoteke]"$/;"	v
g:menutrans_no_file	.\vim73\lang\menu_sl_si.latin2.vim	/^let g:menutrans_no_file = "[Brez datoteke]"$/;"	v
g:menutrans_no_file	.\vim73\lang\menu_sl_si.utf-8.vim	/^let g:menutrans_no_file = "[Brez datoteke]"$/;"	v
g:menutrans_path_dialog	.\vim73\lang\menu_ca_es.latin1.vim	/^let g:menutrans_path_dialog = "Introduïu les ubicacions on cercar fitxers.\\nSepareu els noms dels directoris amb una coma."$/;"	v
g:menutrans_path_dialog	.\vim73\lang\menu_de_de.latin1.vim	/^let g:menutrans_path_dialog = "Geben Sie Such-Pfade für Dateien ein.\\nTrennen Sie die Verzeichnis-Namen durch Kommata."$/;"	v
g:menutrans_path_dialog	.\vim73\lang\menu_eo.utf-8.vim	/^let g:menutrans_path_dialog = "Tajpu la vojon de serÄo de dosieroj.\\nDisigu la dosierujojn per komoj."$/;"	v
g:menutrans_path_dialog	.\vim73\lang\menu_es_es.latin1.vim	/^let g:menutrans_path_dialog = "Introduzca la ruta de búsqueda para los archivos.\\nSepare los nombres de los directorios con una coma."$/;"	v
g:menutrans_path_dialog	.\vim73\lang\menu_fi_fi.latin1.vim	/^let g:menutrans_path_dialog = "Anna tiedostojen hakupolku.\\nErota hakemistot pilkuin."$/;"	v
g:menutrans_path_dialog	.\vim73\lang\menu_fr_fr.latin1.vim	/^let g:menutrans_path_dialog = "Entrez le chemin de recherche des fichiers.\\nSéparez les répertoires par des virgules."$/;"	v
g:menutrans_path_dialog	.\vim73\lang\menu_hu_hu.iso_8859-2.vim	/^let g:menutrans_path_dialog = "Írd be a keresett fájl lehetséges elérési útjait, vesszõvel elválasztva"$/;"	v
g:menutrans_path_dialog	.\vim73\lang\menu_hu_hu.utf-8.vim	/^let g:menutrans_path_dialog = "Ãrd be a keresett fÃ¡jl lehetsÃ©ges elÃ©rÃ©si Ãºtjait, vesszÅvel elvÃ¡lasztva"$/;"	v
g:menutrans_path_dialog	.\vim73\lang\menu_it_it.latin1.vim	/^let g:menutrans_path_dialog = "Batti percorso di ricerca per i file.\\nSepara fra loro i nomi di directory con una virgola."$/;"	v
g:menutrans_path_dialog	.\vim73\lang\menu_ja_jp.euc-jp.vim	/^let g:menutrans_path_dialog = "¥Õ¥¡¥¤¥ë¤Î¸¡º÷¥Ñ¥¹¤òÆþÎÏ¤·¤Æ¤¯¤À¤µ¤¤:\\n¥Ç¥£¥ì¥¯¥È¥êÌ¾¤Ï¥«¥ó¥Þ ( , ) ¤Ç¶èÀÚ¤Ã¤Æ¤¯¤À¤µ¤¤."$/;"	v
g:menutrans_path_dialog	.\vim73\lang\menu_ja_jp.utf-8.vim	/^let g:menutrans_path_dialog = "ãã¡ã¤ã«ã®æ¤ç´¢ãã¹ãå¥åãã¦ãã ãã:\\nãã£ã¬ã¯ããªåã¯ã«ã³ã ( , ) ã§åºåã£ã¦ãã ãã."$/;"	v
g:menutrans_path_dialog	.\vim73\lang\menu_japanese_japan.932.vim	/^let g:menutrans_path_dialog = "t@CÌõpXðüÍµÄ­¾³¢:\\nfBNg¼ÍJ} ( , ) ÅæØÁÄ­¾³¢."$/;"	v
g:menutrans_path_dialog	.\vim73\lang\menu_nl_nl.latin1.vim	/^let g:menutrans_path_dialog = "Typ het zoekpad voor bestanden.\\nGebruik commas tussen de padnamen."$/;"	v
g:menutrans_path_dialog	.\vim73\lang\menu_no_no.latin1.vim	/^	let g:menutrans_path_dialog = "Skriv søkesti for filer.\\nSkill katalognavn med komma."$/;"	v
g:menutrans_path_dialog	.\vim73\lang\menu_pl_pl.iso_8859-2.vim	/^let g:menutrans_path_dialog = "Wprowad¼ ¶cie¿kê poszukiwania plików.\\nProszê rozdzielaæ nazwy katalogów przecinkiem."$/;"	v
g:menutrans_path_dialog	.\vim73\lang\menu_pl_pl.utf-8.vim	/^let g:menutrans_path_dialog = "WprowadÅº ÅcieÅ¼kÄ poszukiwania plikÃ³w.\\nProszÄ rozdzielaÄ nazwy katalogÃ³w przecinkiem."$/;"	v
g:menutrans_path_dialog	.\vim73\lang\menu_polish_poland.1250.vim	/^let g:menutrans_path_dialog = "Wprowad cie¿kê poszukiwania plików.\\nProszê rozdzielaæ nazwy katalogów przecinkiem."$/;"	v
g:menutrans_path_dialog	.\vim73\lang\menu_pt_br.vim	/^let g:menutrans_path_dialog = "Indique um caminho de procura para os arquivos.\\nSepare os nomes dos diretórios com uma vírgula."$/;"	v
g:menutrans_path_dialog	.\vim73\lang\menu_pt_pt.vim	/^let g:menutrans_path_dialog = "Indique um caminho de procura para os arquivos.\\nSepare os nomes dos diretórios com uma vírgula."$/;"	v
g:menutrans_path_dialog	.\vim73\lang\menu_ru_ru.koi8-r.vim	/^let g:menutrans_path_dialog = "õËÁÖÉÔÅ ÐÕÔØ ÄÌÑ ÐÏÉÓËÁ ÆÁÊÌÏ×.\\néÍÅÎÁ ËÁÔÁÌÏÇÏ× ÒÁÚÄÅÌÑÀÔÓÑ ÚÁÐÑÔÙÍÉ."$/;"	v
g:menutrans_path_dialog	.\vim73\lang\menu_ru_ru.vim	/^let g:menutrans_path_dialog = "Ð£ÐºÐ°Ð¶Ð¸ÑÐµ Ð¿ÑÑÑ Ð´Ð»Ñ Ð¿Ð¾Ð¸ÑÐºÐ° ÑÐ°Ð¹Ð»Ð¾Ð².\\nÐÐ¼ÐµÐ½Ð° ÐºÐ°ÑÐ°Ð»Ð¾Ð³Ð¾Ð² ÑÐ°Ð·Ð´ÐµÐ»ÑÑÑÑÑ Ð·Ð°Ð¿ÑÑÑÐ¼Ð¸."$/;"	v
g:menutrans_path_dialog	.\vim73\lang\menu_sl_si.cp1250.vim	/^let g:menutrans_path_dialog = "Vnesite poti za iskanje datotek.\\nImena direktorijev loèite z vejico."$/;"	v
g:menutrans_path_dialog	.\vim73\lang\menu_sl_si.latin2.vim	/^let g:menutrans_path_dialog = "Vnesite poti za iskanje datotek.\\nImena direktorijev loèite z vejico."$/;"	v
g:menutrans_path_dialog	.\vim73\lang\menu_sl_si.utf-8.vim	/^let g:menutrans_path_dialog = "Vnesite poti za iskanje datotek.\\nImena direktorijev loÄite z vejico."$/;"	v
g:menutrans_path_dialog	.\vim73\lang\menu_sr_rs.ascii.vim	/^let g:menutrans_path_dialog = "Unesite put pretrage za datoteke\\nRazdvojite zarezima imena direktorijuma."$/;"	v
g:menutrans_path_dialog	.\vim73\lang\menu_sr_rs.iso_8859-2.vim	/^let g:menutrans_path_dialog = "Unesite put pretrage za datoteke\\nRazdvojite zarezima imena direktorijuma."$/;"	v
g:menutrans_path_dialog	.\vim73\lang\menu_sr_rs.iso_8859-5.vim	/^let g:menutrans_path_dialog = "ÃÝÕáØâÕ ßãâ ßàÕâàÐÓÕ ×Ð ÔÐâÞâÕÚÕ\\nÀÐ×ÔÒÞøØâÕ ×ÐàÕ×ØÜÐ ØÜÕÝÐ ÔØàÕÚâÞàØøãÜÐ."$/;"	v
g:menutrans_path_dialog	.\vim73\lang\menu_sr_rs.utf-8.vim	/^let g:menutrans_path_dialog = "Ð£Ð½ÐµÑÐ¸ÑÐµ Ð¿ÑÑ Ð¿ÑÐµÑÑÐ°Ð³Ðµ Ð·Ð° Ð´Ð°ÑÐ¾ÑÐµÐºÐµ\\nÐ Ð°Ð·Ð´Ð²Ð¾ÑÐ¸ÑÐµ Ð·Ð°ÑÐµÐ·Ð¸Ð¼Ð° Ð¸Ð¼ÐµÐ½Ð° Ð´Ð¸ÑÐµÐºÑÐ¾ÑÐ¸ÑÑÐ¼Ð°."$/;"	v
g:menutrans_path_dialog	.\vim73\lang\menu_sv_se.latin1.vim	/^let g:menutrans_path_dialog = "Skriv in sökväg för filer.\\nSeparera katalognamn med komma"$/;"	v
g:menutrans_path_dialog	.\vim73\lang\menu_uk_ua.cp1251.vim	/^let g:menutrans_path_dialog = "Âêàæ³òü øëÿõ ïîøóêó ôàéë³â\\nÐîçä³ëÿéòå íàçâè äèðåêòîð³é êîìàìè."$/;"	v
g:menutrans_path_dialog	.\vim73\lang\menu_uk_ua.koi8-u.vim	/^let g:menutrans_path_dialog = "÷ËÁÖ¦ÔØ ÛÌÑÈ ÐÏÛÕËÕ ÆÁÊÌ¦×\\nòÏÚÄ¦ÌÑÊÔÅ ÎÁÚ×É ÄÉÒÅËÔÏÒ¦Ê ËÏÍÁÍÉ."$/;"	v
g:menutrans_path_dialog	.\vim73\lang\menu_vi_vn.vim	/^let g:menutrans_path_dialog = "HÃ£y chá» ra ÄÆ°á»ng dáº«n Äá» tÃ¬m kiáº¿m táº­p tin.\\nTÃªn cá»§a thÆ° má»¥c phÃ¢n cÃ¡ch nhau bá»i dáº¥u pháº©y."$/;"	v
g:menutrans_tags_dialog	.\vim73\lang\menu_ca_es.latin1.vim	/^let g:menutrans_tags_dialog = "Introduïu els noms dels fitxers d'etiquetes.\\nSepareu els noms amb una coma."$/;"	v
g:menutrans_tags_dialog	.\vim73\lang\menu_de_de.latin1.vim	/^let g:menutrans_tags_dialog = "Geben Sie die Namen der 'tag'-Dateien ein.\\nTrennen Sie die Namen durch Kommata."$/;"	v
g:menutrans_tags_dialog	.\vim73\lang\menu_eo.utf-8.vim	/^let g:menutrans_tags_dialog = "Tajpu la nomojn de dosieroj de etikedoj.\\nDisigu la nomojn per komoj."$/;"	v
g:menutrans_tags_dialog	.\vim73\lang\menu_es_es.latin1.vim	/^let g:menutrans_tags_dialog = "Introduzca los nombres de los archivos de tags.\\nSepare los nombres con una coma."$/;"	v
g:menutrans_tags_dialog	.\vim73\lang\menu_fi_fi.latin1.vim	/^let g:menutrans_tags_dialog = "Anna tägitiedostojen nimet.\\nErota tidostot pilkuin."$/;"	v
g:menutrans_tags_dialog	.\vim73\lang\menu_fr_fr.latin1.vim	/^let g:menutrans_tags_dialog = "Entrez les noms des fichiers d'étiquettes.\\nSéparez les noms par des virgules."$/;"	v
g:menutrans_tags_dialog	.\vim73\lang\menu_hu_hu.iso_8859-2.vim	/^let g:menutrans_tags_dialog = "Írd be a tag fájl lehetséges elérési útjait, vesszõvel elválasztva"$/;"	v
g:menutrans_tags_dialog	.\vim73\lang\menu_hu_hu.utf-8.vim	/^let g:menutrans_tags_dialog = "Ãrd be a tag fÃ¡jl lehetsÃ©ges elÃ©rÃ©si Ãºtjait, vesszÅvel elvÃ¡lasztva"$/;"	v
g:menutrans_tags_dialog	.\vim73\lang\menu_it_it.latin1.vim	/^let g:menutrans_tags_dialog = "Batti nome dei file di tag.\\nSepara fra loro i nomi di directory con una virgola."$/;"	v
g:menutrans_tags_dialog	.\vim73\lang\menu_ja_jp.euc-jp.vim	/^let g:menutrans_tags_dialog = "¥¿¥°¥Õ¥¡¥¤¥ë¤ÎÌ¾Á°¤òÆþÎÏ¤·¤Æ¤¯¤À¤µ¤¤:\\nÌ¾Á°¤Ï¥«¥ó¥Þ ( , ) ¤Ç¶èÀÚ¤Ã¤Æ¤¯¤À¤µ¤¤."$/;"	v
g:menutrans_tags_dialog	.\vim73\lang\menu_ja_jp.utf-8.vim	/^let g:menutrans_tags_dialog = "ã¿ã°ãã¡ã¤ã«ã®ååãå¥åãã¦ãã ãã:\\nååã¯ã«ã³ã ( , ) ã§åºåã£ã¦ãã ãã."$/;"	v
g:menutrans_tags_dialog	.\vim73\lang\menu_japanese_japan.932.vim	/^let g:menutrans_tags_dialog = "^Ot@CÌ¼OðüÍµÄ­¾³¢:\\n¼OÍJ} ( , ) ÅæØÁÄ­¾³¢."$/;"	v
g:menutrans_tags_dialog	.\vim73\lang\menu_nl_nl.latin1.vim	/^let g:menutrans_tags_dialog = "Typ namen van tag bestanden.\\nGebruik commas tussen de namen."$/;"	v
g:menutrans_tags_dialog	.\vim73\lang\menu_no_no.latin1.vim	/^	let g:menutrans_tags_dialog = "Skriv navn på tagfiler.\\nSkill navnene med komma."$/;"	v
g:menutrans_tags_dialog	.\vim73\lang\menu_pl_pl.iso_8859-2.vim	/^let g:menutrans_tags_dialog = "Podaj nazwy plików tagów.\\nProszê rozdzielaæ nazwy przecinkiem."$/;"	v
g:menutrans_tags_dialog	.\vim73\lang\menu_pl_pl.utf-8.vim	/^let g:menutrans_tags_dialog = "Podaj nazwy plikÃ³w tagÃ³w.\\nProszÄ rozdzielaÄ nazwy przecinkiem."$/;"	v
g:menutrans_tags_dialog	.\vim73\lang\menu_polish_poland.1250.vim	/^let g:menutrans_tags_dialog = "Podaj nazwy plików tagów.\\nProszê rozdzielaæ nazwy przecinkiem."$/;"	v
g:menutrans_tags_dialog	.\vim73\lang\menu_pt_br.vim	/^let g:menutrans_tags_dialog = "Indique os nomes dos arquivos de tags.\\nSepare os nomes com uma vírgula."$/;"	v
g:menutrans_tags_dialog	.\vim73\lang\menu_pt_pt.vim	/^let g:menutrans_tags_dialog = "Indique os nomes dos arquivos de tags.\\nSepare os nomes com uma vírgula."$/;"	v
g:menutrans_tags_dialog	.\vim73\lang\menu_ru_ru.koi8-r.vim	/^let g:menutrans_tags_dialog = "÷×ÅÄÉÔÅ ÉÍÅÎÁ ÆÁÊÌÏ× ÍÅÔÏË (ÞÅÒÅÚ ÚÁÐÑÔÕÀ).\\n"$/;"	v
g:menutrans_tags_dialog	.\vim73\lang\menu_ru_ru.vim	/^let g:menutrans_tags_dialog = "ÐÐ²ÐµÐ´Ð¸ÑÐµ Ð¸Ð¼ÐµÐ½Ð° ÑÐ°Ð¹Ð»Ð¾Ð² Ð¼ÐµÑÐ¾Ðº (ÑÐµÑÐµÐ· Ð·Ð°Ð¿ÑÑÑÑ).\\n"$/;"	v
g:menutrans_tags_dialog	.\vim73\lang\menu_sl_si.cp1250.vim	/^let g:menutrans_tags_dialog = "Vnesite imena datotek z znaèkami ('tag').\\nImana loèite z vejicami."$/;"	v
g:menutrans_tags_dialog	.\vim73\lang\menu_sl_si.latin2.vim	/^let g:menutrans_tags_dialog = "Vnesite imena datotek z znaèkami ('tag').\\nImana loèite z vejicami."$/;"	v
g:menutrans_tags_dialog	.\vim73\lang\menu_sl_si.utf-8.vim	/^let g:menutrans_tags_dialog = "Vnesite imena datotek z znaÄkami ('tag').\\nImana loÄite z vejicami."$/;"	v
g:menutrans_tags_dialog	.\vim73\lang\menu_sr_rs.ascii.vim	/^let g:menutrans_tags_dialog = "Unesite imena datoteka sa oznakama\\nRazdvojite zarezima imena."$/;"	v
g:menutrans_tags_dialog	.\vim73\lang\menu_sr_rs.iso_8859-2.vim	/^let g:menutrans_tags_dialog = "Unesite imena datoteka sa oznakama\\nRazdvojite zarezima imena."$/;"	v
g:menutrans_tags_dialog	.\vim73\lang\menu_sr_rs.iso_8859-5.vim	/^let g:menutrans_tags_dialog = "ÃÝÕáØâÕ ØÜÕÝÐ ÔÐâÞâÕÚÐ áÐ Þ×ÝÐÚÐÜÐ\\nÀÐ×ÔÒÞøØâÕ ×ÐàÕ×ØÜÐ ØÜÕÝÐ."$/;"	v
g:menutrans_tags_dialog	.\vim73\lang\menu_sr_rs.utf-8.vim	/^let g:menutrans_tags_dialog = "Ð£Ð½ÐµÑÐ¸ÑÐµ Ð¸Ð¼ÐµÐ½Ð° Ð´Ð°ÑÐ¾ÑÐµÐºÐ° ÑÐ° Ð¾Ð·Ð½Ð°ÐºÐ°Ð¼Ð°\\nÐ Ð°Ð·Ð´Ð²Ð¾ÑÐ¸ÑÐµ Ð·Ð°ÑÐµÐ·Ð¸Ð¼Ð° Ð¸Ð¼ÐµÐ½Ð°."$/;"	v
g:menutrans_tags_dialog	.\vim73\lang\menu_sv_se.latin1.vim	/^let g:menutrans_tags_dialog = "Skriv in namn på taggfiler.\\nSeparera namn med komma."$/;"	v
g:menutrans_tags_dialog	.\vim73\lang\menu_uk_ua.cp1251.vim	/^let g:menutrans_tags_dialog = "Âêàæ³òü íàçâè ôàéë³â ïîì³òîê\\nÐîçä³ëÿéòå íàçâè êîìàìè."$/;"	v
g:menutrans_tags_dialog	.\vim73\lang\menu_uk_ua.koi8-u.vim	/^let g:menutrans_tags_dialog = "÷ËÁÖ¦ÔØ ÎÁÚ×É ÆÁÊÌ¦× ÐÏÍ¦ÔÏË\\nòÏÚÄ¦ÌÑÊÔÅ ÎÁÚ×É ËÏÍÁÍÉ."$/;"	v
g:menutrans_tags_dialog	.\vim73\lang\menu_vi_vn.vim	/^let g:menutrans_tags_dialog = "Nháº­p tÃªn táº­p tin tháº» ghi (phÃ¢n cÃ¡ch bá»i dáº¥u pháº©y).\\n"$/;"	v
g:menutrans_textwidth_dialog	.\vim73\lang\menu_ca_es.latin1.vim	/^let g:menutrans_textwidth_dialog = "Introduïu la nova amplada del text (0 per infinit): "$/;"	v
g:menutrans_textwidth_dialog	.\vim73\lang\menu_de_de.latin1.vim	/^let g:menutrans_textwidth_dialog = "Geben Sie eine neue Text-Breite ein (oder 0, um die Formatierung abzuschalten)"$/;"	v
g:menutrans_textwidth_dialog	.\vim73\lang\menu_eo.utf-8.vim	/^let g:menutrans_textwidth_dialog = "Tajpu la novan larÄon de teksto\\n(0 por malÅalti formatigon)."$/;"	v
g:menutrans_textwidth_dialog	.\vim73\lang\menu_es_es.latin1.vim	/^let g:menutrans_textwidth_dialog = "Introduzca el nuevo ancho del texto (0 para desactivar el quiebre de línea): "$/;"	v
g:menutrans_textwidth_dialog	.\vim73\lang\menu_fi_fi.latin1.vim	/^let g:menutrans_textwidth_dialog = "Anna uusi tekstin leveys\\n(0 poistaa käytöstä)"$/;"	v
g:menutrans_textwidth_dialog	.\vim73\lang\menu_fr_fr.latin1.vim	/^let g:menutrans_textwidth_dialog = "Entrez la nouvelle largeur du texte\\n(0 pour désactiver le formattage)."$/;"	v
g:menutrans_textwidth_dialog	.\vim73\lang\menu_hu_hu.iso_8859-2.vim	/^let g:menutrans_textwidth_dialog = "Írd be a szöveg szélességét (0 = formázás kikapcsolva)"$/;"	v
g:menutrans_textwidth_dialog	.\vim73\lang\menu_hu_hu.utf-8.vim	/^let g:menutrans_textwidth_dialog = "Ãrd be a szÃ¶veg szÃ©lessÃ©gÃ©t (0 = formÃ¡zÃ¡s kikapcsolva)"$/;"	v
g:menutrans_textwidth_dialog	.\vim73\lang\menu_it_it.latin1.vim	/^let g:menutrans_textwidth_dialog = "Batti nuova lunghezza linea (0 per inibire la formattazione): "$/;"	v
g:menutrans_textwidth_dialog	.\vim73\lang\menu_ja_jp.euc-jp.vim	/^let g:menutrans_textwidth_dialog = "¥Æ¥­¥¹¥È¤ÎÉý('textwidth')¤òÀßÄê¤·¤Æ¤¯¤À¤µ¤¤ (0¤ÇÀ°·Á¤òÌµ¸ú²½):"$/;"	v
g:menutrans_textwidth_dialog	.\vim73\lang\menu_ja_jp.utf-8.vim	/^let g:menutrans_textwidth_dialog = "ãã­ã¹ãã®å¹('textwidth')ãè¨­å®ãã¦ãã ãã (0ã§æ´å½¢ãç¡å¹å):"$/;"	v
g:menutrans_textwidth_dialog	.\vim73\lang\menu_japanese_japan.932.vim	/^let g:menutrans_textwidth_dialog = "eLXgÌ('textwidth')ðÝèµÄ­¾³¢ (0Å®`ð³ø»):"$/;"	v
g:menutrans_textwidth_dialog	.\vim73\lang\menu_nl_nl.latin1.vim	/^let g:menutrans_textwidth_dialog = "Typ de nieuwe tekst breedte (0 om formatteren uit the schakelen): "$/;"	v
g:menutrans_textwidth_dialog	.\vim73\lang\menu_no_no.latin1.vim	/^	let g:menutrans_textwidth_dialog = "Velg ny tekstbredde (0 for å forhindre formatering): "$/;"	v
g:menutrans_textwidth_dialog	.\vim73\lang\menu_pl_pl.iso_8859-2.vim	/^let g:menutrans_textwidth_dialog = "Wprowad¼ now± szeroko¶æ tekstu (0 wy³±cza przewijanie): "$/;"	v
g:menutrans_textwidth_dialog	.\vim73\lang\menu_pl_pl.utf-8.vim	/^let g:menutrans_textwidth_dialog = "WprowadÅº nowÄ szerokoÅÄ tekstu (0 wyÅÄcza przewijanie): "$/;"	v
g:menutrans_textwidth_dialog	.\vim73\lang\menu_polish_poland.1250.vim	/^let g:menutrans_textwidth_dialog = "Wprowad now¹ szerokoæ tekstu (0 wy³¹cza przewijanie): "$/;"	v
g:menutrans_textwidth_dialog	.\vim73\lang\menu_pt_br.vim	/^let g:menutrans_textwidth_dialog = "Digite a nova largura do texto (0 para desativar a formatação): "$/;"	v
g:menutrans_textwidth_dialog	.\vim73\lang\menu_pt_pt.vim	/^let g:menutrans_textwidth_dialog = "Digite a nova largura do texto (0 para desativar a formatação): "$/;"	v
g:menutrans_textwidth_dialog	.\vim73\lang\menu_ru_ru.koi8-r.vim	/^let g:menutrans_textwidth_dialog = "÷×ÅÄÉÔÅ ÛÉÒÉÎÕ ÔÅËÓÔÁ ÄÌÑ ÆÏÒÍÁÔÉÒÏ×ÁÎÉÑ.\\näÌÑ ÏÔÍÅÎÙ ÆÏÒÍÁÔÉÒÏ×ÁÎÉÑ ××ÅÄÉÔÅ 0."$/;"	v
g:menutrans_textwidth_dialog	.\vim73\lang\menu_ru_ru.vim	/^let g:menutrans_textwidth_dialog = "ÐÐ²ÐµÐ´Ð¸ÑÐµ ÑÐ¸ÑÐ¸Ð½Ñ ÑÐµÐºÑÑÐ° Ð´Ð»Ñ ÑÐ¾ÑÐ¼Ð°ÑÐ¸ÑÐ¾Ð²Ð°Ð½Ð¸Ñ.\\nÐÐ»Ñ Ð¾ÑÐ¼ÐµÐ½Ñ ÑÐ¾ÑÐ¼Ð°ÑÐ¸ÑÐ¾Ð²Ð°Ð½Ð¸Ñ Ð²Ð²ÐµÐ´Ð¸ÑÐµ 0."$/;"	v
g:menutrans_textwidth_dialog	.\vim73\lang\menu_sl_si.cp1250.vim	/^let g:menutrans_textwidth_dialog = "Vnesite novo irino besedila (ali 0 za izklop formatiranja): "$/;"	v
g:menutrans_textwidth_dialog	.\vim73\lang\menu_sl_si.latin2.vim	/^let g:menutrans_textwidth_dialog = "Vnesite novo ¹irino besedila (ali 0 za izklop formatiranja): "$/;"	v
g:menutrans_textwidth_dialog	.\vim73\lang\menu_sl_si.utf-8.vim	/^let g:menutrans_textwidth_dialog = "Vnesite novo Å¡irino besedila (ali 0 za izklop formatiranja): "$/;"	v
g:menutrans_textwidth_dialog	.\vim73\lang\menu_sr_rs.ascii.vim	/^let g:menutrans_textwidth_dialog = "Unesite novu sirinu teksta (0 sprecava prelom)"$/;"	v
g:menutrans_textwidth_dialog	.\vim73\lang\menu_sr_rs.iso_8859-2.vim	/^let g:menutrans_textwidth_dialog = "Unesite novu ¹irinu teksta (0 spreèava prelom)"$/;"	v
g:menutrans_textwidth_dialog	.\vim73\lang\menu_sr_rs.iso_8859-5.vim	/^let g:menutrans_textwidth_dialog = "ÃÝÕáØâÕ ÝÞÒã èØàØÝã âÕÚáâÐ (0 áßàÕçÐÒÐ ßàÕÛÞÜ)"$/;"	v
g:menutrans_textwidth_dialog	.\vim73\lang\menu_sr_rs.utf-8.vim	/^let g:menutrans_textwidth_dialog = "Ð£Ð½ÐµÑÐ¸ÑÐµ Ð½Ð¾Ð²Ñ ÑÐ¸ÑÐ¸Ð½Ñ ÑÐµÐºÑÑÐ° (0 ÑÐ¿ÑÐµÑÐ°Ð²Ð° Ð¿ÑÐµÐ»Ð¾Ð¼)"$/;"	v
g:menutrans_textwidth_dialog	.\vim73\lang\menu_sv_se.latin1.vim	/^let g:menutrans_textwidth_dialog = "Välj ny textbredd (0 för att förhindra formatering): "$/;"	v
g:menutrans_textwidth_dialog	.\vim73\lang\menu_uk_ua.cp1251.vim	/^let g:menutrans_textwidth_dialog = "Âêàæ³òü íîâó øèðèíó òåêñòó (0 äëÿ â³äì³íè ôîìàòóâàííÿ)"$/;"	v
g:menutrans_textwidth_dialog	.\vim73\lang\menu_uk_ua.koi8-u.vim	/^let g:menutrans_textwidth_dialog = "÷ËÁÖ¦ÔØ ÎÏ×Õ ÛÉÒÉÎÕ ÔÅËÓÔÕ (0 ÄÌÑ ×¦ÄÍ¦ÎÉ ÆÏÍÁÔÕ×ÁÎÎÑ)"$/;"	v
g:menutrans_textwidth_dialog	.\vim73\lang\menu_vi_vn.vim	/^let g:menutrans_textwidth_dialog = "HÃ£y nháº­p chiá»u rá»ng vÄn báº£n má»i.\\nNháº­p 0 Äá» há»§y bá»."$/;"	v
g:neocomplcache_auto_completion_start_length	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^let g:neocomplcache_auto_completion_start_length =$/;"	v
g:neocomplcache_caching_limit_file_size	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^let g:neocomplcache_caching_limit_file_size =$/;"	v
g:neocomplcache_ctags_program	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^let g:neocomplcache_ctags_program =$/;"	v
g:neocomplcache_cursor_hold_i_time	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^let g:neocomplcache_cursor_hold_i_time =$/;"	v
g:neocomplcache_disable_auto_complete	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^let g:neocomplcache_disable_auto_complete =$/;"	v
g:neocomplcache_disable_caching_file_path_pattern	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^let g:neocomplcache_disable_caching_file_path_pattern =$/;"	v
g:neocomplcache_disabled_sources_list	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^  let g:neocomplcache_disabled_sources_list._ =$/;"	v
g:neocomplcache_disabled_sources_list	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^let g:neocomplcache_disabled_sources_list =$/;"	v
g:neocomplcache_enable_auto_close_preview	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^let g:neocomplcache_enable_auto_close_preview =$/;"	v
g:neocomplcache_enable_auto_delimiter	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^let g:neocomplcache_enable_auto_delimiter =$/;"	v
g:neocomplcache_enable_auto_select	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^let g:neocomplcache_enable_auto_select =$/;"	v
g:neocomplcache_enable_caching_message	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^let g:neocomplcache_enable_caching_message =$/;"	v
g:neocomplcache_enable_camel_case_completion	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^let g:neocomplcache_enable_camel_case_completion =$/;"	v
g:neocomplcache_enable_cursor_hold_i	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^let g:neocomplcache_enable_cursor_hold_i =$/;"	v
g:neocomplcache_enable_debug	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^let g:neocomplcache_enable_debug =$/;"	v
g:neocomplcache_enable_fuzzy_completion	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^let g:neocomplcache_enable_fuzzy_completion =$/;"	v
g:neocomplcache_enable_ignore_case	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^let g:neocomplcache_enable_ignore_case =$/;"	v
g:neocomplcache_enable_insert_char_pre	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^let g:neocomplcache_enable_insert_char_pre =$/;"	v
g:neocomplcache_enable_prefetch	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^let g:neocomplcache_enable_prefetch =$/;"	v
g:neocomplcache_enable_smart_case	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^let g:neocomplcache_enable_smart_case =$/;"	v
g:neocomplcache_enable_underbar_completion	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^let g:neocomplcache_enable_underbar_completion =$/;"	v
g:neocomplcache_enable_wildcard	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^let g:neocomplcache_enable_wildcard =$/;"	v
g:neocomplcache_force_overwrite_completefunc	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^let g:neocomplcache_force_overwrite_completefunc =$/;"	v
g:neocomplcache_fuzzy_completion_start_length	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^let g:neocomplcache_fuzzy_completion_start_length =$/;"	v
g:neocomplcache_include_exprs	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\filename_include.vim	/^  let g:neocomplcache_include_exprs = {}$/;"	v
g:neocomplcache_include_paths	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\filename_include.vim	/^  let g:neocomplcache_include_paths = {}$/;"	v
g:neocomplcache_include_patterns	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\filename_include.vim	/^  let g:neocomplcache_include_patterns = {}$/;"	v
g:neocomplcache_include_suffixes	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\filename_include.vim	/^  let g:neocomplcache_include_suffixes = {}$/;"	v
g:neocomplcache_lock_buffer_name_pattern	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^let g:neocomplcache_lock_buffer_name_pattern =$/;"	v
g:neocomplcache_lock_iminsert	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^let g:neocomplcache_lock_iminsert =$/;"	v
g:neocomplcache_manual_completion_start_length	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^let g:neocomplcache_manual_completion_start_length =$/;"	v
g:neocomplcache_max_keyword_width	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^let g:neocomplcache_max_keyword_width =$/;"	v
g:neocomplcache_max_list	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^let g:neocomplcache_max_list =$/;"	v
g:neocomplcache_max_menu_width	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^let g:neocomplcache_max_menu_width =$/;"	v
g:neocomplcache_min_keyword_length	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^let g:neocomplcache_min_keyword_length =$/;"	v
g:neocomplcache_min_syntax_length	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\syntax_complete.vim	/^  let g:neocomplcache_min_syntax_length = 4$/;"	v
g:neocomplcache_release_cache_time	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^let g:neocomplcache_release_cache_time =$/;"	v
g:neocomplcache_skip_auto_completion_time	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^let g:neocomplcache_skip_auto_completion_time =$/;"	v
g:neocomplcache_source_completion_length	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^  let g:neocomplcache_source_completion_length =$/;"	v
g:neocomplcache_source_completion_length	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^let g:neocomplcache_source_completion_length =$/;"	v
g:neocomplcache_source_rank	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^  let g:neocomplcache_source_rank = g:neocomplcache_plugin_rank$/;"	v
g:neocomplcache_source_rank	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^let g:neocomplcache_source_rank =$/;"	v
g:neocomplcache_sources_list	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^let g:neocomplcache_sources_list =$/;"	v
g:neocomplcache_temporary_dir	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^let g:neocomplcache_temporary_dir =$/;"	v
g:neocomplcache_wildcard_characters	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^let g:neocomplcache_wildcard_characters =$/;"	v
g:netrw_cursorline	.\vim73\autoload\netrw.vim	/^ let g:netrw_cursorline= 1$/;"	v
g:netrw_cygwin	.\vim73\autoload\netrw.vim	/^   let g:netrw_cygwin= 0$/;"	v
g:netrw_cygwin	.\vim73\autoload\netrw.vim	/^   let g:netrw_cygwin= 1$/;"	v
g:netrw_cygwin	.\vim73\autoload\netrw.vim	/^  let g:netrw_cygwin= 0$/;"	v
g:netrw_cygwin	.\vim73\autoload\tar.vim	/^   let g:netrw_cygwin= 0$/;"	v
g:netrw_cygwin	.\vim73\autoload\tar.vim	/^   let g:netrw_cygwin= 1$/;"	v
g:netrw_cygwin	.\vim73\autoload\tar.vim	/^  let g:netrw_cygwin= 0$/;"	v
g:netrw_cygwin	.\vim73\autoload\vimball.vim	/^    let g:netrw_cygwin= 0$/;"	v
g:netrw_cygwin	.\vim73\autoload\vimball.vim	/^    let g:netrw_cygwin= 1$/;"	v
g:netrw_cygwin	.\vim73\autoload\vimball.vim	/^   let g:netrw_cygwin= 0$/;"	v
g:netrw_dav_cmd	.\vim73\autoload\netrw.vim	/^  let g:netrw_dav_cmd	= "cadaver"$/;"	v
g:netrw_dav_cmd	.\vim73\autoload\netrw.vim	/^  let g:netrw_dav_cmd	= "curl"$/;"	v
g:netrw_dav_cmd	.\vim73\autoload\netrw.vim	/^  let g:netrw_dav_cmd   = ""$/;"	v
g:netrw_fetch_cmd	.\vim73\autoload\netrw.vim	/^  let g:netrw_fetch_cmd	= ""$/;"	v
g:netrw_fetch_cmd	.\vim73\autoload\netrw.vim	/^  let g:netrw_fetch_cmd	= "fetch -o"$/;"	v
g:netrw_ftp_cmd	.\vim73\autoload\netrw.vim	/^  let g:netrw_ftp_cmd	= "ftp"$/;"	v
g:netrw_ftp_list_cmd	.\vim73\autoload\netrw.vim	/^  let g:netrw_ftp_list_cmd     = "dir"$/;"	v
g:netrw_ftp_list_cmd	.\vim73\autoload\netrw.vim	/^  let g:netrw_ftp_list_cmd     = "ls -lF"$/;"	v
g:netrw_ftp_sizelist_cmd	.\vim73\autoload\netrw.vim	/^  let g:netrw_ftp_sizelist_cmd = "dir"$/;"	v
g:netrw_ftp_sizelist_cmd	.\vim73\autoload\netrw.vim	/^  let g:netrw_ftp_sizelist_cmd = "ls -slF"$/;"	v
g:netrw_ftp_timelist_cmd	.\vim73\autoload\netrw.vim	/^  let g:netrw_ftp_timelist_cmd = "dir"$/;"	v
g:netrw_ftp_timelist_cmd	.\vim73\autoload\netrw.vim	/^  let g:netrw_ftp_timelist_cmd = "ls -tlF"$/;"	v
g:netrw_http_cmd	.\vim73\autoload\netrw.vim	/^  let g:netrw_http_cmd	= ""$/;"	v
g:netrw_http_cmd	.\vim73\autoload\netrw.vim	/^  let g:netrw_http_cmd	= "curl"$/;"	v
g:netrw_http_cmd	.\vim73\autoload\netrw.vim	/^  let g:netrw_http_cmd	= "fetch"$/;"	v
g:netrw_http_cmd	.\vim73\autoload\netrw.vim	/^  let g:netrw_http_cmd	= "wget"$/;"	v
g:netrw_http_cmd	.\vim73\autoload\netrw.vim	/^  let g:netrw_http_cmd = "elinks"$/;"	v
g:netrw_http_cmd	.\vim73\autoload\netrw.vim	/^  let g:netrw_http_cmd = "links"$/;"	v
g:netrw_ignorenetrc	.\vim73\autoload\netrw.vim	/^  let g:netrw_ignorenetrc= 0$/;"	v
g:netrw_ignorenetrc	.\vim73\autoload\netrw.vim	/^  let g:netrw_ignorenetrc= 1$/;"	v
g:netrw_list_cmd	.\vim73\autoload\netrw.vim	/^  let g:netrw_list_cmd= ""$/;"	v
g:netrw_list_cmd	.\vim73\autoload\netrw.vim	/^  let g:netrw_list_cmd= g:netrw_scp_cmd." -ls USEPORT HOSTNAME:"$/;"	v
g:netrw_list_cmd	.\vim73\autoload\netrw.vim	/^  let g:netrw_list_cmd= g:netrw_ssh_cmd." USEPORT HOSTNAME ls -FLa"$/;"	v
g:netrw_list_cmd	.\vim73\autoload\netrw.vim	/^ let g:netrw_list_cmd= g:netrw_list_cmd." -l"$/;"	v
g:netrw_liststyle	.\vim73\autoload\netrw.vim	/^ let g:netrw_liststyle= s:THINLIST$/;"	v
g:netrw_localcopycmd	.\vim73\autoload\netrw.vim	/^   let g:netrw_localcopycmd= "copy"$/;"	v
g:netrw_localcopycmd	.\vim73\autoload\netrw.vim	/^   let g:netrw_localcopycmd= "cp"$/;"	v
g:netrw_localcopycmd	.\vim73\autoload\netrw.vim	/^  let g:netrw_localcopycmd= ""$/;"	v
g:netrw_localcopycmd	.\vim73\autoload\netrw.vim	/^  let g:netrw_localcopycmd= "cp"$/;"	v
g:netrw_localcopycmd	.\vim73\autoload\tar.vim	/^    let g:netrw_localcopycmd= "copy"$/;"	v
g:netrw_localcopycmd	.\vim73\autoload\tar.vim	/^    let g:netrw_localcopycmd= "cp"$/;"	v
g:netrw_localcopycmd	.\vim73\autoload\tar.vim	/^   let g:netrw_localcopycmd= ""$/;"	v
g:netrw_localcopycmd	.\vim73\autoload\tar.vim	/^   let g:netrw_localcopycmd= "cp"$/;"	v
g:netrw_localmovecmd	.\vim73\autoload\netrw.vim	/^   let g:netrw_localmovecmd= "move"$/;"	v
g:netrw_localmovecmd	.\vim73\autoload\netrw.vim	/^   let g:netrw_localmovecmd= "mv"$/;"	v
g:netrw_localmovecmd	.\vim73\autoload\netrw.vim	/^  let g:netrw_localmovecmd= ""$/;"	v
g:netrw_localmovecmd	.\vim73\autoload\netrw.vim	/^  let g:netrw_localmovecmd= "mv"$/;"	v
g:netrw_scp_cmd	.\vim73\autoload\netrw.vim	/^   let g:netrw_scp_cmd ="pscp -i C:\\\\private.ppk"$/;"	v
g:netrw_sort_sequence	.\vim73\autoload\netrw.vim	/^  let g:netrw_sort_sequence= '[\\\/]$,\\.h$,\\.c$,\\.cpp$,*,\\.o$,\\.obj$,\\.info$,\\.swp$,\\.bak$,\\~$'$/;"	v
g:netrw_sort_sequence	.\vim73\autoload\netrw.vim	/^  let g:netrw_sort_sequence= '[\\\/]$,\\<core\\%(\\.\\d\\+\\)\\=\\>,\\.h$,\\.c$,\\.cpp$,*,\\.o$,\\.obj$,\\.info$,\\.swp$,\\.bak$,\\~$'$/;"	v
g:omni#cpp#includes#CACHE_FILE_TIME	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\includes.vim	/^let g:omni#cpp#includes#CACHE_FILE_TIME = {}$/;"	v
g:omni#cpp#includes#CACHE_INCLUDES	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\includes.vim	/^let g:omni#cpp#includes#CACHE_INCLUDES = {}$/;"	v
g:omni#cpp#namespaces#CacheResolve	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\namespaces.vim	/^let g:omni#cpp#namespaces#CacheResolve = {}$/;"	v
g:omni#cpp#namespaces#CacheUsing	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\namespaces.vim	/^let g:omni#cpp#namespaces#CacheUsing = {}$/;"	v
g:omni#cpp#utils#CACHE_TAG_INHERITS	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\utils.vim	/^let g:omni#cpp#utils#CACHE_TAG_INHERITS = {}$/;"	v
g:omni#cpp#utils#szFilterGlobalScope	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\utils.vim	/^let g:omni#cpp#utils#szFilterGlobalScope .= "&& (!has_key(v:val, 'enum') || (has_key(v:val, 'enum') && v:val.enum =~ '^\\\\w\\\\+$')))"$/;"	v
g:omni#cpp#utils#szFilterGlobalScope	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\utils.vim	/^let g:omni#cpp#utils#szFilterGlobalScope = "(!has_key(v:val, 'class') && !has_key(v:val, 'struct') && !has_key(v:val, 'union') && !has_key(v:val, 'namespace')"$/;"	v
g:omni_sql_ignorecase	.\vim73\autoload\sqlcomplete.vim	/^    let g:omni_sql_ignorecase = &ignorecase$/;"	v
g:omni_sql_include_owner	.\vim73\autoload\sqlcomplete.vim	/^            let g:omni_sql_include_owner = 1$/;"	v
g:omni_sql_include_owner	.\vim73\autoload\sqlcomplete.vim	/^    let g:omni_sql_include_owner = 0$/;"	v
g:omni_sql_precache_syntax_groups	.\vim73\autoload\sqlcomplete.vim	/^    let g:omni_sql_precache_syntax_groups = [$/;"	v
g:omni_sql_use_tbl_alias	.\vim73\autoload\sqlcomplete.vim	/^    let g:omni_sql_use_tbl_alias = 'a'$/;"	v
g:omni_syntax_group_exclude_lifelines	.\vim73\syntax\lifelines.vim	/^		let g:omni_syntax_group_exclude_lifelines = 'lifelinesError'$/;"	v
g:omni_syntax_ignorecase	.\vim73\autoload\syntaxcomplete.vim	/^    let g:omni_syntax_ignorecase = &ignorecase$/;"	v
g:omni_syntax_minimum_length	.\vim73\autoload\syntaxcomplete.vim	/^    let g:omni_syntax_minimum_length = 0$/;"	v
g:omni_syntax_use_iskeyword	.\vim73\autoload\syntaxcomplete.vim	/^    let g:omni_syntax_use_iskeyword = 1$/;"	v
g:rubycomplete_buffer_loading	.\vim73\autoload\rubycomplete.vim	/^    let g:rubycomplete_buffer_loading = 0$/;"	v
g:rubycomplete_classes_in_global	.\vim73\autoload\rubycomplete.vim	/^    let g:rubycomplete_classes_in_global = 0$/;"	v
g:rubycomplete_include_object	.\vim73\autoload\rubycomplete.vim	/^    let g:rubycomplete_include_object = 0$/;"	v
g:rubycomplete_include_objectspace	.\vim73\autoload\rubycomplete.vim	/^    let g:rubycomplete_include_objectspace = 0$/;"	v
g:rubycomplete_rails	.\vim73\autoload\rubycomplete.vim	/^    let g:rubycomplete_rails = 0$/;"	v
g:sh_fold_enabled	.\vim73\syntax\sh.vim	/^ let g:sh_fold_enabled= 0$/;"	v
g:snipMate	.\vimfiles\bundle\vim-snipmate\autoload\snipMate.vim	/^  let g:snipMate = {}$/;"	v
g:snipMate	.\vimfiles\bundle\vim-snipmate\plugin\snipMate.vim	/^  let g:snipMate = {}$/;"	v
g:snipMateSources	.\vimfiles\bundle\vim-snipmate\plugin\snipMate.vim	/^  let g:snipMateSources = {}$/;"	v
g:snipMateSources	.\vimfiles\bundle\vim-snipmate\plugin\snipMate.vim	/^  let g:snipMateSources['default'] = funcref#Function('snipMate#DefaultPool')$/;"	v
g:spec_tlib_list	.\vimfiles\bundle\tlib_vim\spec\tlib\input.vim	/^let g:spec_tlib_list = [10, 20, 30, 40, 'a50', 'aa60', 'b70', 'ba80', 90]$/;"	v
g:spell_clean_limit	.\vim73\spell\cleanadd.vim	/^  let g:spell_clean_limit = 1$/;"	v
g:spellfile_URL	.\vim73\autoload\spellfile.vim	/^    let g:spellfile_URL = 'ftp:\/\/ftp.vim.org\/pub\/vim\/runtime\/spell'$/;"	v
g:spellfile_URL	.\vim73\autoload\spellfile.vim	/^    let g:spellfile_URL = 'http:\/\/ftp.vim.org\/pub\/vim\/runtime\/spell'$/;"	v
g:tar_browseoptions	.\vim73\autoload\tar.vim	/^ let g:tar_browseoptions= "Ptf"$/;"	v
g:tar_cmd	.\vim73\autoload\tar.vim	/^ let g:tar_cmd= "tar"$/;"	v
g:tar_copycmd	.\vim73\autoload\tar.vim	/^ let g:tar_copycmd= g:netrw_localcopycmd$/;"	v
g:tar_extractcmd	.\vim73\autoload\tar.vim	/^ let g:tar_extractcmd= "tar -xf"$/;"	v
g:tar_readoptions	.\vim73\autoload\tar.vim	/^ let g:tar_readoptions= "OPxf"$/;"	v
g:tar_shq	.\vim73\autoload\tar.vim	/^   let g:tar_shq= "'"$/;"	v
g:tar_shq	.\vim73\autoload\tar.vim	/^   let g:tar_shq= '"'$/;"	v
g:tar_shq	.\vim73\autoload\tar.vim	/^  let g:tar_shq= "'"$/;"	v
g:tar_shq	.\vim73\autoload\tar.vim	/^  let g:tar_shq= &shq$/;"	v
g:tar_writeoptions	.\vim73\autoload\tar.vim	/^ let g:tar_writeoptions= "uf"$/;"	v
g:tex_fold_enabled	.\vim73\syntax\tex.vim	/^ let g:tex_fold_enabled= 0$/;"	v
g:tex_no_error	.\vim73\syntax\tex.vim	/^ let g:tex_no_error= 1$/;"	v
g:tlib#cmd#last_output	.\vimfiles\bundle\tlib_vim\autoload\tlib\cmd.vim	/^let g:tlib#cmd#last_output = []$/;"	v
g:tlib#date#dayshift	.\vimfiles\bundle\tlib_vim\autoload\tlib\date.vim	/^let g:tlib#date#dayshift = 60 * 60 * 24$/;"	v
g:tlib#hash#use_adler32	.\vimfiles\bundle\tlib_vim\autoload\tlib\hash.vim	/^    let g:tlib#hash#use_adler32 = ''   "{{{2$/;"	v
g:tlib#hash#use_crc32	.\vimfiles\bundle\tlib_vim\autoload\tlib\hash.vim	/^    let g:tlib#hash#use_crc32 = ''   "{{{2$/;"	v
g:tlib#hash#use_crc32	.\vimfiles\bundle\tlib_vim\spec\tlib\hash.vim	/^let g:tlib#hash#use_crc32 = 'ruby'$/;"	v
g:tlib#hash#use_crc32	.\vimfiles\bundle\tlib_vim\spec\tlib\hash.vim	/^let g:tlib#hash#use_crc32 = 'vim'$/;"	v
g:tlib#hash#use_crc32	.\vimfiles\bundle\tlib_vim\spec\tlib\hash.vim	/^let g:tlib#hash#use_crc32 = g:tlib_hash_use_crc32$/;"	v
g:tlib#vcs#executables	.\vimfiles\bundle\tlib_vim\autoload\tlib\vcs.vim	/^            let g:tlib#vcs#executables[s:cmd] = executable(s:cmd1) ? s:cmd1 : ''$/;"	v
g:tlib#vim#simalt_maximize	.\vimfiles\bundle\tlib_vim\autoload\tlib\vim.vim	/^        let g:tlib#vim#simalt_maximize = 'x'   "{{{2$/;"	v
g:tlib#vim#simalt_restore	.\vimfiles\bundle\tlib_vim\autoload\tlib\vim.vim	/^        let g:tlib#vim#simalt_restore = 'r'   "{{{2$/;"	v
g:tlib#vim#use_vimtweak	.\vimfiles\bundle\tlib_vim\autoload\tlib\vim.vim	/^        let g:tlib#vim#use_vimtweak = 0   "{{{2$/;"	v
g:tlib#vim#use_wmctrl	.\vimfiles\bundle\tlib_vim\autoload\tlib\vim.vim	/^        let g:tlib#vim#use_wmctrl = executable('wmctrl')  "{{{2$/;"	v
g:tlib_hash_use_crc32	.\vimfiles\bundle\tlib_vim\spec\tlib\hash.vim	/^let g:tlib_hash_use_crc32 = g:tlib#hash#use_crc32$/;"	v
g:vhdl_indent_genportmap	.\vim73\indent\vhdl.vim	/^  let g:vhdl_indent_genportmap = 1$/;"	v
g:vhdl_indent_rhsassign	.\vim73\indent\vhdl.vim	/^  let g:vhdl_indent_rhsassign = 1$/;"	v
g:vimball_mkdir	.\vim73\autoload\vimball.vim	/^   let g:vimball_mkdir= "makedir"$/;"	v
g:vimball_mkdir	.\vim73\autoload\vimball.vim	/^   let g:vimball_mkdir= "mkdir"$/;"	v
g:vimball_mkdir	.\vim73\autoload\vimball.vim	/^   let g:vimball_mkdir= g:netrw_local_mkdir$/;"	v
g:vimsyn_embed	.\vim73\syntax\vim.vim	/^ let g:vimsyn_embed= "lmpPr"$/;"	v
g:vimsyn_maxlines	.\vim73\syntax\vim.vim	/^ let g:vimsyn_maxlines= g:vim_maxlines$/;"	v
g:vimsyn_minlines	.\vim73\syntax\vim.vim	/^ let g:vimsyn_minlines= g:vim_minlines$/;"	v
g:vimsyn_noerror	.\vim73\syntax\vim.vim	/^ let g:vimsyn_noerror= g:vimsyntax_noerror$/;"	v
g:xmldata_html32	.\vim73\autoload\xml\html32.vim	/^let g:xmldata_html32 = {$/;"	v
g:xmldata_html401s	.\vim73\autoload\xml\html401s.vim	/^let g:xmldata_html401s = {$/;"	v
g:xmldata_html401t	.\vim73\autoload\xml\html401f.vim	/^let g:xmldata_html401t = {$/;"	v
g:xmldata_html401t	.\vim73\autoload\xml\html401t.vim	/^let g:xmldata_html401t = {$/;"	v
g:xmldata_html40s	.\vim73\autoload\xml\html40s.vim	/^let g:xmldata_html40s = {$/;"	v
g:xmldata_html40t	.\vim73\autoload\xml\html40f.vim	/^let g:xmldata_html40t = {$/;"	v
g:xmldata_html40t	.\vim73\autoload\xml\html40t.vim	/^let g:xmldata_html40t = {$/;"	v
g:xmldata_xhtml10f	.\vim73\autoload\xml\xhtml10f.vim	/^let g:xmldata_xhtml10f = {$/;"	v
g:xmldata_xhtml10s	.\vim73\autoload\xml\xhtml10s.vim	/^let g:xmldata_xhtml10s = {$/;"	v
g:xmldata_xhtml10t	.\vim73\autoload\xml\xhtml10t.vim	/^let g:xmldata_xhtml10t = {$/;"	v
g:xmldata_xhtml11	.\vim73\autoload\xml\xhtml11.vim	/^let g:xmldata_xhtml11 = {$/;"	v
g:xmldata_xsd	.\vim73\autoload\xml\xsd.vim	/^let g:xmldata_xsd = {$/;"	v
g:xmldata_xsl	.\vim73\autoload\xml\xsl.vim	/^let g:xmldata_xsl = {$/;"	v
g:zip_shq	.\vim73\autoload\zip.vim	/^  let g:zip_shq= "'"$/;"	v
g:zip_shq	.\vim73\autoload\zip.vim	/^  let g:zip_shq= &shq$/;"	v
g:zip_shq	.\vim73\autoload\zip.vim	/^  let g:zip_shq= '"'$/;"	v
g:zip_unzipcmd	.\vim73\autoload\zip.vim	/^ let g:zip_unzipcmd= "unzip"$/;"	v
g:zip_zipcmd	.\vim73\autoload\zip.vim	/^ let g:zip_zipcmd= "zip"$/;"	v
g<C-]>	.\vim73\ftplugin\ada.vim	/^	 nnoremap <unique> <buffer> g<C-]>   :call ada#Jump_Tag ('','stjump')<cr>$/;"	m
g<C-]>	.\vim73\ftplugin\ada.vim	/^	 nnoremap <unique> <buffer> g<C-]>   :call ada#List_Tag ()<cr>$/;"	m
g<C-]>	.\vim73\ftplugin\ruby.vim	/^    nnoremap <silent> <buffer> g<C-]>      :<C-U>exe         "tjump <C-R>=RubyCursorIdentifier()<CR>"<CR>$/;"	m
g<LeftMouse>	<C-RightMouse>	.\vim73\macros\swapmous.vim	/^noremap	 g<LeftMouse>	<C-RightMouse>$/;"	m
g<RightMouse>	<C-LeftMouse>	.\vim73\macros\swapmous.vim	/^noremap	 g<RightMouse>	<C-LeftMouse>$/;"	m
g]	.\vim73\ftplugin\ruby.vim	/^    nnoremap <silent> <buffer> g]          :<C-U>exe       "tselect <C-R>=RubyCursorIdentifier()<CR>"<CR>$/;"	m
gdb_minlines	.\vim73\syntax\gdb.vim	/^  let gdb_minlines = 10$/;"	v
gdzie	.\vim73\tutor\tutor.pl	/^  gdzie:$/;"	l
gecos_name	.\vim73\ftplugin\changelog.vim	/^  function! s:gecos_name(login)$/;"	f
generate_suffix_groups	.\vim73\syntax\hostconf.vim	/^function s:generate_suffix_groups(list_of_order_of_orders, context, trailing_context)$/;"	f
getAuthor	.\vim73\ftplugin\debchangelog.vim	/^function! s:getAuthor(zonestart, zoneend)$/;"	f
getBooleanOption	.\ctags58\options.c	/^static boolean getBooleanOption ($/;"	f	file:	signature:( const char *const option, const char *const parameter)
getChar	.\ctags58\fortran.c	/^static int getChar (void)$/;"	f	file:	signature:(void)
getDirectiveNestLevel	.\ctags58\get.c	/^extern unsigned int getDirectiveNestLevel (void)$/;"	f	signature:(void)
getDirectiveNestLevel	.\ctags58\get.h	/^extern unsigned int getDirectiveNestLevel (void);$/;"	p	signature:(void)
getExecutableName	.\ctags58\routines.c	/^extern const char *getExecutableName (void)$/;"	f	signature:(void)
getExecutableName	.\ctags58\routines.h	/^extern const char *getExecutableName (void);$/;"	p	signature:(void)
getExecutablePath	.\ctags58\routines.c	/^extern const char *getExecutablePath (void)$/;"	f	signature:(void)
getExecutablePath	.\ctags58\routines.h	/^extern const char *getExecutablePath (void);$/;"	p	signature:(void)
getExtensionLanguage	.\ctags58\parse.c	/^static langType getExtensionLanguage (const char *const extension)$/;"	f	file:	signature:(const char *const extension)
getField	.\vim73\ftplugin\debcontrol.vim	/^function! s:getField(f, lnum)$/;"	f
getFileLanguage	.\ctags58\parse.c	/^extern langType getFileLanguage (const char *const fileName)$/;"	f	signature:(const char *const fileName)
getFileLanguage	.\ctags58\parse.h	/^extern langType getFileLanguage (const char *const fileName);$/;"	p	signature:(const char *const fileName)
getFixedFormChar	.\ctags58\fortran.c	/^static int getFixedFormChar (void)$/;"	f	file:	signature:(void)
getFreeFormChar	.\ctags58\fortran.c	/^static int getFreeFormChar (void)$/;"	f	file:	signature:(void)
getHashTable	.\ctags58\keyword.c	/^static hashEntry **getHashTable (void)$/;"	f	file:	signature:(void)
getHashTableEntry	.\ctags58\keyword.c	/^static hashEntry *getHashTableEntry (unsigned long hashedValue)$/;"	f	file:	signature:(unsigned long hashedValue)
getInputFileName	.\ctags58\read.h	35;"	d
getInputFilePosition	.\ctags58\read.h	36;"	d
getInputLineNumber	.\ctags58\read.h	34;"	d
getInterpreterLanguage	.\ctags58\parse.c	/^static langType getInterpreterLanguage (const char *const fileName)$/;"	f	file:	signature:(const char *const fileName)
getLanguageName	.\ctags58\parse.c	/^extern const char *getLanguageName (const langType language)$/;"	f	signature:(const langType language)
getLanguageName	.\ctags58\parse.h	/^extern const char *getLanguageName (const langType language);$/;"	p	signature:(const langType language)
getLastNamedIndex	.\ctags58\ocaml.c	/^static int getLastNamedIndex ( void )$/;"	f	file:	signature:( void )
getLineType	.\ctags58\fortran.c	/^static lineType getLineType (void)$/;"	f	file:	signature:(void)
getNamedLanguage	.\ctags58\parse.c	/^extern langType getNamedLanguage (const char *const name)$/;"	f	signature:(const char *const name)
getNamedLanguage	.\ctags58\parse.h	/^extern langType getNamedLanguage (const char *const name);$/;"	p	signature:(const char *const name)
getPatternLanguage	.\ctags58\parse.c	/^static langType getPatternLanguage (const char *const fileName)$/;"	f	file:	signature:(const char *const fileName)
getSourceFileName	.\ctags58\read.h	37;"	d
getSourceFileTagPath	.\ctags58\read.h	38;"	d
getSourceLanguage	.\ctags58\read.h	39;"	d
getSourceLanguageName	.\ctags58\read.h	40;"	d
getSourceLineNumber	.\ctags58\read.h	41;"	d
get_augrouplist	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! s:get_augrouplist() "{{{$/;"	f
get_bool	.\vimfiles\bundle\command-t\ruby\command-t\controller.rb	/^    def get_bool name$/;"	f	class:CommandT.Controller.quickfix
get_bool	.\vimfiles\bundle\command-t\ruby\command-t\settings.rb	/^    def get_bool setting$/;"	f	class:CommandT.Settings
get_buffer_include_files	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\include_complete.vim	/^function! s:get_buffer_include_files(bufnumber) "{{{$/;"	f
get_cached_script_candidates	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! s:get_cached_script_candidates() "{{{$/;"	f
get_candidates	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\omni_complete.vim	/^function! s:get_candidates(complete_results, complete_pos, complete_str) "{{{$/;"	f
get_cmdlist	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! s:get_cmdlist() "{{{$/;"	f
get_complete_pos	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\omni_complete.vim	/^function! s:get_complete_pos(complete_results) "{{{$/;"	f
get_cursor_highlight	.\vimfiles\bundle\command-t\ruby\command-t\match_window.rb	/^    def get_cursor_highlight$/;"	f	class:CommandT.MatchWindow.match_with_syntax_highlight
get_default_include_files	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\filename_include.vim	/^function! s:get_default_include_files(filetype) "{{{$/;"	f
get_envlist	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! s:get_envlist() "{{{$/;"	f
get_functionlist	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! s:get_functionlist() "{{{$/;"	f
get_glob_files	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\filename_complete.vim	/^function! s:get_glob_files(complete_str, path) "{{{$/;"	f
get_id	.\vimfiles\bundle\command-t\vendor\vimscriptuploader\vimscriptdef.rb	/^    def get_id$/;"	f
get_include_files	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\filename_include.vim	/^function! s:get_include_files(complete_str) "{{{$/;"	f
get_include_files	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\include_complete.vim	/^function! s:get_include_files(nestlevel, lines, filetype, pattern, path, expr) "{{{$/;"	f
get_installdir	.\vimfiles\bundle\command-t\vendor\vimball\vimball.rb	/^    def get_installdir(vimball)$/;"	f
get_last_status	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\prelude.vim	/^function! s:get_last_status()$/;"	f
get_list_or_string	.\vimfiles\bundle\command-t\ruby\command-t\controller.rb	/^    def get_list_or_string name$/;"	f	class:CommandT.Controller.quickfix
get_local_variables	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! s:get_local_variables() "{{{$/;"	f
get_mappinglist	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! s:get_mappinglist() "{{{$/;"	f
get_member_list	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\member_complete.vim	/^function! s:get_member_list(cur_text, var_name) "{{{$/;"	f
get_member_pattern	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\member_complete.vim	/^function! s:get_member_pattern(filetype) "{{{$/;"	f
get_number	.\vimfiles\bundle\command-t\ruby\command-t\controller.rb	/^    def get_number name$/;"	f	class:CommandT.Controller.quickfix
get_number	.\vimfiles\bundle\command-t\ruby\command-t\settings.rb	/^    def get_number setting$/;"	f	class:CommandT.Settings
get_omni_funcs	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\omni_complete.vim	/^function! s:get_omni_funcs(filetype) "{{{$/;"	f
get_omni_list	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\omni_complete.vim	/^function! s:get_omni_list(list) "{{{$/;"	f
get_path	.\ctags58\mac.c	/^static int get_path(const char* in_unix_path, unsigned char* out_mac_path)$/;"	f	file:	signature:(const char* in_unix_path, unsigned char* out_mac_path)
get_script_candidates	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! s:get_script_candidates(bufnumber) "{{{$/;"	f
get_sources_list	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\buffer_complete.vim	/^function! s:get_sources_list() "{{{$/;"	f
get_sources_list	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\member_complete.vim	/^function! s:get_sources_list() "{{{$/;"	f
get_string	.\vimfiles\bundle\command-t\ruby\command-t\controller.rb	/^    def get_string name$/;"	f	class:CommandT.Controller.quickfix
get_subexp	.\ctags58\gnu_regex\regexec.c	/^get_subexp (re_match_context_t *mctx, int bkref_node, int bkref_str_idx)$/;"	f	file:	signature:(re_match_context_t *mctx, int bkref_node, int bkref_str_idx)
get_subexp_sub	.\ctags58\gnu_regex\regexec.c	/^get_subexp_sub (re_match_context_t *mctx, const re_sub_match_top_t *sub_top,$/;"	f	file:	signature:(re_match_context_t *mctx, const re_sub_match_top_t *sub_top, re_sub_match_last_t *sub_last, int bkref_node, int bkref_str)
get_variable_type	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! s:get_variable_type(expression) "{{{$/;"	f
get_variablelist	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! s:get_variablelist(dict, prefix) "{{{$/;"	f
get_version	.\vimfiles\bundle\command-t\vendor\vimscriptuploader\vimscriptdef.rb	/^    def get_version$/;"	f
getchar	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\prelude.vim	/^function! s:getchar(...)$/;"	f
getchar_safe	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\prelude.vim	/^function! s:getchar_safe(...)$/;"	f
getcwd	.\ctags58\e_mac.h	/^extern char* getcwd(char*, int);$/;"	p	signature:(char*, int)
getcwd	.\ctags58\mac.c	/^char* getcwd(char* out_path, int out_path_len)$/;"	f	signature:(char* out_path, int out_path_len)
getcwd	.\ctags58\routines.c	128;"	d	file:
getenv	.\ctags58\general.h	/^extern char *getenv (const char *);$/;"	p	signature:(const char *)
getfilename	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\system\cache.vim	/^function! s:getfilename(cache_dir, filename)$/;"	f
getredirection	.\ctags58\argproc.c	/^getredirection (ac, av)$/;"	f
getscript#GetLatestVimScripts	.\vim73\autoload\getscript.vim	/^fun! getscript#GetLatestVimScripts()$/;"	f
gettext	.\ctags58\gnu_regex\regex_internal.h	75;"	d
gettext	.\ctags58\gnu_regex\regex_internal.h	76;"	d
gettext	.\ctags58\gnu_regex\regex_internal.h	80;"	d
gettext_noop	.\ctags58\gnu_regex\regex_internal.h	86;"	d
gid_t	.\ctags58\e_mac.h	/^typedef unsigned long  gid_t;$/;"	t
gitdiffcached	.\vim73\ftplugin\gitcommit.vim	/^function! s:gitdiffcached(bang,gitdir,...)$/;"	f
glob	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\prelude.vim	/^  function! s:glob(expr)$/;"	f
glob#Glob	.\vimfiles\bundle\vim-addon-mw-utils\autoload\glob.vim	/^fun! glob#Glob(pattern, ...)$/;"	f
globalLet	.\ctags58\ocaml.c	/^static void globalLet (vString * const ident, ocaToken what)$/;"	f	file:	signature:(vString * const ident, ocaToken what)
globalScope	.\ctags58\ocaml.c	/^static void globalScope (vString * const ident, ocaToken what);$/;"	p	file:	signature:(vString * const ident, ocaToken what)
globpath	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\prelude.vim	/^function! s:globpath(path, expr)$/;"	f
gnat#Find	.\vim73\autoload\gnat.vim	/^function gnat#Find () dict					     " {{{1$/;"	f
gnat#Get_Command	.\vim73\autoload\gnat.vim	/^function gnat#Get_Command (Command) dict			     " {{{1$/;"	f
gnat#Insert_Tags_Header	.\vim73\autoload\gnat.vim	/^function gnat#Insert_Tags_Header ()				  " {{{1$/;"	f
gnat#Make	.\vim73\autoload\gnat.vim	/^function gnat#Make () dict					     " {{{1$/;"	f
gnat#New	.\vim73\autoload\gnat.vim	/^function gnat#New ()						     " {{{1$/;"	f
gnat#Pretty	.\vim73\autoload\gnat.vim	/^function gnat#Pretty () dict					     " {{{1$/;"	f
gnat#Set_Project_File	.\vim73\autoload\gnat.vim	/^function gnat#Set_Project_File (...) dict			     " {{{1$/;"	f
gnat#Set_Session	.\vim73\autoload\gnat.vim	/^function gnat#Set_Session (...) dict				     " {{{1$/;"	f
gnat#Tags	.\vim73\autoload\gnat.vim	/^function gnat#Tags () dict					     " {{{1$/;"	f
gotArgs	.\ctags58\c.c	/^	boolean		gotArgs;        \/* was a list of parameters parsed yet? *\/$/;"	m	struct:sStatementInfo	file:	access:public
gotName	.\ctags58\c.c	/^	boolean		gotName;        \/* was a name parsed yet? *\/$/;"	m	struct:sStatementInfo	file:	access:public
gotParenName	.\ctags58\c.c	/^	boolean		gotParenName;   \/* was a name inside parentheses parsed yet? *\/$/;"	m	struct:sStatementInfo	file:	access:public
got_x_error	.\vim73\tools\xcmdsrv_client.c	/^static int	got_x_error = FALSE;$/;"	v	file:
gotoFirstLogicalTag	.\ctags58\readtags.c	/^static void gotoFirstLogicalTag (tagFile *const file)$/;"	f	file:	signature:(tagFile *const file)
grab_visual	.\vimfiles\bundle\vim-snipmate\plugin\snipMate.vim	/^function! s:grab_visual()$/;"	f
groovy_minlines	.\vim73\syntax\groovy.vim	/^  let groovy_minlines = 10$/;"	v
group_nodes_into_DFAstates	.\ctags58\gnu_regex\regexec.c	/^group_nodes_into_DFAstates (const re_dfa_t *dfa, const re_dfastate_t *state,$/;"	f	file:	signature:(const re_dfa_t *dfa, const re_dfastate_t *state, re_node_set *dests_node, bitset_t *dests_ch)
growFields	.\ctags58\readtags.c	/^static tagResult growFields (tagFile *const file)$/;"	f	file:	signature:(tagFile *const file)
growString	.\ctags58\readtags.c	/^static int growString (vstring *s)$/;"	f	file:	signature:(vstring *s)
gx	.\vim73\plugin\netrwPlugin.vim	/^  nmap <unique> gx <Plug>NetrwBrowseX$/;"	m
gzip	.\vim73\plugin\gzip.vim	/^augroup gzip$/;"	a
gzip#appre	.\vim73\autoload\gzip.vim	/^fun gzip#appre(cmd)$/;"	f
gzip#read	.\vim73\autoload\gzip.vim	/^fun gzip#read(cmd)$/;"	f
gzip#write	.\vim73\autoload\gzip.vim	/^fun gzip#write(cmd)$/;"	f
h	.\vim73\macros\less.vim	/^noremap h :call <SID>Help()<CR>$/;"	m
hackReject	.\ctags58\sh.c	/^static boolean hackReject (const vString* const tagName)$/;"	f	file:	signature:(const vString* const tagName)
halt	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned int halt : 1;$/;"	m	struct:re_dfastate_t	access:public
handleDirective	.\ctags58\get.c	/^static boolean handleDirective (const int c)$/;"	f	file:	signature:(const int c)
handle_key	.\vimfiles\bundle\command-t\ruby\command-t\controller.rb	/^    def handle_key$/;"	f	class:CommandT.Controller.quickfix
handler	.\ctags58\options.c	/^	parametricOptionHandler handler;  \/* routine to handle option *\/$/;"	m	struct:__anon53	file:	access:public
has	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\data\list.vim	/^function! s:has(list, Value)$/;"	f
hasAtLiteralStrings	.\ctags58\get.c	/^	boolean hasAtLiteralStrings; \/* supports @"c:\\" strings *\/$/;"	m	struct:sCppState	file:	access:public
has_backref	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned int has_backref : 1;$/;"	m	struct:re_dfastate_t	access:public
has_conceal	.\vimfiles\bundle\command-t\ruby\command-t\vim.rb	/^    def self.has_conceal?$/;"	F	class:CommandT.VIM
has_constraint	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned int has_constraint : 1;$/;"	m	struct:re_dfastate_t	access:public
has_doc	.\vimfiles\bundle\vundle\autoload\vundle\installer.vim	/^func! s:has_doc(rtp) abort$/;"	f
has_index	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\data\list.vim	/^function! s:has_index(list, index)$/;"	f
has_mb_node	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned int has_mb_node : 1;$/;"	m	struct:re_dfa_t	access:public
has_plural_match	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned int has_plural_match : 1;$/;"	m	struct:re_dfa_t	access:public
has_syntax	.\vimfiles\bundle\command-t\ruby\command-t\vim.rb	/^    def self.has_syntax?$/;"	F	class:CommandT.VIM
has_vimproc	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\prelude.vim	/^function! s:has_vimproc()$/;"	f
hash	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned int hash;$/;"	m	struct:re_dfastate_t	access:public
hashEntry	.\ctags58\keyword.c	/^} hashEntry;$/;"	t	typeref:struct:sHashEntry	file:
hashValue	.\ctags58\keyword.c	/^static unsigned long hashValue (const char *const string)$/;"	f	file:	signature:(const char *const string)
haveQualifyingName	.\ctags58\c.c	/^	boolean		haveQualifyingName;  \/* do we have a name we are considering? *\/$/;"	m	struct:sStatementInfo	file:	access:public
haystack_len	.\vimfiles\bundle\command-t\ruby\command-t\match.c	/^    long    haystack_len;           \/\/ length of same$/;"	m	struct:__anon89	file:	access:public
haystack_p	.\vimfiles\bundle\command-t\ruby\command-t\match.c	/^    char    *haystack_p;            \/\/ pointer to the path string to be searched$/;"	m	struct:__anon89	file:	access:public
head_filter	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters.vim	/^function! s:head_filter(list, complete_str) "{{{$/;"	f
headerExt	.\ctags58\options.h	/^	stringList* headerExt;  \/* -h  header extensions *\/$/;"	m	struct:sOptionValues	access:public
helptags	.\vimfiles\bundle\vundle\autoload\vundle\installer.vim	/^func! s:helptags(rtp) abort$/;"	f
hide	.\vimfiles\bundle\command-t\ruby\command-t\controller.rb	/^    def hide$/;"	f	class:CommandT.Controller
hide_cursor	.\vimfiles\bundle\command-t\ruby\command-t\match_window.rb	/^    def hide_cursor$/;"	f	class:CommandT.MatchWindow.match_with_syntax_highlight
highlight_types	.\vim73\syntax\spup.vim	/^    let highlight_types = 1$/;"	v
highlighttest	.\vim73\syntax\hitest.vim	/^aug highlighttest$/;"	a
hostname	.\vim73\ftplugin\changelog.vim	/^  function! s:hostname()$/;"	f
html_no_rendering	.\vim73\syntax\spyce.vim	/^let html_no_rendering = 1    " do not render <b>,<i>, etc...$/;"	v
htmlcomplete#CheckDoctype	.\vim73\autoload\htmlcomplete.vim	/^function! htmlcomplete#CheckDoctype() " {{{$/;"	f
htmlcomplete#CompleteTags	.\vim73\autoload\htmlcomplete.vim	/^function! htmlcomplete#CompleteTags(findstart, base)$/;"	f
htmlcomplete#LoadData	.\vim73\autoload\htmlcomplete.vim	/^function! htmlcomplete#LoadData() " {{{$/;"	f
http	.\vim73\tutor\tutor.pl	/^	http:\/\/helion.pl\/ksiazki\/viedyt.htm$/;"	l
http	.\vim73\tutor\tutor.pl	/^	http:\/\/helion.pl\/ksiazki\/vilek.htm$/;"	l
i	.\vim73\ftplugin\html.vim	/^        let i += 1$/;"	v
i	.\vim73\ftplugin\html.vim	/^    let i = 1$/;"	v
i	.\vim73\syntax\xpm.vim	/^   let i = i + 1$/;"	v
i	.\vim73\syntax\xpm.vim	/^let i      = 1$/;"	v
i	.\vim73\syntax\xpm2.vim	/^    let i = i + 1$/;"	v
i	.\vim73\syntax\xpm2.vim	/^  let i      = 1$/;"	v
iFileGetLine	.\ctags58\read.c	/^static vString *iFileGetLine (void)$/;"	f	file:	signature:(void)
iFileGetc	.\ctags58\read.c	/^static int iFileGetc (void)$/;"	f	file:	signature:(void)
icase	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned char icase;$/;"	m	struct:re_string_t	access:public
icon_minlines	.\vim73\syntax\icon.vim	/^  let icon_minlines = 15$/;"	v
iconv	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\async_cache.vim	/^function! s:iconv(expr, from, to)$/;"	f
iconv	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\prelude.vim	/^function! s:iconv(expr, from, to)$/;"	f
id	.\ctags58\c.c	/^	keywordId id;$/;"	m	struct:sKeywordDesc	file:	access:public
id	.\ctags58\eiffel.c	/^	keywordId id;$/;"	m	struct:sKeywordDesc	file:	access:public
id	.\ctags58\flex.c	/^	keywordId id;$/;"	m	struct:sKeywordDesc	file:	access:public
id	.\ctags58\fortran.c	/^	keywordId id;$/;"	m	struct:sKeywordDesc	file:	access:public
id	.\ctags58\jscript.c	/^	keywordId id;$/;"	m	struct:sKeywordDesc	file:	access:public
id	.\ctags58\ocaml.c	/^	ocamlKeyword id;$/;"	m	struct:sOcaKeywordDesc	file:	access:public
id	.\ctags58\parse.h	/^	unsigned int id;               \/* id assigned to language *\/$/;"	m	struct:__anon56	access:public
id	.\ctags58\sql.c	/^	keywordId id;$/;"	m	struct:sKeywordDesc	file:	access:public
id	.\ctags58\tex.c	/^	keywordId id;$/;"	m	struct:sKeywordDesc	file:	access:public
id	.\ctags58\vhdl.c	/^	keywordId id;$/;"	m	struct:sKeywordDesc	file:	access:public
identarray	.\ctags58\beta.c	/^static const char identarray [256] = {$/;"	v	file:
idx	.\ctags58\gnu_regex\regex_internal.h	/^    int idx;			\/* for BACK_REF *\/$/;"	m	union:__anon31::__anon32	access:public
idx	.\ctags58\gnu_regex\regex_internal.h	/^  int idx;$/;"	m	struct:re_fail_stack_ent_t	access:public
if0	.\ctags58\options.h	/^	boolean if0;            \/* --if0  examine code within "#if 0" branch *\/$/;"	m	struct:sOptionValues	access:public
ifdef	.\ctags58\get.c	/^		conditionalInfo ifdef [MaxCppNestingLevel];$/;"	m	struct:sCppState::sDirective	file:	access:public
ignore	.\ctags58\options.h	/^	stringList* ignore;     \/* -I  name of file containing tokens to ignore *\/$/;"	m	struct:sOptionValues	access:public
ignoreAllBranches	.\ctags58\get.c	/^	boolean ignoreAllBranches;  \/* ignoring parent conditional branch *\/$/;"	m	struct:sConditionalInfo	file:	access:public
ignoreTag	.\ctags58\flex.c	/^	boolean			ignoreTag;$/;"	m	struct:sTokenInfo	file:	access:public
ignoreTag	.\ctags58\jscript.c	/^	boolean			ignoreTag;$/;"	m	struct:sTokenInfo	file:	access:public
ignorecase	.\ctags58\readtags.c	/^			short ignorecase;$/;"	m	struct:sTagFile::__anon63	file:	access:public
ignoring	.\ctags58\get.c	/^	boolean ignoring;           \/* current ignore state *\/$/;"	m	struct:sConditionalInfo	file:	access:public
impType	.\ctags58\c.c	/^} impType;$/;"	t	typeref:enum:eImplementation	file:
implementation	.\ctags58\c.c	/^	impType		implementation; \/* abstract or concrete implementation? *\/$/;"	m	struct:sStatementInfo	file:	access:public
implementation	.\ctags58\entry.h	/^		const char* implementation;$/;"	m	struct:sTagEntryInfo::__anon17	access:public
implementation	.\ctags58\options.h	/^	boolean implementation;$/;"	m	struct:sExtFields	access:public
implementationString	.\ctags58\c.c	/^static const char *implementationString (const impType imp)$/;"	f	file:	signature:(const impType imp)
import	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e.vim	/^function! s:import(name, ...)$/;"	f
inFunction	.\ctags58\c.c	/^	boolean     inFunction;     \/* are we inside of a function? *\/$/;"	m	struct:sStatementInfo	file:	access:public
include	.\ctags58\options.h	/^	struct sInclude include;\/* --extra  extra tag inclusion *\/$/;"	m	struct:sOptionValues	typeref:struct:sOptionValues::sInclude	access:public
includeExtensionFlags	.\ctags58\entry.c	56;"	d	file:
includeTag	.\ctags58\c.c	/^static boolean includeTag (const tagType type, const boolean isFileScope)$/;"	f	file:	signature:(const tagType type, const boolean isFileScope)
includeTag	.\ctags58\fortran.c	/^static boolean includeTag (const tagType type)$/;"	f	file:	signature:(const tagType type)
include_syntax	.\vim73\syntax\context.vim	/^function! s:include_syntax(name, group)$/;"	f
includingDefineTags	.\ctags58\c.c	/^extern boolean includingDefineTags (void)$/;"	f	signature:(void)
includingDefineTags	.\ctags58\parse.h	/^extern boolean includingDefineTags (void);$/;"	p	signature:(void)
increase	.\vim73\ftplugin\cobol.vim	/^function! s:increase(...)$/;"	f
indent_to_innermost_parentheses	.\vim73\indent\dtd.vim	/^function s:indent_to_innermost_parentheses(line, end)$/;"	f
indent_value	.\vim73\indent\sh.vim	/^function! s:indent_value(option)$/;"	f
indentation	.\ctags58\python.c	/^	int indentation;$/;"	m	struct:NestingLevel	file:	access:public
index	.\ctags58\e_mac.h	/^	int index;$/;"	m	struct:__anon19	access:public
inheritance	.\ctags58\entry.h	/^		const char* inheritance;$/;"	m	struct:sTagEntryInfo::__anon17	access:public
inheritance	.\ctags58\options.h	/^	boolean inheritance;$/;"	m	struct:sExtFields	access:public
inheritingDeclaration	.\ctags58\c.c	/^static boolean inheritingDeclaration (declType decl)$/;"	f	file:	signature:(declType decl)
init	.\vimfiles\bundle\vundle\test\files\test.erl	/^init(_) ->$/;"	f	module:mmc_logmon_sup
initKeywordHash	.\ctags58\ocaml.c	/^static void initKeywordHash ( void )$/;"	f	file:	signature:( void )
initMemberInfo	.\ctags58\c.c	/^static void initMemberInfo (statementInfo *const st)$/;"	f	file:	signature:(statementInfo *const st)
initOnly	.\ctags58\options.c	/^	boolean initOnly;   \/* option must be specified before any files *\/$/;"	m	struct:__anon53	file:	access:public
initOnly	.\ctags58\options.c	/^	boolean initOnly;   \/* option must be specified before any files *\/$/;"	m	struct:__anon54	file:	access:public
initOperatorTable	.\ctags58\ocaml.c	/^static void initOperatorTable ( void )$/;"	f	file:	signature:( void )
initOptions	.\ctags58\options.c	/^extern void initOptions (void)$/;"	f	signature:(void)
initOptions	.\ctags58\options.h	/^extern void initOptions (void);$/;"	p	signature:(void)
initParenInfo	.\ctags58\c.c	/^static void initParenInfo (parenInfo *const info)$/;"	f	file:	signature:(parenInfo *const info)
initStack	.\ctags58\ocaml.c	/^static void initStack ( void )$/;"	f	file:	signature:( void )
initStatement	.\ctags58\c.c	/^static void initStatement (statementInfo *const st, statementInfo *const parent)$/;"	f	file:	signature:(statementInfo *const st, statementInfo *const parent)
initTagEntry	.\ctags58\entry.c	/^extern void initTagEntry (tagEntryInfo *const e, const char *const name)$/;"	f	signature:(tagEntryInfo *const e, const char *const name)
initTagEntry	.\ctags58\entry.h	/^extern void initTagEntry (tagEntryInfo *const e, const char *const name);$/;"	p	signature:(tagEntryInfo *const e, const char *const name)
initToken	.\ctags58\c.c	/^static void initToken (tokenInfo* const token)$/;"	f	file:	signature:(tokenInfo* const token)
init_dfa	.\ctags58\gnu_regex\regcomp.c	/^init_dfa (re_dfa_t *dfa, size_t pat_len)$/;"	f	file:	signature:(re_dfa_t *dfa, size_t pat_len)
init_dfa	.\ctags58\gnu_regex\regcomp.c	/^static reg_errcode_t init_dfa (re_dfa_t *dfa, size_t pat_len);$/;"	p	file:	signature:(re_dfa_t *dfa, size_t pat_len)
init_node	.\ctags58\gnu_regex\regex_internal.h	/^  int init_node;$/;"	m	struct:re_dfa_t	access:public
init_state	.\ctags58\gnu_regex\regex_internal.h	/^  re_dfastate_t *init_state;$/;"	m	struct:re_dfa_t	access:public
init_state_begbuf	.\ctags58\gnu_regex\regex_internal.h	/^  re_dfastate_t *init_state_begbuf;$/;"	m	struct:re_dfa_t	access:public
init_state_nl	.\ctags58\gnu_regex\regex_internal.h	/^  re_dfastate_t *init_state_nl;$/;"	m	struct:re_dfa_t	access:public
init_state_word	.\ctags58\gnu_regex\regex_internal.h	/^  re_dfastate_t *init_state_word;$/;"	m	struct:re_dfa_t	access:public
init_word_char	.\ctags58\gnu_regex\regcomp.c	/^init_word_char (re_dfa_t *dfa)$/;"	f	file:	signature:(re_dfa_t *dfa)
initialize	.\ctags58\asm.c	/^static void initialize (const langType language)$/;"	f	file:	signature:(const langType language)
initialize	.\ctags58\eiffel.c	/^static void initialize (const langType language)$/;"	f	file:	signature:(const langType language)
initialize	.\ctags58\flex.c	/^static void initialize (const langType language)$/;"	f	file:	signature:(const langType language)
initialize	.\ctags58\fortran.c	/^static void initialize (const langType language)$/;"	f	file:	signature:(const langType language)
initialize	.\ctags58\jscript.c	/^static void initialize (const langType language)$/;"	f	file:	signature:(const langType language)
initialize	.\ctags58\parse.h	/^	parserInitialize initialize;   \/* initialization routine, if needed *\/$/;"	m	struct:__anon56	access:public
initialize	.\ctags58\readtags.c	/^static tagFile *initialize (const char *const filePath, tagFileInfo *const info)$/;"	f	file:	signature:(const char *const filePath, tagFileInfo *const info)
initialize	.\ctags58\sql.c	/^static void initialize (const langType language)$/;"	f	file:	signature:(const langType language)
initialize	.\ctags58\tex.c	/^static void initialize (const langType language)$/;"	f	file:	signature:(const langType language)
initialize	.\ctags58\verilog.c	/^static void initialize (const langType language)$/;"	f	file:	signature:(const langType language)
initialize	.\ctags58\vhdl.c	/^static void initialize (const langType language)$/;"	f	file:	signature:(const langType language)
initialize	.\vimfiles\bundle\command-t\ruby\command-t\controller.rb	/^    def initialize$/;"	f	class:CommandT.Controller
initialize	.\vimfiles\bundle\command-t\ruby\command-t\finder.rb	/^    def initialize path = Dir.pwd, options = {}$/;"	f	class:CommandT.Finder
initialize	.\vimfiles\bundle\command-t\ruby\command-t\finder\buffer_finder.rb	/^    def initialize$/;"	f	class:CommandT.BufferFinder
initialize	.\vimfiles\bundle\command-t\ruby\command-t\finder\file_finder.rb	/^    def initialize path = Dir.pwd, options = {}$/;"	f	class:CommandT.FileFinder
initialize	.\vimfiles\bundle\command-t\ruby\command-t\finder\jump_finder.rb	/^    def initialize$/;"	f	class:CommandT.JumpFinder
initialize	.\vimfiles\bundle\command-t\ruby\command-t\finder\tag_finder.rb	/^    def initialize options = {}$/;"	f	class:CommandT.TagFinder
initialize	.\vimfiles\bundle\command-t\ruby\command-t\match_window.rb	/^    def initialize options = {}$/;"	f	class:CommandT.MatchWindow
initialize	.\vimfiles\bundle\command-t\ruby\command-t\prompt.rb	/^    def initialize$/;"	f	class:CommandT.Prompt
initialize	.\vimfiles\bundle\command-t\ruby\command-t\scanner\file_scanner.rb	/^    def initialize path = Dir.pwd, options = {}$/;"	f	class:CommandT.FileScanner
initialize	.\vimfiles\bundle\command-t\ruby\command-t\scanner\tag_scanner.rb	/^    def initialize options = {}$/;"	f	class:CommandT.TagScanner
initialize	.\vimfiles\bundle\command-t\ruby\command-t\settings.rb	/^    def initialize$/;"	f	class:CommandT.Settings
initialize	.\vimfiles\bundle\command-t\vendor\vimball\vimball.rb	/^        def initialize(output=$stdout)$/;"	f	class:Vimball.AppLog
initialize	.\vimfiles\bundle\command-t\vendor\vimball\vimball.rb	/^    def initialize(config)$/;"	f
initialize	.\vimfiles\bundle\command-t\vendor\vimscriptuploader\vimscriptdef.rb	/^        def initialize(output=$stdout)$/;"	f	class:VimScriptDef.AppLog
initialize	.\vimfiles\bundle\command-t\vendor\vimscriptuploader\vimscriptdef.rb	/^    def initialize(config)$/;"	f
initialize	.\vimfiles\bundle\command-t\vendor\vimscriptuploader\vimscriptuploader.rb	/^        def initialize(output=$stdout)$/;"	f	class:VimScriptUploader.AppLog
initialize	.\vimfiles\bundle\command-t\vendor\vimscriptuploader\vimscriptuploader.rb	/^    def initialize(config, args)$/;"	f
initializeCParser	.\ctags58\c.c	/^static void initializeCParser (const langType language)$/;"	f	file:	signature:(const langType language)
initializeCppParser	.\ctags58\c.c	/^static void initializeCppParser (const langType language)$/;"	f	file:	signature:(const langType language)
initializeCsharpParser	.\ctags58\c.c	/^static void initializeCsharpParser (const langType language)$/;"	f	file:	signature:(const langType language)
initializeJavaParser	.\ctags58\c.c	/^static void initializeJavaParser (const langType language)$/;"	f	file:	signature:(const langType language)
initializeParsers	.\ctags58\parse.c	/^static void initializeParsers (void)$/;"	f	file:	signature:(void)
initializeParsing	.\ctags58\parse.c	/^extern void initializeParsing (void)$/;"	f	signature:(void)
initializeParsing	.\ctags58\parse.h	/^extern void initializeParsing (void);$/;"	p	signature:(void)
initializeVeraParser	.\ctags58\c.c	/^static void initializeVeraParser (const langType language)$/;"	f	file:	signature:(const langType language)
initialize_include	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\include_complete.vim	/^function! s:initialize_include(filename, filetype) "{{{$/;"	f
initialize_source	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\buffer_complete.vim	/^function! s:initialize_source(srcname) "{{{$/;"	f
initialize_source	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\member_complete.vim	/^function! s:initialize_source(srcname) "{{{$/;"	f
initialize_tags	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\tags_complete.vim	/^function! s:initialize_tags(filename) "{{{$/;"	f
initialize_variables	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\include_complete.vim	/^function! s:initialize_variables() "{{{$/;"	f
initialized	.\ctags58\readtags.c	/^	short initialized;$/;"	m	struct:sTagFile	file:	access:public
inline	.\ctags58\gnu_regex\regex_internal.h	102;"	d
ino_t	.\ctags58\e_mac.h	/^typedef unsigned long  ino_t;$/;"	t
input	.\ctags58\gnu_regex\regex_internal.h	/^  re_string_t input;$/;"	m	struct:__anon36	access:public
inputFile	.\ctags58\read.h	/^} inputFile;$/;"	t	typeref:struct:sInputFile
input_helper	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\prelude.vim	/^function! s:input_helper(funcname, args)$/;"	f
input_safe	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\prelude.vim	/^function! s:input_safe(...)$/;"	f
insideEnumBody	.\ctags58\c.c	38;"	d	file:
insideInterface	.\ctags58\fortran.c	/^static boolean insideInterface (void)$/;"	f	file:	signature:(void)
installAntRegex	.\ctags58\ant.c	/^static void installAntRegex (const langType language)$/;"	f	file:	signature:(const langType language)
installCobolRegex	.\ctags58\cobol.c	/^static void installCobolRegex (const langType language)$/;"	f	file:	signature:(const langType language)
installDosBatchRegex	.\ctags58\dosbatch.c	/^static void installDosBatchRegex (const langType language)$/;"	f	file:	signature:(const langType language)
installHeaderListDefaults	.\ctags58\options.c	/^static void installHeaderListDefaults (void)$/;"	f	file:	signature:(void)
installHtmlRegex	.\ctags58\html.c	/^static void installHtmlRegex (const langType language)$/;"	f	file:	signature:(const langType language)
installLanguageMapDefault	.\ctags58\parse.c	/^extern void installLanguageMapDefault (const langType language)$/;"	f	signature:(const langType language)
installLanguageMapDefault	.\ctags58\parse.h	/^extern void installLanguageMapDefault (const langType language);$/;"	p	signature:(const langType language)
installLanguageMapDefaults	.\ctags58\parse.c	/^extern void installLanguageMapDefaults (void)$/;"	f	signature:(void)
installLanguageMapDefaults	.\ctags58\parse.h	/^extern void installLanguageMapDefaults (void);$/;"	p	signature:(void)
installMatLabRegex	.\ctags58\matlab.c	/^static void installMatLabRegex (const langType language)$/;"	f	file:	signature:(const langType language)
installPHPRegex	.\ctags58\php.c	/^static void installPHPRegex (const langType language)$/;"	f	file:	signature:(const langType language)
installRexxRegex	.\ctags58\rexx.c	/^static void installRexxRegex (const langType language)$/;"	f	file:	signature:(const langType language)
installSlangRegex	.\ctags58\slang.c	/^static void installSlangRegex (const langType language)$/;"	f	file:	signature:(const langType language)
installYaccRegex	.\ctags58\yacc.c	/^static void installYaccRegex (const langType language)$/;"	f	file:	signature:(const langType language)
internalSortTags	.\ctags58\sort.c	/^extern void internalSortTags (const boolean toStdout)$/;"	f	signature:(const boolean toStdout)
internalSortTags	.\ctags58\sort.h	/^extern void internalSortTags (const boolean toStdout);$/;"	p	signature:(const boolean toStdout)
internal_function	.\ctags58\gnu_regex\regex_internal.h	/^     internal_function __attribute ((pure));$/;"	p	signature:(pure)
internal_function	.\ctags58\gnu_regex\regex_internal.h	383;"	d
internal_function	.\ctags58\gnu_regex\regex_internal.h	385;"	d
intoken	.\ctags58\pascal.c	63;"	d	file:
invalidContents	.\ctags58\c.c	/^	boolean invalidContents;$/;"	m	struct:sParenInfo	file:	access:public
inveclosure	.\ctags58\gnu_regex\regex_internal.h	/^  re_node_set inveclosure;$/;"	m	struct:re_dfastate_t	access:public
inveclosures	.\ctags58\gnu_regex\regex_internal.h	/^  re_node_set *inveclosures;$/;"	m	struct:re_dfa_t	access:public
isAbsolutePath	.\ctags58\routines.c	/^extern boolean isAbsolutePath (const char *const path)$/;"	f	signature:(const char *const path)
isAbsolutePath	.\ctags58\routines.h	/^extern boolean isAbsolutePath (const char *const path);$/;"	p	signature:(const char *const path)
isAlpha	.\ctags58\ocaml.c	/^static boolean isAlpha (char c)$/;"	f	file:	signature:(char c)
isAmigaDirectory	.\ctags58\routines.c	/^static boolean isAmigaDirectory (const char *const name)$/;"	f	file:	signature:(const char *const name)
isBlank	.\ctags58\fortran.c	36;"	d	file:
isBraceFormat	.\ctags58\get.c	/^extern boolean isBraceFormat (void)$/;"	f	signature:(void)
isBraceFormat	.\ctags58\get.h	/^extern boolean isBraceFormat (void);$/;"	p	signature:(void)
isClass	.\ctags58\flex.c	/^	boolean			isClass;$/;"	m	struct:sTokenInfo	file:	access:public
isCmdTerm	.\ctags58\sql.c	/^static boolean isCmdTerm (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
isComment	.\ctags58\get.c	/^static Comment isComment (void)$/;"	f	file:	signature:(void)
isCompoundOption	.\ctags58\options.c	60;"	d	file:
isContextualKeyword	.\ctags58\c.c	/^static boolean isContextualKeyword (const tokenInfo *const token)$/;"	f	file:	signature:(const tokenInfo *const token)
isContextualStatement	.\ctags58\c.c	/^static boolean isContextualStatement (const statementInfo *const st)$/;"	f	file:	signature:(const statementInfo *const st)
isCtagsLine	.\ctags58\entry.c	/^static boolean isCtagsLine (const char *const line)$/;"	f	file:	signature:(const char *const line)
isDefineOperator	.\ctags58\asm.c	/^static boolean isDefineOperator (const vString *const operator)$/;"	f	file:	signature:(const vString *const operator)
isDestinationStdout	.\ctags58\main.c	/^extern boolean isDestinationStdout (void)$/;"	f	signature:(void)
isDestinationStdout	.\ctags58\main.h	/^extern boolean isDestinationStdout (void);$/;"	p	signature:(void)
isDirectory	.\ctags58\routines.h	/^	boolean isDirectory;$/;"	m	struct:__anon76	access:public
isEtagsLine	.\ctags58\entry.c	/^static boolean isEtagsLine (const char *const line)$/;"	f	file:	signature:(const char *const line)
isExcludedFile	.\ctags58\options.c	/^extern boolean isExcludedFile (const char* const name)$/;"	f	signature:(const char* const name)
isExcludedFile	.\ctags58\options.h	/^extern boolean isExcludedFile (const char* const name);$/;"	p	signature:(const char* const name)
isExecutable	.\ctags58\routines.h	/^	boolean isExecutable;$/;"	m	struct:__anon76	access:public
isExported	.\ctags58\eiffel.c	/^	boolean   isExported;$/;"	m	struct:sTokenInfo	file:	access:public
isExternCDecl	.\ctags58\c.c	40;"	d	file:
isFalse	.\ctags58\options.c	/^static boolean isFalse (const char *parameter)$/;"	f	file:	signature:(const char *parameter)
isFileEntry	.\ctags58\entry.h	/^	boolean     isFileEntry;      \/* is this just an entry for a file name? *\/$/;"	m	struct:sTagEntryInfo	access:public
isFileScope	.\ctags58\entry.h	/^	boolean     isFileScope;      \/* is tag visibile only within source file? *\/$/;"	m	struct:sTagEntryInfo	access:public
isFileScope	.\ctags58\fortran.c	/^static boolean isFileScope (const tagType type)$/;"	f	file:	signature:(const tagType type)
isFreeOperatorChar	.\ctags58\eiffel.c	41;"	d	file:
isGeneric	.\ctags58\eiffel.c	/^static boolean isGeneric (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
isHeader	.\ctags58\read.h	/^		boolean  isHeader;       \/* is source file a header file? *\/$/;"	m	struct:sInputFile::sSource	access:public
isHeaderFile	.\ctags58\read.h	43;"	d
isHighChar	.\ctags58\c.c	45;"	d	file:
isIdent	.\ctags58\ocaml.c	/^static boolean isIdent (char c)$/;"	f	file:	signature:(char c)
isIdentChar	.\ctags58\flex.c	/^static boolean isIdentChar (const int c)$/;"	f	file:	signature:(const int c)
isIdentChar	.\ctags58\jscript.c	/^static boolean isIdentChar (const int c)$/;"	f	file:	signature:(const int c)
isIdentChar	.\ctags58\sql.c	/^static boolean isIdentChar (const int c)$/;"	f	file:	signature:(const int c)
isIdentChar	.\ctags58\tex.c	/^static boolean isIdentChar (const int c)$/;"	f	file:	signature:(const int c)
isIdentChar	.\ctags58\vhdl.c	/^static boolean isIdentChar (const int c)$/;"	f	file:	signature:(const int c)
isIdentChar1	.\ctags58\sql.c	/^static boolean isIdentChar1 (const int c)$/;"	f	file:	signature:(const int c)
isIdentChar1	.\ctags58\vhdl.c	/^static boolean isIdentChar1 (const int c)$/;"	f	file:	signature:(const int c)
isIdentifier	.\ctags58\make.c	/^static boolean isIdentifier (int c)$/;"	f	file:	signature:(int c)
isIdentifier	.\ctags58\perl.c	/^static boolean isIdentifier (int c)$/;"	f	file:	signature:(int c)
isIdentifier	.\ctags58\sml.c	/^static boolean isIdentifier (int c)$/;"	f	file:	signature:(int c)
isIdentifier1	.\ctags58\perl.c	/^static boolean isIdentifier1 (int c)$/;"	f	file:	signature:(int c)
isIdentifierCharacter	.\ctags58\erlang.c	/^static boolean isIdentifierCharacter (int c)$/;"	f	file:	signature:(int c)
isIdentifierCharacter	.\ctags58\python.c	/^static boolean isIdentifierCharacter (int c)$/;"	f	file:	signature:(int c)
isIdentifierCharacter	.\ctags58\verilog.c	/^static boolean isIdentifierCharacter (const int c)$/;"	f	file:	signature:(const int c)
isIdentifierFirstCharacter	.\ctags58\erlang.c	/^static boolean isIdentifierFirstCharacter (int c)$/;"	f	file:	signature:(int c)
isIdentifierFirstCharacter	.\ctags58\python.c	/^static boolean isIdentifierFirstCharacter (int c)$/;"	f	file:	signature:(int c)
isIdentifierMatch	.\ctags58\eiffel.c	/^static boolean isIdentifierMatch ($/;"	f	file:	signature:( const tokenInfo *const token, const char *const name)
isIdentifierMatch	.\ctags58\vhdl.c	/^static boolean isIdentifierMatch (const tokenInfo * const token,$/;"	f	file:	signature:(const tokenInfo * const token, const vString * const name)
isIgnore	.\ctags58\get.c	/^static boolean isIgnore (void)$/;"	f	file:	signature:(void)
isIgnoreBranch	.\ctags58\get.c	/^static boolean isIgnoreBranch (void)$/;"	f	file:	signature:(void)
isIgnoreToken	.\ctags58\options.c	/^extern boolean isIgnoreToken ($/;"	f	signature:( const char *const name, boolean *const pIgnoreParens, const char **const replacement)
isIgnoreToken	.\ctags58\options.h	/^extern boolean isIgnoreToken (const char *const name, boolean *const pIgnoreParens, const char **const replacement);$/;"	p	signature:(const char *const name, boolean *const pIgnoreParens, const char **const replacement)
isIgnoredDeclaration	.\ctags58\fortran.c	/^static boolean isIgnoredDeclaration (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
isIncludeFile	.\ctags58\options.c	/^extern boolean isIncludeFile (const char *const fileName)$/;"	f	signature:(const char *const fileName)
isIncludeFile	.\ctags58\options.h	/^extern boolean isIncludeFile (const char *const fileName);$/;"	p	signature:(const char *const fileName)
isInitialSymbolCharacter	.\ctags58\asm.c	/^static boolean isInitialSymbolCharacter (int c)$/;"	f	file:	signature:(int c)
isKeyword	.\ctags58\eiffel.c	44;"	d	file:
isKeyword	.\ctags58\flex.c	41;"	d	file:
isKeyword	.\ctags58\fortran.c	38;"	d	file:
isKeyword	.\ctags58\jscript.c	40;"	d	file:
isKeyword	.\ctags58\sql.c	47;"	d	file:
isKeyword	.\ctags58\tex.c	37;"	d	file:
isKeyword	.\ctags58\vhdl.c	33;"	d	file:
isKeywordOrIdent	.\ctags58\vhdl.c	/^static boolean isKeywordOrIdent (const tokenInfo * const token,$/;"	f	file:	signature:(const tokenInfo * const token, const keywordId keyword, const vString * const name)
isKnrParamList	.\ctags58\c.c	/^	boolean isKnrParamList;$/;"	m	struct:sParenInfo	file:	access:public
isLanguage	.\ctags58\read.h	42;"	d
isLowerAlpha	.\ctags58\ocaml.c	/^static boolean isLowerAlpha (char c)$/;"	f	file:	signature:(char c)
isMap	.\ctags58\vim.c	/^static boolean isMap (const unsigned char* line)$/;"	f	file:	signature:(const unsigned char* line)
isMatchedEnd	.\ctags58\sql.c	/^static boolean isMatchedEnd(tokenInfo *const token, int nest_lvl)$/;"	f	file:	signature:(tokenInfo *const token, int nest_lvl)
isMember	.\ctags58\c.c	/^static boolean isMember (const statementInfo *const st)$/;"	f	file:	signature:(const statementInfo *const st)
isNameCandidate	.\ctags58\c.c	/^	boolean isNameCandidate;$/;"	m	struct:sParenInfo	file:	access:public
isNormalFile	.\ctags58\routines.h	/^	boolean isNormalFile;$/;"	m	struct:__anon76	access:public
isNum	.\ctags58\ocaml.c	/^static boolean isNum (char c)$/;"	f	file:	signature:(char c)
isOneOf	.\ctags58\c.c	43;"	d	file:
isOperator	.\ctags58\ocaml.c	/^boolean isOperator[1 << (8 * sizeof (char))] = { FALSE };$/;"	v
isOption	.\ctags58\options.h	/^	boolean isOption;$/;"	m	struct:sCookedArgs	access:public
isParamList	.\ctags58\c.c	/^	boolean isParamList;$/;"	m	struct:sParenInfo	file:	access:public
isPathSeparator	.\ctags58\routines.c	/^static boolean isPathSeparator (const int c)$/;"	f	file:	signature:(const int c)
isPodWord	.\ctags58\perl.c	/^static boolean isPodWord (const char *word)$/;"	f	file:	signature:(const char *word)
isPointer	.\ctags58\c.c	/^	boolean		isPointer;      \/* is 'name' a pointer? *\/$/;"	m	struct:sStatementInfo	file:	access:public
isPointer	.\ctags58\c.c	/^	boolean isPointer;$/;"	m	struct:sParenInfo	file:	access:public
isRecursiveLink	.\ctags58\routines.c	/^extern boolean isRecursiveLink (const char* const dirName)$/;"	f	signature:(const char* const dirName)
isRecursiveLink	.\ctags58\routines.h	/^extern boolean isRecursiveLink (const char* const dirName);$/;"	p	signature:(const char* const dirName)
isSameFile	.\ctags58\routines.c	/^extern boolean isSameFile (const char *const name1, const char *const name2)$/;"	f	signature:(const char *const name1, const char *const name2)
isSameFile	.\ctags58\routines.h	/^extern boolean isSameFile (const char *const name1, const char *const name2);$/;"	p	signature:(const char *const name1, const char *const name2)
isSecondaryKeyword	.\ctags58\fortran.c	39;"	d	file:
isSetuid	.\ctags58\routines.h	/^	boolean isSetuid;$/;"	m	struct:__anon76	access:public
isSpace	.\ctags58\ocaml.c	/^static boolean isSpace (char c)$/;"	f	file:	signature:(char c)
isStatementEnd	.\ctags58\c.c	/^static boolean isStatementEnd (const statementInfo *const st)$/;"	f	file:	signature:(const statementInfo *const st)
isSubprogramPrefix	.\ctags58\fortran.c	/^static boolean isSubprogramPrefix (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
isSubroutineDeclaration	.\ctags58\perl.c	/^static boolean isSubroutineDeclaration (const unsigned char *cp)$/;"	f	file:	signature:(const unsigned char *cp)
isSymbolCharacter	.\ctags58\asm.c	/^static boolean isSymbolCharacter (int c)$/;"	f	file:	signature:(int c)
isSymbolicLink	.\ctags58\routines.h	/^	boolean isSymbolicLink;$/;"	m	struct:__anon76	access:public
isTagFile	.\ctags58\entry.c	/^static boolean isTagFile (const char *const filename)$/;"	f	file:	signature:(const char *const filename)
isTrue	.\ctags58\options.c	/^static boolean isTrue (const char *parameter)$/;"	f	file:	signature:(const char *parameter)
isType	.\ctags58\c.c	37;"	d	file:
isType	.\ctags58\eiffel.c	43;"	d	file:
isType	.\ctags58\flex.c	40;"	d	file:
isType	.\ctags58\fortran.c	37;"	d	file:
isType	.\ctags58\jscript.c	39;"	d	file:
isType	.\ctags58\sql.c	46;"	d	file:
isType	.\ctags58\tex.c	36;"	d	file:
isType	.\ctags58\vhdl.c	32;"	d	file:
isTypeSpec	.\ctags58\fortran.c	/^static boolean isTypeSpec (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
isUpperAlpha	.\ctags58\ocaml.c	/^static boolean isUpperAlpha (char c)$/;"	f	file:	signature:(char c)
isValid	.\ctags58\c.c	/^	short isValid [5]; \/* indicates languages for which kw is valid *\/$/;"	m	struct:sKeywordDesc	file:	access:public
isValidTagAddress	.\ctags58\entry.c	/^static boolean isValidTagAddress (const char *const excmd)$/;"	f	file:	signature:(const char *const excmd)
isValidTypeSpecifier	.\ctags58\c.c	/^static boolean isValidTypeSpecifier (const declType declaration)$/;"	f	file:	signature:(const declType declaration)
is_a_code_line	.\ctags58\lua.c	/^static boolean is_a_code_line (const unsigned char *line)$/;"	f	file:	signature:(const unsigned char *line)
is_bash	.\vim73\syntax\initng.vim	/^let is_bash = 1$/;"	v
is_case	.\vim73\indent\sh.vim	/^function! s:is_case(line)$/;"	f
is_case_break	.\vim73\indent\sh.vim	/^function! s:is_case_break(line)$/;"	f
is_case_ended	.\vim73\indent\sh.vim	/^function! s:is_case_ended(line)$/;"	f
is_case_label	.\vim73\indent\sh.vim	/^function! s:is_case_label(line, pnum)$/;"	f
is_continuation_line	.\vim73\indent\sh.vim	/^function! s:is_continuation_line(line)$/;"	f
is_cygwin	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\prelude.vim	/^function! s:is_cygwin()$/;"	f
is_dict	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\prelude.vim	/^function! s:is_dict(Value)$/;"	f
is_float	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\prelude.vim	/^function! s:is_float(Value)$/;"	f
is_funcref	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\prelude.vim	/^function! s:is_funcref(Value)$/;"	f
is_integer	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\prelude.vim	/^function! s:is_integer(Value)$/;"	f
is_list	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\prelude.vim	/^function! s:is_list(Value)$/;"	f
is_mac	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\prelude.vim	/^function! s:is_mac()$/;"	f
is_number	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\prelude.vim	/^function! s:is_number(Value)$/;"	f
is_numeric	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\prelude.vim	/^function! s:is_numeric(Value)$/;"	f
is_skip_auto_complete	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\handler.vim	/^function! s:is_skip_auto_complete(cur_text) "{{{$/;"	f
is_string	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\prelude.vim	/^function! s:is_string(Value)$/;"	f
is_utf8	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned char is_utf8;$/;"	m	struct:re_string_t	access:public
is_utf8	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned int is_utf8 : 1;$/;"	m	struct:re_dfa_t	access:public
is_windows	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\prelude.vim	/^function! s:is_windows()$/;"	f
isbident	.\ctags58\beta.c	31;"	d	file:
isblank	.\ctags58\gnu_regex\regex_internal.h	59;"	d
isident	.\ctags58\eiffel.c	40;"	d	file:
isident	.\ctags58\fortran.c	35;"	d	file:
isident	.\ctags58\get.h	27;"	d
isident1	.\ctags58\get.h	33;"	d
iskKeep	.\vim73\syntax\vim.vim	/^ let iskKeep= &isk$/;"	v
isspacetab	.\ctags58\get.c	31;"	d	file:
item	.\ctags58\args.h	/^			char* const* item;$/;"	m	struct:sArgs::__anon2::sArgvArgs	access:public
item	.\ctags58\args.h	/^			const char* item;$/;"	m	struct:sArgs::__anon2::sStringArgs	access:public
item	.\ctags58\args.h	/^	char* item;$/;"	m	struct:sArgs	access:public
item	.\ctags58\options.h	/^	char* item;$/;"	m	struct:sCookedArgs	access:public
j	.\vim73\ftplugin\flexwiki.vim	/^  nmap <buffer> j      gj$/;"	m
j	.\vim73\ftplugin\flexwiki.vim	/^  vmap <buffer> j      gj$/;"	m
j	.\vim73\macros\less.vim	/^map j <CR>$/;"	m
javaKind	.\ctags58\c.c	/^} javaKind;$/;"	t	typeref:enum:__anon14	file:
javaTagKind	.\ctags58\c.c	/^static javaKind javaTagKind (const tagType type)$/;"	f	file:	signature:(const tagType type)
java_highlight_all	.\vim73\syntax\java.vim	/^  let java_highlight_all=1$/;"	v
java_minlines	.\vim73\syntax\java.vim	/^  let java_minlines = 10$/;"	v
javascriptcomplete#CompleteJS	.\vim73\autoload\javascriptcomplete.vim	/^function! javascriptcomplete#CompleteJS(findstart, base)$/;"	f
jproperties_lines	.\vim73\syntax\jproperties.vim	/^	let jproperties_lines = 256$/;"	v
jproperties_show_messages	.\vim73\syntax\jproperties.vim	/^	let jproperties_show_messages = 0$/;"	v
jproperties_strict_syntax	.\vim73\syntax\jproperties.vim	/^	let jproperties_strict_syntax = 0$/;"	v
jsKind	.\ctags58\jscript.c	/^} jsKind;$/;"	t	typeref:enum:__anon41	file:
jump	.\vim73\ftplugin\cucumber.vim	/^function! s:jump(command,count)$/;"	f
jump_finder	.\vimfiles\bundle\command-t\ruby\command-t\controller.rb	/^    def jump_finder$/;"	f	class:CommandT.Controller.quickfix.ensure_appropriate_window_selection
jumps	.\vimfiles\bundle\command-t\ruby\command-t\scanner\jump_scanner.rb	/^    def jumps$/;"	f	class:CommandT.JumpScanner
k	.\vim73\ftplugin\flexwiki.vim	/^  nmap <buffer> k      gk$/;"	m
k	.\vim73\ftplugin\flexwiki.vim	/^  vmap <buffer> k      gk$/;"	m
k	.\vim73\macros\less.vim	/^noremap <script> k <C-Y><SID>L$/;"	m
key	.\ctags58\readtags.h	/^	const char *key;$/;"	m	struct:__anon72	access:public
keyword	.\ctags58\asm.c	/^	opKeyword keyword;$/;"	m	struct:__anon5	file:	access:public
keyword	.\ctags58\asm.c	/^	opKeyword keyword;$/;"	m	struct:__anon6	file:	access:public
keyword	.\ctags58\c.c	/^	keywordId     keyword;$/;"	m	struct:sTokenInfo	file:	access:public
keyword	.\ctags58\eiffel.c	/^	keywordId keyword;$/;"	m	struct:sTokenInfo	file:	access:public
keyword	.\ctags58\flex.c	/^	keywordId		keyword;$/;"	m	struct:sTokenInfo	file:	access:public
keyword	.\ctags58\fortran.c	/^	keywordId keyword;$/;"	m	struct:sTokenInfo	file:	access:public
keyword	.\ctags58\jscript.c	/^	keywordId		keyword;$/;"	m	struct:sTokenInfo	file:	access:public
keyword	.\ctags58\sml.c	/^	const char *keyword;$/;"	m	struct:__anon81	file:	access:public
keyword	.\ctags58\sql.c	/^	keywordId	keyword;$/;"	m	struct:sTokenInfoSQL	file:	access:public
keyword	.\ctags58\tex.c	/^	keywordId		keyword;$/;"	m	struct:sTokenInfo	file:	access:public
keyword	.\ctags58\verilog.c	/^	const char *keyword;$/;"	m	struct:__anon86	file:	access:public
keyword	.\ctags58\vhdl.c	/^	keywordId keyword;$/;"	m	struct:sTokenInfo	file:	access:public
keywordAssoc	.\ctags58\verilog.c	/^} keywordAssoc;$/;"	t	typeref:struct:__anon86	file:
keywordDesc	.\ctags58\c.c	/^} keywordDesc;$/;"	t	typeref:struct:sKeywordDesc	file:
keywordDesc	.\ctags58\eiffel.c	/^} keywordDesc;$/;"	t	typeref:struct:sKeywordDesc	file:
keywordDesc	.\ctags58\flex.c	/^} keywordDesc;$/;"	t	typeref:struct:sKeywordDesc	file:
keywordDesc	.\ctags58\fortran.c	/^} keywordDesc;$/;"	t	typeref:struct:sKeywordDesc	file:
keywordDesc	.\ctags58\jscript.c	/^} keywordDesc;$/;"	t	typeref:struct:sKeywordDesc	file:
keywordDesc	.\ctags58\sql.c	/^} keywordDesc;$/;"	t	typeref:struct:sKeywordDesc	file:
keywordDesc	.\ctags58\tex.c	/^} keywordDesc;$/;"	t	typeref:struct:sKeywordDesc	file:
keywordDesc	.\ctags58\vhdl.c	/^} keywordDesc;$/;"	t	typeref:struct:sKeywordDesc	file:
keywordId	.\ctags58\c.c	/^} keywordId;$/;"	t	typeref:enum:eKeywordId	file:
keywordId	.\ctags58\eiffel.c	/^} keywordId;$/;"	t	typeref:enum:eKeywordId	file:
keywordId	.\ctags58\flex.c	/^} keywordId;$/;"	t	typeref:enum:eKeywordId	file:
keywordId	.\ctags58\fortran.c	/^} keywordId;$/;"	t	typeref:enum:eKeywordId	file:
keywordId	.\ctags58\jscript.c	/^} keywordId;$/;"	t	typeref:enum:eKeywordId	file:
keywordId	.\ctags58\sql.c	/^} keywordId;$/;"	t	typeref:enum:eKeywordId	file:
keywordId	.\ctags58\tex.c	/^} keywordId;$/;"	t	typeref:enum:eKeywordId	file:
keywordId	.\ctags58\vhdl.c	/^} keywordId;$/;"	t	typeref:enum:eKeywordId	file:
keywordString	.\ctags58\c.c	/^static const char *keywordString (const keywordId keyword)$/;"	f	file:	signature:(const keywordId keyword)
keyword_escape	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\helper.vim	/^function! s:keyword_escape(complete_str) "{{{$/;"	f
killCurrentState	.\ctags58\ocaml.c	/^static void killCurrentState ( void )$/;"	f	file:	signature:( void )
kind	.\ctags58\asm.c	/^	AsmKind kind;$/;"	m	struct:__anon6	file:	access:public
kind	.\ctags58\basic.c	/^	BasicKind kind;$/;"	m	struct:__anon9	file:	access:public
kind	.\ctags58\entry.h	/^	char        kind;             \/* single character representation of kind *\/$/;"	m	struct:sTagEntryInfo	access:public
kind	.\ctags58\lregex.c	/^			struct sKind kind;$/;"	m	struct:__anon43::__anon44::__anon45	typeref:struct:__anon43::__anon44::__anon45::sKind	file:	access:public
kind	.\ctags58\ocaml.c	/^	contextKind kind;	\/* well if the context is strong or not *\/$/;"	m	struct:_sOcamlContext	file:	access:public
kind	.\ctags58\options.h	/^	boolean kind;$/;"	m	struct:sExtFields	access:public
kind	.\ctags58\readtags.h	/^	const char *kind;$/;"	m	struct:__anon73	access:public
kind	.\ctags58\sml.c	/^	smlKind kind;$/;"	m	struct:__anon81	file:	access:public
kind	.\ctags58\verilog.c	/^	verilogKind kind;$/;"	m	struct:__anon86	file:	access:public
kindCount	.\ctags58\parse.h	/^	unsigned int kindCount;        \/* size of `kinds' list *\/$/;"	m	struct:__anon56	access:public
kindKey	.\ctags58\options.h	/^	boolean kindKey;$/;"	m	struct:sExtFields	access:public
kindLong	.\ctags58\options.h	/^	boolean kindLong;       \/* --kind-long *\/$/;"	m	struct:sOptionValues	access:public
kindLong	.\ctags58\options.h	/^	boolean kindLong;$/;"	m	struct:sExtFields	access:public
kindName	.\ctags58\entry.h	/^	const char *kindName;         \/* kind of tag *\/$/;"	m	struct:sTagEntryInfo	access:public
kindOption	.\ctags58\parse.h	/^} kindOption;$/;"	t	typeref:struct:sKindOption
kinds	.\ctags58\parse.h	/^	kindOption* kinds;             \/* tag kinds handled by parser *\/$/;"	m	struct:__anon56	access:public
label	.\ctags58\entry.h	/^	const char *const *label;  \/* list of labels for extension flags *\/$/;"	m	struct:sTagFields	access:public
lang	.\vim73\spell\check_locales.vim	/^  let lang = substitute(item.text, '.*LANG=\\(\\S\\+\\).*', '\\1', '')$/;"	v
langKindOption	.\ctags58\parse.c	/^static kindOption *langKindOption (const langType language, const int flag)$/;"	f	file:	signature:(const langType language, const int flag)
langType	.\ctags58\parse.h	/^typedef int langType;$/;"	t
language	.\ctags58\entry.h	/^	const char* language;         \/* language of source file *\/$/;"	m	struct:sTagEntryInfo	access:public
language	.\ctags58\keyword.c	/^	langType language;$/;"	m	struct:sHashEntry	file:	access:public
language	.\ctags58\options.h	/^	boolean language;$/;"	m	struct:sExtFields	access:public
language	.\ctags58\options.h	/^	langType language;      \/* --lang specified language override *\/$/;"	m	struct:sOptionValues	access:public
language	.\ctags58\read.h	/^		langType language;       \/* language of source file *\/$/;"	m	struct:sInputFile::sSource	access:public
language	.\ctags58\read.h	/^	langType    language;      \/* language of input file *\/$/;"	m	struct:sInputFile	access:public
languageSupportsGenerics	.\ctags58\c.c	/^static boolean languageSupportsGenerics (void)$/;"	f	file:	signature:(void)
lastClass	.\ctags58\ocaml.c	/^vString *lastClass;$/;"	v
lastModule	.\ctags58\ocaml.c	/^vString *lastModule;$/;"	v
last_node	.\ctags58\gnu_regex\regex_internal.h	/^  int last_node;$/;"	m	struct:__anon36	access:public
last_node	.\ctags58\gnu_regex\regex_internal.h	/^  int last_node;$/;"	m	struct:__anon37	access:public
last_str_idx	.\ctags58\gnu_regex\regex_internal.h	/^  int last_str_idx;$/;"	m	struct:__anon37	access:public
lasts	.\ctags58\gnu_regex\regex_internal.h	/^  re_sub_match_last_t **lasts;$/;"	m	struct:__anon35	access:public
leave	.\vimfiles\bundle\command-t\ruby\command-t\controller.rb	/^    def leave$/;"	f	class:CommandT.Controller.quickfix
leave	.\vimfiles\bundle\command-t\ruby\command-t\match_window.rb	/^    def leave$/;"	f	class:CommandT.MatchWindow
left	.\ctags58\gnu_regex\regex_internal.h	/^  struct bin_tree_t *left;$/;"	m	struct:bin_tree_t	typeref:struct:bin_tree_t::bin_tree_t	access:public
len	.\ctags58\gnu_regex\regex_internal.h	/^  int len;$/;"	m	struct:re_string_t	access:public
length	.\ctags58\gnu_regex\regexec.c	/^    int length, start, range;$/;"	v
length	.\ctags58\parse.h	/^	size_t length;  \/* length of match *\/$/;"	m	struct:__anon57	access:public
length	.\ctags58\vstring.h	/^	size_t  length;  \/* size of buffer used *\/$/;"	m	struct:sVString	access:public
length1	.\ctags58\gnu_regex\regexec.c	/^    int length1, length2, start, range, stop;$/;"	v
length1	.\ctags58\gnu_regex\regexec.c	/^    int length1, length2, start, stop;$/;"	v
length2	.\ctags58\gnu_regex\regexec.c	/^    int length1, length2, start, range, stop;$/;"	v
length2	.\ctags58\gnu_regex\regexec.c	/^    int length1, length2, start, stop;$/;"	v
letParam	.\ctags58\ocaml.c	/^static void letParam (vString * const ident, ocaToken what)$/;"	f	file:	signature:(vString * const ident, ocaToken what)
letParam	.\ctags58\ocaml.c	/^static void letParam (vString * const ident, ocaToken what);$/;"	p	file:	signature:(vString * const ident, ocaToken what)
letter	.\ctags58\lregex.c	/^	char letter;$/;"	m	struct:sKind	file:	access:public
letter	.\ctags58\parse.h	/^	int letter;               \/* kind letter *\/$/;"	m	struct:sKindOption	access:public
levels	.\ctags58\python.c	/^	NestingLevel *levels;$/;"	m	struct:NestingLevels	file:	access:public
lex	.\ctags58\ocaml.c	/^static ocamlKeyword lex (lexingState * st)$/;"	f	file:	signature:(lexingState * st)
lex	.\vim73\indent\dtd.vim	/^function s:lex(input, start, ...)$/;"	f
lex1	.\vim73\indent\dtd.vim	/^function s:lex1(input, start, ...)$/;"	f
lexingState	.\ctags58\ocaml.c	/^} lexingState;$/;"	t	typeref:struct:_lexingState	file:
libc_freeres_fn	.\ctags58\gnu_regex\regcomp.c	/^libc_freeres_fn (free_mem)$/;"	f
limited_states	.\ctags58\gnu_regex\regex_internal.h	/^  re_dfastate_t **limited_states;$/;"	m	struct:__anon37	access:public
limits	.\ctags58\gnu_regex\regex_internal.h	/^  re_node_set limits;$/;"	m	struct:__anon37	access:public
line	.\ctags58\entry.h	/^	struct sMax { size_t line, tag, file; } max;$/;"	m	struct:eTagFile::sMax	access:public
line	.\ctags58\read.h	/^	vString    *line;          \/* last line read from file *\/$/;"	m	struct:sInputFile	access:public
line	.\ctags58\readtags.c	/^	vstring line;$/;"	m	struct:sTagFile	file:	access:public
line	.\vim73\ftplugin\html.vim	/^        let line = getline(i)$/;"	v
line	.\vim73\ftplugin\html.vim	/^    let line = ""$/;"	v
line	.\vim73\macros\maze\mazeclean.c	/^char *M, A, Z, E = 40, line[80], T[3];$/;"	v
lineBreak	.\ctags58\debug.c	/^extern void lineBreak (void) {}  \/* provides a line-specified break point *\/$/;"	f	signature:(void)
lineBreak	.\ctags58\debug.h	/^extern void lineBreak (void);$/;"	p	signature:(void)
lineDirectives	.\ctags58\options.h	/^	boolean lineDirectives; \/* --linedirectives  process #line directives *\/$/;"	m	struct:sOptionValues	access:public
lineMode	.\ctags58\args.h	/^	boolean lineMode;$/;"	m	struct:sArgs	access:public
lineNumber	.\ctags58\c.c	/^	unsigned long lineNumber;    \/* line number of tag *\/$/;"	m	struct:sTokenInfo	file:	access:public
lineNumber	.\ctags58\entry.h	/^	unsigned long lineNumber;     \/* line number of tag *\/$/;"	m	struct:sTagEntryInfo	access:public
lineNumber	.\ctags58\flex.c	/^	unsigned long 	lineNumber;$/;"	m	struct:sTokenInfo	file:	access:public
lineNumber	.\ctags58\fortran.c	/^	unsigned long lineNumber;$/;"	m	struct:sTokenInfo	file:	access:public
lineNumber	.\ctags58\jscript.c	/^	unsigned long 	lineNumber;$/;"	m	struct:sTokenInfo	file:	access:public
lineNumber	.\ctags58\options.h	/^	boolean lineNumber;$/;"	m	struct:sExtFields	access:public
lineNumber	.\ctags58\read.h	/^		unsigned long lineNumber;\/* line number in the source file *\/$/;"	m	struct:sInputFile::sSource	access:public
lineNumber	.\ctags58\read.h	/^	unsigned long lineNumber;  \/* line number in the input file *\/$/;"	m	struct:sInputFile	access:public
lineNumber	.\ctags58\readtags.h	/^		unsigned long lineNumber;$/;"	m	struct:__anon73::__anon74	access:public
lineNumber	.\ctags58\sql.c	/^	unsigned long lineNumber;$/;"	m	struct:sTokenInfoSQL	file:	access:public
lineNumber	.\ctags58\tex.c	/^	unsigned long 	lineNumber;$/;"	m	struct:sTokenInfo	file:	access:public
lineNumber	.\ctags58\vhdl.c	/^	unsigned long lineNumber;	\/* line number of tag *\/$/;"	m	struct:sTokenInfo	file:	access:public
lineNumberEntry	.\ctags58\entry.h	/^	boolean     lineNumberEntry;  \/* pattern or line number entry *\/$/;"	m	struct:sTagEntryInfo	access:public
lineType	.\ctags58\fortran.c	/^} lineType;$/;"	t	typeref:enum:eFortranLineType	file:
line_contains_filename?	.\vimfiles\bundle\command-t\ruby\command-t\scanner\jump_scanner.rb	/^    def line_contains_filename? line$/;"	f	class:CommandT.JumpScanner
lines	.\ctags58\main.c	/^static struct { long files, lines, bytes; } Totals = { 0, 0, 0 };$/;"	m	struct:__anon49	file:	access:public
lines	.\vimfiles\bundle\command-t\ruby\command-t\vim\screen.rb	/^      def self.lines$/;"	F	class:CommandT.VIM.Screen
link_nfa_nodes	.\ctags58\gnu_regex\regcomp.c	/^link_nfa_nodes (void *extra, bin_tree_t *node)$/;"	f	file:	signature:(void *extra, bin_tree_t *node)
link_nfa_nodes	.\ctags58\gnu_regex\regcomp.c	/^static reg_errcode_t link_nfa_nodes (void *extra, bin_tree_t *node);$/;"	p	file:	signature:(void *extra, bin_tree_t *node)
lispKind	.\ctags58\lisp.c	/^} lispKind;$/;"	t	typeref:enum:__anon42	file:
list	.\ctags58\fortran.c	/^	tokenInfo* list;$/;"	m	struct:__anon21	file:	access:public
list	.\ctags58\readtags.c	/^			tagExtensionField *list;$/;"	m	struct:sTagFile::__anon64	file:	access:public
list	.\ctags58\readtags.h	/^		tagExtensionField *list;$/;"	m	struct:__anon73::__anon75	access:public
list	.\ctags58\strlist.h	/^	vString    **list;$/;"	m	struct:sStringList	access:public
listTags	.\ctags58\readtags.c	/^static void listTags (void)$/;"	f	file:	signature:(void)
list_item	.\ctags58\argproc.c	/^struct list_item$/;"	s	file:
list_item::next	.\ctags58\argproc.c	/^	struct list_item *next;$/;"	m	struct:list_item	typeref:struct:list_item::list_item	file:	access:public
list_item::value	.\ctags58\argproc.c	/^	char *value;$/;"	m	struct:list_item	file:	access:public
list_matches	.\vimfiles\bundle\command-t\ruby\command-t\controller.rb	/^    def list_matches$/;"	f	class:CommandT.Controller.quickfix.ensure_appropriate_window_selection
lnum	.\vim73\spell\fixdup.vim	/^  let lnum += 1$/;"	v
lnum	.\vim73\spell\fixdup.vim	/^let lnum = 2$/;"	v
load	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e.vim	/^function! s:load(...) dict$/;"	f
load_from_file	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\async_cache.vim	/^function! s:load_from_file(filename, pattern_file_name, mark, minlen, maxfilename, fileencoding, is_string) "{{{$/;"	f
load_from_tags	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\async_cache.vim	/^function! s:load_from_tags(filename, pattern_file_name, mark, minlen, maxfilename, fileencoding) "{{{$/;"	f
load_scripts	.\vimfiles\bundle\vundle\autoload\vundle\scripts.vim	/^func! s:load_scripts(bang)$/;"	f
loaded_gzip	.\vim73\plugin\gzip.vim	/^let loaded_gzip = 1$/;"	v
loaded_less	.\vim73\macros\less.vim	/^let loaded_less = 1$/;"	v
loaded_matchit	.\vim73\macros\matchit.vim	/^let loaded_matchit = 1$/;"	v
loaded_rrhelper	.\vim73\plugin\rrhelper.vim	/^let loaded_rrhelper = 1$/;"	v
loaded_snips	.\vimfiles\bundle\vim-snipmate\plugin\snipMate.vim	/^let loaded_snips = 1$/;"	v
loaded_spellfile_plugin	.\vim73\plugin\spellfile.vim	/^let loaded_spellfile_plugin = 1$/;"	v
loaded_tlib	.\vimfiles\bundle\tlib_vim\plugin\02tlib.vim	/^let loaded_tlib = 106$/;"	v
loaded_tlib_TestChild_autoload	.\vimfiles\bundle\tlib_vim\autoload\tlib\TestChild.vim	/^let loaded_tlib_TestChild_autoload = 1$/;"	v
loaded_tlib_Test_autoload	.\vimfiles\bundle\tlib_vim\autoload\tlib\Test.vim	/^let loaded_tlib_Test_autoload = 1$/;"	v
loaded_tlib_arg_autoload	.\vimfiles\bundle\tlib_vim\autoload\tlib\arg.vim	/^let loaded_tlib_arg_autoload = 1$/;"	v
loaded_tlib_char_autoload	.\vimfiles\bundle\tlib_vim\autoload\tlib\char.vim	/^let loaded_tlib_char_autoload = 1$/;"	v
loaded_tlib_cmd_autoload	.\vimfiles\bundle\tlib_vim\autoload\tlib\cmd.vim	/^let loaded_tlib_cmd_autoload = 1$/;"	v
loaded_tlib_comments_autoload	.\vimfiles\bundle\tlib_vim\autoload\tlib\comments.vim	/^let loaded_tlib_comments_autoload = 1$/;"	v
loaded_tlib_dir_autoload	.\vimfiles\bundle\tlib_vim\autoload\tlib\dir.vim	/^let loaded_tlib_dir_autoload = 1$/;"	v
loaded_tlib_eval_autoload	.\vimfiles\bundle\tlib_vim\autoload\tlib\eval.vim	/^let loaded_tlib_eval_autoload = 1$/;"	v
loaded_tlib_file_autoload	.\vimfiles\bundle\tlib_vim\autoload\tlib\file.vim	/^let loaded_tlib_file_autoload = 1$/;"	v
loaded_tlib_hook_autoload	.\vimfiles\bundle\tlib_vim\autoload\tlib\hook.vim	/^let loaded_tlib_hook_autoload = 1$/;"	v
loaded_tlib_object_autoload	.\vimfiles\bundle\tlib_vim\autoload\tlib\Object.vim	/^let loaded_tlib_object_autoload = 1$/;"	v
loaded_tlib_progressbar_autoload	.\vimfiles\bundle\tlib_vim\autoload\tlib\progressbar.vim	/^let loaded_tlib_progressbar_autoload = 1$/;"	v
loaded_tlib_rx_autoload	.\vimfiles\bundle\tlib_vim\autoload\tlib\rx.vim	/^let loaded_tlib_rx_autoload = 1$/;"	v
loaded_tlib_scratch_autoload	.\vimfiles\bundle\tlib_vim\autoload\tlib\scratch.vim	/^let loaded_tlib_scratch_autoload = 1$/;"	v
loaded_tlib_string_autoload	.\vimfiles\bundle\tlib_vim\autoload\tlib\string.vim	/^let loaded_tlib_string_autoload = 1$/;"	v
loaded_tlib_syntax_autoload	.\vimfiles\bundle\tlib_vim\autoload\tlib\syntax.vim	/^let loaded_tlib_syntax_autoload = 1$/;"	v
loaded_tlib_tab_autoload	.\vimfiles\bundle\tlib_vim\autoload\tlib\tab.vim	/^let loaded_tlib_tab_autoload = 1$/;"	v
loaded_tlib_tag_autoload	.\vimfiles\bundle\tlib_vim\autoload\tlib\tag.vim	/^let loaded_tlib_tag_autoload = 1$/;"	v
loaded_tlib_time_autoload	.\vimfiles\bundle\tlib_vim\autoload\tlib\time.vim	/^let loaded_tlib_time_autoload = 1$/;"	v
loaded_tlib_var_autoload	.\vimfiles\bundle\tlib_vim\autoload\tlib\var.vim	/^let loaded_tlib_var_autoload = 1$/;"	v
loaded_tlib_win_autoload	.\vimfiles\bundle\tlib_vim\autoload\tlib\win.vim	/^let loaded_tlib_win_autoload = 1$/;"	v
localLet	.\ctags58\ocaml.c	/^static void localLet (vString * const ident, ocaToken what)$/;"	f	file:	signature:(vString * const ident, ocaToken what)
localScope	.\ctags58\ocaml.c	/^static void localScope (vString * const ident, ocaToken what)$/;"	f	file:	signature:(vString * const ident, ocaToken what)
localScope	.\ctags58\ocaml.c	/^static void localScope (vString * const ident, ocaToken what);$/;"	p	file:	signature:(vString * const ident, ocaToken what)
locate	.\ctags58\options.h	/^	exCmd locate;           \/* --excmd  EX command used to locate tag *\/$/;"	m	struct:sOptionValues	access:public
lock	.\vimfiles\bundle\command-t\ruby\command-t\match_window.rb	/^    def lock$/;"	f	class:CommandT.MatchWindow.match_with_syntax_highlight
log	.\vimfiles\bundle\vundle\autoload\vundle\installer.vim	/^func! s:log(str) abort$/;"	f
login	.\vim73\ftplugin\changelog.vim	/^  function! s:login()$/;"	f
login	.\vimfiles\bundle\command-t\vendor\vimscriptuploader\vimscriptuploader.rb	/^    def login$/;"	f
logout	.\vimfiles\bundle\command-t\vendor\vimscriptuploader\vimscriptuploader.rb	/^    def logout$/;"	f	class:login
longOption	.\ctags58\options.h	/^	boolean longOption;$/;"	m	struct:sCookedArgs	access:public
lookupKeyword	.\ctags58\keyword.c	/^extern int lookupKeyword (const char *const string, langType language)$/;"	f	signature:(const char *const string, langType language)
lookupKeyword	.\ctags58\keyword.h	/^extern int lookupKeyword (const char *const string, langType language);$/;"	p	signature:(const char *const string, langType language)
looped_symlink?	.\vimfiles\bundle\command-t\ruby\command-t\scanner\file_scanner.rb	/^    def looped_symlink? path$/;"	f	class:CommandT.FileScanner
lower_subexp	.\ctags58\gnu_regex\regcomp.c	/^lower_subexp (reg_errcode_t *err, regex_t *preg, bin_tree_t *node)$/;"	f	file:	signature:(reg_errcode_t *err, regex_t *preg, bin_tree_t *node)
lower_subexp	.\ctags58\gnu_regex\regcomp.c	/^static bin_tree_t *lower_subexp (reg_errcode_t *err, regex_t *preg,$/;"	p	file:	signature:(reg_errcode_t *err, regex_t *preg, bin_tree_t *node)
lower_subexps	.\ctags58\gnu_regex\regcomp.c	/^lower_subexps (void *extra, bin_tree_t *node)$/;"	f	file:	signature:(void *extra, bin_tree_t *node)
lower_subexps	.\ctags58\gnu_regex\regcomp.c	/^static reg_errcode_t lower_subexps (void *extra, bin_tree_t *node);$/;"	p	file:	signature:(void *extra, bin_tree_t *node)
lstat	.\ctags58\e_mac.h	139;"	d
lstat	.\ctags58\routines.c	/^extern int lstat (const char *, struct stat *);$/;"	p	file:	signature:(const char *, struct stat *)
lstat	.\ctags58\routines.c	174;"	d	file:
luaKind	.\ctags58\lua.c	/^} luaKind;$/;"	t	typeref:enum:__anon48	file:
lua_filter	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters.vim	/^function! s:lua_filter(list, complete_str) "{{{$/;"	f
lua_subversion	.\vim73\syntax\lua.vim	/^  let lua_subversion = 0$/;"	v
lua_subversion	.\vim73\syntax\lua.vim	/^  let lua_subversion = 1$/;"	v
lua_version	.\vim73\syntax\lua.vim	/^  let lua_version = 5$/;"	v
mCommandT	.\vimfiles\bundle\command-t\ruby\command-t\ext.c	/^VALUE mCommandT         = 0; \/\/ module CommandT$/;"	v
main	.\ctags58\eiffel.c	/^extern int main (int argc, char** argv)$/;"	f	signature:(int argc, char** argv)
main	.\ctags58\main.c	/^extern int main (int __unused__ argc, char **argv)$/;"	f	signature:(int __unused__ argc, char **argv)
main	.\ctags58\main.h	/^extern int main (int argc, char **argv);$/;"	p	signature:(int argc, char **argv)
main	.\ctags58\readtags.c	/^extern int main (int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	.\vim73\macros\maze\maze.c	/^char*M,A,Z,E=40,J[40],T[40];main(C){for(*J=A=scanf(M="%d",&C);$/;"	f
main	.\vim73\macros\maze\mazeansi.c	/^char*M,A,Z,E=40,J[80],T[3];main(C){for(M=J+E,*J=A=scanf("%d",&$/;"	f
main	.\vim73\macros\maze\mazeclean.c	/^main (C)$/;"	f
main	.\vim73\tools\blink.c	/^main()$/;"	f
main	.\vim73\tools\ccfilter.c	/^int main( int argc, char *argv[] )$/;"	f	signature:( int argc, char *argv[] )
main	.\vim73\tools\xcmdsrv_client.c	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\async_cache.vim	/^function! s:main(argv) "{{{$/;"	f
main_syntax	.\vim73\syntax\aspperl.vim	/^  let main_syntax = 'perlscript'$/;"	v
main_syntax	.\vim73\syntax\aspvbs.vim	/^  let main_syntax = 'aspvbs'$/;"	v
main_syntax	.\vim73\syntax\css.vim	/^  let main_syntax = 'css'$/;"	v
main_syntax	.\vim73\syntax\eruby.vim	/^  let main_syntax = 'eruby'$/;"	v
main_syntax	.\vim73\syntax\fvwm2m4.vim	/^  let main_syntax = 'fvwm2m4'$/;"	v
main_syntax	.\vim73\syntax\groovy.vim	/^  let main_syntax='groovy'$/;"	v
main_syntax	.\vim73\syntax\gsp.vim	/^  let main_syntax = 'gsp'$/;"	v
main_syntax	.\vim73\syntax\haml.vim	/^  let main_syntax = 'haml'$/;"	v
main_syntax	.\vim73\syntax\html.vim	/^  let main_syntax = 'html'$/;"	v
main_syntax	.\vim73\syntax\htmlcheetah.vim	/^  let main_syntax = 'html'$/;"	v
main_syntax	.\vim73\syntax\htmldjango.vim	/^  let main_syntax = 'html'$/;"	v
main_syntax	.\vim73\syntax\htmlm4.vim	/^  let main_syntax='htmlm4'$/;"	v
main_syntax	.\vim73\syntax\htmlos.vim	/^  let main_syntax = 'htmlos'$/;"	v
main_syntax	.\vim73\syntax\java.vim	/^  let main_syntax='java'$/;"	v
main_syntax	.\vim73\syntax\javascript.vim	/^  let main_syntax = 'javascript'$/;"	v
main_syntax	.\vim73\syntax\jsp.vim	/^  let main_syntax = 'jsp'$/;"	v
main_syntax	.\vim73\syntax\liquid.vim	/^  let main_syntax = 'liquid'$/;"	v
main_syntax	.\vim73\syntax\lite.vim	/^  let main_syntax = 'lite'$/;"	v
main_syntax	.\vim73\syntax\m4.vim	/^  let main_syntax='m4'$/;"	v
main_syntax	.\vim73\syntax\mason.vim	/^	let main_syntax = 'mason'$/;"	v
main_syntax	.\vim73\syntax\msql.vim	/^  let main_syntax = 'msql'$/;"	v
main_syntax	.\vim73\syntax\ora.vim	/^  let main_syntax = 'ora'$/;"	v
main_syntax	.\vim73\syntax\pdf.vim	/^    let main_syntax = 'pdf'$/;"	v
main_syntax	.\vim73\syntax\php.vim	/^  let main_syntax = 'php'$/;"	v
main_syntax	.\vim73\syntax\plp.vim	/^  let main_syntax = 'perlscript'$/;"	v
main_syntax	.\vim73\syntax\smarty.vim	/^  let main_syntax = 'smarty'$/;"	v
main_syntax	.\vim73\syntax\smil.vim	/^  let main_syntax = 'smil'$/;"	v
main_syntax	.\vim73\syntax\spyce.vim	/^  let main_syntax='spyce'$/;"	v
main_syntax	.\vim73\syntax\texinfo.vim	/^  let main_syntax = 'texinfo'$/;"	v
main_syntax	.\vim73\syntax\tf.vim	/^  let main_syntax = 'tf'$/;"	v
main_syntax	.\vim73\syntax\tpp.vim	/^  let main_syntax = 'tpp'$/;"	v
main_syntax	.\vim73\syntax\uc.vim	/^  let main_syntax='uc'$/;"	v
main_syntax	.\vim73\syntax\webmacro.vim	/^  let main_syntax = 'webmacro'$/;"	v
main_syntax	.\vim73\syntax\wml.vim	/^  let main_syntax = 'wml'$/;"	v
makeAsmTag	.\ctags58\asm.c	/^static void makeAsmTag ($/;"	f	file:	signature:( const vString *const name, const vString *const operator, const boolean labelCandidate, const boolean nameFollows)
makeBetaTag	.\ctags58\beta.c	/^static void makeBetaTag (const char* const name, const betaKind kind)$/;"	f	file:	signature:(const char* const name, const betaKind kind)
makeClassTag	.\ctags58\flex.c	/^static void makeClassTag (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
makeClassTag	.\ctags58\jscript.c	/^static void makeClassTag (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
makeClassTag	.\ctags58\python.c	/^static void makeClassTag (vString *const class, vString *const inheritance,$/;"	f	file:	signature:(vString *const class, vString *const inheritance, vString *const parent, int is_class_parent)
makeConstTag	.\ctags58\flex.c	/^static void makeConstTag (tokenInfo *const token, const flexKind kind)$/;"	f	file:	signature:(tokenInfo *const token, const flexKind kind)
makeConstTag	.\ctags58\jscript.c	/^static void makeConstTag (tokenInfo *const token, const jsKind kind)$/;"	f	file:	signature:(tokenInfo *const token, const jsKind kind)
makeConstTag	.\ctags58\sql.c	/^static void makeConstTag (tokenInfo *const token, const sqlKind kind)$/;"	f	file:	signature:(tokenInfo *const token, const sqlKind kind)
makeConstTag	.\ctags58\tex.c	/^static void makeConstTag (tokenInfo *const token, const texKind kind)$/;"	f	file:	signature:(tokenInfo *const token, const texKind kind)
makeConstTag	.\ctags58\vhdl.c	/^static void makeConstTag (tokenInfo * const token, const vhdlKind kind)$/;"	f	file:	signature:(tokenInfo * const token, const vhdlKind kind)
makeDefineTag	.\ctags58\get.c	/^static void makeDefineTag (const char *const name)$/;"	f	file:	signature:(const char *const name)
makeEiffelClassTag	.\ctags58\eiffel.c	/^static void makeEiffelClassTag (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
makeEiffelFeatureTag	.\ctags58\eiffel.c	/^static void makeEiffelFeatureTag (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
makeEiffelLocalTag	.\ctags58\eiffel.c	/^static void makeEiffelLocalTag (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
makeExtraTagEntry	.\ctags58\c.c	/^static void makeExtraTagEntry (const tagType type, tagEntryInfo *const e,$/;"	f	file:	signature:(const tagType type, tagEntryInfo *const e, vString *const scope)
makeFileTag	.\ctags58\parse.c	/^static void makeFileTag (const char *const fileName)$/;"	f	file:	signature:(const char *const fileName)
makeFlexTag	.\ctags58\flex.c	/^static void makeFlexTag (tokenInfo *const token, flexKind kind)$/;"	f	file:	signature:(tokenInfo *const token, flexKind kind)
makeFortranTag	.\ctags58\fortran.c	/^static void makeFortranTag (tokenInfo *const token, tagType tag)$/;"	f	file:	signature:(tokenInfo *const token, tagType tag)
makeFunctionTag	.\ctags58\flex.c	/^static void makeFunctionTag (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
makeFunctionTag	.\ctags58\jscript.c	/^static void makeFunctionTag (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
makeFunctionTag	.\ctags58\python.c	/^static void makeFunctionTag (vString *const function,$/;"	f	file:	signature:(vString *const function, vString *const parent, int is_class_parent, const char *arglist __unused__)
makeJsTag	.\ctags58\jscript.c	/^static void makeJsTag (tokenInfo *const token, const jsKind kind)$/;"	f	file:	signature:(tokenInfo *const token, const jsKind kind)
makeLabelTag	.\ctags58\fortran.c	/^static void makeLabelTag (vString *const label)$/;"	f	file:	signature:(vString *const label)
makeMXTag	.\ctags58\flex.c	/^static void makeMXTag (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
makeMemberTag	.\ctags58\erlang.c	/^static void makeMemberTag ($/;"	f	file:	signature:( vString *const identifier, erlangKind kind, vString *const module)
makePascalTag	.\ctags58\pascal.c	/^static void makePascalTag (const tagEntryInfo* const tag)$/;"	f	file:	signature:(const tagEntryInfo* const tag)
makeRegexTag	.\ctags58\lregex.c	/^static void makeRegexTag ($/;"	f	file:	signature:( const vString* const name, const struct sKind* const kind)
makeSimpleTag	.\ctags58\parse.c	/^extern void makeSimpleTag ($/;"	f	signature:( const vString* const name, kindOption* const kinds, const int kind)
makeSimpleTag	.\ctags58\parse.h	/^extern void makeSimpleTag (const vString* const name, kindOption* const kinds, const int kind);$/;"	p	signature:(const vString* const name, kindOption* const kinds, const int kind)
makeSmlTag	.\ctags58\sml.c	/^static void makeSmlTag (smlKind type, vString *name)$/;"	f	file:	signature:(smlKind type, vString *name)
makeSqlTag	.\ctags58\sql.c	/^static void makeSqlTag (tokenInfo *const token, const sqlKind kind)$/;"	f	file:	signature:(tokenInfo *const token, const sqlKind kind)
makeTag	.\ctags58\c.c	/^static void makeTag (const tokenInfo *const token,$/;"	f	file:	signature:(const tokenInfo *const token, const statementInfo *const st, boolean isFileScope, const tagType type)
makeTagEntry	.\ctags58\entry.c	/^extern void makeTagEntry (const tagEntryInfo *const tag)$/;"	f	signature:(const tagEntryInfo *const tag)
makeTagEntry	.\ctags58\entry.h	/^extern void makeTagEntry (const tagEntryInfo *const tag);$/;"	p	signature:(const tagEntryInfo *const tag)
makeTags	.\ctags58\main.c	/^static void makeTags (cookedArgs *args)$/;"	f	file:	signature:(cookedArgs *args)
makeTclTag	.\ctags58\tcl.c	/^static const unsigned char *makeTclTag ($/;"	f	file:	signature:( const unsigned char *cp, vString *const name, const tclKind kind)
makeTexTag	.\ctags58\tex.c	/^static void makeTexTag (tokenInfo *const token, texKind kind)$/;"	f	file:	signature:(tokenInfo *const token, texKind kind)
makeVariableTag	.\ctags58\python.c	/^static void makeVariableTag (vString *const var, vString *const parent)$/;"	f	file:	signature:(vString *const var, vString *const parent)
makeVhdlTag	.\ctags58\vhdl.c	/^static void makeVhdlTag (tokenInfo * const token, const vhdlKind kind)$/;"	f	file:	signature:(tokenInfo * const token, const vhdlKind kind)
make_completion_list	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! s:make_completion_list(list, kind) "{{{$/;"	f
malloc	.\ctags58\routines.h	/^extern void *malloc (size_t);$/;"	p	signature:(size_t)
map	.\vimfiles\bundle\command-t\ruby\command-t\controller.rb	/^    def map key, function, param = nil$/;"	f	class:CommandT.Controller.quickfix.ensure_appropriate_window_selection
map_if_not_mapped	.\vimfiles\bundle\vim-snipmate\after\plugin\snipMate.vim	/^function! s:map_if_not_mapped(lhs, rhs, mode)$/;"	f
map_notascii	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned char map_notascii;$/;"	m	struct:re_string_t	access:public
map_notascii	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned int map_notascii : 1;$/;"	m	struct:re_dfa_t	access:public
mark_opt_subexp	.\ctags58\gnu_regex\regcomp.c	/^mark_opt_subexp (void *extra, bin_tree_t *node)$/;"	f	file:	signature:(void *extra, bin_tree_t *node)
mark_opt_subexp	.\ctags58\gnu_regex\regcomp.c	/^static reg_errcode_t mark_opt_subexp (void *extra, bin_tree_t *node);$/;"	p	file:	signature:(void *extra, bin_tree_t *node)
match	.\ctags58\tcl.c	/^static boolean match (const unsigned char *line, const char *word)$/;"	f	file:	signature:(const unsigned char *line, const char *word)
matchCallbackPattern	.\ctags58\lregex.c	/^static void matchCallbackPattern ($/;"	f	file:	signature:( const vString* const line, const regexPattern* const patbuf, const regmatch_t* const pmatch)
matchRegex	.\ctags58\lregex.c	/^extern boolean matchRegex (const vString* const line, const langType language)$/;"	f	signature:(const vString* const line, const langType language)
matchRegex	.\ctags58\parse.h	/^extern boolean matchRegex (const vString* const line, const langType language);$/;"	p	signature:(const vString* const line, const langType language)
matchRegexPattern	.\ctags58\lregex.c	/^static boolean matchRegexPattern (const vString* const line,$/;"	f	file:	signature:(const vString* const line, const regexPattern* const patbuf)
matchTagPattern	.\ctags58\lregex.c	/^static void matchTagPattern (const vString* const line,$/;"	f	file:	signature:(const vString* const line, const regexPattern* const patbuf, const regmatch_t* const pmatch)
match_colon_label	.\ctags58\basic.c	/^static void match_colon_label (char const *p)$/;"	f	file:	signature:(char const *p)
match_ctx_add_entry	.\ctags58\gnu_regex\regexec.c	/^match_ctx_add_entry (re_match_context_t *mctx, int node, int str_idx, int from,$/;"	f	file:	signature:(re_match_context_t *mctx, int node, int str_idx, int from, int to)
match_ctx_add_sublast	.\ctags58\gnu_regex\regexec.c	/^match_ctx_add_sublast (re_sub_match_top_t *subtop, int node, int str_idx)$/;"	f	file:	signature:(re_sub_match_top_t *subtop, int node, int str_idx)
match_ctx_add_subtop	.\ctags58\gnu_regex\regexec.c	/^match_ctx_add_subtop (re_match_context_t *mctx, int node, int str_idx)$/;"	f	file:	signature:(re_match_context_t *mctx, int node, int str_idx)
match_ctx_clean	.\ctags58\gnu_regex\regexec.c	/^match_ctx_clean (re_match_context_t *mctx)$/;"	f	file:	signature:(re_match_context_t *mctx)
match_ctx_free	.\ctags58\gnu_regex\regexec.c	/^match_ctx_free (re_match_context_t *mctx)$/;"	f	file:	signature:(re_match_context_t *mctx)
match_ctx_init	.\ctags58\gnu_regex\regexec.c	/^match_ctx_init (re_match_context_t *mctx, int eflags, int n)$/;"	f	file:	signature:(re_match_context_t *mctx, int eflags, int n)
match_dot_label	.\ctags58\basic.c	/^static void match_dot_label (char const *p)$/;"	f	file:	signature:(char const *p)
match_for	.\vimfiles\bundle\command-t\spec\command-t\match_spec.rb	/^  def match_for path, pattern$/;"	f
match_keyword	.\ctags58\basic.c	/^static int match_keyword (const char *p, KeyWord const *kw)$/;"	f	file:	signature:(const char *p, KeyWord const *kw)
match_last	.\ctags58\gnu_regex\regex_internal.h	/^  int match_last;$/;"	m	struct:__anon36	access:public
match_limit	.\vimfiles\bundle\command-t\ruby\command-t\controller.rb	/^    def match_limit$/;"	f	class:CommandT.Controller.quickfix.ensure_appropriate_window_selection
match_pair	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\syntax_complete.vim	/^function! s:match_pair(string, start_pattern, end_pattern, start_cnt) "{{{$/;"	f
match_text_for_idx	.\vimfiles\bundle\command-t\ruby\command-t\match_window.rb	/^    def match_text_for_idx idx$/;"	f	class:CommandT.MatchWindow
match_wildcard	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\helper.vim	/^function! s:match_wildcard(cur_text, pattern, complete_pos) "{{{$/;"	f
match_with_syntax_highlight	.\vimfiles\bundle\command-t\ruby\command-t\match_window.rb	/^    def match_with_syntax_highlight match$/;"	f	class:CommandT.MatchWindow
matcher.filter	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters\matcher_fuzzy.vim	/^function! s:matcher.filter(context) "{{{$/;"	f
matcher.filter	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters\matcher_head.vim	/^function! s:matcher.filter(context) "{{{$/;"	f
matcher.filter	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters\matcher_old.vim	/^function! s:matcher.filter(candidates, context) "{{{$/;"	f
matches=	.\vimfiles\bundle\command-t\ruby\command-t\match_window.rb	/^    def matches= matches$/;"	f	class:CommandT.MatchWindow
matchinfo_t	.\vimfiles\bundle\command-t\ruby\command-t\match.c	/^} matchinfo_t;$/;"	t	typeref:struct:__anon89	file:
matchparen	.\vim73\plugin\matchparen.vim	/^augroup matchparen$/;"	a
max	.\ctags58\entry.h	/^	struct sMax { size_t line, tag, file; } max;$/;"	m	struct:eTagFile	typeref:struct:eTagFile::sMax	access:public
max	.\ctags58\fortran.c	/^	unsigned int max;$/;"	m	struct:__anon21	file:	access:public
max	.\ctags58\readtags.c	/^			unsigned short max;$/;"	m	struct:sTagFile::__anon64	file:	access:public
max	.\ctags58\strlist.h	/^	unsigned int max;$/;"	m	struct:sStringList	access:public
max	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\data\list.vim	/^function! s:max(list, expr)$/;"	f
max_height	.\vimfiles\bundle\command-t\ruby\command-t\controller.rb	/^    def max_height$/;"	f	class:CommandT.Controller.quickfix
max_mb_elem_len	.\ctags58\gnu_regex\regex_internal.h	/^  int max_mb_elem_len;$/;"	m	struct:__anon36	access:public
max_score_per_char	.\vimfiles\bundle\command-t\ruby\command-t\match.c	/^    double  max_score_per_char;$/;"	m	struct:__anon89	file:	access:public
mayRedeclare	.\ctags58\ocaml.c	/^static void mayRedeclare (vString * const ident, ocaToken what)$/;"	f	file:	signature:(vString * const ident, ocaToken what)
mayRedeclare	.\ctags58\ocaml.c	/^static void mayRedeclare (vString * const ident, ocaToken what);$/;"	p	file:	signature:(vString * const ident, ocaToken what)
mb_cur_max	.\ctags58\gnu_regex\regex_internal.h	/^  int mb_cur_max;$/;"	m	struct:re_dfa_t	access:public
mb_cur_max	.\ctags58\gnu_regex\regex_internal.h	/^  int mb_cur_max;$/;"	m	struct:re_string_t	access:public
mb_partial	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned int mb_partial : 1;$/;"	m	struct:__anon31	access:public
mbchars	.\ctags58\gnu_regex\regex_internal.h	/^  wchar_t *mbchars;$/;"	m	struct:__anon30	access:public
mbcset	.\ctags58\gnu_regex\regex_internal.h	/^    re_charset_t *mbcset;	\/* for COMPLEX_BRACKET *\/$/;"	m	union:__anon31::__anon32	access:public
mbs	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned char *mbs;$/;"	m	struct:re_string_t	access:public
mbs_allocated	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned char mbs_allocated;$/;"	m	struct:re_string_t	access:public
mel_minlines	.\vim73\syntax\mel.vim	/^  let mel_minlines=15$/;"	v
member	.\ctags58\c.c	/^	memberInfo	member;         \/* information regarding parent class\/struct *\/$/;"	m	struct:sStatementInfo	file:	access:public
memberInfo	.\ctags58\c.c	/^} memberInfo;$/;"	t	typeref:struct:sMemberInfo	file:
memo	.\vimfiles\bundle\command-t\ruby\command-t\match.c	/^    double  *memo;                  \/\/ memoization$/;"	m	struct:__anon89	file:	access:public
menutrans_help_dialog	.\vim73\lang\menu_hu_hu.iso_8859-2.vim	/^let menutrans_help_dialog = "Írd be a kívánt szót vagy parancsot:\\n\\n A szövegbeviteli parancsok elé írj i_-t (pl.: i_CTRL-X)\\nA sorszerkeszõ parancsok elé c_-t (pl.: c_<Del>)\\nA változókat a ' jellel vedd körül (pl.: 'shiftwidth')"$/;"	v
menutrans_help_dialog	.\vim73\lang\menu_hu_hu.utf-8.vim	/^let menutrans_help_dialog = "Ãrd be a kÃ­vÃ¡nt szÃ³t vagy parancsot:\\n\\n A szÃ¶vegbeviteli parancsok elÃ© Ã­rj i_-t (pl.: i_CTRL-X)\\nA sorszerkeszÅ parancsok elÃ© c_-t (pl.: c_<Del>)\\nA vÃ¡ltozÃ³kat a ' jellel vedd kÃ¶rÃ¼l (pl.: 'shiftwidth')"$/;"	v
menutrans_help_dialog	.\vim73\lang\menu_nl_nl.latin1.vim	/^let menutrans_help_dialog = "Typ een commando of woord om help voor te vinden:\\n\\nVoeg i_ in voor Input mode commandos (bijv. i_CTRL-X)\\nVoeg c_ in voor een commando-regel edit commando (bijv. c_<Del>)\\nVoeg ' in \\voor een optie naam (bijv. 'shiftwidth')"$/;"	v
menutrans_help_dialog	.\vim73\lang\menu_pl_pl.iso_8859-2.vim	/^let menutrans_help_dialog = "Wprowad¼ komendê lub s³owo, aby otrzymaæ pomoc o:\\n\\nPrzedrostek i_ oznacza komendê trybu Wprowadzania (np. i_CTRL-X)\\nPrzedrostek c_ oznacza komendê edycji wiersza komend (np. c_<Del>)\\nPrzedrostek ' oznacza nazwê opcji (np. 'shiftwidth')"$/;"	v
menutrans_help_dialog	.\vim73\lang\menu_pl_pl.utf-8.vim	/^let menutrans_help_dialog = "WprowadÅº komendÄ lub sÅowo, aby otrzymaÄ pomoc o:\\n\\nPrzedrostek i_ oznacza komendÄ trybu Wprowadzania (np. i_CTRL-X)\\nPrzedrostek c_ oznacza komendÄ edycji wiersza komend (np. c_<Del>)\\nPrzedrostek ' oznacza nazwÄ opcji (np. 'shiftwidth')"$/;"	v
menutrans_help_dialog	.\vim73\lang\menu_polish_poland.1250.vim	/^let menutrans_help_dialog = "Wprowad komendê lub s³owo, aby otrzymaæ pomoc o:\\n\\nPrzedrostek i_ oznacza komendê trybu Wprowadzania (np. i_CTRL-X)\\nPrzedrostek c_ oznacza komendê edycji wiersza komend (np. c_<Del>)\\nPrzedrostek ' oznacza nazwê opcji (np. 'shiftwidth')"$/;"	v
menutrans_help_dialog	.\vim73\lang\menu_sr_rs.ascii.vim	/^let menutrans_help_dialog = "Unesite naredbu ili rec cije pojasnjenje trazite:\\n\\nDodajte i_ za naredbe unosa (npr. i_CTRL-X)\\nDodajte c_ za naredbe komandnog rezima (npr. s_<Del>)\\nDodajte ' za imena opcija (npr. 'shiftwidth')"$/;"	v
menutrans_help_dialog	.\vim73\lang\menu_sr_rs.iso_8859-2.vim	/^let menutrans_help_dialog = "Unesite naredbu ili reè èije poja¹njenje tra¾ite:\\n\\nDodajte i_ za naredbe unosa (npr. i_CTRL-X)\\nDodajte c_ za naredbe komandnog re¾ima (npr. s_<Del>)\\nDodajte ' za imena opcija (npr. 'shiftwidth')"$/;"	v
menutrans_help_dialog	.\vim73\lang\menu_sr_rs.iso_8859-5.vim	/^let menutrans_help_dialog = "ÃÝÕáØâÕ ÝÐàÕÔÑã ØÛØ àÕç çØøÕ ßÞøÐèúÕúÕ âàÐÖØâÕ:\\n\\n´ÞÔÐøâÕ i_ ×Ð ÝÐàÕÔÑÕ ãÝÞáÐ (Ýßà. i_CTRL-X)\\n´ÞÔÐøâÕ c_ ×Ð ÝÐàÕÔÑÕ ÚÞÜÐÝÔÝÞÓ àÕÖØÜÐ (Ýßà. á_<Del>)\\n´ÞÔÐøâÕ ' ×Ð ØÜÕÝÐ ÞßæØøÐ (Ýßà. 'shiftwidth')"$/;"	v
menutrans_help_dialog	.\vim73\lang\menu_sr_rs.utf-8.vim	/^let menutrans_help_dialog = "Ð£Ð½ÐµÑÐ¸ÑÐµ Ð½Ð°ÑÐµÐ´Ð±Ñ Ð¸Ð»Ð¸ ÑÐµÑ ÑÐ¸ÑÐµ Ð¿Ð¾ÑÐ°ÑÑÐµÑÐµ ÑÑÐ°Ð¶Ð¸ÑÐµ:\\n\\nÐÐ¾Ð´Ð°ÑÑÐµ i_ Ð·Ð° Ð½Ð°ÑÐµÐ´Ð±Ðµ ÑÐ½Ð¾ÑÐ° (Ð½Ð¿Ñ. i_CTRL-X)\\nÐÐ¾Ð´Ð°ÑÑÐµ c_ Ð·Ð° Ð½Ð°ÑÐµÐ´Ð±Ðµ ÐºÐ¾Ð¼Ð°Ð½Ð´Ð½Ð¾Ð³ ÑÐµÐ¶Ð¸Ð¼Ð° (Ð½Ð¿Ñ. Ñ_<Del>)\\nÐÐ¾Ð´Ð°ÑÑÐµ ' Ð·Ð° Ð¸Ð¼ÐµÐ½Ð° Ð¾Ð¿ÑÐ¸ÑÐ° (Ð½Ð¿Ñ. 'shiftwidth')"$/;"	v
menutrans_help_dialog	.\vim73\lang\menu_sv_se.latin1.vim	/^let menutrans_help_dialog = "Skriv in ett kommando eller ord som du vill söka hjälp på:\\n\\nBörja med i_ för infogninglägeskommandon (t.ex. i_CTRL-X)\\nBörja med c_ för kommandoradredigeringskommandon (t.ex. c_<Del>)\\nBörja med ' för ett inställningsnamn (t.ex. 'shiftwidth')"$/;"	v
menutrans_help_dialog	.\vim73\lang\menu_uk_ua.cp1251.vim	/^let menutrans_help_dialog = "Âêàæ³òü êîìàíäó àáî ñëîâî äëÿ ïîøóêó:\\n\\nÄîäàéòå i_ äëÿ êîìàíä ðåæèìó âñòàâêè (íàïð. i_CTRL-X)\\nÄîäàéòå i_ äëÿ êîìàíäíîãî ðåæèìó (íàïð. ñ_<Del>)\\nÄîäàéòå ' äëÿ ïîçíà÷åííÿ íàçâè îïö³¿ (íàïð. 'shiftwidth')"$/;"	v
menutrans_help_dialog	.\vim73\lang\menu_uk_ua.koi8-u.vim	/^let menutrans_help_dialog = "÷ËÁÖ¦ÔØ ËÏÍÁÎÄÕ ÁÂÏ ÓÌÏ×Ï ÄÌÑ ÐÏÛÕËÕ:\\n\\näÏÄÁÊÔÅ i_ ÄÌÑ ËÏÍÁÎÄ ÒÅÖÉÍÕ ×ÓÔÁ×ËÉ (ÎÁÐÒ. i_CTRL-X)\\näÏÄÁÊÔÅ i_ ÄÌÑ ËÏÍÁÎÄÎÏÇÏ ÒÅÖÉÍÕ (ÎÁÐÒ. Ó_<Del>)\\näÏÄÁÊÔÅ ' ÄÌÑ ÐÏÚÎÁÞÅÎÎÑ ÎÁÚ×É ÏÐÃ¦§ (ÎÁÐÒ. 'shiftwidth')"$/;"	v
menutrans_no_file	.\vim73\lang\menu_hu_hu.iso_8859-2.vim	/^let menutrans_no_file = "[Nincs file]"$/;"	v
menutrans_no_file	.\vim73\lang\menu_hu_hu.utf-8.vim	/^let menutrans_no_file = "[Nincs file]"$/;"	v
menutrans_no_file	.\vim73\lang\menu_nl_nl.latin1.vim	/^let menutrans_no_file = "[Geen Bestand]"$/;"	v
menutrans_no_file	.\vim73\lang\menu_pl_pl.iso_8859-2.vim	/^let menutrans_no_file = "[Brak pliku]"$/;"	v
menutrans_no_file	.\vim73\lang\menu_pl_pl.utf-8.vim	/^let menutrans_no_file = "[Brak pliku]"$/;"	v
menutrans_no_file	.\vim73\lang\menu_polish_poland.1250.vim	/^let menutrans_no_file = "[Brak pliku]"$/;"	v
menutrans_no_file	.\vim73\lang\menu_ru_ru.koi8-r.vim	/^let menutrans_no_file = "[îÅÔ ÆÁÊÌÁ]"$/;"	v
menutrans_no_file	.\vim73\lang\menu_ru_ru.vim	/^let menutrans_no_file = "[ÐÐµÑ ÑÐ°Ð¹Ð»Ð°]"$/;"	v
menutrans_no_file	.\vim73\lang\menu_sr_rs.ascii.vim	/^let menutrans_no_file = "[Nema datoteke]"$/;"	v
menutrans_no_file	.\vim73\lang\menu_sr_rs.iso_8859-2.vim	/^let menutrans_no_file = "[Nema datoteke]"$/;"	v
menutrans_no_file	.\vim73\lang\menu_sr_rs.iso_8859-5.vim	/^let menutrans_no_file = "[½ÕÜÐ ÔÐâÞâÕÚÕ]"$/;"	v
menutrans_no_file	.\vim73\lang\menu_sr_rs.utf-8.vim	/^let menutrans_no_file = "[ÐÐµÐ¼Ð° Ð´Ð°ÑÐ¾ÑÐµÐºÐµ]"$/;"	v
menutrans_no_file	.\vim73\lang\menu_sv_se.latin1.vim	/^let menutrans_no_file = "[Ingen fil]"$/;"	v
menutrans_no_file	.\vim73\lang\menu_uk_ua.cp1251.vim	/^let menutrans_no_file = "[Íåìàº\\ Ôàéëà]"$/;"	v
menutrans_no_file	.\vim73\lang\menu_uk_ua.koi8-u.vim	/^let menutrans_no_file = "[îÅÍÁ¤\\ æÁÊÌÁ]"$/;"	v
menutrans_no_file	.\vim73\lang\menu_vi_vn.vim	/^let menutrans_no_file = "[khÃ´ng cÃ³ táº­p tin]"$/;"	v
merge_state_array	.\ctags58\gnu_regex\regexec.c	/^merge_state_array (const re_dfa_t *dfa, re_dfastate_t **dst,$/;"	f	file:	signature:(const re_dfa_t *dfa, re_dfastate_t **dst, re_dfastate_t **src, int num)
merge_state_with_log	.\ctags58\gnu_regex\regexec.c	/^merge_state_with_log (reg_errcode_t *err, re_match_context_t *mctx,$/;"	f	signature:(reg_errcode_t *err, re_match_context_t *mctx, re_dfastate_t *next_state)
methodDecl	.\ctags58\ocaml.c	/^static void methodDecl (vString * const ident, ocaToken what)$/;"	f	file:	signature:(vString * const ident, ocaToken what)
mfopen	.\ctags58\e_mac.h	/^extern FILE* mfopen(const char* file, const char* mode);$/;"	p	signature:(const char* file, const char* mode)
mfopen	.\ctags58\mac.c	/^FILE* mfopen(const char* file, const char* mode)$/;"	f	signature:(const char* file, const char* mode)
mfplain_mp_macros	.\vim73\syntax\mp.vim	/^  let mfplain_mp_macros = 0 " Set this to '1' to include these macro names$/;"	v
min	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\data\list.vim	/^function! s:min(list, expr)$/;"	f
min_height	.\vimfiles\bundle\command-t\ruby\command-t\controller.rb	/^    def min_height$/;"	f	class:CommandT.Controller.quickfix
missing	.\vimfiles\bundle\command-t\ruby\command-t\extconf.rb	/^def missing item$/;"	f
mmc_logmon_sup	.\vimfiles\bundle\vundle\test\files\test.erl	/^-module(mmc_logmon_sup).$/;"	m
mode_t	.\ctags58\e_mac.h	/^typedef unsigned long  mode_t;$/;"	t
moduleDecl	.\ctags58\ocaml.c	/^static void moduleDecl (vString * const ident, ocaToken what)$/;"	f	file:	signature:(vString * const ident, ocaToken what)
moduleSpecif	.\ctags58\ocaml.c	/^static void moduleSpecif (vString * const ident, ocaToken what)$/;"	f	file:	signature:(vString * const ident, ocaToken what)
more	.\ctags58\gnu_regex\regex_internal.h	/^  char more;$/;"	m	struct:re_backref_cache_entry	access:public
move_cursor_to_selected_line	.\vimfiles\bundle\command-t\ruby\command-t\match_window.rb	/^    def move_cursor_to_selected_line$/;"	f	class:CommandT.MatchWindow
mstat	.\ctags58\e_mac.h	/^int mstat(const char *path, struct stat *buf);$/;"	p	signature:(const char *path, struct stat *buf)
mstat	.\ctags58\mac.c	/^int mstat(const char* file, struct stat* st)$/;"	f	signature:(const char* file, struct stat* st)
mupad_cmdextversion	.\vim73\syntax\mupad.vim	/^  let mupad_cmdextversion = 2$/;"	v
mv_DEtools	.\vim73\syntax\maple.vim	/^  let mv_DEtools    = 1$/;"	v
mv_Galois	.\vim73\syntax\maple.vim	/^  let mv_Galois     = 1$/;"	v
mv_GaussInt	.\vim73\syntax\maple.vim	/^  let mv_GaussInt   = 1$/;"	v
mv_LREtools	.\vim73\syntax\maple.vim	/^  let mv_LREtools   = 1$/;"	v
mv_combinat	.\vim73\syntax\maple.vim	/^  let mv_combinat   = 1$/;"	v
mv_combstruct	.\vim73\syntax\maple.vim	/^  let mv_combstruct = 1$/;"	v
mv_difforms	.\vim73\syntax\maple.vim	/^  let mv_difforms   = 1$/;"	v
mv_finance	.\vim73\syntax\maple.vim	/^  let mv_finance    = 1$/;"	v
mv_genfunc	.\vim73\syntax\maple.vim	/^  let mv_genfunc    = 1$/;"	v
mv_geometry	.\vim73\syntax\maple.vim	/^  let mv_geometry   = 1$/;"	v
mv_grobner	.\vim73\syntax\maple.vim	/^  let mv_grobner    = 1$/;"	v
mv_group	.\vim73\syntax\maple.vim	/^  let mv_group      = 1$/;"	v
mv_inttrans	.\vim73\syntax\maple.vim	/^  let mv_inttrans   = 1$/;"	v
mv_liesymm	.\vim73\syntax\maple.vim	/^  let mv_liesymm    = 1$/;"	v
mv_linalg	.\vim73\syntax\maple.vim	/^  let mv_linalg     = 1$/;"	v
mv_logic	.\vim73\syntax\maple.vim	/^  let mv_logic      = 1$/;"	v
mv_networks	.\vim73\syntax\maple.vim	/^  let mv_networks   = 1$/;"	v
mv_numapprox	.\vim73\syntax\maple.vim	/^  let mv_numapprox  = 1$/;"	v
mv_numtheory	.\vim73\syntax\maple.vim	/^  let mv_numtheory  = 1$/;"	v
mv_orthopoly	.\vim73\syntax\maple.vim	/^  let mv_orthopoly  = 1$/;"	v
mv_padic	.\vim73\syntax\maple.vim	/^  let mv_padic      = 1$/;"	v
mv_plots	.\vim73\syntax\maple.vim	/^  let mv_plots      = 1$/;"	v
mv_plottools	.\vim73\syntax\maple.vim	/^  let mv_plottools  = 1$/;"	v
mv_powseries	.\vim73\syntax\maple.vim	/^  let mv_powseries  = 1$/;"	v
mv_process	.\vim73\syntax\maple.vim	/^  let mv_process    = 1$/;"	v
mv_simplex	.\vim73\syntax\maple.vim	/^  let mv_simplex    = 1$/;"	v
mv_stats	.\vim73\syntax\maple.vim	/^  let mv_stats      = 1$/;"	v
mv_student	.\vim73\syntax\maple.vim	/^  let mv_student    = 1$/;"	v
mv_sumtools	.\vim73\syntax\maple.vim	/^  let mv_sumtools   = 1$/;"	v
mv_tensor	.\vim73\syntax\maple.vim	/^  let mv_tensor     = 1$/;"	v
mv_totorder	.\vim73\syntax\maple.vim	/^  let mv_totorder   = 1$/;"	v
n	.\ctags58\python.c	/^	int n;					\/* number of levels in use *\/$/;"	m	struct:NestingLevels	file:	access:public
n	.\vim73\syntax\xpm.vim	/^	 let n = 1		" n = color index$/;"	v
n	.\vim73\syntax\xpm.vim	/^	 let n = n + 1$/;"	v
n	.\vim73\syntax\xpm.vim	/^let n      = 0$/;"	v
n	.\vim73\syntax\xpm2.vim	/^	let n = 1			" n = color index$/;"	v
n	.\vim73\syntax\xpm2.vim	/^	let n = n + 1$/;"	v
n	.\vim73\syntax\xpm2.vim	/^  let n      = 0$/;"	v
name	.\ctags58\c.c	/^	const char *name;$/;"	m	struct:sKeywordDesc	file:	access:public
name	.\ctags58\c.c	/^	vString*      name;          \/* the name of the token *\/$/;"	m	struct:sTokenInfo	file:	access:public
name	.\ctags58\eiffel.c	/^	const char *name;$/;"	m	struct:sKeywordDesc	file:	access:public
name	.\ctags58\entry.h	/^		char *name;$/;"	m	struct:eTagFile::sEtags	access:public
name	.\ctags58\entry.h	/^	char *name;$/;"	m	struct:eTagFile	access:public
name	.\ctags58\entry.h	/^	const char *name;             \/* name of the tag *\/$/;"	m	struct:sTagEntryInfo	access:public
name	.\ctags58\flex.c	/^	const char *name;$/;"	m	struct:sKeywordDesc	file:	access:public
name	.\ctags58\fortran.c	/^	const char *name;$/;"	m	struct:sKeywordDesc	file:	access:public
name	.\ctags58\get.c	/^		vString * name;          \/* macro name *\/$/;"	m	struct:sCppState::sDirective	file:	access:public
name	.\ctags58\gnu_regex\regex_internal.h	/^    unsigned char *name;$/;"	m	union:__anon39::__anon40	access:public
name	.\ctags58\jscript.c	/^	const char *name;$/;"	m	struct:sKeywordDesc	file:	access:public
name	.\ctags58\lregex.c	/^	char* name;$/;"	m	struct:sKind	file:	access:public
name	.\ctags58\ocaml.c	/^	const char *name;$/;"	m	struct:sOcaKeywordDesc	file:	access:public
name	.\ctags58\ocaml.c	/^	vString *name;	\/* current parsed identifier\/operator *\/$/;"	m	struct:_lexingState	file:	access:public
name	.\ctags58\options.c	/^	const char* name;   \/* name of option as specified by user *\/$/;"	m	struct:__anon53	file:	access:public
name	.\ctags58\options.c	/^	const char* name;   \/* name of option as specified by user *\/$/;"	m	struct:__anon54	file:	access:public
name	.\ctags58\parse.h	/^	char* name;                    \/* name of language *\/$/;"	m	struct:__anon56	access:public
name	.\ctags58\parse.h	/^	const char* name;         \/* kind name *\/$/;"	m	struct:sKindOption	access:public
name	.\ctags58\python.c	/^	vString *name;$/;"	m	struct:NestingLevel	file:	access:public
name	.\ctags58\read.h	/^		vString *name;           \/* name to report for source file *\/$/;"	m	struct:sInputFile::sSource	access:public
name	.\ctags58\read.h	/^	vString    *name;          \/* name of input file *\/$/;"	m	struct:sInputFile	access:public
name	.\ctags58\readtags.c	/^			char *name;$/;"	m	struct:sTagFile::__anon63	file:	access:public
name	.\ctags58\readtags.c	/^		char *name;$/;"	m	struct:sTagFile::__anon65	file:	access:public
name	.\ctags58\readtags.c	/^	vstring name;$/;"	m	struct:sTagFile	file:	access:public
name	.\ctags58\readtags.h	/^		const char *name;$/;"	m	struct:__anon68::__anon71	access:public
name	.\ctags58\readtags.h	/^	const char *name;$/;"	m	struct:__anon73	access:public
name	.\ctags58\routines.h	/^	char* name;$/;"	m	struct:__anon76	access:public
name	.\ctags58\sql.c	/^	const char *name;$/;"	m	struct:sKeywordDesc	file:	access:public
name	.\ctags58\tex.c	/^	const char *name;$/;"	m	struct:sKeywordDesc	file:	access:public
name	.\ctags58\vhdl.c	/^	const char *name;$/;"	m	struct:sKeywordDesc	file:	access:public
name	.\vim73\ftplugin\changelog.vim	/^  function! s:name(login)$/;"	f
nameComparison	.\ctags58\readtags.c	/^static int nameComparison (tagFile *const file)$/;"	f	file:	signature:(tagFile *const file)
nameLength	.\ctags58\readtags.c	/^			size_t nameLength;$/;"	m	struct:sTagFile::__anon63	file:	access:public
name_pattern	.\ctags58\lregex.c	/^			char *name_pattern;$/;"	m	struct:__anon43::__anon44::__anon45	file:	access:public
nbackref	.\ctags58\gnu_regex\regex_internal.h	/^  int nbackref; \/* The number of backreference in this dfa.  *\/$/;"	m	struct:re_dfa_t	access:public
nbkref_ents	.\ctags58\gnu_regex\regex_internal.h	/^  int nbkref_ents;$/;"	m	struct:__anon36	access:public
nchar_classes	.\ctags58\gnu_regex\regex_internal.h	/^  int nchar_classes;$/;"	m	struct:__anon30	access:public
ncoll_syms	.\ctags58\gnu_regex\regex_internal.h	/^  int ncoll_syms;$/;"	m	struct:__anon30	access:public
needStrongPoping	.\ctags58\ocaml.c	/^boolean needStrongPoping = FALSE;$/;"	v
needle_len	.\vimfiles\bundle\command-t\ruby\command-t\match.c	/^    long    needle_len;             \/\/ length of same$/;"	m	struct:__anon89	file:	access:public
needle_p	.\vimfiles\bundle\command-t\ruby\command-t\match.c	/^    char    *needle_p;              \/\/ pointer to search string (needle)$/;"	m	struct:__anon89	file:	access:public
nelem	.\ctags58\gnu_regex\regex_internal.h	/^  int nelem;$/;"	m	struct:__anon28	access:public
neocomplcache	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^  augroup neocomplcache$/;"	a
neocomplcache#add_dictionaries	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#add_dictionaries(dictionaries) "{{{$/;"	f
neocomplcache#async_cache#main	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\async_cache.vim	/^  function! neocomplcache#async_cache#main(argv) "{{{$/;"	f
neocomplcache#available_sources	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#available_sources() "{{{$/;"	f
neocomplcache#cache#async_load_from_file	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\cache.vim	/^function! neocomplcache#cache#async_load_from_file(cache_dir, filename, pattern, mark) "{{{$/;"	f
neocomplcache#cache#async_load_from_tags	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\cache.vim	/^function! neocomplcache#cache#async_load_from_tags(cache_dir, filename, filetype, mark, is_create_tags) "{{{$/;"	f
neocomplcache#cache#check_cache	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\cache.vim	/^function! neocomplcache#cache#check_cache(cache_dir, key, async_cache_dictionary, keyword_list_dictionary, ...) "{{{$/;"	f
neocomplcache#cache#check_cache_list	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\cache.vim	/^function! neocomplcache#cache#check_cache_list(cache_dir, key, async_cache_dictionary, index_keyword_list, ...) "{{{$/;"	f
neocomplcache#cache#check_old_cache	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\cache.vim	/^function! neocomplcache#cache#check_old_cache(cache_dir, filename) "{{{$/;"	f
neocomplcache#cache#encode_name	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\cache.vim	/^function! neocomplcache#cache#encode_name(cache_dir, filename)$/;"	f
neocomplcache#cache#filereadable	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\cache.vim	/^function! neocomplcache#cache#filereadable(cache_dir, filename) "{{{$/;"	f
neocomplcache#cache#getfilename	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\cache.vim	/^function! neocomplcache#cache#getfilename(cache_dir, filename) "{{{$/;"	f
neocomplcache#cache#index_load_from_cache	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\cache.vim	/^function! neocomplcache#cache#index_load_from_cache(cache_dir, filename, ...) "{{{$/;"	f
neocomplcache#cache#list2index	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\cache.vim	/^function! neocomplcache#cache#list2index(list, dictionary, is_string) "{{{$/;"	f
neocomplcache#cache#load_from_cache	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\cache.vim	/^function! neocomplcache#cache#load_from_cache(cache_dir, filename, ...) "{{{$/;"	f
neocomplcache#cache#readfile	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\cache.vim	/^function! neocomplcache#cache#readfile(cache_dir, filename) "{{{$/;"	f
neocomplcache#cache#save_cache	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\cache.vim	/^function! neocomplcache#cache#save_cache(cache_dir, filename, keyword_list) "{{{$/;"	f
neocomplcache#cache#save_cache_old	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\cache.vim	/^function! neocomplcache#cache#save_cache_old(cache_dir, filename, keyword_list) "{{{$/;"	f
neocomplcache#cache#test_async	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\cache.vim	/^function! neocomplcache#cache#test_async() "{{{$/;"	f
neocomplcache#cache#writefile	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\cache.vim	/^function! neocomplcache#cache#writefile(cache_dir, filename, list) "{{{$/;"	f
neocomplcache#cancel_popup	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#cancel_popup()$/;"	f
neocomplcache#check_completion_length_match	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#check_completion_length_match(complete_str, completion_length) "{{{$/;"	f
neocomplcache#check_invalid_omnifunc	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#check_invalid_omnifunc(omnifunc) "{{{$/;"	f
neocomplcache#check_match_filter	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#check_match_filter(complete_str) "{{{$/;"	f
neocomplcache#close_popup	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#close_popup()$/;"	f
neocomplcache#commands#_clean	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\commands.vim	/^function! neocomplcache#commands#_clean() "{{{$/;"	f
neocomplcache#commands#_initialize	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\commands.vim	/^function! neocomplcache#commands#_initialize() "{{{$/;"	f
neocomplcache#commands#_lock	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\commands.vim	/^function! neocomplcache#commands#_lock() "{{{$/;"	f
neocomplcache#commands#_lock_source	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\commands.vim	/^function! neocomplcache#commands#_lock_source(source_name) "{{{$/;"	f
neocomplcache#commands#_set_file_type	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\commands.vim	/^function! neocomplcache#commands#_set_file_type(filetype) "{{{$/;"	f
neocomplcache#commands#_toggle_lock	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\commands.vim	/^function! neocomplcache#commands#_toggle_lock() "{{{$/;"	f
neocomplcache#commands#_unlock	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\commands.vim	/^function! neocomplcache#commands#_unlock() "{{{$/;"	f
neocomplcache#commands#_unlock_source	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\commands.vim	/^function! neocomplcache#commands#_unlock_source(source_name) "{{{$/;"	f
neocomplcache#complete#_get_complete_pos	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\complete.vim	/^function! neocomplcache#complete#_get_complete_pos(sources) "{{{$/;"	f
neocomplcache#complete#_get_results	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\complete.vim	/^function! neocomplcache#complete#_get_results(cur_text, ...) "{{{$/;"	f
neocomplcache#complete#_get_words	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\complete.vim	/^function! neocomplcache#complete#_get_words(sources, complete_pos, complete_str) "{{{$/;"	f
neocomplcache#complete#_set_results_pos	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\complete.vim	/^function! neocomplcache#complete#_set_results_pos(cur_text, ...) "{{{$/;"	f
neocomplcache#complete#_set_results_words	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\complete.vim	/^function! neocomplcache#complete#_set_results_words(sources) "{{{$/;"	f
neocomplcache#complete#auto_complete	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\complete.vim	/^function! neocomplcache#complete#auto_complete(findstart, base) "{{{$/;"	f
neocomplcache#complete#manual_complete	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\complete.vim	/^function! neocomplcache#complete#manual_complete(findstart, base) "{{{$/;"	f
neocomplcache#complete#sources_manual_complete	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\complete.vim	/^function! neocomplcache#complete#sources_manual_complete(findstart, base) "{{{$/;"	f
neocomplcache#complete#unite_complete	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\complete.vim	/^function! neocomplcache#complete#unite_complete(findstart, base) "{{{$/;"	f
neocomplcache#complete_check	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#complete_check() "{{{$/;"	f
neocomplcache#complete_common_string	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#complete_common_string()$/;"	f
neocomplcache#context_filetype#get	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\context_filetype.vim	/^function! neocomplcache#context_filetype#get(filetype) "{{{$/;"	f
neocomplcache#context_filetype#initialize	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\context_filetype.vim	/^function! neocomplcache#context_filetype#initialize() "{{{$/;"	f
neocomplcache#context_filetype#set	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\context_filetype.vim	/^function! neocomplcache#context_filetype#set() "{{{$/;"	f
neocomplcache#custom_source	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#custom_source(source_name, option_name, value) "{{{$/;"	f
neocomplcache#define_filter	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#define_filter(filter) "{{{$/;"	f
neocomplcache#define_source	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#define_source(source) "{{{$/;"	f
neocomplcache#dictionary_filter	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#dictionary_filter(dictionary, complete_str) "{{{$/;"	f
neocomplcache#disable_default_dictionary	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#disable_default_dictionary(variable) "{{{$/;"	f
neocomplcache#dup_filter	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#dup_filter(list) "{{{$/;"	f
neocomplcache#escape_match	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#escape_match(str) "{{{$/;"	f
neocomplcache#exists_echodoc	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#exists_echodoc() "{{{$/;"	f
neocomplcache#filetype_complete	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#filetype_complete(arglead, cmdline, cursorpos) "{{{$/;"	f
neocomplcache#filters#converter_abbr#define	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters\converter_abbr.vim	/^function! neocomplcache#filters#converter_abbr#define() "{{{$/;"	f
neocomplcache#filters#converter_case#define	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters\converter_case.vim	/^function! neocomplcache#filters#converter_case#define() "{{{$/;"	f
neocomplcache#filters#converter_delimiter#define	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters\converter_delimiter.vim	/^function! neocomplcache#filters#converter_delimiter#define() "{{{$/;"	f
neocomplcache#filters#converter_nothing#define	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters\converter_nothing.vim	/^function! neocomplcache#filters#converter_nothing#define() "{{{$/;"	f
neocomplcache#filters#converter_remove_next_keyword#define	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters\converter_remove_next_keyword.vim	/^function! neocomplcache#filters#converter_remove_next_keyword#define() "{{{$/;"	f
neocomplcache#filters#converter_remove_next_keyword#get_next_keyword	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters\converter_remove_next_keyword.vim	/^function! neocomplcache#filters#converter_remove_next_keyword#get_next_keyword(source_name) "{{{$/;"	f
neocomplcache#filters#dictionary_filter	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters.vim	/^function! neocomplcache#filters#dictionary_filter(dictionary, complete_str) "{{{$/;"	f
neocomplcache#filters#keyword_filter	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters.vim	/^function! neocomplcache#filters#keyword_filter(list, complete_str) "{{{$/;"	f
neocomplcache#filters#matcher_fuzzy#define	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters\matcher_fuzzy.vim	/^function! neocomplcache#filters#matcher_fuzzy#define() "{{{$/;"	f
neocomplcache#filters#matcher_head#define	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters\matcher_head.vim	/^function! neocomplcache#filters#matcher_head#define() "{{{$/;"	f
neocomplcache#filters#matcher_old#define	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters\matcher_old.vim	/^function! neocomplcache#filters#matcher_old#define() "{{{$/;"	f
neocomplcache#filters#sorter_length#define	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters\sorter_length.vim	/^function! neocomplcache#filters#sorter_length#define() "{{{$/;"	f
neocomplcache#filters#sorter_nothing#define	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters\sorter_nothing.vim	/^function! neocomplcache#filters#sorter_nothing#define() "{{{$/;"	f
neocomplcache#filters#sorter_rank#define	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters\sorter_rank.vim	/^function! neocomplcache#filters#sorter_rank#define() "{{{$/;"	f
neocomplcache#get_completion_length	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#get_completion_length(source_name) "{{{$/;"	f
neocomplcache#get_context	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#get_context() "{{{$/;"	f
neocomplcache#get_context_filetype	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#get_context_filetype(...) "{{{$/;"	f
neocomplcache#get_context_filetype_range	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#get_context_filetype_range(...) "{{{$/;"	f
neocomplcache#get_cur_text	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#get_cur_text(...) "{{{$/;"	f
neocomplcache#get_current_neocomplcache	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#get_current_neocomplcache() "{{{$/;"	f
neocomplcache#get_keyword_pattern	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#get_keyword_pattern(...) "{{{$/;"	f
neocomplcache#get_keyword_pattern_end	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#get_keyword_pattern_end(...) "{{{$/;"	f
neocomplcache#get_next_keyword	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#get_next_keyword() "{{{$/;"	f
neocomplcache#get_next_keyword_pattern	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#get_next_keyword_pattern(...) "{{{$/;"	f
neocomplcache#get_source_filetypes	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#get_source_filetypes(filetype) "{{{$/;"	f
neocomplcache#get_sources_list	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#get_sources_list(dictionary, filetype) "{{{$/;"	f
neocomplcache#get_temporary_directory	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#get_temporary_directory() "{{{$/;"	f
neocomplcache#handler#_change_update_time	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\handler.vim	/^function! neocomplcache#handler#_change_update_time() "{{{$/;"	f
neocomplcache#handler#_do_auto_complete	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\handler.vim	/^function! neocomplcache#handler#_do_auto_complete(event) "{{{$/;"	f
neocomplcache#handler#_on_complete_done	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\handler.vim	/^function! neocomplcache#handler#_on_complete_done() "{{{$/;"	f
neocomplcache#handler#_on_insert_enter	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\handler.vim	/^function! neocomplcache#handler#_on_insert_enter() "{{{$/;"	f
neocomplcache#handler#_on_insert_leave	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\handler.vim	/^function! neocomplcache#handler#_on_insert_leave() "{{{$/;"	f
neocomplcache#handler#_on_moved_i	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\handler.vim	/^function! neocomplcache#handler#_on_moved_i() "{{{$/;"	f
neocomplcache#handler#_on_write_post	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\handler.vim	/^function! neocomplcache#handler#_on_write_post() "{{{$/;"	f
neocomplcache#handler#_restore_update_time	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\handler.vim	/^function! neocomplcache#handler#_restore_update_time() "{{{$/;"	f
neocomplcache#has_vimproc	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#has_vimproc() "{{{$/;"	f
neocomplcache#head_match	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#head_match(checkstr, headstr) "{{{$/;"	f
neocomplcache#helper#call_filters	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\helper.vim	/^function! neocomplcache#helper#call_filters(filters, source, context) "{{{$/;"	f
neocomplcache#helper#call_hook	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\helper.vim	/^function! neocomplcache#helper#call_hook(sources, hook_name, context) "{{{$/;"	f
neocomplcache#helper#clear_result	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\helper.vim	/^function! neocomplcache#helper#clear_result() "{{{$/;"	f
neocomplcache#helper#complete_check	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\helper.vim	/^function! neocomplcache#helper#complete_check() "{{{$/;"	f
neocomplcache#helper#filetype_complete	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\helper.vim	/^function! neocomplcache#helper#filetype_complete(arglead, cmdline, cursorpos) "{{{$/;"	f
neocomplcache#helper#ftdictionary2list	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\helper.vim	/^function! neocomplcache#helper#ftdictionary2list(dictionary, filetype) "{{{$/;"	f
neocomplcache#helper#get_completion_length	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\helper.vim	/^function! neocomplcache#helper#get_completion_length(plugin_name) "{{{$/;"	f
neocomplcache#helper#get_cur_text	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\helper.vim	/^function! neocomplcache#helper#get_cur_text() "{{{$/;"	f
neocomplcache#helper#get_source_filetypes	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\helper.vim	/^function! neocomplcache#helper#get_source_filetypes(filetype) "{{{$/;"	f
neocomplcache#helper#get_sources_list	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\helper.vim	/^function! neocomplcache#helper#get_sources_list(...) "{{{$/;"	f
neocomplcache#helper#get_syn_name	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\helper.vim	/^function! neocomplcache#helper#get_syn_name(is_trans) "{{{$/;"	f
neocomplcache#helper#is_enabled_source	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\helper.vim	/^function! neocomplcache#helper#is_enabled_source(source_name) "{{{$/;"	f
neocomplcache#helper#is_omni_complete	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\helper.vim	/^function! neocomplcache#helper#is_omni_complete(cur_text) "{{{$/;"	f
neocomplcache#helper#keyword_escape	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\helper.vim	/^function! neocomplcache#helper#keyword_escape(complete_str) "{{{$/;"	f
neocomplcache#helper#match_word	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\helper.vim	/^function! neocomplcache#helper#match_word(cur_text, ...) "{{{$/;"	f
neocomplcache#helper#unite_patterns	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\helper.vim	/^function! neocomplcache#helper#unite_patterns(pattern_var, filetype) "{{{$/;"	f
neocomplcache#init#_autocmds	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\init.vim	/^function! neocomplcache#init#_autocmds() "{{{$/;"	f
neocomplcache#init#_current_neocomplcache	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\init.vim	/^function! neocomplcache#init#_current_neocomplcache() "{{{$/;"	f
neocomplcache#init#_filter	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\init.vim	/^function! neocomplcache#init#_filter(filter) "{{{$/;"	f
neocomplcache#init#_filters	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\init.vim	/^function! neocomplcache#init#_filters(names) "{{{$/;"	f
neocomplcache#init#_others	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\init.vim	/^function! neocomplcache#init#_others() "{{{$/;"	f
neocomplcache#init#_source	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\init.vim	/^function! neocomplcache#init#_source(source) "{{{$/;"	f
neocomplcache#init#_sources	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\init.vim	/^function! neocomplcache#init#_sources(names) "{{{$/;"	f
neocomplcache#init#_variables	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\init.vim	/^function! neocomplcache#init#_variables() "{{{$/;"	f
neocomplcache#init#disable	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\init.vim	/^function! neocomplcache#init#disable() "{{{$/;"	f
neocomplcache#init#enable	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\init.vim	/^function! neocomplcache#init#enable() "{{{$/;"	f
neocomplcache#init#is_enabled	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\init.vim	/^function! neocomplcache#init#is_enabled() "{{{$/;"	f
neocomplcache#init#lazy	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\init.vim	/^function! neocomplcache#init#lazy() "{{{$/;"	f
neocomplcache#initialize	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#initialize() "{{{$/;"	f
neocomplcache#is_auto_complete	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#is_auto_complete() "{{{$/;"	f
neocomplcache#is_auto_select	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#is_auto_select() "{{{$/;"	f
neocomplcache#is_disabled_source	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#is_disabled_source(source_name) "{{{$/;"	f
neocomplcache#is_enabled	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#is_enabled() "{{{$/;"	f
neocomplcache#is_enabled_source	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#is_enabled_source(source_name) "{{{$/;"	f
neocomplcache#is_eskk_convertion	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#is_eskk_convertion(cur_text) "{{{$/;"	f
neocomplcache#is_eskk_enabled	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#is_eskk_enabled() "{{{$/;"	f
neocomplcache#is_locked	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#is_locked(...) "{{{$/;"	f
neocomplcache#is_multibyte_input	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#is_multibyte_input(cur_text) "{{{$/;"	f
neocomplcache#is_plugin_locked	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#is_plugin_locked(source_name) "{{{$/;"	f
neocomplcache#is_prefetch	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#is_prefetch() "{{{$/;"	f
neocomplcache#is_sources_complete	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#is_sources_complete() "{{{$/;"	f
neocomplcache#is_text_mode	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#is_text_mode() "{{{$/;"	f
neocomplcache#is_win	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#is_win() "{{{$/;"	f
neocomplcache#is_windows	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#is_windows() "{{{$/;"	f
neocomplcache#keyword_escape	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#keyword_escape(complete_str) "{{{$/;"	f
neocomplcache#keyword_filter	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#keyword_filter(list, complete_str) "{{{$/;"	f
neocomplcache#mappings#cancel_popup	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\mappings.vim	/^function! neocomplcache#mappings#cancel_popup() "{{{$/;"	f
neocomplcache#mappings#close_popup	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\mappings.vim	/^function! neocomplcache#mappings#close_popup() "{{{$/;"	f
neocomplcache#mappings#complete_common_string	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\mappings.vim	/^function! neocomplcache#mappings#complete_common_string() "{{{$/;"	f
neocomplcache#mappings#define_default_mappings	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\mappings.vim	/^function! neocomplcache#mappings#define_default_mappings() "{{{$/;"	f
neocomplcache#mappings#popup_post	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\mappings.vim	/^function! neocomplcache#mappings#popup_post() "{{{$/;"	f
neocomplcache#mappings#smart_close_popup	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\mappings.vim	/^function! neocomplcache#mappings#smart_close_popup() "{{{$/;"	f
neocomplcache#mappings#start_manual_complete	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\mappings.vim	/^function! neocomplcache#mappings#start_manual_complete(...) "{{{$/;"	f
neocomplcache#mappings#start_manual_complete_list	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\mappings.vim	/^function! neocomplcache#mappings#start_manual_complete_list(complete_pos, complete_str, candidates) "{{{$/;"	f
neocomplcache#mappings#undo_completion	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\mappings.vim	/^function! neocomplcache#mappings#undo_completion() "{{{$/;"	f
neocomplcache#match_word	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#match_word(...) "{{{$/;"	f
neocomplcache#pack_dictionary	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#pack_dictionary(list) "{{{$/;"	f
neocomplcache#print_caching	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#print_caching(string) "{{{$/;"	f
neocomplcache#print_debug	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#print_debug(expr) "{{{$/;"	f
neocomplcache#print_error	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#print_error(string) "{{{$/;"	f
neocomplcache#print_warning	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#print_warning(string) "{{{$/;"	f
neocomplcache#set_completion_length	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#set_completion_length(source_name, length) "{{{$/;"	f
neocomplcache#set_dictionary_helper	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#set_dictionary_helper(variable, keys, value) "{{{$/;"	f
neocomplcache#smart_close_popup	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#smart_close_popup()$/;"	f
neocomplcache#sources#buffer_complete#caching_buffer	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\buffer_complete.vim	/^function! neocomplcache#sources#buffer_complete#caching_buffer(name) "{{{$/;"	f
neocomplcache#sources#buffer_complete#caching_current_block	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\buffer_complete.vim	/^function! neocomplcache#sources#buffer_complete#caching_current_block() "{{{$/;"	f
neocomplcache#sources#buffer_complete#caching_current_line	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\buffer_complete.vim	/^function! neocomplcache#sources#buffer_complete#caching_current_line() "{{{$/;"	f
neocomplcache#sources#buffer_complete#define	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\buffer_complete.vim	/^function! neocomplcache#sources#buffer_complete#define() "{{{$/;"	f
neocomplcache#sources#buffer_complete#disable_caching	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\buffer_complete.vim	/^function! neocomplcache#sources#buffer_complete#disable_caching(name) "{{{$/;"	f
neocomplcache#sources#buffer_complete#enable_caching	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\buffer_complete.vim	/^function! neocomplcache#sources#buffer_complete#enable_caching(name) "{{{$/;"	f
neocomplcache#sources#buffer_complete#get_frequencies	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\buffer_complete.vim	/^function! neocomplcache#sources#buffer_complete#get_frequencies() "{{{$/;"	f
neocomplcache#sources#buffer_complete#output_keyword	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\buffer_complete.vim	/^function! neocomplcache#sources#buffer_complete#output_keyword(name) "{{{$/;"	f
neocomplcache#sources#buffer_complete#print_source	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\buffer_complete.vim	/^function! neocomplcache#sources#buffer_complete#print_source(name) "{{{$/;"	f
neocomplcache#sources#dictionary_complete#define	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\dictionary_complete.vim	/^function! neocomplcache#sources#dictionary_complete#define() "{{{$/;"	f
neocomplcache#sources#dictionary_complete#recaching	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\dictionary_complete.vim	/^function! neocomplcache#sources#dictionary_complete#recaching(filetype) "{{{$/;"	f
neocomplcache#sources#filename_complete#define	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\filename_complete.vim	/^function! neocomplcache#sources#filename_complete#define() "{{{$/;"	f
neocomplcache#sources#filename_complete#get_complete_words	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\filename_complete.vim	/^function! neocomplcache#sources#filename_complete#get_complete_words(complete_str, path) "{{{$/;"	f
neocomplcache#sources#filename_include#define	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\filename_include.vim	/^function! neocomplcache#sources#filename_include#define() "{{{$/;"	f
neocomplcache#sources#include_complete#analyze_ruby_include_files	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\include_complete.vim	/^function! neocomplcache#sources#include_complete#analyze_ruby_include_files(lines, path) "{{{$/;"	f
neocomplcache#sources#include_complete#analyze_vim_include_files	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\include_complete.vim	/^function! neocomplcache#sources#include_complete#analyze_vim_include_files(lines, path) "{{{$/;"	f
neocomplcache#sources#include_complete#caching_include	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\include_complete.vim	/^function! neocomplcache#sources#include_complete#caching_include(bufname) "{{{$/;"	f
neocomplcache#sources#include_complete#define	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\include_complete.vim	/^function! neocomplcache#sources#include_complete#define() "{{{$/;"	f
neocomplcache#sources#include_complete#get_current_include_files	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\include_complete.vim	/^function! neocomplcache#sources#include_complete#get_current_include_files() "{{{$/;"	f
neocomplcache#sources#include_complete#get_include_files	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\include_complete.vim	/^function! neocomplcache#sources#include_complete#get_include_files(bufnumber) "{{{$/;"	f
neocomplcache#sources#include_complete#get_include_tags	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\include_complete.vim	/^function! neocomplcache#sources#include_complete#get_include_tags(bufnumber) "{{{$/;"	f
neocomplcache#sources#member_complete#caching_current_buffer	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\member_complete.vim	/^function! neocomplcache#sources#member_complete#caching_current_buffer() "{{{$/;"	f
neocomplcache#sources#member_complete#caching_current_line	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\member_complete.vim	/^function! neocomplcache#sources#member_complete#caching_current_line() "{{{$/;"	f
neocomplcache#sources#member_complete#define	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\member_complete.vim	/^function! neocomplcache#sources#member_complete#define() "{{{$/;"	f
neocomplcache#sources#omni_complete#define	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\omni_complete.vim	/^function! neocomplcache#sources#omni_complete#define() "{{{$/;"	f
neocomplcache#sources#syntax_complete#define	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\syntax_complete.vim	/^function! neocomplcache#sources#syntax_complete#define() "{{{$/;"	f
neocomplcache#sources#syntax_complete#recaching	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\syntax_complete.vim	/^function! neocomplcache#sources#syntax_complete#recaching(filetype) "{{{$/;"	f
neocomplcache#sources#tags_complete#caching_tags	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\tags_complete.vim	/^function! neocomplcache#sources#tags_complete#caching_tags(force) "{{{$/;"	f
neocomplcache#sources#tags_complete#define	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\tags_complete.vim	/^function! neocomplcache#sources#tags_complete#define() "{{{$/;"	f
neocomplcache#sources#vim_complete#define	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete.vim	/^function! neocomplcache#sources#vim_complete#define() "{{{$/;"	f
neocomplcache#sources#vim_complete#get_command	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete.vim	/^function! neocomplcache#sources#vim_complete#get_command(cur_text) "{{{$/;"	f
neocomplcache#sources#vim_complete#get_cur_text	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete.vim	/^function! neocomplcache#sources#vim_complete#get_cur_text() "{{{$/;"	f
neocomplcache#sources#vim_complete#helper#augroup	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! neocomplcache#sources#vim_complete#helper#augroup(cur_text, complete_str) "{{{$/;"	f
neocomplcache#sources#vim_complete#helper#autocmd_args	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! neocomplcache#sources#vim_complete#helper#autocmd_args(cur_text, complete_str) "{{{$/;"	f
neocomplcache#sources#vim_complete#helper#buffer	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! neocomplcache#sources#vim_complete#helper#buffer(cur_text, complete_str) "{{{$/;"	f
neocomplcache#sources#vim_complete#helper#colorscheme_args	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! neocomplcache#sources#vim_complete#helper#colorscheme_args(cur_text, complete_str) "{{{$/;"	f
neocomplcache#sources#vim_complete#helper#command	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! neocomplcache#sources#vim_complete#helper#command(cur_text, complete_str) "{{{$/;"	f
neocomplcache#sources#vim_complete#helper#command_args	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! neocomplcache#sources#vim_complete#helper#command_args(cur_text, complete_str) "{{{$/;"	f
neocomplcache#sources#vim_complete#helper#custom	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! neocomplcache#sources#vim_complete#helper#custom(command_name, cur_text, complete_str) "{{{$/;"	f
neocomplcache#sources#vim_complete#helper#customlist	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! neocomplcache#sources#vim_complete#helper#customlist(command_name, cur_text, complete_str) "{{{$/;"	f
neocomplcache#sources#vim_complete#helper#dir	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! neocomplcache#sources#vim_complete#helper#dir(cur_text, complete_str) "{{{$/;"	f
neocomplcache#sources#vim_complete#helper#environment	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! neocomplcache#sources#vim_complete#helper#environment(cur_text, complete_str) "{{{$/;"	f
neocomplcache#sources#vim_complete#helper#event	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! neocomplcache#sources#vim_complete#helper#event(cur_text, complete_str) "{{{$/;"	f
neocomplcache#sources#vim_complete#helper#execute	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! neocomplcache#sources#vim_complete#helper#execute(cur_text, complete_str) "{{{$/;"	f
neocomplcache#sources#vim_complete#helper#expand	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! neocomplcache#sources#vim_complete#helper#expand(cur_text, complete_str) "{{{$/;"	f
neocomplcache#sources#vim_complete#helper#expression	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! neocomplcache#sources#vim_complete#helper#expression(cur_text, complete_str) "{{{$/;"	f
neocomplcache#sources#vim_complete#helper#feature	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! neocomplcache#sources#vim_complete#helper#feature(cur_text, complete_str) "{{{$/;"	f
neocomplcache#sources#vim_complete#helper#file	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! neocomplcache#sources#vim_complete#helper#file(cur_text, complete_str) "{{{$/;"	f
neocomplcache#sources#vim_complete#helper#filetype	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! neocomplcache#sources#vim_complete#helper#filetype(cur_text, complete_str) "{{{$/;"	f
neocomplcache#sources#vim_complete#helper#function	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! neocomplcache#sources#vim_complete#helper#function(cur_text, complete_str) "{{{$/;"	f
neocomplcache#sources#vim_complete#helper#get_command_completion	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! neocomplcache#sources#vim_complete#helper#get_command_completion(command_name, cur_text, complete_str) "{{{$/;"	f
neocomplcache#sources#vim_complete#helper#get_completion_name	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! neocomplcache#sources#vim_complete#helper#get_completion_name(command_name) "{{{$/;"	f
neocomplcache#sources#vim_complete#helper#help	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! neocomplcache#sources#vim_complete#helper#help(cur_text, complete_str) "{{{$/;"	f
neocomplcache#sources#vim_complete#helper#highlight	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! neocomplcache#sources#vim_complete#helper#highlight(cur_text, complete_str) "{{{$/;"	f
neocomplcache#sources#vim_complete#helper#let	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! neocomplcache#sources#vim_complete#helper#let(cur_text, complete_str) "{{{$/;"	f
neocomplcache#sources#vim_complete#helper#mapping	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! neocomplcache#sources#vim_complete#helper#mapping(cur_text, complete_str) "{{{$/;"	f
neocomplcache#sources#vim_complete#helper#menu	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! neocomplcache#sources#vim_complete#helper#menu(cur_text, complete_str) "{{{$/;"	f
neocomplcache#sources#vim_complete#helper#on_filetype	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! neocomplcache#sources#vim_complete#helper#on_filetype() "{{{$/;"	f
neocomplcache#sources#vim_complete#helper#option	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! neocomplcache#sources#vim_complete#helper#option(cur_text, complete_str) "{{{$/;"	f
neocomplcache#sources#vim_complete#helper#recaching	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! neocomplcache#sources#vim_complete#helper#recaching(bufname) "{{{$/;"	f
neocomplcache#sources#vim_complete#helper#shellcmd	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! neocomplcache#sources#vim_complete#helper#shellcmd(cur_text, complete_str) "{{{$/;"	f
neocomplcache#sources#vim_complete#helper#tag	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! neocomplcache#sources#vim_complete#helper#tag(cur_text, complete_str) "{{{$/;"	f
neocomplcache#sources#vim_complete#helper#tag_listfiles	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! neocomplcache#sources#vim_complete#helper#tag_listfiles(cur_text, complete_str) "{{{$/;"	f
neocomplcache#sources#vim_complete#helper#var	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! neocomplcache#sources#vim_complete#helper#var(cur_text, complete_str) "{{{$/;"	f
neocomplcache#sources#vim_complete#helper#var_dictionary	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! neocomplcache#sources#vim_complete#helper#var_dictionary(cur_text, complete_str) "{{{$/;"	f
neocomplcache#start_manual_complete	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#start_manual_complete(...)$/;"	f
neocomplcache#system	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#system(...) "{{{$/;"	f
neocomplcache#undo_completion	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#undo_completion()$/;"	f
neocomplcache#unpack_dictionary	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#unpack_dictionary(dict) "{{{$/;"	f
neocomplcache#util#convert2list	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\util.vim	/^function! neocomplcache#util#convert2list(expr) "{{{$/;"	f
neocomplcache#util#disable_default_dictionary	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\util.vim	/^function! neocomplcache#util#disable_default_dictionary(variable) "{{{$/;"	f
neocomplcache#util#dup_filter	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\util.vim	/^function! neocomplcache#util#dup_filter(list) "{{{$/;"	f
neocomplcache#util#escape_pattern	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\util.vim	/^function! neocomplcache#util#escape_pattern(...) "{{{$/;"	f
neocomplcache#util#expand	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\util.vim	/^function! neocomplcache#util#expand(path) "{{{$/;"	f
neocomplcache#util#get_last_status	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\util.vim	/^function! neocomplcache#util#get_last_status(...) "{{{$/;"	f
neocomplcache#util#glob	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\util.vim	/^function! neocomplcache#util#glob(pattern, ...) "{{{$/;"	f
neocomplcache#util#has_lua	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\util.vim	/^function! neocomplcache#util#has_lua() "{{{$/;"	f
neocomplcache#util#has_vimproc	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\util.vim	/^function! neocomplcache#util#has_vimproc() "{{{$/;"	f
neocomplcache#util#has_vimproc	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\util.vim	/^function! neocomplcache#util#has_vimproc(...) "{{{$/;"	f
neocomplcache#util#iconv	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\util.vim	/^function! neocomplcache#util#iconv(...) "{{{$/;"	f
neocomplcache#util#is_mac	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\util.vim	/^function! neocomplcache#util#is_mac(...) "{{{$/;"	f
neocomplcache#util#is_windows	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\util.vim	/^function! neocomplcache#util#is_windows(...) "{{{$/;"	f
neocomplcache#util#join_rtp	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\util.vim	/^function! neocomplcache#util#join_rtp(list) "{{{$/;"	f
neocomplcache#util#mb_strlen	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\util.vim	/^function! neocomplcache#util#mb_strlen(...) "{{{$/;"	f
neocomplcache#util#set_default	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\util.vim	/^function! neocomplcache#util#set_default(var, val, ...)  "{{{$/;"	f
neocomplcache#util#set_default_dictionary	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\util.vim	/^function! neocomplcache#util#set_default_dictionary(variable, keys, value) "{{{$/;"	f
neocomplcache#util#set_dictionary_helper	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\util.vim	/^function! neocomplcache#util#set_dictionary_helper(...) "{{{$/;"	f
neocomplcache#util#sort_by	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\util.vim	/^function! neocomplcache#util#sort_by(...)$/;"	f
neocomplcache#util#split_rtp	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\util.vim	/^function! neocomplcache#util#split_rtp(...) "{{{$/;"	f
neocomplcache#util#strchars	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\util.vim	/^function! neocomplcache#util#strchars(...) "{{{$/;"	f
neocomplcache#util#strwidthpart	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\util.vim	/^function! neocomplcache#util#strwidthpart(...) "{{{$/;"	f
neocomplcache#util#strwidthpart_reverse	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\util.vim	/^function! neocomplcache#util#strwidthpart_reverse(...) "{{{$/;"	f
neocomplcache#util#substitute_path_separator	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\util.vim	/^function! neocomplcache#util#substitute_path_separator(...) "{{{$/;"	f
neocomplcache#util#system	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\util.vim	/^function! neocomplcache#util#system(...) "{{{$/;"	f
neocomplcache#util#truncate	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\util.vim	/^function! neocomplcache#util#truncate(...) "{{{$/;"	f
neocomplcache#util#truncate_smart	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\util.vim	/^function! neocomplcache#util#truncate_smart(...) "{{{$/;"	f
neocomplcache#util#uniq	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\util.vim	/^function! neocomplcache#util#uniq(...) "{{{$/;"	f
neocomplcache#util#uniq	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\util.vim	/^function! neocomplcache#util#uniq(list) "{{{$/;"	f
neocomplcache#util#wcswidth	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\util.vim	/^function! neocomplcache#util#wcswidth(...) "{{{$/;"	f
neocomplcache#variables#get_custom	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\variables.vim	/^function! neocomplcache#variables#get_custom() "{{{$/;"	f
neocomplcache#variables#get_filters	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\variables.vim	/^function! neocomplcache#variables#get_filters() "{{{$/;"	f
neocomplcache#variables#get_frequencies	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\variables.vim	/^function! neocomplcache#variables#get_frequencies() "{{{$/;"	f
neocomplcache#variables#get_sources	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\variables.vim	/^function! neocomplcache#variables#get_sources() "{{{$/;"	f
neocomplcache#within_comment	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^function! neocomplcache#within_comment() "{{{$/;"	f
neocomplcache_source.gather_candidates	.\vimfiles\bundle\neocomplcache\autoload\unite\sources\neocomplcache.vim	/^function! s:neocomplcache_source.gather_candidates(args, context) "{{{$/;"	f
neocomplcache_source.hooks.on_init	.\vimfiles\bundle\neocomplcache\autoload\unite\sources\neocomplcache.vim	/^function! s:neocomplcache_source.hooks.on_init(args, context) "{{{$/;"	f
nequiv_classes	.\ctags58\gnu_regex\regex_internal.h	/^  int nequiv_classes;$/;"	m	struct:__anon30	access:public
nest	.\ctags58\c.c	/^static void nest (statementInfo *const st, const unsigned int nestLevel)$/;"	f	file:	signature:(statementInfo *const st, const unsigned int nestLevel)
nestLevel	.\ctags58\flex.c	/^	int				nestLevel;$/;"	m	struct:sTokenInfo	file:	access:public
nestLevel	.\ctags58\get.c	/^		unsigned int nestLevel;  \/* level 0 is not used *\/$/;"	m	struct:sCppState::sDirective	file:	access:public
nestLevel	.\ctags58\jscript.c	/^	int				nestLevel;$/;"	m	struct:sTokenInfo	file:	access:public
nestedArgs	.\ctags58\c.c	/^	boolean nestedArgs;$/;"	m	struct:sParenInfo	file:	access:public
nesting	.\ctags58\ruby.c	/^static stringList* nesting = 0;$/;"	v	file:
nestingLevelsFree	.\ctags58\python.c	/^static void nestingLevelsFree (NestingLevels *nls)$/;"	f	file:	signature:(NestingLevels *nls)
nestingLevelsNew	.\ctags58\python.c	/^static NestingLevels *nestingLevelsNew (void)$/;"	f	file:	signature:(void)
nestingLevelsPush	.\ctags58\python.c	/^static void nestingLevelsPush (NestingLevels *nls,$/;"	f	file:	signature:(NestingLevels *nls, const vString *name, int type)
netrw#ErrorMsg	.\vim73\autoload\netrw.vim	/^fun! netrw#ErrorMsg(level,msg,errnum)$/;"	f
netrw#Explore	.\vim73\autoload\netrw.vim	/^fun! netrw#Explore(indx,dosplit,style,...)$/;"	f
netrw#LocalBrowseCheck	.\vim73\autoload\netrw.vim	/^fun! netrw#LocalBrowseCheck(dirname)$/;"	f
netrw#NetRead	.\vim73\autoload\netrw.vim	/^fun! netrw#NetRead(mode,...)$/;"	f
netrw#NetSource	.\vim73\autoload\netrw.vim	/^fun! netrw#NetSource(...)$/;"	f
netrw#NetWrite	.\vim73\autoload\netrw.vim	/^fun! netrw#NetWrite(...) range$/;"	f
netrw#NetrwBrowseX	.\vim73\autoload\netrw.vim	/^fun! netrw#NetrwBrowseX(fname,remote)$/;"	f
netrw#NetrwClean	.\vim73\autoload\netrw.vim	/^fun! netrw#NetrwClean(sys)$/;"	f
netrw#NetrwObtain	.\vim73\autoload\netrw.vim	/^fun! netrw#NetrwObtain(islocal,fname,...)$/;"	f
netrw#NetrwRestorePosn	.\vim73\autoload\netrw.vim	/^fun! netrw#NetrwRestorePosn(...)$/;"	f
netrw#NetrwSavePosn	.\vim73\autoload\netrw.vim	/^fun! netrw#NetrwSavePosn()$/;"	f
netrw#Nread	.\vim73\autoload\netrw.vim	/^fun! netrw#Nread(mode,fname)$/;"	f
netrw#RFC2396	.\vim73\autoload\netrw.vim	/^fun! netrw#RFC2396(fname)$/;"	f
netrw#WinPath	.\vim73\autoload\netrw.vim	/^fun! netrw#WinPath(path)$/;"	f
netrwFileHandlers#Invoke	.\vim73\autoload\netrwFileHandlers.vim	/^fun! netrwFileHandlers#Invoke(exten,fname)$/;"	f
netrwSettings#NetrwSettings	.\vim73\autoload\netrwSettings.vim	/^fun! netrwSettings#NetrwSettings()$/;"	f
never_show_dot_files	.\vimfiles\bundle\command-t\ruby\command-t\match.c	/^    int     never_show_dot_files;   \/\/ boolean$/;"	m	struct:__anon89	file:	access:public
newEntry	.\ctags58\keyword.c	/^static hashEntry *newEntry ($/;"	f	file:	signature:( const char *const string, langType language, int value)
newLine	.\ctags58\read.h	/^	boolean     newLine;       \/* will the next character begin a new line? *\/$/;"	m	struct:sInputFile	access:public
newLowerString	.\ctags58\routines.c	/^extern char* newLowerString (const char* str)$/;"	f	signature:(const char* str)
newLowerString	.\ctags58\routines.h	/^extern char* newLowerString (const char* str);$/;"	p	signature:(const char* str)
newStatement	.\ctags58\c.c	/^static statementInfo *newStatement (statementInfo *const parent)$/;"	f	file:	signature:(statementInfo *const parent)
newToken	.\ctags58\c.c	/^static tokenInfo *newToken (void)$/;"	f	file:	signature:(void)
newToken	.\ctags58\eiffel.c	/^static tokenInfo *newToken (void)$/;"	f	file:	signature:(void)
newToken	.\ctags58\flex.c	/^static tokenInfo *newToken (void)$/;"	f	file:	signature:(void)
newToken	.\ctags58\fortran.c	/^static tokenInfo *newToken (void)$/;"	f	file:	signature:(void)
newToken	.\ctags58\jscript.c	/^static tokenInfo *newToken (void)$/;"	f	file:	signature:(void)
newToken	.\ctags58\sql.c	/^static tokenInfo *newToken (void)$/;"	f	file:	signature:(void)
newToken	.\ctags58\tex.c	/^static tokenInfo *newToken (void)$/;"	f	file:	signature:(void)
newToken	.\ctags58\vhdl.c	/^static tokenInfo *newToken (void)$/;"	f	file:	signature:(void)
newTokenFrom	.\ctags58\fortran.c	/^static tokenInfo *newTokenFrom (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
newUpperString	.\ctags58\routines.c	/^extern char* newUpperString (const char* str)$/;"	f	signature:(const char* str)
newUpperString	.\ctags58\routines.h	/^extern char* newUpperString (const char* str);$/;"	p	signature:(const char* str)
new_changelog_entry	.\vim73\ftplugin\changelog.vim	/^  function! s:new_changelog_entry()$/;"	f
newline_anchor	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned char newline_anchor;$/;"	m	struct:re_string_t	access:public
next	.\ctags58\argproc.c	/^	struct list_item *next;$/;"	m	struct:list_item	typeref:struct:list_item::list_item	file:	access:public
next	.\ctags58\args.h	/^			const char* next;$/;"	m	struct:sArgs::__anon2::sStringArgs	access:public
next	.\ctags58\gnu_regex\regex_internal.h	/^  struct bin_tree_storage_t *next;$/;"	m	struct:bin_tree_storage_t	typeref:struct:bin_tree_storage_t::bin_tree_storage_t	access:public
next	.\ctags58\gnu_regex\regex_internal.h	/^  struct bin_tree_t *next;$/;"	m	struct:bin_tree_t	typeref:struct:bin_tree_t::bin_tree_t	access:public
next	.\ctags58\keyword.c	/^	struct sHashEntry *next;$/;"	m	struct:sHashEntry	typeref:struct:sHashEntry::sHashEntry	file:	access:public
nextChar	.\ctags58\make.c	/^static int nextChar (void)$/;"	f	file:	signature:(void)
nextFileArg	.\ctags58\args.c	/^static char* nextFileArg (FILE* const fp)$/;"	f	file:	signature:(FILE* const fp)
nextFileLine	.\ctags58\args.c	/^static char* nextFileLine (FILE* const fp)$/;"	f	file:	signature:(FILE* const fp)
nextFileString	.\ctags58\args.c	/^static char* nextFileString (const Arguments* const current, FILE* const fp)$/;"	f	file:	signature:(const Arguments* const current, FILE* const fp)
nextString	.\ctags58\args.c	/^static char* nextString (const Arguments* const current, const char** const next)$/;"	f	file:	signature:(const Arguments* const current, const char** const next)
nextStringArg	.\ctags58\args.c	/^static char *nextStringArg (const char** const next)$/;"	f	file:	signature:(const char** const next)
nextStringLine	.\ctags58\args.c	/^static char* nextStringLine (const char** const next)$/;"	f	file:	signature:(const char** const next)
nextToken	.\ctags58\c.c	/^static void nextToken (statementInfo *const st)$/;"	f	file:	signature:(statementInfo *const st)
next_idx	.\ctags58\gnu_regex\regex_internal.h	/^  int next_idx;$/;"	m	struct:__anon33	access:public
nexts	.\ctags58\gnu_regex\regex_internal.h	/^  int *nexts;$/;"	m	struct:re_dfa_t	access:public
nlasts	.\ctags58\gnu_regex\regex_internal.h	/^  int nlasts; \/* The number of LASTS.  *\/$/;"	m	struct:__anon35	access:public
nlink_t	.\ctags58\e_mac.h	/^typedef short          nlink_t;$/;"	t
nmbchars	.\ctags58\gnu_regex\regex_internal.h	/^  int nmbchars;$/;"	m	struct:__anon30	access:public
no_executable	.\vim73\vimtutor.bat	/^:no_executable$/;"	l
node	.\ctags58\gnu_regex\regex_internal.h	/^  int node;$/;"	m	struct:__anon34	access:public
node	.\ctags58\gnu_regex\regex_internal.h	/^  int node;$/;"	m	struct:__anon35	access:public
node	.\ctags58\gnu_regex\regex_internal.h	/^  int node;$/;"	m	struct:re_backref_cache_entry	access:public
node	.\ctags58\gnu_regex\regex_internal.h	/^  int node;$/;"	m	struct:re_fail_stack_ent_t	access:public
node_idx	.\ctags58\gnu_regex\regex_internal.h	/^  int node_idx;$/;"	m	struct:bin_tree_t	access:public
nodes	.\ctags58\gnu_regex\regex_internal.h	/^  re_node_set nodes;$/;"	m	struct:re_dfastate_t	access:public
nodes	.\ctags58\gnu_regex\regex_internal.h	/^  re_token_t *nodes;$/;"	m	struct:re_dfa_t	access:public
nodes_alloc	.\ctags58\gnu_regex\regex_internal.h	/^  size_t nodes_alloc;$/;"	m	struct:re_dfa_t	access:public
nodes_len	.\ctags58\gnu_regex\regex_internal.h	/^  size_t nodes_len;$/;"	m	struct:re_dfa_t	access:public
non_eps_nodes	.\ctags58\gnu_regex\regex_internal.h	/^  re_node_set non_eps_nodes;$/;"	m	struct:re_dfastate_t	access:public
non_match	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned int non_match : 1;$/;"	m	struct:__anon30	access:public
notVariable	.\ctags58\c.c	/^	boolean		notVariable;    \/* has a variable declaration been disqualified ? *\/$/;"	m	struct:sStatementInfo	file:	access:public
not_supported	.\vim73\spell\check_locales.vim	/^let not_supported = []$/;"	v
notag	.\vim73\ftplugin\pdf.vim	/^function! s:notag()$/;"	f
nqc_minlines	.\vim73\syntax\nqc.vim	/^    let nqc_minlines = 15	    " mostly for () constructs$/;"	v
nqc_minlines	.\vim73\syntax\nqc.vim	/^    let nqc_minlines = 50	    " #if 0 constructs can be long$/;"	v
nranges	.\ctags58\gnu_regex\regex_internal.h	/^  int nranges;$/;"	m	struct:__anon30	access:public
nsub_tops	.\ctags58\gnu_regex\regex_internal.h	/^  int nsub_tops;$/;"	m	struct:__anon36	access:public
ntaction	.\vim73\vimtutor.bat	/^:ntaction$/;"	l
num	.\ctags58\gnu_regex\regex_internal.h	/^  int num;$/;"	m	struct:re_fail_stack_t	access:public
num	.\ctags58\gnu_regex\regex_internal.h	/^  int num;$/;"	m	struct:re_state_table_entry	access:public
numTags	.\ctags58\entry.h	/^	struct sNumTags { unsigned long added, prev; } numTags;$/;"	m	struct:eTagFile	typeref:struct:eTagFile::sNumTags	access:public
num_regs	.\ctags58\gnu_regex\regex.h	/^  unsigned num_regs;$/;"	m	struct:re_registers	access:public
ocaKeywordDesc	.\ctags58\ocaml.c	/^} ocaKeywordDesc;$/;"	t	typeref:struct:sOcaKeywordDesc	file:
ocaToken	.\ctags58\ocaml.c	/^typedef ocamlKeyword ocaToken;$/;"	t	file:
ocamlContext	.\ctags58\ocaml.c	/^} ocamlContext;$/;"	t	typeref:struct:_sOcamlContext	file:
ocamlInitialize	.\ctags58\ocaml.c	/^static void ocamlInitialize (const langType language)$/;"	f	file:	signature:(const langType language)
ocamlKeyword	.\ctags58\ocaml.c	/^} ocamlKeyword;$/;"	t	typeref:enum:__anon52	file:
ocamlKind	.\ctags58\ocaml.c	/^} ocamlKind;$/;"	t	typeref:enum:__anon51	file:
offsets	.\ctags58\gnu_regex\regex_internal.h	/^  int *offsets;$/;"	m	struct:re_string_t	access:public
offsets_needed	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned char offsets_needed;$/;"	m	struct:re_string_t	access:public
omni#common#debug#End	.\vimfiles\bundle\OmniCppComplete\autoload\omni\common\debug.vim	/^function! omni#common#debug#End()$/;"	f
omni#common#debug#Start	.\vimfiles\bundle\OmniCppComplete\autoload\omni\common\debug.vim	/^function! omni#common#debug#Start()$/;"	f
omni#common#debug#Trace	.\vimfiles\bundle\OmniCppComplete\autoload\omni\common\debug.vim	/^function! omni#common#debug#Trace(szFuncName, ...)$/;"	f
omni#common#utils#CompareNumber	.\vimfiles\bundle\OmniCppComplete\autoload\omni\common\utils.vim	/^function! omni#common#utils#CompareNumber(i1, i2)$/;"	f
omni#common#utils#GetWordUnderCursor	.\vimfiles\bundle\OmniCppComplete\autoload\omni\common\utils.vim	/^function! omni#common#utils#GetWordUnderCursor()$/;"	f
omni#common#utils#TagList	.\vimfiles\bundle\OmniCppComplete\autoload\omni\common\utils.vim	/^function! omni#common#utils#TagList(szTagQuery)$/;"	f
omni#common#utils#TagListNoThrow	.\vimfiles\bundle\OmniCppComplete\autoload\omni\common\utils.vim	/^function! omni#common#utils#TagListNoThrow(szTagQuery)$/;"	f
omni#cpp#complete#Init	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\complete.vim	/^function! omni#cpp#complete#Init()$/;"	f
omni#cpp#complete#Main	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\complete.vim	/^function! omni#cpp#complete#Main(findstart, base)$/;"	f
omni#cpp#includes#Display	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\includes.vim	/^function! omni#cpp#includes#Display()$/;"	f
omni#cpp#includes#GetList	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\includes.vim	/^function! omni#cpp#includes#GetList(...)$/;"	f
omni#cpp#items#Get	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\items.vim	/^function! omni#cpp#items#Get(tokens, ...)$/;"	f
omni#cpp#items#ResolveItemsTypeInfo	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\items.vim	/^function! omni#cpp#items#ResolveItemsTypeInfo(contextStack, items)$/;"	f
omni#cpp#maycomplete#Arrow	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\maycomplete.vim	/^function! omni#cpp#maycomplete#Arrow()$/;"	f
omni#cpp#maycomplete#Complete	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\maycomplete.vim	/^function! omni#cpp#maycomplete#Complete()$/;"	f
omni#cpp#maycomplete#Dot	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\maycomplete.vim	/^function! omni#cpp#maycomplete#Dot()$/;"	f
omni#cpp#maycomplete#Scope	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\maycomplete.vim	/^function! omni#cpp#maycomplete#Scope()$/;"	f
omni#cpp#namespaces#GetContexts	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\namespaces.vim	/^function! omni#cpp#namespaces#GetContexts()$/;"	f
omni#cpp#namespaces#GetListFromCurrentBuffer	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\namespaces.vim	/^function! omni#cpp#namespaces#GetListFromCurrentBuffer(...)$/;"	f
omni#cpp#namespaces#GetMapFromBuffer	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\namespaces.vim	/^function! omni#cpp#namespaces#GetMapFromBuffer(szFilePath, ...)$/;"	f
omni#cpp#namespaces#GetMapFromCurrentBuffer	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\namespaces.vim	/^function! omni#cpp#namespaces#GetMapFromCurrentBuffer()$/;"	f
omni#cpp#namespaces#GetUsingNamespaces	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\namespaces.vim	/^function! omni#cpp#namespaces#GetUsingNamespaces()$/;"	f
omni#cpp#namespaces#ResolveAlias	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\namespaces.vim	/^function! omni#cpp#namespaces#ResolveAlias(mapNamespaceAlias, szNamespace)$/;"	f
omni#cpp#namespaces#ResolveAll	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\namespaces.vim	/^function! omni#cpp#namespaces#ResolveAll(namespacesUsed)$/;"	f
omni#cpp#settings#Init	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\settings.vim	/^function! omni#cpp#settings#Init()$/;"	f
omni#cpp#tokenizer#Tokenize	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\tokenizer.vim	/^function! omni#cpp#tokenizer#Tokenize(szCode)$/;"	f
omni#cpp#utils#BuildParenthesisGroups	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\utils.vim	/^function! omni#cpp#utils#BuildParenthesisGroups(tokens)$/;"	f
omni#cpp#utils#CreateTypeInfo	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\utils.vim	/^function! omni#cpp#utils#CreateTypeInfo(param)$/;"	f
omni#cpp#utils#ExtractCmdFromTagItem	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\utils.vim	/^function! omni#cpp#utils#ExtractCmdFromTagItem(tagItem)$/;"	f
omni#cpp#utils#ExtractScope	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\utils.vim	/^function! omni#cpp#utils#ExtractScope(tagItem)$/;"	f
omni#cpp#utils#ExtractTypeInfoFromTag	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\utils.vim	/^function! omni#cpp#utils#ExtractTypeInfoFromTag(tagItem)$/;"	f
omni#cpp#utils#ExtractTypeInfoFromTokens	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\utils.vim	/^function! omni#cpp#utils#ExtractTypeInfoFromTokens(tokens)$/;"	f
omni#cpp#utils#GetCastType	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\utils.vim	/^function! omni#cpp#utils#GetCastType(tokens)$/;"	f
omni#cpp#utils#GetClassInheritanceList	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\utils.vim	/^function! omni#cpp#utils#GetClassInheritanceList(namespaces, typeInfo)$/;"	f
omni#cpp#utils#GetCode	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\utils.vim	/^function! omni#cpp#utils#GetCode(posStart, posEnd)$/;"	f
omni#cpp#utils#GetCodeFromLine	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\utils.vim	/^function! omni#cpp#utils#GetCodeFromLine(szSingleLine)$/;"	f
omni#cpp#utils#GetPreviewWindowStringFromTagItem	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\utils.vim	/^function! omni#cpp#utils#GetPreviewWindowStringFromTagItem(tagItem)$/;"	f
omni#cpp#utils#GetResolvedTagItem	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\utils.vim	/^function! omni#cpp#utils#GetResolvedTagItem(namespaces, typeInfo)$/;"	f
omni#cpp#utils#GetResolvedTags	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\utils.vim	/^function! omni#cpp#utils#GetResolvedTags(namespaces, typeInfo)$/;"	f
omni#cpp#utils#GetTypeInfoString	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\utils.vim	/^function! omni#cpp#utils#GetTypeInfoString(typeInfo)$/;"	f
omni#cpp#utils#IsCursorInCommentOrString	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\utils.vim	/^function! omni#cpp#utils#IsCursorInCommentOrString()$/;"	f
omni#cpp#utils#IsTypeInfoValid	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\utils.vim	/^function! omni#cpp#utils#IsTypeInfoValid(typeInfo)$/;"	f
omni#cpp#utils#ResolveFilePath	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\utils.vim	/^function! omni#cpp#utils#ResolveFilePath(szFile)$/;"	f
omni#cpp#utils#SimplifyParenthesis	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\utils.vim	/^function! omni#cpp#utils#SimplifyParenthesis(tokens)$/;"	f
omni#cpp#utils#SimplifyScope	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\utils.vim	/^function! omni#cpp#utils#SimplifyScope(szScope)$/;"	f
omni#cpp#utils#TokenizeCurrentInstruction	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\utils.vim	/^function! omni#cpp#utils#TokenizeCurrentInstruction(...)$/;"	f
omni#cpp#utils#TokenizeCurrentInstructionUntilWord	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\utils.vim	/^function! omni#cpp#utils#TokenizeCurrentInstructionUntilWord()$/;"	f
omni#cpp#utils#expIgnoreComments	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\utils.vim	/^let omni#cpp#utils#expIgnoreComments = 'getline(".") =~ g:omni#cpp#utils#reIgnoreComment'$/;"	v
omni#cpp#utils#reIgnoreComment	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\utils.vim	/^let omni#cpp#utils#reIgnoreComment = escape('\\\/\\\/\\|\\\/\\*\\|\\*\\\/', '*\/\\')$/;"	v
omni#cpp#utils#szEscapedCharacters	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\utils.vim	/^let omni#cpp#utils#szEscapedCharacters = ' %#'$/;"	v
oneline_comments	.\vim73\syntax\spup.vim	/^    let oneline_comments = 2$/;"	v
opKeyword	.\ctags58\asm.c	/^} opKeyword;$/;"	t	typeref:enum:__anon4	file:
opKind	.\ctags58\asm.c	/^} opKind;$/;"	t	typeref:struct:__anon6	file:
open	.\ctags58\entry.c	69;"	d	file:
openTagFile	.\ctags58\entry.c	/^extern void openTagFile (void)$/;"	f	signature:(void)
openTagFile	.\ctags58\entry.h	/^extern void openTagFile (void);$/;"	p	signature:(void)
open_changelog	.\vim73\ftplugin\changelog.vim	/^  function! s:open_changelog()$/;"	f
open_selection	.\vimfiles\bundle\command-t\ruby\command-t\controller.rb	/^    def open_selection selection, options = {}$/;"	f	class:CommandT.Controller.quickfix.ensure_appropriate_window_selection
open_selection	.\vimfiles\bundle\command-t\ruby\command-t\finder.rb	/^    def open_selection command, selection, options = {}$/;"	f	class:CommandT.Finder
open_selection	.\vimfiles\bundle\command-t\ruby\command-t\finder\tag_finder.rb	/^    def open_selection command, selection, options = {}$/;"	f	class:CommandT.TagFinder
opendir	.\ctags58\e_mac.h	/^extern DIR* opendir(const char *dirname);$/;"	p	signature:(const char *dirname)
opendir	.\ctags58\mac.c	/^DIR *opendir(const char *dirname)$/;"	f	signature:(const char *dirname)
opened	.\ctags58\readtags.h	/^		int opened;$/;"	m	struct:__anon68::__anon69	access:public
operator	.\ctags58\asm.c	/^	const char *operator;$/;"	m	struct:__anon5	file:	access:public
operatorKind	.\ctags58\asm.c	/^static AsmKind operatorKind ($/;"	f	file:	signature:( const vString *const operator, boolean *const found)
opr	.\ctags58\gnu_regex\regex_internal.h	/^  } opr;$/;"	m	struct:__anon31	typeref:union:__anon31::__anon32	access:public
opr	.\ctags58\gnu_regex\regex_internal.h	/^  } opr;$/;"	m	struct:__anon39	typeref:union:__anon39::__anon40	access:public
opt_subexp	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned int opt_subexp : 1;$/;"	m	struct:__anon31	access:public
optimize_subexps	.\ctags58\gnu_regex\regcomp.c	/^optimize_subexps (void *extra, bin_tree_t *node)$/;"	f	file:	signature:(void *extra, bin_tree_t *node)
optimize_subexps	.\ctags58\gnu_regex\regcomp.c	/^static reg_errcode_t optimize_subexps (void *extra, bin_tree_t *node);$/;"	p	file:	signature:(void *extra, bin_tree_t *node)
optimize_utf8	.\ctags58\gnu_regex\regcomp.c	/^optimize_utf8 (re_dfa_t *dfa)$/;"	f	file:	signature:(re_dfa_t *dfa)
optimize_utf8	.\ctags58\gnu_regex\regcomp.c	/^static void optimize_utf8 (re_dfa_t *dfa);$/;"	p	file:	signature:(re_dfa_t *dfa)
optionDescription	.\ctags58\options.c	/^} optionDescription;$/;"	t	typeref:struct:sOptionDescription	file:
optionType	.\ctags58\options.h	/^typedef enum { OPTION_NONE, OPTION_SHORT, OPTION_LONG } optionType;$/;"	t	typeref:enum:__anon55
optionValues	.\ctags58\options.h	/^} optionValues;$/;"	t	typeref:struct:sOptionValues
optionalblock	.\vim73\indent\cobol.vim	/^function! s:optionalblock(lnum,ind,blocks,clauses)$/;"	f
optwin	.\vim73\optwin.vim	/^augroup optwin$/;"	a
or	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\data\list.vim	/^function! s:or(xs)$/;"	f
org_indices	.\ctags58\gnu_regex\regex_internal.h	/^  int *org_indices;$/;"	m	struct:re_dfa_t	access:public
other_mf_macros	.\vim73\syntax\mf.vim	/^  let other_mf_macros = 1 " Set this to '0' if your code gets too colourful$/;"	v
other_mf_macros	.\vim73\syntax\mp.vim	/^let other_mf_macros = 0 " cmbase.mf, logo.mf, ... neither$/;"	v
other_mp_macros	.\vim73\syntax\mp.vim	/^  let other_mp_macros = 1 " Set this to '0' if your source gets too colourful$/;"	v
p	.\vim73\macros\less.vim	/^map p %$/;"	m
pType	.\ctags58\lregex.c	/^enum pType { PTRN_TAG, PTRN_CALLBACK };$/;"	g	file:
pValue	.\ctags58\options.c	/^	boolean* pValue;    \/* pointer to option value *\/$/;"	m	struct:__anon54	file:	access:public
padding_for_selected_match	.\vimfiles\bundle\command-t\ruby\command-t\match_window.rb	/^    def padding_for_selected_match str$/;"	f	class:CommandT.MatchWindow.match_with_syntax_highlight
parameter	.\ctags58\options.h	/^	const char* parameter;$/;"	m	struct:sCookedArgs	access:public
parameterCount	.\ctags58\c.c	/^	unsigned int parameterCount;$/;"	m	struct:sParenInfo	file:	access:public
parametricOption	.\ctags58\options.c	/^} parametricOption;$/;"	t	typeref:struct:__anon53	file:
parametricOptionHandler	.\ctags58\options.c	/^typedef void (*parametricOptionHandler) (const char *const option, const char *const parameter);$/;"	t	file:
parenInfo	.\ctags58\c.c	/^} parenInfo;$/;"	t	typeref:struct:sParenInfo	file:
parent	.\ctags58\c.c	/^	struct sStatementInfo *parent;  \/* statement we are nested within *\/$/;"	m	struct:sStatementInfo	typeref:struct:sStatementInfo::sStatementInfo	file:	access:public
parent	.\ctags58\gnu_regex\regex_internal.h	/^  struct bin_tree_t *parent;$/;"	m	struct:bin_tree_t	typeref:struct:bin_tree_t::bin_tree_t	access:public
parentClasses	.\ctags58\c.c	/^	vString*	parentClasses;  \/* parent classes *\/$/;"	m	struct:sStatementInfo	file:	access:public
parentDecl	.\ctags58\c.c	35;"	d	file:
parse	.\ctags58\gnu_regex\regcomp.c	/^parse (re_string_t *regexp, regex_t *preg, reg_syntax_t syntax,$/;"	f	file:	signature:(re_string_t *regexp, regex_t *preg, reg_syntax_t syntax, reg_errcode_t *err)
parse	.\ctags58\gnu_regex\regcomp.c	/^static bin_tree_t *parse (re_string_t *regexp, regex_t *preg,$/;"	p	file:	signature:(re_string_t *regexp, regex_t *preg, reg_syntax_t syntax, reg_errcode_t *err)
parseActionScript	.\ctags58\flex.c	/^static boolean parseActionScript (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseActionScript	.\ctags58\flex.c	/^static boolean parseActionScript (tokenInfo *const token);$/;"	p	file:	signature:(tokenInfo *const token)
parseArglist	.\ctags58\python.c	/^static char *parseArglist(const char *buf)$/;"	f	file:	signature:(const char *buf)
parseArguments	.\ctags58\eiffel.c	/^static void parseArguments (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseAutogroup	.\ctags58\vim.c	/^static void parseAutogroup (const unsigned char *line)$/;"	f	file:	signature:(const unsigned char *line)
parseBlock	.\ctags58\flex.c	/^static boolean parseBlock (tokenInfo *const token, tokenInfo *const parent)$/;"	f	file:	signature:(tokenInfo *const token, tokenInfo *const parent)
parseBlock	.\ctags58\flex.c	/^static boolean parseBlock (tokenInfo *const token, tokenInfo *const parent);$/;"	p	file:	signature:(tokenInfo *const token, tokenInfo *const parent)
parseBlock	.\ctags58\jscript.c	/^static boolean parseBlock (tokenInfo *const token, tokenInfo *const parent)$/;"	f	file:	signature:(tokenInfo *const token, tokenInfo *const parent)
parseBlock	.\ctags58\jscript.c	/^static boolean parseBlock (tokenInfo *const token, tokenInfo *const parent);$/;"	p	file:	signature:(tokenInfo *const token, tokenInfo *const parent)
parseBlock	.\ctags58\sql.c	/^static void parseBlock (tokenInfo *const token, const boolean local)$/;"	f	file:	signature:(tokenInfo *const token, const boolean local)
parseBlock	.\ctags58\sql.c	/^static void parseBlock (tokenInfo *const token, const boolean local);$/;"	p	file:	signature:(tokenInfo *const token, const boolean local)
parseBlockData	.\ctags58\fortran.c	/^static void parseBlockData (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseCDATA	.\ctags58\flex.c	/^static boolean parseCDATA (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseCharacter	.\ctags58\eiffel.c	/^static int parseCharacter (void)$/;"	f	file:	signature:(void)
parseClass	.\ctags58\eiffel.c	/^static void parseClass (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseClass	.\ctags58\flex.c	/^static boolean parseClass (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseClass	.\ctags58\python.c	/^static void parseClass (const char *cp, vString *const class,$/;"	f	file:	signature:(const char *cp, vString *const class, vString *const parent, int is_class_parent)
parseCommand	.\ctags58\vim.c	/^static boolean parseCommand (const unsigned char *line)$/;"	f	file:	signature:(const unsigned char *line)
parseComment	.\ctags58\sql.c	/^static void parseComment (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseCommonNamelistStmt	.\ctags58\fortran.c	/^static void parseCommonNamelistStmt (tokenInfo *const token, tagType type)$/;"	f	file:	signature:(tokenInfo *const token, tagType type)
parseComponentDefStmt	.\ctags58\fortran.c	/^static void parseComponentDefStmt (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseConfigurationFileOptions	.\ctags58\options.c	/^static void parseConfigurationFileOptions (void)$/;"	f	file:	signature:(void)
parseConfigurationFileOptionsInDirectory	.\ctags58\options.c	/^static void parseConfigurationFileOptionsInDirectory (const char* directory)$/;"	f	file:	signature:(const char* directory)
parseConfigurationFileOptionsInDirectoryWithLeafname	.\ctags58\options.c	/^static void parseConfigurationFileOptionsInDirectoryWithLeafname (const char* directory, const char* leafname)$/;"	f	file:	signature:(const char* directory, const char* leafname)
parseConstant	.\ctags58\vhdl.c	/^static void parseConstant (boolean local)$/;"	f	file:	signature:(boolean local)
parseConvert	.\ctags58\eiffel.c	/^static void parseConvert (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseDeclarationConstruct	.\ctags58\fortran.c	/^static boolean parseDeclarationConstruct (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseDeclare	.\ctags58\sql.c	/^static void parseDeclare (tokenInfo *const token, const boolean local)$/;"	f	file:	signature:(tokenInfo *const token, const boolean local)
parseDeclareANSI	.\ctags58\sql.c	/^static void parseDeclareANSI (tokenInfo *const token, const boolean local)$/;"	f	file:	signature:(tokenInfo *const token, const boolean local)
parseDerivedTypeDef	.\ctags58\fortran.c	/^static void parseDerivedTypeDef (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseDerivedTypeDef	.\ctags58\fortran.c	/^static void parseDerivedTypeDef (tokenInfo *const token);$/;"	p	file:	signature:(tokenInfo *const token)
parseDirective	.\ctags58\erlang.c	/^static void parseDirective (const unsigned char *cp, vString *const module)$/;"	f	file:	signature:(const unsigned char *cp, vString *const module)
parseDomain	.\ctags58\sql.c	/^static void parseDomain (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseDrop	.\ctags58\sql.c	/^static void parseDrop (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseEntityDecl	.\ctags58\fortran.c	/^static void parseEntityDecl (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseEntityDeclList	.\ctags58\fortran.c	/^static void parseEntityDeclList (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseEntityType	.\ctags58\eiffel.c	/^static void parseEntityType (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseEntryStmt	.\ctags58\fortran.c	/^static void parseEntryStmt (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseEnvironmentOptions	.\ctags58\options.c	/^static void parseEnvironmentOptions (void)$/;"	f	file:	signature:(void)
parseEscapedCharacter	.\ctags58\eiffel.c	/^static int parseEscapedCharacter (void)$/;"	f	file:	signature:(void)
parseEvent	.\ctags58\sql.c	/^static void parseEvent (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseExecutionPart	.\ctags58\fortran.c	/^static boolean parseExecutionPart (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseExport	.\ctags58\eiffel.c	/^static void parseExport (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseExtensionFields	.\ctags58\readtags.c	/^static void parseExtensionFields (tagFile *const file, tagEntry *const entry,$/;"	f	file:	signature:(tagFile *const file, tagEntry *const entry, char *const string)
parseFeature	.\ctags58\eiffel.c	/^static boolean parseFeature (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseFeatureClauses	.\ctags58\eiffel.c	/^static void parseFeatureClauses (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseFieldDefinition	.\ctags58\fortran.c	/^static void parseFieldDefinition (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseFile	.\ctags58\parse.c	/^extern boolean parseFile (const char *const fileName)$/;"	f	signature:(const char *const fileName)
parseFile	.\ctags58\parse.h	/^extern boolean parseFile (const char *const fileName);$/;"	p	signature:(const char *const fileName)
parseFileOptions	.\ctags58\options.c	/^static boolean parseFileOptions (const char *const fileName);$/;"	p	file:	signature:(const char *const fileName)
parseFileOptions	.\ctags58\options.c	/^static boolean parseFileOptions (const char* const fileName)$/;"	f	file:	signature:(const char* const fileName)
parseFlexFile	.\ctags58\flex.c	/^static void parseFlexFile (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseFreeOperator	.\ctags58\eiffel.c	/^static void parseFreeOperator (vString *const string, const int firstChar)$/;"	f	file:	signature:(vString *const string, const int firstChar)
parseFunction	.\ctags58\flex.c	/^static void parseFunction (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseFunction	.\ctags58\flex.c	/^static void parseFunction (tokenInfo *const token);$/;"	p	file:	signature:(tokenInfo *const token)
parseFunction	.\ctags58\jscript.c	/^static void parseFunction (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseFunction	.\ctags58\jscript.c	/^static void parseFunction (tokenInfo *const token);$/;"	p	file:	signature:(tokenInfo *const token)
parseFunction	.\ctags58\python.c	/^static void parseFunction (const char *cp, vString *const def,$/;"	f	file:	signature:(const char *cp, vString *const def, vString *const parent, int is_class_parent)
parseFunction	.\ctags58\vim.c	/^static void parseFunction (const unsigned char *line)$/;"	f	file:	signature:(const unsigned char *line)
parseFunctionSubprogram	.\ctags58\fortran.c	/^static void parseFunctionSubprogram (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseFunctionSubprogram	.\ctags58\fortran.c	/^static void parseFunctionSubprogram (tokenInfo *const token);$/;"	p	file:	signature:(tokenInfo *const token)
parseFunctionTag	.\ctags58\erlang.c	/^static void parseFunctionTag (const unsigned char *cp, vString *const module)$/;"	f	file:	signature:(const unsigned char *cp, vString *const module)
parseGeneralToken	.\ctags58\c.c	/^static void parseGeneralToken (statementInfo *const st, const int c)$/;"	f	file:	signature:(statementInfo *const st, const int c)
parseGeneric	.\ctags58\eiffel.c	/^static void parseGeneric (tokenInfo *const token, boolean declaration __unused__)$/;"	f	file:	signature:(tokenInfo *const token, boolean declaration __unused__)
parseIdentifier	.\ctags58\c.c	/^static void parseIdentifier (statementInfo *const st, const int c)$/;"	f	file:	signature:(statementInfo *const st, const int c)
parseIdentifier	.\ctags58\eiffel.c	/^static void parseIdentifier (vString *const string, const int firstChar)$/;"	f	file:	signature:(vString *const string, const int firstChar)
parseIdentifier	.\ctags58\erlang.c	/^static const unsigned char *parseIdentifier ($/;"	f	file:	signature:( const unsigned char *cp, vString *const identifier)
parseIdentifier	.\ctags58\flex.c	/^static void parseIdentifier (vString *const string, const int firstChar)$/;"	f	file:	signature:(vString *const string, const int firstChar)
parseIdentifier	.\ctags58\fortran.c	/^static void parseIdentifier (vString *const string, const int firstChar)$/;"	f	file:	signature:(vString *const string, const int firstChar)
parseIdentifier	.\ctags58\jscript.c	/^static void parseIdentifier (vString *const string, const int firstChar)$/;"	f	file:	signature:(vString *const string, const int firstChar)
parseIdentifier	.\ctags58\python.c	/^static const char *parseIdentifier (const char *cp, vString *const identifier)$/;"	f	file:	signature:(const char *cp, vString *const identifier)
parseIdentifier	.\ctags58\ruby.c	/^static rubyKind parseIdentifier ($/;"	f	file:	signature:( const unsigned char** cp, vString* name, rubyKind kind)
parseIdentifier	.\ctags58\sml.c	/^static const unsigned char *parseIdentifier ($/;"	f	file:	signature:( const unsigned char *cp, vString *const identifier)
parseIdentifier	.\ctags58\sql.c	/^static void parseIdentifier (vString *const string, const int firstChar)$/;"	f	file:	signature:(vString *const string, const int firstChar)
parseIdentifier	.\ctags58\tex.c	/^static void parseIdentifier (vString *const string, const int firstChar)$/;"	f	file:	signature:(vString *const string, const int firstChar)
parseIdentifier	.\ctags58\vhdl.c	/^static void parseIdentifier (vString * const string, const int firstChar)$/;"	f	file:	signature:(vString * const string, const int firstChar)
parseIf	.\ctags58\flex.c	/^static boolean parseIf (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseIf	.\ctags58\jscript.c	/^static boolean parseIf (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseImplicitPartStmt	.\ctags58\fortran.c	/^static boolean parseImplicitPartStmt (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseImports	.\ctags58\python.c	/^static void parseImports (const char *cp)$/;"	f	file:	signature:(const char *cp)
parseIndex	.\ctags58\sql.c	/^static void parseIndex (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseInherit	.\ctags58\eiffel.c	/^static void parseInherit (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseInteger	.\ctags58\eiffel.c	/^static vString *parseInteger (int c)$/;"	f	file:	signature:(int c)
parseInteger	.\ctags58\fortran.c	/^static vString *parseInteger (int c)$/;"	f	file:	signature:(int c)
parseInterfaceBlock	.\ctags58\fortran.c	/^static void parseInterfaceBlock (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseInternalSubprogramPart	.\ctags58\fortran.c	/^static void parseInternalSubprogramPart (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseJavaAnnotation	.\ctags58\c.c	/^static void parseJavaAnnotation (statementInfo *const st)$/;"	f	file:	signature:(statementInfo *const st)
parseJsFile	.\ctags58\jscript.c	/^static void parseJsFile (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseKeywords	.\ctags58\sql.c	/^static void parseKeywords (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseKeywords	.\ctags58\sql.c	/^static void parseKeywords (tokenInfo *const token);$/;"	p	file:	signature:(tokenInfo *const token)
parseKeywords	.\ctags58\vhdl.c	/^static void parseKeywords (tokenInfo * const token, boolean local)$/;"	f	file:	signature:(tokenInfo * const token, boolean local)
parseKeywords	.\ctags58\vhdl.c	/^static void parseKeywords (tokenInfo * const token, boolean local);$/;"	p	file:	signature:(tokenInfo * const token, boolean local)
parseKinds	.\ctags58\lregex.c	/^static void parseKinds ($/;"	f	file:	signature:( const char* const kinds, char* const kind, char** const kindName, char **description)
parseLabel	.\ctags58\ocaml.c	/^static void parseLabel (vString * const ident, ocaToken what)$/;"	f	file:	signature:(vString * const ident, ocaToken what)
parseLabel	.\ctags58\sql.c	/^static void parseLabel (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseLet	.\ctags58\vim.c	/^static void parseLet (const unsigned char *line)$/;"	f	file:	signature:(const unsigned char *line)
parseLine	.\ctags58\flex.c	/^static boolean parseLine (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseLine	.\ctags58\flex.c	/^static boolean parseLine (tokenInfo *const token);$/;"	p	file:	signature:(tokenInfo *const token)
parseLine	.\ctags58\jscript.c	/^static boolean parseLine (tokenInfo *const token, boolean is_inside_class)$/;"	f	file:	signature:(tokenInfo *const token, boolean is_inside_class)
parseLine	.\ctags58\jscript.c	/^static boolean parseLine (tokenInfo *const token, boolean is_inside_class);$/;"	p	file:	signature:(tokenInfo *const token, boolean is_inside_class)
parseLineDirective	.\ctags58\read.c	/^static boolean parseLineDirective (void)$/;"	f	file:	signature:(void)
parseLocal	.\ctags58\eiffel.c	/^static void parseLocal (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseLongOption	.\ctags58\options.c	/^static void parseLongOption (cookedArgs *const args, const char *item)$/;"	f	file:	signature:(cookedArgs *const args, const char *item)
parseLoop	.\ctags58\flex.c	/^static void parseLoop (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseLoop	.\ctags58\jscript.c	/^static void parseLoop (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseMLConn	.\ctags58\sql.c	/^static void parseMLConn (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseMLTable	.\ctags58\sql.c	/^static void parseMLTable (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseMXML	.\ctags58\flex.c	/^static boolean parseMXML (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseMainProgram	.\ctags58\fortran.c	/^static void parseMainProgram (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseMap	.\ctags58\fortran.c	/^static void parseMap (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseMap	.\ctags58\vim.c	/^static boolean parseMap (const unsigned char *line)$/;"	f	file:	signature:(const unsigned char *line)
parseMethods	.\ctags58\flex.c	/^static void parseMethods (tokenInfo *const token, tokenInfo *const class)$/;"	f	file:	signature:(tokenInfo *const token, tokenInfo *const class)
parseMethods	.\ctags58\jscript.c	/^static void parseMethods (tokenInfo *const token, tokenInfo *const class)$/;"	f	file:	signature:(tokenInfo *const token, tokenInfo *const class)
parseModule	.\ctags58\fortran.c	/^static void parseModule (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseModule	.\ctags58\vhdl.c	/^static void parseModule (tokenInfo * const token)$/;"	f	file:	signature:(tokenInfo * const token)
parseModuleTag	.\ctags58\erlang.c	/^static void parseModuleTag (const unsigned char *cp, vString *const module)$/;"	f	file:	signature:(const unsigned char *cp, vString *const module)
parseNext	.\ctags58\ocaml.c	/^typedef void (*parseNext) (vString * const ident, ocaToken what);$/;"	t	file:
parseNumeric	.\ctags58\eiffel.c	/^static vString *parseNumeric (int c)$/;"	f	file:	signature:(int c)
parseNumeric	.\ctags58\fortran.c	/^static vString *parseNumeric (int c)$/;"	f	file:	signature:(int c)
parseOption	.\ctags58\options.c	/^extern void parseOption (cookedArgs* const args)$/;"	f	signature:(cookedArgs* const args)
parseOption	.\ctags58\options.h	/^extern void parseOption (cookedArgs* const cargs);$/;"	p	signature:(cookedArgs* const cargs)
parseOptionnal	.\ctags58\ocaml.c	/^static void parseOptionnal (vString * const ident, ocaToken what)$/;"	f	file:	signature:(vString * const ident, ocaToken what)
parseOptions	.\ctags58\options.c	/^extern void parseOptions (cookedArgs* const args)$/;"	f	signature:(cookedArgs* const args)
parseOptions	.\ctags58\options.h	/^extern void parseOptions (cookedArgs* const cargs);$/;"	p	signature:(cookedArgs* const cargs)
parsePackage	.\ctags58\sql.c	/^static void parsePackage (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parsePackage	.\ctags58\vhdl.c	/^static void parsePackage (tokenInfo * const token)$/;"	f	file:	signature:(tokenInfo * const token)
parseParens	.\ctags58\c.c	/^static int parseParens (statementInfo *const st, parenInfo *const info)$/;"	f	file:	signature:(statementInfo *const st, parenInfo *const info)
parseProgramUnit	.\ctags58\fortran.c	/^static void parseProgramUnit (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parsePublication	.\ctags58\sql.c	/^static void parsePublication (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseQualifierSpecList	.\ctags58\fortran.c	/^static void parseQualifierSpecList (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseRecord	.\ctags58\sql.c	/^static void parseRecord (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseRecord	.\ctags58\vhdl.c	/^static void parseRecord (tokenInfo * const token)$/;"	f	file:	signature:(tokenInfo * const token)
parseRename	.\ctags58\eiffel.c	/^static void parseRename (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseRubyOperator	.\ctags58\ruby.c	/^static boolean parseRubyOperator (vString* name, const unsigned char** cp)$/;"	f	file:	signature:(vString* name, const unsigned char** cp)
parseService	.\ctags58\sql.c	/^static void parseService (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseShortOption	.\ctags58\options.c	/^static void parseShortOption (cookedArgs *const args)$/;"	f	file:	signature:(cookedArgs *const args)
parseSimple	.\ctags58\sql.c	/^static void parseSimple (tokenInfo *const token, const sqlKind kind)$/;"	f	file:	signature:(tokenInfo *const token, const sqlKind kind)
parseSimpleTag	.\ctags58\erlang.c	/^static void parseSimpleTag (const unsigned char *cp, erlangKind kind)$/;"	f	file:	signature:(const unsigned char *cp, erlangKind kind)
parseSpecificationPart	.\ctags58\fortran.c	/^static boolean parseSpecificationPart (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseSpecificationStmt	.\ctags58\fortran.c	/^static boolean parseSpecificationStmt (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseSqlFile	.\ctags58\sql.c	/^static void parseSqlFile (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseSqlFile	.\ctags58\sql.c	/^static void parseSqlFile (tokenInfo *const token);$/;"	p	file:	signature:(tokenInfo *const token)
parseStatement	.\ctags58\flex.c	/^static boolean parseStatement (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseStatement	.\ctags58\jscript.c	/^static boolean parseStatement (tokenInfo *const token, boolean is_inside_class)$/;"	f	file:	signature:(tokenInfo *const token, boolean is_inside_class)
parseStatements	.\ctags58\sql.c	/^static void parseStatements (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseStmtFunctionStmt	.\ctags58\fortran.c	/^static boolean parseStmtFunctionStmt (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseString	.\ctags58\eiffel.c	/^static void parseString (vString *const string)$/;"	f	file:	signature:(vString *const string)
parseString	.\ctags58\flex.c	/^static void parseString (vString *const string, const int delimiter)$/;"	f	file:	signature:(vString *const string, const int delimiter)
parseString	.\ctags58\fortran.c	/^static void parseString (vString *const string, const int delimiter)$/;"	f	file:	signature:(vString *const string, const int delimiter)
parseString	.\ctags58\jscript.c	/^static void parseString (vString *const string, const int delimiter)$/;"	f	file:	signature:(vString *const string, const int delimiter)
parseString	.\ctags58\sql.c	/^static void parseString (vString *const string, const int delimiter)$/;"	f	file:	signature:(vString *const string, const int delimiter)
parseString	.\ctags58\tex.c	/^static void parseString (vString *const string, const int delimiter)$/;"	f	file:	signature:(vString *const string, const int delimiter)
parseString	.\ctags58\vhdl.c	/^static void parseString (vString * const string, const int delimiter)$/;"	f	file:	signature:(vString * const string, const int delimiter)
parseStructureStmt	.\ctags58\fortran.c	/^static void parseStructureStmt (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseStructureStmt	.\ctags58\fortran.c	/^static void parseStructureStmt (tokenInfo *const token);$/;"	p	file:	signature:(tokenInfo *const token)
parseSubProgram	.\ctags58\sql.c	/^static void parseSubProgram (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseSubProgram	.\ctags58\vhdl.c	/^static void parseSubProgram (tokenInfo * const token)$/;"	f	file:	signature:(tokenInfo * const token)
parseSubprogram	.\ctags58\fortran.c	/^static void parseSubprogram (tokenInfo *const token, const tagType tag)$/;"	f	file:	signature:(tokenInfo *const token, const tagType tag)
parseSubroutineSubprogram	.\ctags58\fortran.c	/^static void parseSubroutineSubprogram (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseSubroutineSubprogram	.\ctags58\fortran.c	/^static void parseSubroutineSubprogram (tokenInfo *const token);$/;"	p	file:	signature:(tokenInfo *const token)
parseSwitch	.\ctags58\flex.c	/^static void parseSwitch (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseSwitch	.\ctags58\jscript.c	/^static void parseSwitch (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseSynonym	.\ctags58\sql.c	/^static void parseSynonym (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseTable	.\ctags58\sql.c	/^static void parseTable (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseTag	.\ctags58\tex.c	/^static boolean parseTag (tokenInfo *const token, texKind kind)$/;"	f	file:	signature:(tokenInfo *const token, texKind kind)
parseTagLine	.\ctags58\readtags.c	/^static void parseTagLine (tagFile *file, tagEntry *const entry)$/;"	f	file:	signature:(tagFile *file, tagEntry *const entry)
parseTagRegex	.\ctags58\lregex.c	/^static boolean parseTagRegex ($/;"	f	file:	signature:( char* const regexp, char** const name, char** const kinds, char** const flags)
parseTexFile	.\ctags58\tex.c	/^static void parseTexFile (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseTrigger	.\ctags58\sql.c	/^static void parseTrigger (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseType	.\ctags58\eiffel.c	/^static boolean parseType (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseType	.\ctags58\eiffel.c	/^static boolean parseType (tokenInfo *const token);$/;"	p	file:	signature:(tokenInfo *const token)
parseType	.\ctags58\sql.c	/^static void parseType (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseTypeDeclarationStmt	.\ctags58\fortran.c	/^static void parseTypeDeclarationStmt (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseTypeSpec	.\ctags58\fortran.c	/^static void parseTypeSpec (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseTypes	.\ctags58\vhdl.c	/^static void parseTypes (tokenInfo * const token)$/;"	f	file:	signature:(tokenInfo * const token)
parseUnionStmt	.\ctags58\fortran.c	/^static void parseUnionStmt (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseUnionStmt	.\ctags58\fortran.c	/^static void parseUnionStmt (tokenInfo *const token);$/;"	p	file:	signature:(tokenInfo *const token)
parseVar	.\ctags58\flex.c	/^static boolean parseVar (tokenInfo *const token, boolean is_public)$/;"	f	file:	signature:(tokenInfo *const token, boolean is_public)
parseVariable	.\ctags58\sql.c	/^static void parseVariable (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseVhdlFile	.\ctags58\vhdl.c	/^static void parseVhdlFile (tokenInfo * const token)$/;"	f	file:	signature:(tokenInfo * const token)
parseView	.\ctags58\sql.c	/^static void parseView (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
parseVimFile	.\ctags58\vim.c	/^static void parseVimFile (const unsigned char *line)$/;"	f	file:	signature:(const unsigned char *line)
parseVimLine	.\ctags58\vim.c	/^static boolean parseVimLine (const unsigned char *line)$/;"	f	file:	signature:(const unsigned char *line)
parse_bracket_element	.\ctags58\gnu_regex\regcomp.c	/^parse_bracket_element (bracket_elem_t *elem, re_string_t *regexp,$/;"	f	file:	signature:(bracket_elem_t *elem, re_string_t *regexp, re_token_t *token, int token_len, re_dfa_t *dfa, reg_syntax_t syntax, int accept_hyphen)
parse_bracket_element	.\ctags58\gnu_regex\regcomp.c	/^static reg_errcode_t parse_bracket_element (bracket_elem_t *elem,$/;"	p	file:	signature:(bracket_elem_t *elem, re_string_t *regexp, re_token_t *token, int token_len, re_dfa_t *dfa, reg_syntax_t syntax, int accept_hyphen)
parse_bracket_exp	.\ctags58\gnu_regex\regcomp.c	/^parse_bracket_exp (re_string_t *regexp, re_dfa_t *dfa, re_token_t *token,$/;"	f	file:	signature:(re_string_t *regexp, re_dfa_t *dfa, re_token_t *token, reg_syntax_t syntax, reg_errcode_t *err)
parse_bracket_exp	.\ctags58\gnu_regex\regcomp.c	/^static bin_tree_t *parse_bracket_exp (re_string_t *regexp, re_dfa_t *dfa,$/;"	p	file:	signature:(re_string_t *regexp, re_dfa_t *dfa, re_token_t *token, reg_syntax_t syntax, reg_errcode_t *err)
parse_bracket_symbol	.\ctags58\gnu_regex\regcomp.c	/^parse_bracket_symbol (bracket_elem_t *elem, re_string_t *regexp,$/;"	f	file:	signature:(bracket_elem_t *elem, re_string_t *regexp, re_token_t *token)
parse_bracket_symbol	.\ctags58\gnu_regex\regcomp.c	/^static reg_errcode_t parse_bracket_symbol (bracket_elem_t *elem,$/;"	p	file:	signature:(bracket_elem_t *elem, re_string_t *regexp, re_token_t *token)
parse_branch	.\ctags58\gnu_regex\regcomp.c	/^parse_branch (re_string_t *regexp, regex_t *preg, re_token_t *token,$/;"	f	file:	signature:(re_string_t *regexp, regex_t *preg, re_token_t *token, reg_syntax_t syntax, int nest, reg_errcode_t *err)
parse_branch	.\ctags58\gnu_regex\regcomp.c	/^static bin_tree_t *parse_branch (re_string_t *regexp, regex_t *preg,$/;"	p	file:	signature:(re_string_t *regexp, regex_t *preg, re_token_t *token, reg_syntax_t syntax, int nest, reg_errcode_t *err)
parse_dup_op	.\ctags58\gnu_regex\regcomp.c	/^parse_dup_op (bin_tree_t *elem, re_string_t *regexp, re_dfa_t *dfa,$/;"	f	file:	signature:(bin_tree_t *elem, re_string_t *regexp, re_dfa_t *dfa, re_token_t *token, reg_syntax_t syntax, reg_errcode_t *err)
parse_dup_op	.\ctags58\gnu_regex\regcomp.c	/^static bin_tree_t *parse_dup_op (bin_tree_t *dup_elem, re_string_t *regexp,$/;"	p	file:	signature:(bin_tree_t *dup_elem, re_string_t *regexp, re_dfa_t *dfa, re_token_t *token, reg_syntax_t syntax, reg_errcode_t *err)
parse_expression	.\ctags58\gnu_regex\regcomp.c	/^parse_expression (re_string_t *regexp, regex_t *preg, re_token_t *token,$/;"	f	file:	signature:(re_string_t *regexp, regex_t *preg, re_token_t *token, reg_syntax_t syntax, int nest, reg_errcode_t *err)
parse_expression	.\ctags58\gnu_regex\regcomp.c	/^static bin_tree_t *parse_expression (re_string_t *regexp, regex_t *preg,$/;"	p	file:	signature:(re_string_t *regexp, regex_t *preg, re_token_t *token, reg_syntax_t syntax, int nest, reg_errcode_t *err)
parse_name	.\vimfiles\bundle\vundle\autoload\vundle\config.vim	/^func! s:parse_name(arg)$/;"	f
parse_options	.\vimfiles\bundle\vundle\autoload\vundle\config.vim	/^func! s:parse_options(opts)$/;"	f
parse_reg_exp	.\ctags58\gnu_regex\regcomp.c	/^parse_reg_exp (re_string_t *regexp, regex_t *preg, re_token_t *token,$/;"	f	file:	signature:(re_string_t *regexp, regex_t *preg, re_token_t *token, reg_syntax_t syntax, int nest, reg_errcode_t *err)
parse_reg_exp	.\ctags58\gnu_regex\regcomp.c	/^static bin_tree_t *parse_reg_exp (re_string_t *regexp, regex_t *preg,$/;"	p	file:	signature:(re_string_t *regexp, regex_t *preg, re_token_t *token, reg_syntax_t syntax, int nest, reg_errcode_t *err)
parse_sub_exp	.\ctags58\gnu_regex\regcomp.c	/^parse_sub_exp (re_string_t *regexp, regex_t *preg, re_token_t *token,$/;"	f	file:	signature:(re_string_t *regexp, regex_t *preg, re_token_t *token, reg_syntax_t syntax, int nest, reg_errcode_t *err)
parse_sub_exp	.\ctags58\gnu_regex\regcomp.c	/^static bin_tree_t *parse_sub_exp (re_string_t *regexp, regex_t *preg,$/;"	p	file:	signature:(re_string_t *regexp, regex_t *preg, re_token_t *token, reg_syntax_t syntax, int nest, reg_errcode_t *err)
parser	.\ctags58\parse.h	/^	simpleParser parser;           \/* simple parser (common case) *\/$/;"	m	struct:__anon56	access:public
parser2	.\ctags58\parse.h	/^	rescanParser parser2;          \/* rescanning parser (unusual case) *\/$/;"	m	struct:__anon56	access:public
parserDefinition	.\ctags58\parse.h	/^} parserDefinition;$/;"	t	typeref:struct:__anon56
parserDefinitionFunc	.\ctags58\parse.h	/^typedef parserDefinition* (parserDefinitionFunc) (void);$/;"	t
parserInitialize	.\ctags58\parse.h	/^typedef void (*parserInitialize) (langType language);$/;"	t
parserNew	.\ctags58\parse.c	/^extern parserDefinition* parserNew (const char* name)$/;"	f	signature:(const char* name)
parserNew	.\ctags58\parse.h	/^extern parserDefinition* parserNew (const char* name);$/;"	p	signature:(const char* name)
partial	.\ctags58\readtags.c	/^			short partial;$/;"	m	struct:sTagFile::__anon63	file:	access:public
partition	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\data\list.vim	/^function! s:partition(f, xs)$/;"	f
pascalKind	.\ctags58\pascal.c	/^} pascalKind;$/;"	t	typeref:enum:__anon58	file:
passwd_field	.\vim73\ftplugin\changelog.vim	/^  function! s:passwd_field(line, field)$/;"	f
paste#Paste	.\vim73\autoload\paste.vim	/^  func! paste#Paste()$/;"	f
paste#paste_cmd	.\vim73\autoload\paste.vim	/^  let paste#paste_cmd = {'n': ":call paste#Paste()<CR>"}$/;"	v
paste#paste_cmd	.\vim73\autoload\paste.vim	/^  let paste#paste_cmd = {'n': "\\"=@+.'xy'<CR>gPFx\\"_2x"}$/;"	v
paste#paste_cmd	.\vim73\autoload\paste.vim	/^  let paste#paste_cmd['i'] = 'x<BS><Esc>' . paste#paste_cmd['n'] . 'gi'$/;"	v
paste#paste_cmd	.\vim73\autoload\paste.vim	/^  let paste#paste_cmd['i'] = 'x<Esc>' . paste#paste_cmd['n'] . '"_s'$/;"	v
paste#paste_cmd	.\vim73\autoload\paste.vim	/^  let paste#paste_cmd['v'] = '"-c<Esc>' . paste#paste_cmd['n']$/;"	v
paste#paste_cmd	.\vim73\autoload\paste.vim	/^  let paste#paste_cmd['v'] = '"-c<Esc>gix<Esc>' . paste#paste_cmd['n'] . '"_x'$/;"	v
path	.\ctags58\gnu_regex\regex_internal.h	/^  state_array_t *path;$/;"	m	struct:__anon35	access:public
path	.\ctags58\gnu_regex\regex_internal.h	/^  state_array_t path;$/;"	m	struct:__anon34	access:public
path	.\ctags58\read.h	/^	vString    *path;          \/* path of input file (if any) *\/$/;"	m	struct:sInputFile	access:public
path2directory	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\prelude.vim	/^function! s:path2directory(path)$/;"	f
path2project_directory	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\prelude.vim	/^function! s:path2project_directory(path, ...)$/;"	f
path=	.\vimfiles\bundle\command-t\ruby\command-t\finder.rb	/^    def path= path$/;"	f	class:CommandT.Finder
path_excluded?	.\vimfiles\bundle\command-t\ruby\command-t\scanner\file_scanner.rb	/^    def path_excluded? path$/;"	f	class:CommandT.FileScanner
paths	.\vimfiles\bundle\command-t\ruby\command-t\scanner\buffer_scanner.rb	/^    def paths$/;"	f	class:CommandT.BufferScanner
paths	.\vimfiles\bundle\command-t\ruby\command-t\scanner\file_scanner.rb	/^    def paths$/;"	f	class:CommandT.FileScanner
paths	.\vimfiles\bundle\command-t\ruby\command-t\scanner\jump_scanner.rb	/^    def paths$/;"	f	class:CommandT.JumpScanner
paths	.\vimfiles\bundle\command-t\ruby\command-t\scanner\tag_scanner.rb	/^    def paths$/;"	f	class:CommandT.TagScanner
pattern	.\ctags58\lregex.c	/^	regex_t *pattern;$/;"	m	struct:__anon43	file:	access:public
pattern	.\ctags58\readtags.h	/^		const char *pattern;$/;"	m	struct:__anon73::__anon74	access:public
pattern	.\vim73\syntax\cucumber.vim	/^function! s:pattern(key)$/;"	f
patternSet	.\ctags58\lregex.c	/^} patternSet;$/;"	t	typeref:struct:__anon47	file:
patterns	.\ctags58\lregex.c	/^	regexPattern *patterns;$/;"	m	struct:__anon47	file:	access:public
patterns	.\ctags58\parse.h	/^	const char *const *patterns;   \/* list of default file name patterns *\/$/;"	m	struct:__anon56	access:public
peek_token	.\ctags58\gnu_regex\regcomp.c	/^peek_token (re_token_t *token, re_string_t *input, reg_syntax_t syntax)$/;"	f	file:	signature:(re_token_t *token, re_string_t *input, reg_syntax_t syntax)
peek_token_bracket	.\ctags58\gnu_regex\regcomp.c	/^peek_token_bracket (re_token_t *token, re_string_t *input, reg_syntax_t syntax)$/;"	f	file:	signature:(re_token_t *token, re_string_t *input, reg_syntax_t syntax)
perlKind	.\ctags58\perl.c	/^} perlKind;$/;"	t	typeref:enum:__anon59	file:
perlpath	.\vim73\ftplugin\perl.vim	/^	    let perlpath = system("perl -e 'print join(q\/,\/,@INC)'")$/;"	v
perlpath	.\vim73\ftplugin\perl.vim	/^	    let perlpath = system('perl -e "print join(q\/,\/,@INC)"')$/;"	v
perlpath	.\vim73\ftplugin\perl.vim	/^	let perlpath = ".,,"$/;"	v
perlpath	.\vim73\ftplugin\perl.vim	/^	let perlpath = substitute(perlpath,',.$',',,','')$/;"	v
permute_suffixes	.\vim73\syntax\hostconf.vim	/^function s:permute_suffixes(list)$/;"	f
pfmain_syntax_init	.\vim73\syntax\pfmain.vim	/^		let pfmain_syntax_init = 1$/;"	v
phpKind	.\ctags58\php.c	/^} phpKind;$/;"	t	typeref:enum:__anon60	file:
php_alt_assignByReference	.\vim73\syntax\php.vim	/^    let php_alt_assignByReference = 1$/;"	v
php_alt_comparisons	.\vim73\syntax\php.vim	/^    let php_alt_comparisons = 1$/;"	v
php_parent_error_close	.\vim73\syntax\php.vim	/^  let php_parent_error_close=1$/;"	v
php_parent_error_open	.\vim73\syntax\php.vim	/^  let php_parent_error_open=1$/;"	v
php_special_functions	.\vim73\syntax\php.vim	/^    let php_special_functions = 1$/;"	v
php_sync_method	.\vim73\indent\php.vim	/^let php_sync_method = 0$/;"	v
php_sync_method	.\vim73\syntax\php.vim	/^    let php_sync_method=-1$/;"	v
php_sync_method	.\vim73\syntax\php.vim	/^    let php_sync_method=php_minlines$/;"	v
phpcomplete#CompletePHP	.\vim73\autoload\phpcomplete.vim	/^function! phpcomplete#CompletePHP(findstart, base)$/;"	f
phpcomplete#GetClassContents	.\vim73\autoload\phpcomplete.vim	/^function! phpcomplete#GetClassContents(file, name) " {{{$/;"	f
phpcomplete#GetClassLocation	.\vim73\autoload\phpcomplete.vim	/^function! phpcomplete#GetClassLocation(classname) " {{{$/;"	f
phpcomplete#GetClassName	.\vim73\autoload\phpcomplete.vim	/^function! phpcomplete#GetClassName(scontext) " {{{$/;"	f
phpcomplete#LoadData	.\vim73\autoload\phpcomplete.vim	/^function! phpcomplete#LoadData() " {{{$/;"	f
pipe_and_fork	.\ctags58\argproc.c	/^static char *pipe_and_fork ();$/;"	p	file:
pipe_and_fork	.\ctags58\argproc.c	/^static char *pipe_and_fork (cmd)$/;"	f	file:
plain_mf_macros	.\vim73\syntax\mf.vim	/^  let plain_mf_macros = 1 " Set this to '0' if your source gets too colourful$/;"	v
plain_mf_macros	.\vim73\syntax\mp.vim	/^let plain_mf_macros = 0 " plain.mf has no special meaning for MetaPost$/;"	v
plain_mp_macros	.\vim73\syntax\mp.vim	/^  let plain_mp_macros = 1 " Set this to '0' if your source gets too colourful$/;"	v
plural	.\ctags58\main.c	89;"	d	file:
polecenia	.\vim73\tutor\tutor.pl	/^  polecenia:$/;"	l
pop	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\data\list.vim	/^function! s:pop(list)$/;"	f
popConditional	.\ctags58\get.c	/^static boolean popConditional (void)$/;"	f	file:	signature:(void)
popLastNamed	.\ctags58\ocaml.c	/^static void popLastNamed ( void )$/;"	f	file:	signature:( void )
popSoftContext	.\ctags58\ocaml.c	/^static void popSoftContext ( void )$/;"	f	file:	signature:( void )
popStrongContext	.\ctags58\ocaml.c	/^static contextType popStrongContext ( void )$/;"	f	file:	signature:( void )
pop_fail_stack	.\ctags58\gnu_regex\regexec.c	/^pop_fail_stack (struct re_fail_stack_t *fs, int *pidx, int nregs,$/;"	f	file:	signature:(struct re_fail_stack_t *fs, int *pidx, int nregs, regmatch_t *regs, re_node_set *eps_via_nodes)
pos	.\ctags58\readtags.c	/^			off_t pos; $/;"	m	struct:sTagFile::__anon63	file:	access:public
pos	.\ctags58\readtags.c	/^	off_t pos;$/;"	m	struct:sTagFile	file:	access:public
position_cursor	.\vim73\ftplugin\changelog.vim	/^  function! s:position_cursor()$/;"	f
post_install	.\vimfiles\bundle\command-t\vendor\vimball\vimball.rb	/^    def post_install$/;"	f
postorder	.\ctags58\gnu_regex\regcomp.c	/^postorder (bin_tree_t *root, reg_errcode_t (fn (void *, bin_tree_t *)),$/;"	f	file:	signature:(bin_tree_t *root, reg_errcode_t (fn (void *, bin_tree_t *)), void *extra)
postorder	.\ctags58\gnu_regex\regcomp.c	/^static reg_errcode_t postorder (bin_tree_t *root,$/;"	p	file:	signature:(bin_tree_t *root, reg_errcode_t (fn (void *, bin_tree_t *)), void *extra)
postscr_level	.\vim73\syntax\postscr.vim	/^  let postscr_level = 2$/;"	v
ppwiz_highlight_defs	.\vim73\syntax\ppwiz.vim	/^    let ppwiz_highlight_defs = 1$/;"	v
ppwiz_with_html	.\vim73\syntax\ppwiz.vim	/^    let ppwiz_with_html = 1$/;"	v
preorder	.\ctags58\gnu_regex\regcomp.c	/^preorder (bin_tree_t *root, reg_errcode_t (fn (void *, bin_tree_t *)),$/;"	f	file:	signature:(bin_tree_t *root, reg_errcode_t (fn (void *, bin_tree_t *)), void *extra)
preorder	.\ctags58\gnu_regex\regcomp.c	/^static reg_errcode_t preorder (bin_tree_t *root,$/;"	p	file:	signature:(bin_tree_t *root, reg_errcode_t (fn (void *, bin_tree_t *)), void *extra)
prepareTag	.\ctags58\ocaml.c	/^static void prepareTag (tagEntryInfo * tag, vString const *name, ocamlKind kind)$/;"	f	file:	signature:(tagEntryInfo * tag, vString const *name, ocamlKind kind)
prev	.\ctags58\entry.h	/^	struct sNumTags { unsigned long added, prev; } numTags;$/;"	m	struct:eTagFile::sNumTags	access:public
prevToken	.\ctags58\c.c	/^static tokenInfo *prevToken (const statementInfo *const st, unsigned int n)$/;"	f	file:	signature:(const statementInfo *const st, unsigned int n)
prevgood	.\vim73\indent\bst.vim	/^function! s:prevgood(lnum)$/;"	f
prevgood	.\vim73\indent\cobol.vim	/^function! s:prevgood(lnum)$/;"	f
previewFirstOption	.\ctags58\options.c	/^extern void previewFirstOption (cookedArgs* const args)$/;"	f	signature:(cookedArgs* const args)
previewFirstOption	.\ctags58\options.h	/^extern void previewFirstOption (cookedArgs* const cargs);$/;"	p	signature:(cookedArgs* const cargs)
prevnonblanknoncomment	.\vim73\indent\css.vim	/^function s:prevnonblanknoncomment(lnum)$/;"	f
prevnonblanknoncomment	.\vim73\indent\ld.vim	/^function s:prevnonblanknoncomment(lnum)$/;"	f
prevnonblanknoncomment	.\vim73\indent\tcl.vim	/^function s:prevnonblanknoncomment(lnum)$/;"	f
printBucket	.\ctags58\keyword.c	/^static unsigned int printBucket (const unsigned int i)$/;"	f	file:	signature:(const unsigned int i)
printEntry	.\ctags58\keyword.c	/^static void printEntry (const hashEntry *const entry)$/;"	f	file:	signature:(const hashEntry *const entry)
printFeatureList	.\ctags58\options.c	/^static void printFeatureList (void)$/;"	f	file:	signature:(void)
printInvocationDescription	.\ctags58\options.c	/^static void printInvocationDescription (void)$/;"	f	file:	signature:(void)
printKeywordTable	.\ctags58\keyword.c	/^extern void printKeywordTable (void)$/;"	f	signature:(void)
printKeywordTable	.\ctags58\keyword.h	/^extern void printKeywordTable (void);$/;"	p	signature:(void)
printKindOptions	.\ctags58\parse.h	/^extern void printKindOptions (void);$/;"	p	signature:(void)
printKinds	.\ctags58\parse.c	/^static void printKinds (langType language, boolean indent)$/;"	f	file:	signature:(langType language, boolean indent)
printLanguage	.\ctags58\parse.c	/^static void printLanguage (const langType language)$/;"	f	file:	signature:(const langType language)
printLanguageKind	.\ctags58\parse.c	/^static void printLanguageKind (const kindOption* const kind, boolean indent)$/;"	f	file:	signature:(const kindOption* const kind, boolean indent)
printLanguageKinds	.\ctags58\parse.c	/^extern void printLanguageKinds (const langType language)$/;"	f	signature:(const langType language)
printLanguageKinds	.\ctags58\parse.h	/^extern void printLanguageKinds (const langType language);$/;"	p	signature:(const langType language)
printLanguageList	.\ctags58\parse.c	/^extern void printLanguageList (void)$/;"	f	signature:(void)
printLanguageList	.\ctags58\parse.h	/^extern void printLanguageList (void);$/;"	p	signature:(void)
printLanguageMap	.\ctags58\parse.c	/^extern void printLanguageMap (const langType language)$/;"	f	signature:(const langType language)
printLanguageMap	.\ctags58\parse.h	/^extern void printLanguageMap (const langType language);$/;"	p	signature:(const langType language)
printLanguageMaps	.\ctags58\parse.c	/^extern void printLanguageMaps (const langType language)$/;"	f	signature:(const langType language)
printLanguageMaps	.\ctags58\parse.h	/^extern void printLanguageMaps (const langType language);$/;"	p	signature:(const langType language)
printMaps	.\ctags58\parse.c	/^static void printMaps (const langType language)$/;"	f	file:	signature:(const langType language)
printOptionDescriptions	.\ctags58\options.c	/^static void printOptionDescriptions (const optionDescription *const optDesc)$/;"	f	file:	signature:(const optionDescription *const optDesc)
printProgramIdentification	.\ctags58\options.c	/^static void printProgramIdentification (void)$/;"	f	file:	signature:(void)
printRegexKind	.\ctags58\lregex.c	/^static void printRegexKind (const regexPattern *pat, unsigned int i, boolean indent)$/;"	f	file:	signature:(const regexPattern *pat, unsigned int i, boolean indent)
printRegexKinds	.\ctags58\lregex.c	/^extern void printRegexKinds (const langType language __unused__, boolean indent __unused__)$/;"	f	signature:(const langType language __unused__, boolean indent __unused__)
printRegexKinds	.\ctags58\parse.h	/^extern void printRegexKinds (const langType language, boolean indent);$/;"	p	signature:(const langType language, boolean indent)
printTag	.\ctags58\readtags.c	/^static void printTag (const tagEntry *entry)$/;"	f	file:	signature:(const tagEntry *entry)
printTotals	.\ctags58\main.c	/^static void printTotals (const clock_t *const timeStamps)$/;"	f	file:	signature:(const clock_t *const timeStamps)
printTotals	.\ctags58\options.h	/^	boolean printTotals;    \/* --totals  print cumulative statistics *\/$/;"	m	struct:sOptionValues	access:public
print_error	.\vimfiles\bundle\command-t\ruby\command-t\match_window.rb	/^    def print_error msg$/;"	f	class:CommandT.MatchWindow
print_error	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\prelude.vim	/^function! s:print_error(message)$/;"	f
print_match	.\vimfiles\bundle\command-t\ruby\command-t\match_window.rb	/^    def print_match idx$/;"	f	class:CommandT.MatchWindow.match_with_syntax_highlight
print_matches	.\vimfiles\bundle\command-t\ruby\command-t\match_window.rb	/^    def print_matches$/;"	f	class:CommandT.MatchWindow.match_with_syntax_highlight
print_no_such_file_or_directory	.\vimfiles\bundle\command-t\ruby\command-t\match_window.rb	/^    def print_no_such_file_or_directory$/;"	f	class:CommandT.MatchWindow
print_snippets_complete_error	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^function! s:print_snippets_complete_error()$/;"	f
print_string	.\ctags58\lua.c	/^static void __unused__ print_string (char *p, char *q)$/;"	f	file:	signature:(char *p, char *q)
proceed_next_node	.\ctags58\gnu_regex\regexec.c	/^proceed_next_node (const re_match_context_t *mctx, int nregs, regmatch_t *regs,$/;"	f	file:	signature:(const re_match_context_t *mctx, int nregs, regmatch_t *regs, int *pidx, int node, re_node_set *eps_via_nodes, struct re_fail_stack_t *fs)
process	.\vimfiles\bundle\command-t\vendor\vimscriptuploader\vimscriptdef.rb	/^    def process$/;"	f
process	.\vimfiles\bundle\command-t\vendor\vimscriptuploader\vimscriptuploader.rb	/^    def process$/;"	f
process	.\vimfiles\bundle\vundle\autoload\vundle\installer.vim	/^func! s:process(bang, cmd)$/;"	f
processAngleBracket	.\ctags58\c.c	/^static void processAngleBracket (void)$/;"	f	file:	signature:(void)
processBooleanOption	.\ctags58\options.c	/^static boolean processBooleanOption ($/;"	f	file:	signature:( const char *const option, const char *const parameter)
processColon	.\ctags58\c.c	/^static void processColon (statementInfo *const st)$/;"	f	file:	signature:(statementInfo *const st)
processEtagsInclude	.\ctags58\options.c	/^static void processEtagsInclude ($/;"	f	file:	signature:( const char *const option, const char *const parameter)
processExcludeOption	.\ctags58\options.c	/^static void processExcludeOption ($/;"	f	file:	signature:( const char *const option __unused__, const char *const parameter)
processExcmdOption	.\ctags58\options.c	/^static void processExcmdOption ($/;"	f	file:	signature:( const char *const option, const char *const parameter)
processExtraTagsOption	.\ctags58\options.c	/^static void processExtraTagsOption ($/;"	f	file:	signature:( const char *const option, const char *const parameter)
processFieldsOption	.\ctags58\options.c	/^static void processFieldsOption ($/;"	f	file:	signature:( const char *const option, const char *const parameter)
processFilterTerminatorOption	.\ctags58\options.c	/^static void processFilterTerminatorOption ($/;"	f	file:	signature:( const char *const option __unused__, const char *const parameter)
processFormatOption	.\ctags58\options.c	/^static void processFormatOption ($/;"	f	file:	signature:( const char *const option, const char *const parameter)
processHeaderListOption	.\ctags58\options.c	/^static void processHeaderListOption (const int option, const char *parameter)$/;"	f	file:	signature:(const int option, const char *parameter)
processHelpOption	.\ctags58\options.c	/^static void processHelpOption ($/;"	f	file:	signature:( const char *const option __unused__, const char *const parameter __unused__)
processIgnoreOption	.\ctags58\options.c	/^static void processIgnoreOption (const char *const list)$/;"	f	file:	signature:(const char *const list)
processInitializer	.\ctags58\c.c	/^static void processInitializer (statementInfo *const st)$/;"	f	file:	signature:(statementInfo *const st)
processInterface	.\ctags58\c.c	/^static void processInterface (statementInfo *const st)$/;"	f	file:	signature:(statementInfo *const st)
processKindOption	.\ctags58\parse.c	/^extern boolean processKindOption ($/;"	f	signature:( const char *const option, const char *const parameter)
processKindOption	.\ctags58\parse.h	/^extern boolean processKindOption (const char *const option, const char *const parameter);$/;"	p	signature:(const char *const option, const char *const parameter)
processLangKindOption	.\ctags58\parse.c	/^static void processLangKindOption ($/;"	f	file:	signature:( const langType language, const char *const option, const char *const parameter)
processLanguageDefineOption	.\ctags58\parse.c	/^extern void processLanguageDefineOption ($/;"	f	signature:( const char *const option, const char *const parameter __unused__)
processLanguageDefineOption	.\ctags58\parse.h	/^extern void processLanguageDefineOption (const char *const option, const char *const parameter);$/;"	p	signature:(const char *const option, const char *const parameter)
processLanguageForceOption	.\ctags58\options.c	/^static void processLanguageForceOption ($/;"	f	file:	signature:( const char *const option, const char *const parameter)
processLanguageMap	.\ctags58\options.c	/^static char* processLanguageMap (char* map)$/;"	f	file:	signature:(char* map)
processLanguageMapOption	.\ctags58\options.c	/^static void processLanguageMapOption ($/;"	f	file:	signature:( const char *const option, const char *const parameter)
processLanguageRegex	.\ctags58\lregex.c	/^static void processLanguageRegex (const langType language,$/;"	f	file:	signature:(const langType language, const char* const parameter)
processLanguagesOption	.\ctags58\options.c	/^static void processLanguagesOption ($/;"	f	file:	signature:( const char *const option, const char *const parameter)
processLicenseOption	.\ctags58\options.c	/^static void processLicenseOption ($/;"	f	file:	signature:( const char *const option __unused__, const char *const parameter __unused__)
processListKindsOption	.\ctags58\options.c	/^static void processListKindsOption ($/;"	f	file:	signature:( const char *const option, const char *const parameter)
processListLanguagesOption	.\ctags58\options.c	/^static void processListLanguagesOption ($/;"	f	file:	signature:( const char *const option __unused__, const char *const parameter __unused__)
processListMapsOption	.\ctags58\options.c	/^static void processListMapsOption ($/;"	f	file:	signature:( const char *const __unused__ option, const char *const __unused__ parameter)
processLongOption	.\ctags58\options.c	/^static void processLongOption ($/;"	f	file:	signature:( const char *const option, const char *const parameter)
processName	.\ctags58\c.c	/^static void processName (statementInfo *const st)$/;"	f	file:	signature:(statementInfo *const st)
processOptionFile	.\ctags58\options.c	/^static void processOptionFile ($/;"	f	file:	signature:( const char *const option, const char *const parameter)
processParametricOption	.\ctags58\options.c	/^static boolean processParametricOption ($/;"	f	file:	signature:( const char *const option, const char *const parameter)
processRegexOption	.\ctags58\lregex.c	/^extern boolean processRegexOption (const char *const option,$/;"	f	signature:(const char *const option, const char *const parameter __unused__)
processRegexOption	.\ctags58\parse.h	/^extern boolean processRegexOption (const char *const option, const char *const parameter);$/;"	p	signature:(const char *const option, const char *const parameter)
processShortOption	.\ctags58\options.c	/^static void processShortOption ($/;"	f	file:	signature:( const char *const option, const char *const parameter)
processSortOption	.\ctags58\options.c	/^static void processSortOption ($/;"	f	file:	signature:( const char *const option, const char *const parameter)
processToken	.\ctags58\c.c	/^static void processToken (tokenInfo *const token, statementInfo *const st)$/;"	f	file:	signature:(tokenInfo *const token, statementInfo *const st)
processVersionOption	.\ctags58\options.c	/^static void processVersionOption ($/;"	f	file:	signature:( const char *const option __unused__, const char *const parameter __unused__)
process_default	.\vimfiles\bundle\command-t\vendor\vimscriptuploader\vimscriptdef.rb	/^    def process_default$/;"	f
process_print_saved_version	.\vimfiles\bundle\command-t\vendor\vimscriptuploader\vimscriptdef.rb	/^    def process_print_saved_version$/;"	f
process_print_version	.\vimfiles\bundle\command-t\vendor\vimscriptuploader\vimscriptdef.rb	/^    def process_print_version$/;"	f
program	.\ctags58\readtags.c	/^	} program;$/;"	m	struct:sTagFile	typeref:struct:sTagFile::__anon65	file:	access:public
program	.\ctags58\readtags.h	/^	} program;$/;"	m	struct:__anon68	typeref:struct:__anon68::__anon71	access:public
progressbar.calculate_ticks	.\vim73\syntax\2html.vim	/^  func! s:progressbar.calculate_ticks(pb_len)$/;"	f
progressbar.incr	.\vim73\syntax\2html.vim	/^  func! s:progressbar.incr( ... )$/;"	f
progressbar.paint	.\vim73\syntax\2html.vim	/^  func! s:progressbar.paint()$/;"	f
prototype.AssessName	.\vimfiles\bundle\tlib_vim\autoload\tlib\Filter_cnf.vim	/^function! s:prototype.AssessName(world, name) dict "{{{3$/;"	f
prototype.BuildTableList	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.BuildTableList() dict "{{{3$/;"	f
prototype.CleanFilter	.\vimfiles\bundle\tlib_vim\autoload\tlib\Filter_cnf.vim	/^function! s:prototype.CleanFilter(filter) dict "{{{3$/;"	f
prototype.CleanFilter	.\vimfiles\bundle\tlib_vim\autoload\tlib\Filter_cnfd.vim	/^function! s:prototype.CleanFilter(filter) dict "{{{3$/;"	f
prototype.CleanFilter	.\vimfiles\bundle\tlib_vim\autoload\tlib\Filter_cnfx.vim	/^function! s:prototype.CleanFilter(filter) dict "{{{3$/;"	f
prototype.CleanFilter	.\vimfiles\bundle\tlib_vim\autoload\tlib\Filter_fuzzy.vim	/^function! s:prototype.CleanFilter(filter) dict "{{{3$/;"	f
prototype.CleanFilter	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.CleanFilter(filter) dict "{{{3$/;"	f
prototype.ClearAllMarks	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.ClearAllMarks() dict "{{{3$/;"	f
prototype.CloseScratch	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.CloseScratch(...) dict "{{{3$/;"	f
prototype.CurrentItem	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.CurrentItem() dict "{{{3$/;"	f
prototype.DisplayFilter	.\vimfiles\bundle\tlib_vim\autoload\tlib\Filter_cnf.vim	/^function! s:prototype.DisplayFilter(filter) dict "{{{3$/;"	f
prototype.DisplayFilter	.\vimfiles\bundle\tlib_vim\autoload\tlib\Filter_fuzzy.vim	/^function! s:prototype.DisplayFilter(filter) dict "{{{3$/;"	f
prototype.DisplayFilter	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.DisplayFilter() dict "{{{3$/;"	f
prototype.DisplayHelp	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.DisplayHelp() dict "{{{3$/;"	f
prototype.DisplayList	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.DisplayList(...) dict "{{{3$/;"	f
prototype.DisplayListMark	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.DisplayListMark(x, y, mark) dict "{{{3$/;"	f
prototype.Dummy	.\vimfiles\bundle\tlib_vim\autoload\tlib\Test.vim	/^function! s:prototype.Dummy() dict "{{{3$/;"	f
prototype.Dummy	.\vimfiles\bundle\tlib_vim\autoload\tlib\TestChild.vim	/^function! s:prototype.Dummy() dict "{{{3$/;"	f
prototype.Extend	.\vimfiles\bundle\tlib_vim\autoload\tlib\Object.vim	/^function! s:prototype.Extend(dictionary) dict "{{{3$/;"	f
prototype.FilterIsEmpty	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.FilterIsEmpty() dict "{{{3$/;"	f
prototype.FilterRxPrefix	.\vimfiles\bundle\tlib_vim\autoload\tlib\Filter_cnf.vim	/^function! s:prototype.FilterRxPrefix() dict "{{{3$/;"	f
prototype.FilterRxPrefix	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.FilterRxPrefix() dict "{{{3$/;"	f
prototype.FollowCursor	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.FollowCursor() dict "{{{3$/;"	f
prototype.FormatArgs	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.FormatArgs(format_string, arg) dict "{{{3$/;"	f
prototype.FormatFilename	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^    function! s:prototype.FormatFilename(file) dict "{{{3$/;"	f
prototype.FormatName	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.FormatName(cache, format, value) dict "{{{3$/;"	f
prototype.GetBaseIdx	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.GetBaseIdx(idx) dict "{{{3$/;"	f
prototype.GetBaseIdx0	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.GetBaseIdx0(idx) dict "{{{3$/;"	f
prototype.GetBaseItem	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.GetBaseItem(idx) dict "{{{3$/;"	f
prototype.GetItem	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.GetItem(idx) dict "{{{3$/;"	f
prototype.GetLineIdx	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.GetLineIdx(lnum) dict "{{{3$/;"	f
prototype.GetListIdx	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.GetListIdx(baseidx) dict "{{{3$/;"	f
prototype.GetResize	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.GetResize(size) dict "{{{3$/;"	f
prototype.GetRx	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.GetRx(filter) dict "{{{3$/;"	f
prototype.GetRx0	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.GetRx0(...) dict "{{{3$/;"	f
prototype.GetSelectedItems	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.GetSelectedItems(current) dict "{{{3$/;"	f
prototype.Help	.\vimfiles\bundle\tlib_vim\autoload\tlib\Filter_cnf.vim	/^function! s:prototype.Help(world) dict "{{{3$/;"	f
prototype.Help	.\vimfiles\bundle\tlib_vim\autoload\tlib\Filter_cnfd.vim	/^function! s:prototype.Help(world) dict "{{{3$/;"	f
prototype.Help	.\vimfiles\bundle\tlib_vim\autoload\tlib\Filter_fuzzy.vim	/^function! s:prototype.Help(world) dict "{{{3$/;"	f
prototype.Highlight_filename	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^    function! s:prototype.Highlight_filename() dict "{{{3$/;"	f
prototype.Inherit	.\vimfiles\bundle\tlib_vim\autoload\tlib\Object.vim	/^function! s:prototype.Inherit(object) dict "{{{3$/;"	f
prototype.Init	.\vimfiles\bundle\tlib_vim\autoload\tlib\Filter_cnf.vim	/^function! s:prototype.Init(world) dict "{{{3$/;"	f
prototype.Init	.\vimfiles\bundle\tlib_vim\autoload\tlib\Filter_cnfd.vim	/^function! s:prototype.Init(world) dict "{{{3$/;"	f
prototype.Init	.\vimfiles\bundle\tlib_vim\autoload\tlib\Filter_fuzzy.vim	/^function! s:prototype.Init(world) dict "{{{3$/;"	f
prototype.InitHelp	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.InitHelp() dict "{{{3$/;"	f
prototype.Initialize	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.Initialize() dict "{{{3$/;"	f
prototype.IsA	.\vimfiles\bundle\tlib_vim\autoload\tlib\Object.vim	/^function! s:prototype.IsA(class) dict "{{{3$/;"	f
prototype.IsRelated	.\vimfiles\bundle\tlib_vim\autoload\tlib\Object.vim	/^function! s:prototype.IsRelated(object) dict "{{{3$/;"	f
prototype.IsValidFilter	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.IsValidFilter() dict "{{{3$/;"	f
prototype.Leave	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.Leave() dict "{{{3$/;"	f
prototype.MarkCurrent	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.MarkCurrent(y) dict "{{{3$/;"	f
prototype.Match	.\vimfiles\bundle\tlib_vim\autoload\tlib\Filter_cnf.vim	/^function! s:prototype.Match(world, text) dict "{{{3$/;"	f
prototype.MatchBaseIdx	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.MatchBaseIdx(idx) dict "{{{3$/;"	f
prototype.New	.\vimfiles\bundle\tlib_vim\autoload\tlib\Object.vim	/^function! s:prototype.New(...) dict "{{{3$/;"	f
prototype.PopFilter	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.PopFilter() dict "{{{3$/;"	f
prototype.Pretty	.\vimfiles\bundle\tlib_vim\autoload\tlib\Filter_cnf.vim	/^function! s:prototype.Pretty(filter) dict "{{{3$/;"	f
prototype.PrintLines	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.PrintLines() dict "{{{3$/;"	f
prototype.PushFrontFilter	.\vimfiles\bundle\tlib_vim\autoload\tlib\Filter_cnf.vim	/^function! s:prototype.PushFrontFilter(world, char) dict "{{{3$/;"	f
prototype.PushFrontFilter	.\vimfiles\bundle\tlib_vim\autoload\tlib\Filter_cnfd.vim	/^function! s:prototype.PushFrontFilter(world, char) dict "{{{3$/;"	f
prototype.PushFrontFilter	.\vimfiles\bundle\tlib_vim\autoload\tlib\Filter_cnfx.vim	/^function! s:prototype.PushFrontFilter(world, char) dict "{{{3$/;"	f
prototype.PushFrontFilter	.\vimfiles\bundle\tlib_vim\autoload\tlib\Filter_fuzzy.vim	/^function! s:prototype.PushFrontFilter(world, char) dict "{{{3$/;"	f
prototype.PushFrontFilter	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.PushFrontFilter(char) dict "{{{3$/;"	f
prototype.PushHelp	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.PushHelp(...) dict "{{{3$/;"	f
prototype.Query	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.Query() dict "{{{3$/;"	f
prototype.ReduceFilter	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.ReduceFilter() dict "{{{3$/;"	f
prototype.ReduceFrontFilter	.\vimfiles\bundle\tlib_vim\autoload\tlib\Filter_cnf.vim	/^function! s:prototype.ReduceFrontFilter(world) dict "{{{3$/;"	f
prototype.ReduceFrontFilter	.\vimfiles\bundle\tlib_vim\autoload\tlib\Filter_cnfd.vim	/^function! s:prototype.ReduceFrontFilter(world) dict "{{{3$/;"	f
prototype.ReduceFrontFilter	.\vimfiles\bundle\tlib_vim\autoload\tlib\Filter_fuzzy.vim	/^function! s:prototype.ReduceFrontFilter(world) dict "{{{3$/;"	f
prototype.Reset	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.Reset(...) dict "{{{3$/;"	f
prototype.ResetSelected	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.ResetSelected() dict "{{{3$/;"	f
prototype.Resize	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.Resize(hsize, vsize) dict "{{{3$/;"	f
prototype.RespondTo	.\vimfiles\bundle\tlib_vim\autoload\tlib\Object.vim	/^function! s:prototype.RespondTo(name) dict "{{{3$/;"	f
prototype.RestoreOrigin	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.RestoreOrigin(...) dict "{{{3$/;"	f
prototype.Retrieve	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.Retrieve(anyway) dict "{{{3$/;"	f
prototype.ScrollToOffset	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.ScrollToOffset() dict "{{{3$/;"	f
prototype.SelectItem	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.SelectItem(mode, index) dict "{{{3$/;"	f
prototype.SelectItemsByNames	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.SelectItemsByNames(mode, items) dict "{{{3$/;"	f
prototype.SetBaseItem	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.SetBaseItem(idx, item) dict "{{{3$/;"	f
prototype.SetFilter	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.SetFilter() dict "{{{3$/;"	f
prototype.SetFrontFilter	.\vimfiles\bundle\tlib_vim\autoload\tlib\Filter_cnf.vim	/^function! s:prototype.SetFrontFilter(world, pattern) dict "{{{3$/;"	f
prototype.SetFrontFilter	.\vimfiles\bundle\tlib_vim\autoload\tlib\Filter_cnfd.vim	/^function! s:prototype.SetFrontFilter(world, pattern) dict "{{{3$/;"	f
prototype.SetFrontFilter	.\vimfiles\bundle\tlib_vim\autoload\tlib\Filter_cnfx.vim	/^function! s:prototype.SetFrontFilter(world, pattern) dict "{{{3$/;"	f
prototype.SetFrontFilter	.\vimfiles\bundle\tlib_vim\autoload\tlib\Filter_fuzzy.vim	/^function! s:prototype.SetFrontFilter(world, pattern) dict "{{{3$/;"	f
prototype.SetFrontFilter	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.SetFrontFilter(pattern) dict "{{{3$/;"	f
prototype.SetInitialFilter	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.SetInitialFilter(filter) dict "{{{3$/;"	f
prototype.SetMatchMode	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.SetMatchMode(match_mode) dict "{{{3$/;"	f
prototype.SetOffset	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.SetOffset() dict "{{{3$/;"	f
prototype.SetOrigin	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.SetOrigin(...) dict "{{{3$/;"	f
prototype.SetPrefIdx	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.SetPrefIdx() dict "{{{3$/;"	f
prototype.SetStatusline	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.SetStatusline(query) dict "{{{3$/;"	f
prototype.Set_display_format	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.Set_display_format(value) dict "{{{3$/;"	f
prototype.Set_highlight_filename	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.Set_highlight_filename() dict "{{{3$/;"	f
prototype.Super	.\vimfiles\bundle\tlib_vim\autoload\tlib\Object.vim	/^function! s:prototype.Super(method, arglist) dict "{{{3$/;"	f
prototype.SwitchWindow	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.SwitchWindow(where) dict "{{{3$/;"	f
prototype.UseInputListScratch	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.UseInputListScratch() dict "{{{3$/;"	f
prototype.UseScratch	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! s:prototype.UseScratch() dict "{{{3$/;"	f
prune_impossible_nodes	.\ctags58\gnu_regex\regexec.c	/^prune_impossible_nodes (mctx)$/;"	f	file:
ps	.\ctags58\c.c	/^static void __unused__ ps (statementInfo *const st)$/;"	f	file:	signature:(statementInfo *const st)
pt	.\ctags58\c.c	/^static void __unused__ pt (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
purebasic_keywords	.\ctags58\basic.c	/^static KeyWord purebasic_keywords[] = {$/;"	v	file:
push	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\data\list.vim	/^function! s:push(list, val)$/;"	f
pushConditional	.\ctags58\get.c	/^static boolean pushConditional (const boolean firstBranchChosen)$/;"	f	file:	signature:(const boolean firstBranchChosen)
pushContext	.\ctags58\ocaml.c	/^static void pushContext (contextKind kind, contextType type, parseNext after,$/;"	f	file:	signature:(contextKind kind, contextType type, parseNext after, vString const *contextName)
pushEmptyContext	.\ctags58\ocaml.c	/^static void pushEmptyContext (parseNext continuation)$/;"	f	file:	signature:(parseNext continuation)
pushSoftContext	.\ctags58\ocaml.c	/^static void pushSoftContext (parseNext continuation,$/;"	f	file:	signature:(parseNext continuation, vString * name, contextType type)
pushStrongContext	.\ctags58\ocaml.c	/^static void pushStrongContext (vString * name, contextType type)$/;"	f	file:	signature:(vString * name, contextType type)
push_fail_stack	.\ctags58\gnu_regex\regexec.c	/^push_fail_stack (struct re_fail_stack_t *fs, int str_idx, int dest_node,$/;"	f	file:	signature:(struct re_fail_stack_t *fs, int str_idx, int dest_node, int nregs, regmatch_t *regs, re_node_set *eps_via_nodes)
pwd	.\vimfiles\bundle\command-t\ruby\command-t\vim.rb	/^    def self.pwd$/;"	F	class:CommandT.VIM
python3complete#Complete	.\vim73\autoload\python3complete.vim	/^function! python3complete#Complete(findstart, base)$/;"	f
pythonKind	.\ctags58\python.c	/^} pythonKind;$/;"	t	typeref:enum:__anon61	file:
python_space_error_highlight	.\vim73\syntax\python.vim	/^  let python_space_error_highlight = 1$/;"	v
pythoncomplete#Complete	.\vim73\autoload\pythoncomplete.vim	/^function! pythoncomplete#Complete(findstart, base)$/;"	f
q	.\vim73\macros\hanoi\hanoi.vim	/^map q tllD$/;"	m
q	.\vim73\macros\less.vim	/^noremap q :q<CR>$/;"	m
qualifiedTags	.\ctags58\options.h	/^	boolean qualifiedTags;  \/* include tags for qualified class members *\/$/;"	m	struct:sInclude	access:public
qualifyBlockTag	.\ctags58\c.c	/^static void qualifyBlockTag (statementInfo *const st,$/;"	f	file:	signature:(statementInfo *const st, const tokenInfo *const nameToken)
qualifyCompoundTag	.\ctags58\c.c	/^static void qualifyCompoundTag (const statementInfo *const st,$/;"	f	file:	signature:(const statementInfo *const st, const tokenInfo *const nameToken)
qualifyEnumeratorTag	.\ctags58\c.c	/^static void qualifyEnumeratorTag (const statementInfo *const st,$/;"	f	file:	signature:(const statementInfo *const st, const tokenInfo *const nameToken)
qualifyFunctionDeclTag	.\ctags58\c.c	/^static void qualifyFunctionDeclTag (const statementInfo *const st,$/;"	f	file:	signature:(const statementInfo *const st, const tokenInfo *const nameToken)
qualifyFunctionTag	.\ctags58\c.c	/^static void qualifyFunctionTag (const statementInfo *const st,$/;"	f	file:	signature:(const statementInfo *const st, const tokenInfo *const nameToken)
qualifyVariableTag	.\ctags58\c.c	/^static void qualifyVariableTag (const statementInfo *const st,$/;"	f	file:	signature:(const statementInfo *const st, const tokenInfo *const nameToken)
quickfix	.\vimfiles\bundle\command-t\ruby\command-t\controller.rb	/^    def quickfix$/;"	f	class:CommandT.Controller
r	.\vim73\macros\less.vim	/^noremap <script> r <C-L><SID>L$/;"	m
rand	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\commands.vim	/^function! s:rand(max) "{{{$/;"	f
range	.\ctags58\gnu_regex\regexec.c	/^    int length, start, range;$/;"	v
range	.\ctags58\gnu_regex\regexec.c	/^    int length1, length2, start, range, stop;$/;"	v
range_ends	.\ctags58\gnu_regex\regex_internal.h	/^  uint32_t *range_ends;$/;"	m	struct:__anon30	access:public
range_ends	.\ctags58\gnu_regex\regex_internal.h	/^  wchar_t *range_ends;$/;"	m	struct:__anon30	access:public
range_starts	.\ctags58\gnu_regex\regex_internal.h	/^  uint32_t *range_starts;$/;"	m	struct:__anon30	access:public
range_starts	.\ctags58\gnu_regex\regex_internal.h	/^  wchar_t *range_starts;$/;"	m	struct:__anon30	access:public
raw_len	.\ctags58\gnu_regex\regex_internal.h	/^  int raw_len;$/;"	m	struct:re_string_t	access:public
raw_mbs	.\ctags58\gnu_regex\regex_internal.h	/^  const unsigned char *raw_mbs;$/;"	m	struct:re_string_t	access:public
raw_mbs_idx	.\ctags58\gnu_regex\regex_internal.h	/^  int raw_mbs_idx;$/;"	m	struct:re_string_t	access:public
raw_stop	.\ctags58\gnu_regex\regex_internal.h	/^  int raw_stop;$/;"	m	struct:re_string_t	access:public
re_acquire_state	.\ctags58\gnu_regex\regex_internal.c	/^re_acquire_state (reg_errcode_t *err, const re_dfa_t *dfa,$/;"	f	file:	signature:(reg_errcode_t *err, const re_dfa_t *dfa, const re_node_set *nodes)
re_acquire_state_context	.\ctags58\gnu_regex\regex_internal.c	/^re_acquire_state_context (reg_errcode_t *err, const re_dfa_t *dfa,$/;"	f	file:	signature:(reg_errcode_t *err, const re_dfa_t *dfa, const re_node_set *nodes, unsigned int context)
re_backref_cache_entry	.\ctags58\gnu_regex\regex_internal.h	/^struct re_backref_cache_entry$/;"	s
re_backref_cache_entry::eps_reachable_subexps_map	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned short int eps_reachable_subexps_map;$/;"	m	struct:re_backref_cache_entry	access:public
re_backref_cache_entry::more	.\ctags58\gnu_regex\regex_internal.h	/^  char more;$/;"	m	struct:re_backref_cache_entry	access:public
re_backref_cache_entry::node	.\ctags58\gnu_regex\regex_internal.h	/^  int node;$/;"	m	struct:re_backref_cache_entry	access:public
re_backref_cache_entry::str_idx	.\ctags58\gnu_regex\regex_internal.h	/^  int str_idx;$/;"	m	struct:re_backref_cache_entry	access:public
re_backref_cache_entry::subexp_from	.\ctags58\gnu_regex\regex_internal.h	/^  int subexp_from;$/;"	m	struct:re_backref_cache_entry	access:public
re_backref_cache_entry::subexp_to	.\ctags58\gnu_regex\regex_internal.h	/^  int subexp_to;$/;"	m	struct:re_backref_cache_entry	access:public
re_backref_cache_entry::unused	.\ctags58\gnu_regex\regex_internal.h	/^  char unused;$/;"	m	struct:re_backref_cache_entry	access:public
re_bitset_ptr_t	.\ctags58\gnu_regex\regex_internal.h	/^typedef bitset_word_t *re_bitset_ptr_t;$/;"	t
re_charset_t	.\ctags58\gnu_regex\regex_internal.h	/^} re_charset_t;$/;"	t	typeref:struct:__anon30
re_comp	.\ctags58\gnu_regex\regcomp.c	/^re_comp (s)$/;"	f
re_comp	.\ctags58\gnu_regex\regex.h	/^extern char *re_comp (const char *);$/;"	p	signature:(const char *)
re_comp_buf	.\ctags58\gnu_regex\regcomp.c	/^static struct re_pattern_buffer re_comp_buf;$/;"	v	typeref:struct:re_pattern_buffer	file:
re_compile_fastmap	.\ctags58\gnu_regex\regex.c	50;"	d	file:
re_compile_fastmap	.\ctags58\gnu_regex\regex.h	/^extern int re_compile_fastmap (struct re_pattern_buffer *__buffer);$/;"	p	signature:(struct re_pattern_buffer *__buffer)
re_compile_fastmap_iter	.\ctags58\gnu_regex\regcomp.c	/^re_compile_fastmap_iter (regex_t *bufp, const re_dfastate_t *init_state,$/;"	f	file:	signature:(regex_t *bufp, const re_dfastate_t *init_state, char *fastmap)
re_compile_fastmap_iter	.\ctags58\gnu_regex\regcomp.c	/^static void re_compile_fastmap_iter (regex_t *bufp,$/;"	p	file:	signature:(regex_t *bufp, const re_dfastate_t *init_state, char *fastmap)
re_compile_internal	.\ctags58\gnu_regex\regcomp.c	/^re_compile_internal (regex_t *preg, const char * pattern, size_t length,$/;"	f	file:	signature:(regex_t *preg, const char * pattern, size_t length, reg_syntax_t syntax)
re_compile_internal	.\ctags58\gnu_regex\regcomp.c	/^static reg_errcode_t re_compile_internal (regex_t *preg, const char * pattern,$/;"	p	file:	signature:(regex_t *preg, const char * pattern, size_t length, reg_syntax_t syntax)
re_compile_pattern	.\ctags58\gnu_regex\regcomp.c	/^re_compile_pattern (pattern, length, bufp)$/;"	f
re_compile_pattern	.\ctags58\gnu_regex\regex.c	45;"	d	file:
re_compile_pattern	.\ctags58\gnu_regex\regex.h	/^extern const char *re_compile_pattern (const char *__pattern, size_t __length,$/;"	p	signature:(const char *__pattern, size_t __length, struct re_pattern_buffer *__buffer)
re_const_bitset_ptr_t	.\ctags58\gnu_regex\regex_internal.h	/^typedef const bitset_word_t *re_const_bitset_ptr_t;$/;"	t
re_context_type	.\ctags58\gnu_regex\regex_internal.h	/^} re_context_type;$/;"	t	typeref:enum:__anon27
re_copy_regs	.\ctags58\gnu_regex\regexec.c	/^re_copy_regs (regs, pmatch, nregs, regs_allocated)$/;"	f	file:
re_dfa_add_node	.\ctags58\gnu_regex\regex_internal.c	/^re_dfa_add_node (re_dfa_t *dfa, re_token_t token)$/;"	f	file:	signature:(re_dfa_t *dfa, re_token_t token)
re_dfa_t	.\ctags58\gnu_regex\regex_internal.h	/^struct re_dfa_t$/;"	s
re_dfa_t	.\ctags58\gnu_regex\regex_internal.h	/^typedef struct re_dfa_t re_dfa_t;$/;"	t	typeref:struct:re_dfa_t
re_dfa_t::completed_bkref_map	.\ctags58\gnu_regex\regex_internal.h	/^  bitset_word_t completed_bkref_map;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::eclosures	.\ctags58\gnu_regex\regex_internal.h	/^  re_node_set *eclosures;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::edests	.\ctags58\gnu_regex\regex_internal.h	/^  re_node_set *edests;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::has_mb_node	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned int has_mb_node : 1;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::has_plural_match	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned int has_plural_match : 1;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::init_node	.\ctags58\gnu_regex\regex_internal.h	/^  int init_node;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::init_state	.\ctags58\gnu_regex\regex_internal.h	/^  re_dfastate_t *init_state;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::init_state_begbuf	.\ctags58\gnu_regex\regex_internal.h	/^  re_dfastate_t *init_state_begbuf;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::init_state_nl	.\ctags58\gnu_regex\regex_internal.h	/^  re_dfastate_t *init_state_nl;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::init_state_word	.\ctags58\gnu_regex\regex_internal.h	/^  re_dfastate_t *init_state_word;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::inveclosures	.\ctags58\gnu_regex\regex_internal.h	/^  re_node_set *inveclosures;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::is_utf8	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned int is_utf8 : 1;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::map_notascii	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned int map_notascii : 1;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::mb_cur_max	.\ctags58\gnu_regex\regex_internal.h	/^  int mb_cur_max;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::nbackref	.\ctags58\gnu_regex\regex_internal.h	/^  int nbackref; \/* The number of backreference in this dfa.  *\/$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::nexts	.\ctags58\gnu_regex\regex_internal.h	/^  int *nexts;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::nodes	.\ctags58\gnu_regex\regex_internal.h	/^  re_token_t *nodes;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::nodes_alloc	.\ctags58\gnu_regex\regex_internal.h	/^  size_t nodes_alloc;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::nodes_len	.\ctags58\gnu_regex\regex_internal.h	/^  size_t nodes_len;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::org_indices	.\ctags58\gnu_regex\regex_internal.h	/^  int *org_indices;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::re_str	.\ctags58\gnu_regex\regex_internal.h	/^  char* re_str;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::sb_char	.\ctags58\gnu_regex\regex_internal.h	/^  re_bitset_ptr_t sb_char;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::state_hash_mask	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned int state_hash_mask;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::state_table	.\ctags58\gnu_regex\regex_internal.h	/^  struct re_state_table_entry *state_table;$/;"	m	struct:re_dfa_t	typeref:struct:re_dfa_t::re_state_table_entry	access:public
re_dfa_t::str_tree	.\ctags58\gnu_regex\regex_internal.h	/^  bin_tree_t *str_tree;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::str_tree_storage	.\ctags58\gnu_regex\regex_internal.h	/^  bin_tree_storage_t *str_tree_storage;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::str_tree_storage_idx	.\ctags58\gnu_regex\regex_internal.h	/^  int str_tree_storage_idx;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::subexp_map	.\ctags58\gnu_regex\regex_internal.h	/^  int *subexp_map;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::syntax	.\ctags58\gnu_regex\regex_internal.h	/^  reg_syntax_t syntax;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::used_bkref_map	.\ctags58\gnu_regex\regex_internal.h	/^  bitset_word_t used_bkref_map;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::word_char	.\ctags58\gnu_regex\regex_internal.h	/^  bitset_t word_char;$/;"	m	struct:re_dfa_t	access:public
re_dfa_t::word_ops_used	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned int word_ops_used : 1;$/;"	m	struct:re_dfa_t	access:public
re_dfastate_t	.\ctags58\gnu_regex\regex_internal.h	/^struct re_dfastate_t$/;"	s
re_dfastate_t	.\ctags58\gnu_regex\regex_internal.h	/^typedef struct re_dfastate_t re_dfastate_t;$/;"	t	typeref:struct:re_dfastate_t
re_dfastate_t::accept_mb	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned int accept_mb : 1;$/;"	m	struct:re_dfastate_t	access:public
re_dfastate_t::context	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned int context : 4;$/;"	m	struct:re_dfastate_t	access:public
re_dfastate_t::entrance_nodes	.\ctags58\gnu_regex\regex_internal.h	/^  re_node_set *entrance_nodes;$/;"	m	struct:re_dfastate_t	access:public
re_dfastate_t::halt	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned int halt : 1;$/;"	m	struct:re_dfastate_t	access:public
re_dfastate_t::has_backref	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned int has_backref : 1;$/;"	m	struct:re_dfastate_t	access:public
re_dfastate_t::has_constraint	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned int has_constraint : 1;$/;"	m	struct:re_dfastate_t	access:public
re_dfastate_t::hash	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned int hash;$/;"	m	struct:re_dfastate_t	access:public
re_dfastate_t::inveclosure	.\ctags58\gnu_regex\regex_internal.h	/^  re_node_set inveclosure;$/;"	m	struct:re_dfastate_t	access:public
re_dfastate_t::nodes	.\ctags58\gnu_regex\regex_internal.h	/^  re_node_set nodes;$/;"	m	struct:re_dfastate_t	access:public
re_dfastate_t::non_eps_nodes	.\ctags58\gnu_regex\regex_internal.h	/^  re_node_set non_eps_nodes;$/;"	m	struct:re_dfastate_t	access:public
re_dfastate_t::trtable	.\ctags58\gnu_regex\regex_internal.h	/^  struct re_dfastate_t **trtable, **word_trtable;$/;"	m	struct:re_dfastate_t	typeref:struct:re_dfastate_t::re_dfastate_t	access:public
re_dfastate_t::word_trtable	.\ctags58\gnu_regex\regex_internal.h	/^  struct re_dfastate_t **trtable, **word_trtable;$/;"	m	struct:re_dfastate_t	typeref:struct:re_dfastate_t::	access:public
re_exec	.\ctags58\gnu_regex\regex.h	/^extern int re_exec (const char *);$/;"	p	signature:(const char *)
re_fail_stack_ent_t	.\ctags58\gnu_regex\regex_internal.h	/^struct re_fail_stack_ent_t$/;"	s
re_fail_stack_ent_t::eps_via_nodes	.\ctags58\gnu_regex\regex_internal.h	/^  re_node_set eps_via_nodes;$/;"	m	struct:re_fail_stack_ent_t	access:public
re_fail_stack_ent_t::idx	.\ctags58\gnu_regex\regex_internal.h	/^  int idx;$/;"	m	struct:re_fail_stack_ent_t	access:public
re_fail_stack_ent_t::node	.\ctags58\gnu_regex\regex_internal.h	/^  int node;$/;"	m	struct:re_fail_stack_ent_t	access:public
re_fail_stack_ent_t::regs	.\ctags58\gnu_regex\regex_internal.h	/^  regmatch_t *regs;$/;"	m	struct:re_fail_stack_ent_t	access:public
re_fail_stack_t	.\ctags58\gnu_regex\regex_internal.h	/^struct re_fail_stack_t$/;"	s
re_fail_stack_t::alloc	.\ctags58\gnu_regex\regex_internal.h	/^  int alloc;$/;"	m	struct:re_fail_stack_t	access:public
re_fail_stack_t::num	.\ctags58\gnu_regex\regex_internal.h	/^  int num;$/;"	m	struct:re_fail_stack_t	access:public
re_fail_stack_t::stack	.\ctags58\gnu_regex\regex_internal.h	/^  struct re_fail_stack_ent_t *stack;$/;"	m	struct:re_fail_stack_t	typeref:struct:re_fail_stack_t::re_fail_stack_ent_t	access:public
re_free	.\ctags58\gnu_regex\regex_internal.h	442;"	d
re_malloc	.\ctags58\gnu_regex\regex_internal.h	440;"	d
re_match	.\ctags58\gnu_regex\regex.c	41;"	d	file:
re_match	.\ctags58\gnu_regex\regex.h	/^extern int re_match (struct re_pattern_buffer *__buffer, const char *__string,$/;"	p	signature:(struct re_pattern_buffer *__buffer, const char *__string, int __length, int __start, struct re_registers *__regs)
re_match	.\ctags58\gnu_regex\regexec.c	/^re_match (bufp, string, length, start, regs)$/;"	f
re_match_2	.\ctags58\gnu_regex\regex.c	39;"	d	file:
re_match_2	.\ctags58\gnu_regex\regex.h	/^extern int re_match_2 (struct re_pattern_buffer *__buffer,$/;"	p	signature:(struct re_pattern_buffer *__buffer, const char *__string1, int __length1, const char *__string2, int __length2, int __start, struct re_registers *__regs, int __stop)
re_match_context_t	.\ctags58\gnu_regex\regex_internal.h	/^} re_match_context_t;$/;"	t	typeref:struct:__anon36
re_max_failures	.\ctags58\gnu_regex\regex.c	/^int re_max_failures = 2000;$/;"	v
re_node_set	.\ctags58\gnu_regex\regex_internal.h	/^} re_node_set;$/;"	t	typeref:struct:__anon28
re_node_set_add_intersect	.\ctags58\gnu_regex\regex_internal.c	/^re_node_set_add_intersect (re_node_set *dest, const re_node_set *src1,$/;"	f	file:	signature:(re_node_set *dest, const re_node_set *src1, const re_node_set *src2)
re_node_set_alloc	.\ctags58\gnu_regex\regex_internal.c	/^re_node_set_alloc (re_node_set *set, int size)$/;"	f	file:	signature:(re_node_set *set, int size)
re_node_set_compare	.\ctags58\gnu_regex\regex_internal.c	/^re_node_set_compare (const re_node_set *set1, const re_node_set *set2)$/;"	f	signature:(const re_node_set *set1, const re_node_set *set2)
re_node_set_contains	.\ctags58\gnu_regex\regex_internal.c	/^re_node_set_contains (const re_node_set *set, int elem)$/;"	f	signature:(const re_node_set *set, int elem)
re_node_set_empty	.\ctags58\gnu_regex\regex_internal.h	669;"	d
re_node_set_free	.\ctags58\gnu_regex\regex_internal.h	670;"	d
re_node_set_init_1	.\ctags58\gnu_regex\regex_internal.c	/^re_node_set_init_1 (re_node_set *set, int elem)$/;"	f	file:	signature:(re_node_set *set, int elem)
re_node_set_init_2	.\ctags58\gnu_regex\regex_internal.c	/^re_node_set_init_2 (re_node_set *set, int elem1, int elem2)$/;"	f	file:	signature:(re_node_set *set, int elem1, int elem2)
re_node_set_init_copy	.\ctags58\gnu_regex\regex_internal.c	/^re_node_set_init_copy (re_node_set *dest, const re_node_set *src)$/;"	f	file:	signature:(re_node_set *dest, const re_node_set *src)
re_node_set_init_empty	.\ctags58\gnu_regex\regex_internal.h	666;"	d
re_node_set_init_union	.\ctags58\gnu_regex\regex_internal.c	/^re_node_set_init_union (re_node_set *dest, const re_node_set *src1,$/;"	f	file:	signature:(re_node_set *dest, const re_node_set *src1, const re_node_set *src2)
re_node_set_insert	.\ctags58\gnu_regex\regex_internal.c	/^re_node_set_insert (re_node_set *set, int elem)$/;"	f	file:	signature:(re_node_set *set, int elem)
re_node_set_insert_last	.\ctags58\gnu_regex\regex_internal.c	/^re_node_set_insert_last (re_node_set *set, int elem)$/;"	f	file:	signature:(re_node_set *set, int elem)
re_node_set_merge	.\ctags58\gnu_regex\regex_internal.c	/^re_node_set_merge (re_node_set *dest, const re_node_set *src)$/;"	f	file:	signature:(re_node_set *dest, const re_node_set *src)
re_node_set_remove	.\ctags58\gnu_regex\regex_internal.h	667;"	d
re_node_set_remove_at	.\ctags58\gnu_regex\regex_internal.c	/^re_node_set_remove_at (re_node_set *set, int idx)$/;"	f	file:	signature:(re_node_set *set, int idx)
re_nsub	.\ctags58\gnu_regex\regex.h	/^  size_t re_nsub;$/;"	m	struct:re_pattern_buffer	access:public
re_pattern_buffer	.\ctags58\gnu_regex\regex.h	/^struct re_pattern_buffer$/;"	s
re_pattern_buffer::__REPB_PREFIX	.\ctags58\gnu_regex\regex.h	/^  __RE_TRANSLATE_TYPE __REPB_PREFIX(translate);$/;"	p	struct:re_pattern_buffer	access:public	signature:(translate)
re_pattern_buffer::__REPB_PREFIX	.\ctags58\gnu_regex\regex.h	/^  char *__REPB_PREFIX(fastmap);$/;"	p	struct:re_pattern_buffer	access:public	signature:(fastmap)
re_pattern_buffer::__REPB_PREFIX	.\ctags58\gnu_regex\regex.h	/^  reg_syntax_t __REPB_PREFIX(syntax);$/;"	p	struct:re_pattern_buffer	access:public	signature:(syntax)
re_pattern_buffer::__REPB_PREFIX	.\ctags58\gnu_regex\regex.h	/^  unsigned __REPB_PREFIX(can_be_null) : 1;$/;"	p	struct:re_pattern_buffer	access:public	signature:(can_be_null)
re_pattern_buffer::__REPB_PREFIX	.\ctags58\gnu_regex\regex.h	/^  unsigned __REPB_PREFIX(fastmap_accurate) : 1;$/;"	p	struct:re_pattern_buffer	access:public	signature:(fastmap_accurate)
re_pattern_buffer::__REPB_PREFIX	.\ctags58\gnu_regex\regex.h	/^  unsigned __REPB_PREFIX(newline_anchor) : 1;$/;"	p	struct:re_pattern_buffer	access:public	signature:(newline_anchor)
re_pattern_buffer::__REPB_PREFIX	.\ctags58\gnu_regex\regex.h	/^  unsigned __REPB_PREFIX(no_sub) : 1;$/;"	p	struct:re_pattern_buffer	access:public	signature:(no_sub)
re_pattern_buffer::__REPB_PREFIX	.\ctags58\gnu_regex\regex.h	/^  unsigned __REPB_PREFIX(not_bol) : 1;$/;"	p	struct:re_pattern_buffer	access:public	signature:(not_bol)
re_pattern_buffer::__REPB_PREFIX	.\ctags58\gnu_regex\regex.h	/^  unsigned __REPB_PREFIX(not_eol) : 1;$/;"	p	struct:re_pattern_buffer	access:public	signature:(not_eol)
re_pattern_buffer::__REPB_PREFIX	.\ctags58\gnu_regex\regex.h	/^  unsigned __REPB_PREFIX(regs_allocated) : 2;$/;"	p	struct:re_pattern_buffer	access:public	signature:(regs_allocated)
re_pattern_buffer::__REPB_PREFIX	.\ctags58\gnu_regex\regex.h	/^  unsigned char *__REPB_PREFIX(buffer);$/;"	p	struct:re_pattern_buffer	access:public	signature:(buffer)
re_pattern_buffer::__REPB_PREFIX	.\ctags58\gnu_regex\regex.h	/^  unsigned long int __REPB_PREFIX(allocated);$/;"	p	struct:re_pattern_buffer	access:public	signature:(allocated)
re_pattern_buffer::__REPB_PREFIX	.\ctags58\gnu_regex\regex.h	/^  unsigned long int __REPB_PREFIX(used);$/;"	p	struct:re_pattern_buffer	access:public	signature:(used)
re_pattern_buffer::re_nsub	.\ctags58\gnu_regex\regex.h	/^  size_t re_nsub;$/;"	m	struct:re_pattern_buffer	access:public
re_realloc	.\ctags58\gnu_regex\regex_internal.h	441;"	d
re_registers	.\ctags58\gnu_regex\regex.h	/^struct re_registers$/;"	s
re_registers::end	.\ctags58\gnu_regex\regex.h	/^  regoff_t *end;$/;"	m	struct:re_registers	access:public
re_registers::num_regs	.\ctags58\gnu_regex\regex.h	/^  unsigned num_regs;$/;"	m	struct:re_registers	access:public
re_registers::start	.\ctags58\gnu_regex\regex.h	/^  regoff_t *start;$/;"	m	struct:re_registers	access:public
re_search	.\ctags58\gnu_regex\regex.c	43;"	d	file:
re_search	.\ctags58\gnu_regex\regex.h	/^extern int re_search (struct re_pattern_buffer *__buffer, const char *__string,$/;"	p	signature:(struct re_pattern_buffer *__buffer, const char *__string, int __length, int __start, int __range, struct re_registers *__regs)
re_search_2	.\ctags58\gnu_regex\regex.c	48;"	d	file:
re_search_2	.\ctags58\gnu_regex\regex.h	/^extern int re_search_2 (struct re_pattern_buffer *__buffer,$/;"	p	signature:(struct re_pattern_buffer *__buffer, const char *__string1, int __length1, const char *__string2, int __length2, int __start, int __range, struct re_registers *__regs, int __stop)
re_search_2_stub	.\ctags58\gnu_regex\regexec.c	/^re_search_2_stub (bufp, string1, length1, string2, length2, start, range, regs,$/;"	f	file:
re_search_internal	.\ctags58\gnu_regex\regexec.c	/^re_search_internal (preg, string, length, start, range, stop, nmatch, pmatch,$/;"	f	file:
re_search_stub	.\ctags58\gnu_regex\regexec.c	/^re_search_stub (bufp, string, length, start, range, stop, regs, ret_len)$/;"	f	file:
re_set_fastmap	.\ctags58\gnu_regex\regcomp.c	/^re_set_fastmap (char *fastmap, int icase, int ch)$/;"	f	signature:(char *fastmap, int icase, int ch)
re_set_registers	.\ctags58\gnu_regex\regex.c	37;"	d	file:
re_set_registers	.\ctags58\gnu_regex\regex.h	/^extern void re_set_registers (struct re_pattern_buffer *__buffer,$/;"	p	signature:(struct re_pattern_buffer *__buffer, struct re_registers *__regs, unsigned int __num_regs, regoff_t *__starts, regoff_t *__ends)
re_set_registers	.\ctags58\gnu_regex\regexec.c	/^re_set_registers (bufp, regs, num_regs, starts, ends)$/;"	f
re_set_syntax	.\ctags58\gnu_regex\regex.c	47;"	d	file:
re_set_syntax	.\ctags58\gnu_regex\regex.h	/^extern reg_syntax_t re_set_syntax (reg_syntax_t __syntax);$/;"	p	signature:(reg_syntax_t __syntax)
re_sift_context_t	.\ctags58\gnu_regex\regex_internal.h	/^} re_sift_context_t;$/;"	t	typeref:struct:__anon37
re_state_table_entry	.\ctags58\gnu_regex\regex_internal.h	/^struct re_state_table_entry$/;"	s
re_state_table_entry::alloc	.\ctags58\gnu_regex\regex_internal.h	/^  int alloc;$/;"	m	struct:re_state_table_entry	access:public
re_state_table_entry::array	.\ctags58\gnu_regex\regex_internal.h	/^  re_dfastate_t **array;$/;"	m	struct:re_state_table_entry	access:public
re_state_table_entry::num	.\ctags58\gnu_regex\regex_internal.h	/^  int num;$/;"	m	struct:re_state_table_entry	access:public
re_str	.\ctags58\gnu_regex\regex_internal.h	/^  char* re_str;$/;"	m	struct:re_dfa_t	access:public
re_string_allocate	.\ctags58\gnu_regex\regex_internal.c	/^re_string_allocate (re_string_t *pstr, const char *str, int len, int init_len,$/;"	f	file:	signature:(re_string_t *pstr, const char *str, int len, int init_len, RE_TRANSLATE_TYPE trans, int icase, const re_dfa_t *dfa)
re_string_byte_at	.\ctags58\gnu_regex\regex_internal.h	417;"	d
re_string_char_size_at	.\ctags58\gnu_regex\regex_internal.h	/^re_string_char_size_at (const re_string_t *pstr, int idx)$/;"	f	signature:(const re_string_t *pstr, int idx)
re_string_construct	.\ctags58\gnu_regex\regex_internal.c	/^re_string_construct (re_string_t *pstr, const char *str, int len,$/;"	f	file:	signature:(re_string_t *pstr, const char *str, int len, RE_TRANSLATE_TYPE trans, int icase, const re_dfa_t *dfa)
re_string_construct_common	.\ctags58\gnu_regex\regex_internal.c	/^re_string_construct_common (const char *str, int len, re_string_t *pstr,$/;"	f	file:	signature:(const char *str, int len, re_string_t *pstr, RE_TRANSLATE_TYPE trans, int icase, const re_dfa_t *dfa)
re_string_context_at	.\ctags58\gnu_regex\regex_internal.c	/^re_string_context_at (const re_string_t *input, int idx, int eflags)$/;"	f	file:	signature:(const re_string_t *input, int idx, int eflags)
re_string_cur_idx	.\ctags58\gnu_regex\regex_internal.h	414;"	d
re_string_destruct	.\ctags58\gnu_regex\regex_internal.c	/^re_string_destruct (re_string_t *pstr)$/;"	f	file:	signature:(re_string_t *pstr)
re_string_elem_size_at	.\ctags58\gnu_regex\regex_internal.h	/^re_string_elem_size_at (const re_string_t *pstr, int idx)$/;"	f	signature:(const re_string_t *pstr, int idx)
re_string_eoi	.\ctags58\gnu_regex\regex_internal.h	413;"	d
re_string_fetch_byte	.\ctags58\gnu_regex\regex_internal.h	406;"	d
re_string_fetch_byte_case	.\ctags58\gnu_regex\regex_internal.c	/^re_string_fetch_byte_case (re_string_t *pstr)$/;"	f	signature:(re_string_t *pstr)
re_string_first_byte	.\ctags58\gnu_regex\regex_internal.h	408;"	d
re_string_get_buffer	.\ctags58\gnu_regex\regex_internal.h	415;"	d
re_string_is_single_byte_char	.\ctags58\gnu_regex\regex_internal.h	410;"	d
re_string_length	.\ctags58\gnu_regex\regex_internal.h	416;"	d
re_string_peek_byte	.\ctags58\gnu_regex\regex_internal.h	404;"	d
re_string_peek_byte_case	.\ctags58\gnu_regex\regex_internal.c	/^re_string_peek_byte_case (const re_string_t *pstr, int idx)$/;"	f	signature:(const re_string_t *pstr, int idx)
re_string_realloc_buffers	.\ctags58\gnu_regex\regex_internal.c	/^re_string_realloc_buffers (re_string_t *pstr, int new_buf_len)$/;"	f	file:	signature:(re_string_t *pstr, int new_buf_len)
re_string_reconstruct	.\ctags58\gnu_regex\regex_internal.c	/^re_string_reconstruct (re_string_t *pstr, int idx, int eflags)$/;"	f	file:	signature:(re_string_t *pstr, int idx, int eflags)
re_string_set_index	.\ctags58\gnu_regex\regex_internal.h	419;"	d
re_string_skip_bytes	.\ctags58\gnu_regex\regex_internal.h	418;"	d
re_string_skip_chars	.\ctags58\gnu_regex\regex_internal.c	/^re_string_skip_chars (re_string_t *pstr, int new_raw_idx, wint_t *last_wc)$/;"	f	file:	signature:(re_string_t *pstr, int new_raw_idx, wint_t *last_wc)
re_string_t	.\ctags58\gnu_regex\regex_internal.h	/^struct re_string_t$/;"	s
re_string_t	.\ctags58\gnu_regex\regex_internal.h	/^typedef struct re_string_t re_string_t;$/;"	t	typeref:struct:re_string_t
re_string_t::bufs_len	.\ctags58\gnu_regex\regex_internal.h	/^  int bufs_len;$/;"	m	struct:re_string_t	access:public
re_string_t::cur_idx	.\ctags58\gnu_regex\regex_internal.h	/^  int cur_idx;$/;"	m	struct:re_string_t	access:public
re_string_t::cur_state	.\ctags58\gnu_regex\regex_internal.h	/^  mbstate_t cur_state;$/;"	m	struct:re_string_t	access:public
re_string_t::icase	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned char icase;$/;"	m	struct:re_string_t	access:public
re_string_t::is_utf8	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned char is_utf8;$/;"	m	struct:re_string_t	access:public
re_string_t::len	.\ctags58\gnu_regex\regex_internal.h	/^  int len;$/;"	m	struct:re_string_t	access:public
re_string_t::map_notascii	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned char map_notascii;$/;"	m	struct:re_string_t	access:public
re_string_t::mb_cur_max	.\ctags58\gnu_regex\regex_internal.h	/^  int mb_cur_max;$/;"	m	struct:re_string_t	access:public
re_string_t::mbs	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned char *mbs;$/;"	m	struct:re_string_t	access:public
re_string_t::mbs_allocated	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned char mbs_allocated;$/;"	m	struct:re_string_t	access:public
re_string_t::newline_anchor	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned char newline_anchor;$/;"	m	struct:re_string_t	access:public
re_string_t::offsets	.\ctags58\gnu_regex\regex_internal.h	/^  int *offsets;$/;"	m	struct:re_string_t	access:public
re_string_t::offsets_needed	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned char offsets_needed;$/;"	m	struct:re_string_t	access:public
re_string_t::raw_len	.\ctags58\gnu_regex\regex_internal.h	/^  int raw_len;$/;"	m	struct:re_string_t	access:public
re_string_t::raw_mbs	.\ctags58\gnu_regex\regex_internal.h	/^  const unsigned char *raw_mbs;$/;"	m	struct:re_string_t	access:public
re_string_t::raw_mbs_idx	.\ctags58\gnu_regex\regex_internal.h	/^  int raw_mbs_idx;$/;"	m	struct:re_string_t	access:public
re_string_t::raw_stop	.\ctags58\gnu_regex\regex_internal.h	/^  int raw_stop;$/;"	m	struct:re_string_t	access:public
re_string_t::stop	.\ctags58\gnu_regex\regex_internal.h	/^  int stop;$/;"	m	struct:re_string_t	access:public
re_string_t::tip_context	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned int tip_context;$/;"	m	struct:re_string_t	access:public
re_string_t::trans	.\ctags58\gnu_regex\regex_internal.h	/^  RE_TRANSLATE_TYPE trans;$/;"	m	struct:re_string_t	access:public
re_string_t::valid_len	.\ctags58\gnu_regex\regex_internal.h	/^  int valid_len;$/;"	m	struct:re_string_t	access:public
re_string_t::valid_raw_len	.\ctags58\gnu_regex\regex_internal.h	/^  int valid_raw_len;$/;"	m	struct:re_string_t	access:public
re_string_t::wcs	.\ctags58\gnu_regex\regex_internal.h	/^  wint_t *wcs;$/;"	m	struct:re_string_t	access:public
re_string_t::word_char	.\ctags58\gnu_regex\regex_internal.h	/^  re_const_bitset_ptr_t word_char;$/;"	m	struct:re_string_t	access:public
re_string_t::word_ops_used	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned char word_ops_used;$/;"	m	struct:re_string_t	access:public
re_string_translate_buffer	.\ctags58\gnu_regex\regex_internal.c	/^re_string_translate_buffer (re_string_t *pstr)$/;"	f	file:	signature:(re_string_t *pstr)
re_string_wchar_at	.\ctags58\gnu_regex\regex_internal.h	/^re_string_wchar_at (const re_string_t *pstr, int idx)$/;"	f	signature:(const re_string_t *pstr, int idx)
re_sub_match_last_t	.\ctags58\gnu_regex\regex_internal.h	/^} re_sub_match_last_t;$/;"	t	typeref:struct:__anon34
re_sub_match_top_t	.\ctags58\gnu_regex\regex_internal.h	/^} re_sub_match_top_t;$/;"	t	typeref:struct:__anon35
re_token_t	.\ctags58\gnu_regex\regex_internal.h	/^} re_token_t;$/;"	t	typeref:struct:__anon31
re_token_type_t	.\ctags58\gnu_regex\regex_internal.h	/^} re_token_type_t;$/;"	t	typeref:enum:__anon29
readAndEmitTag	.\ctags58\ruby.c	/^static void readAndEmitTag (const unsigned char** cp, rubyKind expected_kind)$/;"	f	file:	signature:(const unsigned char** cp, rubyKind expected_kind)
readDirective	.\ctags58\get.c	/^static boolean readDirective (int c, char *const name, unsigned int maxLength)$/;"	f	file:	signature:(int c, char *const name, unsigned int maxLength)
readFeatureName	.\ctags58\eiffel.c	/^static boolean readFeatureName (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
readFieldValue	.\ctags58\readtags.c	/^static const char *readFieldValue ($/;"	f	file:	signature:( const tagEntry *const entry, const char *const key)
readFileName	.\ctags58\read.c	/^static vString *readFileName (void)$/;"	f	file:	signature:(void)
readIdentifier	.\ctags58\c.c	/^static void readIdentifier (tokenInfo *const token, const int firstChar)$/;"	f	file:	signature:(tokenInfo *const token, const int firstChar)
readIdentifier	.\ctags58\fortran.c	/^static void readIdentifier (tokenInfo *const token, const int c)$/;"	f	file:	signature:(tokenInfo *const token, const int c)
readIdentifier	.\ctags58\get.c	/^static void readIdentifier (int c, vString *const name)$/;"	f	file:	signature:(int c, vString *const name)
readIdentifier	.\ctags58\make.c	/^static void readIdentifier (const int first, vString *const id)$/;"	f	file:	signature:(const int first, vString *const id)
readIdentifier	.\ctags58\ocaml.c	/^static void readIdentifier (lexingState * st)$/;"	f	file:	signature:(lexingState * st)
readIdentifier	.\ctags58\scheme.c	/^static void readIdentifier (vString *const name, const unsigned char *cp)$/;"	f	file:	signature:(vString *const name, const unsigned char *cp)
readIdentifier	.\ctags58\verilog.c	/^static boolean readIdentifier (vString *const name, int c)$/;"	f	file:	signature:(vString *const name, int c)
readIgnoreList	.\ctags58\options.c	/^static void readIgnoreList (const char *const list)$/;"	f	file:	signature:(const char *const list)
readLine	.\ctags58\eiffel.c	/^extern char *readLine (vString *const vLine, FILE *const fp)$/;"	f	signature:(vString *const vLine, FILE *const fp)
readLine	.\ctags58\read.c	/^extern char *readLine (vString *const vLine, FILE *const fp)$/;"	f	signature:(vString *const vLine, FILE *const fp)
readLine	.\ctags58\read.h	/^extern char *readLine (vString *const vLine, FILE *const fp);$/;"	p	signature:(vString *const vLine, FILE *const fp)
readLineNumber	.\ctags58\read.c	/^static unsigned long readLineNumber (void)$/;"	f	file:	signature:(void)
readNext	.\ctags58\readtags.c	/^static tagResult readNext (tagFile *const file, tagEntry *const entry)$/;"	f	file:	signature:(tagFile *const file, tagEntry *const entry)
readOperator	.\ctags58\asm.c	/^static const unsigned char *readOperator ($/;"	f	file:	signature:( const unsigned char *const start, vString *const operator)
readOperator	.\ctags58\c.c	/^static void readOperator (statementInfo *const st)$/;"	f	file:	signature:(statementInfo *const st)
readOptionConfiguration	.\ctags58\options.c	/^extern void readOptionConfiguration (void)$/;"	f	signature:(void)
readOptionConfiguration	.\ctags58\options.h	/^extern void readOptionConfiguration (void);$/;"	p	signature:(void)
readPackageName	.\ctags58\c.c	/^static void readPackageName (tokenInfo *const token, const int firstChar)$/;"	f	file:	signature:(tokenInfo *const token, const int firstChar)
readPackageOrNamespace	.\ctags58\c.c	/^static void readPackageOrNamespace (statementInfo *const st, const declType declaration)$/;"	f	file:	signature:(statementInfo *const st, const declType declaration)
readParents	.\ctags58\c.c	/^static void readParents (statementInfo *const st, const int qualifier)$/;"	f	file:	signature:(statementInfo *const st, const int qualifier)
readPreProc	.\ctags58\asm.c	/^static boolean readPreProc (const unsigned char *const line)$/;"	f	file:	signature:(const unsigned char *const line)
readPseudoTags	.\ctags58\readtags.c	/^static void readPseudoTags (tagFile *const file, tagFileInfo *const info)$/;"	f	file:	signature:(tagFile *const file, tagFileInfo *const info)
readSourceLine	.\ctags58\read.c	/^extern char *readSourceLine ($/;"	f	signature:( vString *const vLine, fpos_t location, long *const pSeekValue)
readSourceLine	.\ctags58\read.h	/^extern char *readSourceLine (vString *const vLine, fpos_t location, long *const pSeekValue);$/;"	p	signature:(vString *const vLine, fpos_t location, long *const pSeekValue)
readSubToken	.\ctags58\fortran.c	/^static void readSubToken (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
readSymbol	.\ctags58\asm.c	/^static const unsigned char *readSymbol ($/;"	f	file:	signature:( const unsigned char *const start, vString *const sym)
readTagLine	.\ctags58\readtags.c	/^static int readTagLine (tagFile *const file)$/;"	f	file:	signature:(tagFile *const file)
readTagLineRaw	.\ctags58\readtags.c	/^static int readTagLineRaw (tagFile *const file)$/;"	f	file:	signature:(tagFile *const file)
readTagLineSeek	.\ctags58\readtags.c	/^static int readTagLineSeek (tagFile *const file, const off_t pos)$/;"	f	file:	signature:(tagFile *const file, const off_t pos)
readToken	.\ctags58\eiffel.c	/^static void readToken (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
readToken	.\ctags58\flex.c	/^static void readToken (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
readToken	.\ctags58\fortran.c	/^static void readToken (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
readToken	.\ctags58\jscript.c	/^static void readToken (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
readToken	.\ctags58\sql.c	/^static void readToken (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
readToken	.\ctags58\tex.c	/^static void readToken (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
readToken	.\ctags58\vhdl.c	/^static void readToken (tokenInfo * const token)$/;"	f	file:	signature:(tokenInfo * const token)
readVimLine	.\ctags58\vim.c	/^static const unsigned char * readVimLine (void)$/;"	f	file:	signature:(void)
read_config	.\vimfiles\bundle\command-t\vendor\vimball\vimball.rb	/^        def read_config(config)$/;"	f	class:Vimball
read_vimball	.\vimfiles\bundle\command-t\vendor\vimball\vimball.rb	/^    def read_vimball(file)$/;"	f
readdir	.\ctags58\e_mac.h	/^extern struct dirent* readdir(DIR* dirp);$/;"	p	signature:(DIR* dirp)
readdir	.\ctags58\mac.c	/^struct dirent *readdir(DIR *dirp)$/;"	f	signature:(DIR *dirp)
readfile	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\system\cache.vim	/^function! s:readfile(cache_dir, filename)$/;"	f
ready?	.\vimfiles\bundle\command-t\vendor\vimball\vimball.rb	/^    def ready?$/;"	f
realloc	.\ctags58\routines.h	/^extern void *realloc (void *ptr, size_t);$/;"	p	signature:(void *ptr, size_t)
recurse	.\ctags58\options.h	/^	boolean recurse;        \/* -R  recurse into directories *\/$/;"	m	struct:sOptionValues	access:public
recurseIntoDirectory	.\ctags58\main.c	/^static boolean recurseIntoDirectory (const char *const dirName)$/;"	f	file:	signature:(const char *const dirName)
recurseUsingOpendir	.\ctags58\main.c	/^static boolean recurseUsingOpendir (const char *const dirName)$/;"	f	file:	signature:(const char *const dirName)
recursive_match	.\vimfiles\bundle\command-t\ruby\command-t\match.c	/^double recursive_match(matchinfo_t *m,    \/\/ sharable meta-data$/;"	f	signature:(matchinfo_t *m, long haystack_idx, long needle_idx, long last_idx, double score)
redraw	.\vimfiles\bundle\command-t\ruby\command-t\prompt.rb	/^    def redraw$/;"	f	class:CommandT.Prompt
refresh	.\vimfiles\bundle\command-t\ruby\command-t\controller.rb	/^    def refresh$/;"	f	class:CommandT.Controller.quickfix
reg_errcode_t	.\ctags58\gnu_regex\regex.h	/^} reg_errcode_t;$/;"	t	typeref:enum:__anon25
reg_syntax_t	.\ctags58\gnu_regex\regex.h	/^typedef unsigned long int reg_syntax_t;$/;"	t
regcomp	.\ctags58\gnu_regex\regcomp.c	/^regcomp (preg, pattern, cflags)$/;"	f
regcomp	.\ctags58\gnu_regex\regex.c	34;"	d	file:
regcomp	.\ctags58\gnu_regex\regex.h	/^extern int regcomp (regex_t *__restrict __preg,$/;"	p	signature:(regex_t *__restrict __preg, const char *__restrict __pattern, int __cflags)
regerror	.\ctags58\gnu_regex\regex.c	35;"	d	file:
regerror	.\ctags58\gnu_regex\regex.h	/^extern size_t regerror (int __errcode, const regex_t *__restrict __preg,$/;"	p	signature:(int __errcode, const regex_t *__restrict __preg, char *__restrict __errbuf, size_t __errbuf_size)
regex	.\ctags58\parse.h	/^	boolean regex;                 \/* is this a regex parser? *\/$/;"	m	struct:__anon56	access:public
regexBroken	.\ctags58\lregex.c	/^static boolean regexBroken = FALSE;$/;"	v	file:
regexCallback	.\ctags58\parse.h	/^typedef void (*regexCallback) (const char *line, const regexMatch *matches, unsigned int count);$/;"	t
regexMatch	.\ctags58\parse.h	/^} regexMatch;$/;"	t	typeref:struct:__anon57
regexPattern	.\ctags58\lregex.c	/^} regexPattern;$/;"	t	typeref:struct:__anon43	file:
regex_t	.\ctags58\gnu_regex\regex.h	/^typedef struct re_pattern_buffer regex_t;$/;"	t	typeref:struct:re_pattern_buffer
regexec	.\ctags58\gnu_regex\regex.c	33;"	d	file:
regexec	.\ctags58\gnu_regex\regex.h	/^extern int regexec (const regex_t *__restrict __preg,$/;"	p	signature:(const regex_t *__restrict __preg, const char *__restrict __string, size_t __nmatch, regmatch_t __pmatch[__restrict_arr], int __eflags)
regexec	.\ctags58\gnu_regex\regexec.c	/^regexec (preg, string, nmatch, pmatch, eflags)$/;"	f
regfree	.\ctags58\gnu_regex\regcomp.c	/^regfree (preg)$/;"	f
regfree	.\ctags58\gnu_regex\regex.c	32;"	d	file:
regfree	.\ctags58\gnu_regex\regex.h	/^extern void regfree (regex_t *__preg);$/;"	p	signature:(regex_t *__preg)
register_for_key_presses	.\vimfiles\bundle\command-t\ruby\command-t\controller.rb	/^    def register_for_key_presses$/;"	f	class:CommandT.Controller.quickfix.ensure_appropriate_window_selection
register_state	.\ctags58\gnu_regex\regex_internal.c	/^register_state (const re_dfa_t *dfa, re_dfastate_t *newstate,$/;"	f	file:	signature:(const re_dfa_t *dfa, re_dfastate_t *newstate, unsigned int hash)
registryProperty	.\vim73\tools\xcmdsrv_client.c	/^static Atom	registryProperty = None;$/;"	v	file:
regmatch_t	.\ctags58\gnu_regex\regex.h	/^} regmatch_t;$/;"	t	typeref:struct:__anon26
regoff_t	.\ctags58\gnu_regex\regex.h	/^typedef int regoff_t;$/;"	t
regs	.\ctags58\gnu_regex\regex_internal.h	/^  regmatch_t *regs;$/;"	m	struct:re_fail_stack_ent_t	access:public
regs	.\ctags58\gnu_regex\regexec.c	/^    struct re_registers *regs;$/;"	v	typeref:struct:re_registers
reinitStatement	.\ctags58\c.c	/^static void reinitStatement (statementInfo *const st, const boolean partial)$/;"	f	file:	signature:(statementInfo *const st, const boolean partial)
relativeFilename	.\ctags58\routines.c	/^extern char* relativeFilename (const char *file, const char *dir)$/;"	f	signature:(const char *file, const char *dir)
relativeFilename	.\ctags58\routines.h	/^extern char* relativeFilename (const char *file, const char *dir);$/;"	p	signature:(const char *file, const char *dir)
relative_path_under_working_directory	.\vimfiles\bundle\command-t\ruby\command-t\vim\path_utilities.rb	/^      def relative_path_under_working_directory path$/;"	f	class:CommandT.VIM.PathUtilities
relativize_path	.\vimfiles\bundle\command-t\spec\vim_formatter.rb	/^        def relativize_path path$/;"	f	class:Spec.Runner.Formatter.VimFormatter
rememberMaxLengths	.\ctags58\entry.c	/^static void rememberMaxLengths (const size_t nameLength, const size_t lineLength)$/;"	f	file:	signature:(const size_t nameLength, const size_t lineLength)
remove	.\ctags58\general.h	/^extern int remove (const char *);$/;"	p	signature:(const char *)
removeLanguageExtensionMap	.\ctags58\parse.c	/^extern boolean removeLanguageExtensionMap (const char *const extension)$/;"	f	signature:(const char *const extension)
removeLanguageExtensionMap	.\ctags58\parse.h	/^extern boolean removeLanguageExtensionMap (const char *const extension);$/;"	p	signature:(const char *const extension)
remove_continuation	.\vim73\indent\make.vim	/^function s:remove_continuation(line)$/;"	f
repeat	.\vim73\ftplugin\cobol.vim	/^function! s:repeat(str,count)$/;"	f
replacementTruncate	.\ctags58\entry.c	/^static int replacementTruncate (const char *const name, const long size)$/;"	f	file:	signature:(const char *const name, const long size)
reportType	.\ctags58\eiffel.c	/^static void reportType (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
requestStrongPoping	.\ctags58\ocaml.c	/^static void requestStrongPoping ( void )$/;"	f	file:	signature:( void )
rescanParser	.\ctags58\parse.h	/^typedef boolean (*rescanParser) (const unsigned int passCount);$/;"	t
resizeTagFile	.\ctags58\entry.c	/^static void resizeTagFile (const long newSize)$/;"	f	file:	signature:(const long newSize)
resolveRequired	.\ctags58\get.c	/^	boolean resolveRequired;     \/* must resolve if\/else\/elif\/endif branch *\/$/;"	m	struct:sCppState	file:	access:public
restartStatement	.\ctags58\c.c	/^static void restartStatement (statementInfo *const st)$/;"	f	file:	signature:(statementInfo *const st)
restore	.\vimfiles\bundle\command-t\ruby\command-t\settings.rb	/^    def restore$/;"	f	class:CommandT.Settings
restore_window_dimensions	.\vimfiles\bundle\command-t\ruby\command-t\match_window.rb	/^    def restore_window_dimensions$/;"	f	class:CommandT.MatchWindow
retardToken	.\ctags58\c.c	/^static void retardToken (statementInfo *const st)$/;"	f	file:	signature:(statementInfo *const st)
rewinddir	.\ctags58\e_mac.h	/^extern void rewinddir(DIR* dirp);$/;"	p	signature:(DIR* dirp)
rewinddir	.\ctags58\mac.c	/^void rewinddir(DIR *dirp)$/;"	f	signature:(DIR *dirp)
right	.\ctags58\gnu_regex\regex_internal.h	/^  struct bin_tree_t *right;$/;"	m	struct:bin_tree_t	typeref:struct:bin_tree_t::bin_tree_t	access:public
rm_eo	.\ctags58\gnu_regex\regex.h	/^  regoff_t rm_eo;  \/* Byte offset from string's start to substring's end.  *\/$/;"	m	struct:__anon26	access:public
rm_so	.\ctags58\gnu_regex\regex.h	/^  regoff_t rm_so;  \/* Byte offset from string's start to substring's start.  *\/$/;"	m	struct:__anon26	access:public
rtp_add	.\vimfiles\bundle\vundle\autoload\vundle\config.vim	/^func! s:rtp_add(dir) abort$/;"	f
rtp_add_a	.\vimfiles\bundle\vundle\autoload\vundle\config.vim	/^func! s:rtp_add_a()$/;"	f
rtp_rm	.\vimfiles\bundle\vundle\autoload\vundle\config.vim	/^func! s:rtp_rm(dir) abort$/;"	f
rtp_rm_a	.\vimfiles\bundle\vundle\autoload\vundle\config.vim	/^func! s:rtp_rm_a()$/;"	f
rtpath	.\vimfiles\bundle\vundle\autoload\vundle\config.vim	/^func! s:rtpath(opts)$/;"	f
rubyKind	.\ctags58\ruby.c	/^} rubyKind;$/;"	t	typeref:enum:__anon77	file:
ruby_inspect	.\vimfiles\bundle\command-t\ruby\command-t\ext.h	36;"	d
ruby_minlines	.\vim73\syntax\ruby.vim	/^    let ruby_minlines = 50$/;"	v
rubycomplete#Complete	.\vim73\autoload\rubycomplete.vim	/^function! rubycomplete#Complete(findstart, base)$/;"	f
rubycomplete#Init	.\vim73\autoload\rubycomplete.vim	/^function! rubycomplete#Init()$/;"	f
run	.\vimfiles\bundle\command-t\vendor\vimball\vimball.rb	/^    def run$/;"	f
s	.\vim73\syntax\xpm.vim	/^	 let s = escape(s, '\/\\*^$.~[]')$/;"	v
s	.\vim73\syntax\xpm.vim	/^   let s = matchstr(getline(i), '".\\{-1,}"')$/;"	v
s	.\vim73\syntax\xpm2.vim	/^	let s = escape(s, '\/\\*^$.~[]')$/;"	v
s	.\vim73\syntax\xpm2.vim	/^	let s = substitute(s, "[ \\t][ \\t]*", "\\\\\\\\s\\\\\\\\+", "g")$/;"	v
s	.\vim73\syntax\xpm2.vim	/^      let s = matchstr(s, "^[^\\!]*")$/;"	v
s	.\vim73\syntax\xpm2.vim	/^    let s = getline(i)$/;"	v
s	.\vimfiles\bundle\tlib_vim\spec\tlib\rx.vim	/^    let s = printf('%sfoo%sbar%s', c, c, c)$/;"	v
s	.\vimfiles\bundle\tlib_vim\test\tlib.vim	/^    let s = printf('%sfoo%sbar%s', c, c, c)$/;"	v
s:AdaBlockStart	.\vim73\indent\ada.vim	/^   let s:AdaBlockStart = '^\\s*\\(if\\>\\|while\\>\\|else\\>\\|elsif\\>\\|loop\\>\\|for\\>.*\\<\\(loop\\|use\\)\\>\\|declare\\>\\|begin\\>\\|type\\>.*\\<is\\>[^;]*$\\|\\(type\\>.*\\)\\=\\<record\\>\\|procedure\\>\\|function\\>\\|accept\\>\\|do\\>\\|task\\>\\|package\\>\\|project\\>\\|then\\>\\|when\\>\\|is\\>\\)'$/;"	v
s:AdaBlockStart	.\vim73\indent\ada.vim	/^   let s:AdaBlockStart = '^\\s*\\(if\\>\\|while\\>\\|else\\>\\|elsif\\>\\|loop\\>\\|for\\>.*\\<\\(loop\\|use\\)\\>\\|declare\\>\\|begin\\>\\|type\\>.*\\<is\\>[^;]*$\\|\\(type\\>.*\\)\\=\\<record\\>\\|procedure\\>\\|function\\>\\|accept\\>\\|do\\>\\|task\\>\\|package\\>\\|then\\>\\|when\\>\\|is\\>\\)'$/;"	v
s:CACHE_DEBUG_TRACE	.\vimfiles\bundle\OmniCppComplete\autoload\omni\common\debug.vim	/^let s:CACHE_DEBUG_TRACE = []$/;"	v
s:CACHE_OVERLOADED_FUNCTIONS	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\complete.vim	/^let s:CACHE_OVERLOADED_FUNCTIONS = {}$/;"	v
s:CACHE_TAG_ENV	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\complete.vim	/^let s:CACHE_TAG_ENV = ''$/;"	v
s:CACHE_TAG_FILES	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\complete.vim	/^let s:CACHE_TAG_FILES = {}$/;"	v
s:CACHE_TAG_POPUP_ITEMS	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\complete.vim	/^let s:CACHE_TAG_POPUP_ITEMS = {}$/;"	v
s:Cache	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\cache.vim	/^let s:Cache = vital#of('neocomplcache').import('System.Cache')$/;"	v
s:ColonEnd	.\vim73\indent\occam.vim	/^let s:ColonEnd = '\\(--.*\\)\\@<!:\\s*\\(--.*\\)\\=$'$/;"	v
s:ColonIndent	.\vim73\indent\occam.vim	/^let s:ColonIndent = '\\(--.*\\)\\@<!\\<PROC\\>'$/;"	v
s:ColonNonColonEndIndent	.\vim73\indent\occam.vim	/^let s:ColonNonColonEndIndent = '^\\C\\s*PROTOCOL\\>\\|\\(--.*\\)\\@<!\\<\\(\\(CHAN\\|DATA\\)\\s\\+TYPE\\|FUNCTION\\)\\>'$/;"	v
s:ColonStart	.\vim73\indent\occam.vim	/^let s:ColonStart = '^\\s*:\\s*\\(--.*\\)\\=$'$/;"	v
s:CommentLine	.\vim73\indent\occam.vim	/^let s:CommentLine = '^\\s*--'$/;"	v
s:ERROR	.\vim73\autoload\netrw.vim	/^ let s:ERROR   = 2$/;"	v
s:ERROR	.\vim73\autoload\vimball.vim	/^ let s:ERROR   = 2$/;"	v
s:ERROR	.\vim73\autoload\zip.vim	/^let s:ERROR          = 2$/;"	v
s:ES	.\vim73\indent\vhdl.vim	/^let s:ES = '\\s*\\%(--.*\\)\\=$'$/;"	v
s:FirstLevelIndent	.\vim73\indent\occam.vim	/^let s:FirstLevelIndent = '^\\C\\s*\\(IF\\|ALT\\|PRI\\s\\+ALT\\|PAR\\|SEQ\\|PRI\\s\\+PAR\\|WHILE\\|VALOF\\|CLAIM\\|FORKING\\)\\>\\|\\(--.*\\)\\@<!\\(\\<PROC\\>\\|??\\|\\<CASE\\>\\s*\\(--.*\\)\\=\\_$\\)'$/;"	v
s:FirstLevelNonColonEndIndent	.\vim73\indent\occam.vim	/^let s:FirstLevelNonColonEndIndent = '^\\C\\s*PROTOCOL\\>\\|\\(--.*\\)\\@<!\\<\\(\\(CHAN\\|DATA\\)\\s\\+TYPE\\|FUNCTION\\)\\>'$/;"	v
s:Fold_Collate	.\vim73\autoload\ada.vim	/^      let s:Fold_Collate .= '\\s\\+\\<begin\\>$\\|'$/;"	v
s:Fold_Collate	.\vim73\autoload\ada.vim	/^      let s:Fold_Collate .= '\\s\\+\\<exception\\>$\\|'$/;"	v
s:Fold_Collate	.\vim73\autoload\ada.vim	/^      let s:Fold_Collate .= '\\s\\+\\<is\\>$\\|'$/;"	v
s:Fold_Collate	.\vim73\autoload\ada.vim	/^      let s:Fold_Collate .= '\\s\\+\\<private\\>$\\|'$/;"	v
s:Fold_Collate	.\vim73\autoload\ada.vim	/^   let s:Fold_Collate .= '--\\)'$/;"	v
s:Fold_Collate	.\vim73\autoload\ada.vim	/^   let s:Fold_Collate = '^\\([;)]*$\\|'$/;"	v
s:Help	.\vimfiles\bundle\tlib_vim\autoload\tlib\Filter_cnfd.vim	/^let s:Help = s:prototype.Help$/;"	v
s:Help	.\vimfiles\bundle\tlib_vim\autoload\tlib\Filter_fuzzy.vim	/^let s:Help = s:prototype.Help$/;"	v
s:HtmlEndline	.\vim73\syntax\2html.vim	/^  let s:HtmlEndline = '<br' . s:tag_close$/;"	v
s:HtmlEndline	.\vim73\syntax\2html.vim	/^let s:HtmlEndline = ''$/;"	v
s:HtmlSpace	.\vim73\syntax\2html.vim	/^  let s:HtmlSpace = '\\' . s:LeadingSpace$/;"	v
s:HtmlSpace	.\vim73\syntax\2html.vim	/^let s:HtmlSpace = ' '$/;"	v
s:LeadingSpace	.\vim73\syntax\2html.vim	/^  let s:LeadingSpace = '&nbsp;'$/;"	v
s:LeadingSpace	.\vim73\syntax\2html.vim	/^let s:LeadingSpace = ' '$/;"	v
s:List	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\omni_complete.vim	/^let s:List = vital#of('neocomplcache').import('Data.List')$/;"	v
s:List	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\util.vim	/^let s:List = vital#of('neocomplcache').import('Data.List')$/;"	v
s:NC	.\vim73\indent\vhdl.vim	/^let s:NC = '\\%(--.*\\)\\@<!'$/;"	v
s:NE	.\vim73\indent\vhdl.vim	/^let s:NE = '\\%(\\<end\\s\\+\\)\\@<!'$/;"	v
s:NOTE	.\vim73\autoload\netrw.vim	/^ let s:NOTE    = 0$/;"	v
s:NOTE	.\vim73\autoload\zip.vim	/^let s:NOTE           = 0$/;"	v
s:OmniCpp_ShowAccess	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\complete.vim	/^let s:OmniCpp_ShowAccess = g:OmniCpp_ShowAccess$/;"	v
s:OmniCpp_ShowPrototypeInAbbr	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\complete.vim	/^let s:OmniCpp_ShowPrototypeInAbbr = g:OmniCpp_ShowPrototypeInAbbr$/;"	v
s:OmniCpp_ShowScopeInAbbr	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\complete.vim	/^let s:OmniCpp_ShowScopeInAbbr = g:OmniCpp_ShowScopeInAbbr$/;"	v
s:PHP_startindenttag	.\vim73\indent\php.vim	/^let s:PHP_startindenttag = '<?\\%(.*?>\\)\\@!\\|<script[^>]*>\\%(.*<\\\/script>\\)\\@!'$/;"	v
s:ReferenceName	.\vim73\syntax\rst.vim	/^let s:ReferenceName = '[[:alnum:]]\\+\\%([_.-][[:alnum:]]\\+\\)*'$/;"	v
s:SQLBlockEnd	.\vim73\indent\sqlanywhere.vim	/^let s:SQLBlockEnd = '^\\s*\\(end\\)\\>'$/;"	v
s:SQLBlockStart	.\vim73\indent\sqlanywhere.vim	/^let s:SQLBlockStart = '^\\s*\\%('.$/;"	v
s:SecondLevelIndent	.\vim73\indent\occam.vim	/^let s:SecondLevelIndent = '^\\C\\s*\\(IF\\|ALT\\|PRI\\s\\+ALT\\)\\>\\|\\(--.*\\)\\@<!?\\s*\\<CASE\\>\\s*\\(--.*\\)\\=\\_$'$/;"	v
s:SecondLevelNonColonEndIndent	.\vim73\indent\occam.vim	/^let s:SecondLevelNonColonEndIndent = '\\(--.*\\)\\@<!\\<\\(CHAN\\|DATA\\)\\s\\+TYPE\\>'$/;"	v
s:USAGE	.\vim73\autoload\vimball.vim	/^ let s:USAGE   = 0$/;"	v
s:V	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\util.vim	/^let s:V = vital#of('neocomplcache')$/;"	v
s:WARNING	.\vim73\autoload\netrw.vim	/^ let s:WARNING = 1$/;"	v
s:WARNING	.\vim73\autoload\vimball.vim	/^ let s:WARNING = 1$/;"	v
s:WARNING	.\vim73\autoload\zip.vim	/^let s:WARNING        = 1$/;"	v
s:adverbs	.\vim73\syntax\perl6.vim	/^    let s:adverbs = [$/;"	v
s:after	.\vim73\syntax\perl6.vim	/^    let s:after  = "\\\\%(\\\\_s*:!\\\\?\\\\K\\\\%(\\\\k\\\\|[-']\\\\K\\\\@=\\\\)*\\\\%(([^)]*)\\\\|\\\\[[^\\\\]]*]\\\\|<[^>]*>\\\\|Â«[^Â»]*Â»\\\\|{[^}]*}\\\\)\\\\?\\\\)*\\\\_s*\\\\)\\\\@<="$/;"	v
s:after_keyword	.\vim73\syntax\perl6.vim	/^let s:after_keyword = "\\\\)\\\\%(\\\\k\\\\|[-']\\\\K\\\\@=\\\\)\\\\@!\\""$/;"	v
s:allfolds	.\vim73\syntax\2html.vim	/^let s:allfolds = []$/;"	v
s:ant_cpo_save	.\vim73\syntax\ant.vim	/^let s:ant_cpo_save = &cpo$/;"	v
s:assignment_rx	.\vim73\indent\make.vim	/^let s:assignment_rx = '^\\s*\\h\\w*\\s*[+?]\\==\\s*\\zs.*\\\\$'$/;"	v
s:async_dictionary_list	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\buffer_complete.vim	/^  let s:async_dictionary_list = {}$/;"	v
s:async_dictionary_list	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\dictionary_complete.vim	/^  let s:async_dictionary_list = {}$/;"	v
s:async_tags_list	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\tags_complete.vim	/^  let s:async_tags_list = {}$/;"	v
s:attr	.\vim73\syntax\2html.vim	/^  let s:attr = ""$/;"	v
s:attr	.\vim73\syntax\2html.vim	/^  let s:attr = s:CSS1(s:id)$/;"	v
s:attributes	.\vim73\indent\haml.vim	/^let s:attributes = '\\%({.\\{-\\}}\\|\\[.\\{-\\}\\]\\)'$/;"	v
s:autoinstall	.\vim73\autoload\getscript.vim	/^  let s:autoinstall= $HOME."\/".s:dotvim$/;"	v
s:autoinstall	.\vim73\autoload\getscript.vim	/^  let s:autoinstall= g:GetLatestVimScripts_autoinstalldir"$/;"	v
s:autoinstall	.\vim73\autoload\getscript.vim	/^let s:autoinstall= ""$/;"	v
s:autoresetoptions	.\vim73\indent\php.vim	/^    let s:autoresetoptions = 1$/;"	v
s:autoresetoptions	.\vim73\indent\php.vim	/^let s:autoresetoptions = 0$/;"	v
s:bMayComplete	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\complete.vim	/^let s:bMayComplete = 0$/;"	v
s:bar	.\vimfiles\bundle\tlib_vim\spec\tlib\var.vim	/^let s:bar = 4$/;"	v
s:bar	.\vimfiles\bundle\tlib_vim\test\tlib.vim	/^let s:bar = 4$/;"	v
s:base	.\vimfiles\bundle\tlib_vim\autoload\tlib\signs.vim	/^let s:base = 2327$/;"	v
s:beflet	.\vim73\indent\ocaml.vim	/^let s:beflet = '^\\s*\\(initializer\\|method\\|try\\)\\|\\(\\<\\(begin\\|do\\|else\\|in\\|then\\|try\\)\\|->\\|<-\\|=\\|;\\|(\\)\\s*$'$/;"	v
s:beflet	.\vim73\indent\sml.vim	/^let s:beflet = '^\\s*\\(initializer\\|method\\|try\\)\\|\\(\\<\\(begin\\|do\\|else\\|in\\|then\\|try\\)\\|->\\|;\\)\\s*$'$/;"	v
s:before	.\vim73\syntax\perl6.vim	/^    let s:before = "syn region p6StringQ matchgroup=p6Quote start=\\"\\\\%("$/;"	v
s:before_keyword	.\vim73\syntax\perl6.vim	/^let s:before_keyword = " display \\"\\\\%(\\\\k\\\\|\\\\K\\\\@<=[-']\\\\)\\\\@<!\\\\%("$/;"	v
s:bgc	.\vim73\syntax\2html.vim	/^  let s:bgc = ( &background == "dark" ? "#000000" : "#ffffff" )$/;"	v
s:bgc	.\vim73\syntax\2html.vim	/^let s:bgc = s:HtmlColor(synIDattr(hlID("Normal"), "bg#", s:whatterm))$/;"	v
s:block_regex	.\vim73\indent\ruby.vim	/^let s:block_regex =$/;"	v
s:blockstart	.\vim73\indent\php.vim	/^let s:blockstart = '\\%(\\%(\\%(}\\s*\\)\\=else\\%(\\s\\+\\)\\=\\)\\=if\\>\\|else\\>\\|while\\>\\|switch\\>\\|case\\>\\|default\\>\\|for\\%(each\\)\\=\\>\\|declare\\>\\|class\\>\\|interface\\>\\|abstract\\>\\|try\\>\\|catch\\>\\)'$/;"	v
s:bmenu_wait	.\vim73\menu.vim	/^let s:bmenu_wait = 1$/;"	v
s:bmru	.\vimfiles\bundle\tlib_vim\autoload\tlib\buffer.vim	/^let s:bmru = []$/;"	v
s:both	.\vim73\syntax\perl6.vim	/^let s:both = [s:infix_a_pattern, s:infix_n_pattern]$/;"	v
s:browsefilter	.\vim73\ftplugin\ant.vim	/^    let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	.\vim73\ftplugin\ant.vim	/^let s:browsefilter = "XML Files (*.xml)\\t*.xml\\n" .$/;"	v
s:browsefilter	.\vim73\ftplugin\aspvbs.vim	/^    let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	.\vim73\ftplugin\aspvbs.vim	/^let s:browsefilter = "HTML Files (*.html, *.htm)\\t*.htm*\\n" .$/;"	v
s:browsefilter	.\vim73\ftplugin\config.vim	/^    let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	.\vim73\ftplugin\config.vim	/^let s:browsefilter = "Bourne Shell Files (*.sh)\\t*.sh\\n" .$/;"	v
s:browsefilter	.\vim73\ftplugin\eruby.vim	/^  let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	.\vim73\ftplugin\eruby.vim	/^  let s:browsefilter = substitute(b:browsefilter,'\\cAll Files (\\*\\.\\*)\\t\\*\\.\\*\\n','','') . s:browsefilter$/;"	v
s:browsefilter	.\vim73\ftplugin\eruby.vim	/^let s:browsefilter = "All Files (*.*)\\t*.*\\n"$/;"	v
s:browsefilter	.\vim73\ftplugin\haml.vim	/^  let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	.\vim73\ftplugin\haml.vim	/^  let s:browsefilter = substitute(b:browsefilter,'\\cAll Files (\\*\\.\\*)\\t\\*\\.\\*\\n','','') . s:browsefilter$/;"	v
s:browsefilter	.\vim73\ftplugin\haml.vim	/^let s:browsefilter = "All Files (*.*)\\t*.*\\n"$/;"	v
s:browsefilter	.\vim73\ftplugin\jsp.vim	/^    let s:browsefilter = b:browsefilter . s:browsefilter$/;"	v
s:browsefilter	.\vim73\ftplugin\jsp.vim	/^    let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	.\vim73\ftplugin\jsp.vim	/^let s:browsefilter = "Java Files (*.java)\\t*.java\\n" .$/;"	v
s:browsefilter	.\vim73\ftplugin\php.vim	/^    let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	.\vim73\ftplugin\php.vim	/^let s:browsefilter = "HTML Files (*.html, *.htm)\\t*.html;*.htm\\n" .$/;"	v
s:browsefilter	.\vim73\ftplugin\sgml.vim	/^    let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	.\vim73\ftplugin\sgml.vim	/^let s:browsefilter = "XML Files (*.xml)\\t*.xml\\n" .$/;"	v
s:browsefilter	.\vim73\ftplugin\svg.vim	/^    let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	.\vim73\ftplugin\svg.vim	/^let s:browsefilter = "XML Files (*.xml)\\t*.xml\\n" .$/;"	v
s:browsefilter	.\vim73\ftplugin\tcsh.vim	/^    let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	.\vim73\ftplugin\tcsh.vim	/^let s:browsefilter = "csh Files (*.csh)\\t*.csh\\n" .$/;"	v
s:browsefilter	.\vim73\ftplugin\xhtml.vim	/^    let s:browsefilter = b:browsefilter . s:browsefilter$/;"	v
s:browsefilter	.\vim73\ftplugin\xhtml.vim	/^    let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	.\vim73\ftplugin\xhtml.vim	/^let s:browsefilter = "HTML Files (*.html, *.htm)\\t*.html;*.htm\\n" .$/;"	v
s:browsefilter	.\vim73\ftplugin\xsd.vim	/^    let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	.\vim73\ftplugin\xsd.vim	/^let s:browsefilter = "XML Files (*.xml)\\t*.xml\\n" .$/;"	v
s:buffer_sources	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\buffer_complete.vim	/^  let s:buffer_sources = {}$/;"	v
s:bundle	.\vimfiles\bundle\vundle\autoload\vundle\config.vim	/^let s:bundle = {}$/;"	v
s:byte_pattern	.\vim73\syntax\cdrtoc.vim	/^let s:byte_pattern = '\\<\\%([01]\\=\\d\\{1,2}\\|2\\%([0-4]\\d\\|5[0-5]\\)\\)\\>'$/;"	v
s:c	.\vimfiles\bundle\vim-addon-mw-utils\autoload\cached_file_contents.vim	/^let s:c['cache_dir'] = get(s:c, 'cache_dir', expand('$HOME').'\/.vim-cache')$/;"	v
s:c	.\vimfiles\bundle\vim-addon-mw-utils\autoload\cached_file_contents.vim	/^let s:c['scanned_files'] = get(s:c, 'scanned_files', {})$/;"	v
s:c	.\vimfiles\bundle\vim-addon-mw-utils\autoload\glob.vim	/^let s:c['glob_cache'] = get(s:c, 'glob_cache', {})$/;"	v
s:c	.\vimfiles\bundle\vim-addon-mw-utils\autoload\glob.vim	/^let s:c['regex_ignore_directory'] = '\\<\\%([_.]darcs\\|\\.git\\|.svn\\|.hg\\|.cvs\\|.bzr\\)\\>'$/;"	v
s:c	.\vimfiles\bundle\vim-snipmate\autoload\snipMate.vim	/^	let s:c.scope_aliases.cpp = get(s:c.scope_aliases, 'cpp', 'c')$/;"	v
s:c	.\vimfiles\bundle\vim-snipmate\autoload\snipMate.vim	/^	let s:c.scope_aliases.cu = get(s:c.scope_aliases, 'cu', 'c')$/;"	v
s:c	.\vimfiles\bundle\vim-snipmate\autoload\snipMate.vim	/^	let s:c.scope_aliases.eruby = get(s:c.scope_aliases, 'eruby', 'eruby-rails,html')$/;"	v
s:c	.\vimfiles\bundle\vim-snipmate\autoload\snipMate.vim	/^	let s:c.scope_aliases.html = get(s:c.scope_aliases, 'html', 'javascript')$/;"	v
s:c	.\vimfiles\bundle\vim-snipmate\autoload\snipMate.vim	/^	let s:c.scope_aliases.mxml = get(s:c.scope_aliases, 'mxml', 'actionscript')$/;"	v
s:c	.\vimfiles\bundle\vim-snipmate\autoload\snipMate.vim	/^	let s:c.scope_aliases.objc = get(s:c.scope_aliases, 'objc', 'c')$/;"	v
s:c	.\vimfiles\bundle\vim-snipmate\autoload\snipMate.vim	/^	let s:c.scope_aliases.php = get(s:c.scope_aliases, 'php', 'php,html,javascript')$/;"	v
s:c	.\vimfiles\bundle\vim-snipmate\autoload\snipMate.vim	/^	let s:c.scope_aliases.ur = get(s:c.scope_aliases, 'ur', 'html,javascript')$/;"	v
s:c	.\vimfiles\bundle\vim-snipmate\autoload\snipMate.vim	/^	let s:c.scope_aliases.xhtml = get(s:c.scope_aliases, 'xhtml', 'html')$/;"	v
s:c	.\vimfiles\bundle\vim-snipmate\autoload\snipMate.vim	/^let s:c = g:snipMate$/;"	v
s:c	.\vimfiles\bundle\vim-snipmate\autoload\snipMate.vim	/^let s:c.cache_parsed_snippets_on_disk = get(s:c, 'cache_parsed_snippets_on_disk', 0)$/;"	v
s:c	.\vimfiles\bundle\vim-snipmate\autoload\snipMate.vim	/^let s:c.read_snippets_cached = get(s:c, 'read_snippets_cached', {'func' : function('snipMate#ReadSnippetsFile'), 'version': 3, 'use_file_cache': s:c.cache_parsed_snippets_on_disk})$/;"	v
s:c	.\vimfiles\bundle\vim-snipmate\autoload\snipMate.vim	/^let s:c.scope_aliases = get(s:c, 'scope_aliases', {})$/;"	v
s:c	.\vimfiles\bundle\vim-snipmate\autoload\snipMate.vim	/^let s:c['no_match_completion_feedkeys_chars'] = get(s:c, 'no_match_completion_feedkeys_chars', "\\t")$/;"	v
s:cache_list	.\vim73\autoload\syntaxcomplete.vim	/^let s:cache_list = []$/;"	v
s:cache_name	.\vim73\autoload\syntaxcomplete.vim	/^let s:cache_name = []$/;"	v
s:cached_files	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\filename_complete.vim	/^let s:cached_files = {}$/;"	v
s:class	.\vim73\ftplugin\php.vim	/^let s:class = '\\(abstract\\s\\+\\|final\\s\\+\\)*class'$/;"	v
s:cmd1	.\vimfiles\bundle\tlib_vim\autoload\tlib\vcs.vim	/^            let s:cmd1 = printf(g:tlib#vcs#check, s:cmd)$/;"	v
s:code	.\vim73\ftplugin\ruby.vim	/^    let s:code = "print ($: + begin; require %q{rubygems}; Gem.all_load_paths.sort.uniq; rescue LoadError; []; end).join(%q{,})"$/;"	v
s:col	.\vim73\syntax\2html.vim	/^	let s:col = s:col + 1$/;"	v
s:col	.\vim73\syntax\2html.vim	/^    let s:col = 1$/;"	v
s:comment_rx	.\vim73\indent\make.vim	/^let s:comment_rx = '^\\s*#'$/;"	v
s:concealinfo	.\vim73\syntax\2html.vim	/^	let s:concealinfo = synconcealed(s:lnum, s:col)$/;"	v
s:concealinfo	.\vim73\syntax\2html.vim	/^    let s:concealinfo = [0, '']$/;"	v
s:conditionalEnd	.\vim73\ftplugin\matlab.vim	/^	let s:conditionalEnd = '\\(([^()]*\\)\\@!\\<end\\>\\([^()]*)\\)\\@!'$/;"	v
s:conditional_directive_rx	.\vim73\indent\make.vim	/^let s:conditional_directive_rx = '^ *\\%(ifn\\=\\%(eq\\|def\\)\\|else\\)\\>'$/;"	v
s:continuation_regex	.\vim73\indent\ruby.vim	/^let s:continuation_regex = '\\%([\\\\*+\/.,:]\\|\\%(<%\\)\\@<![=-]\\|\\W[|&?]\\|||\\|&&\\)\\s*\\%(#.*\\)\\=$'$/;"	v
s:continuation_regex2	.\vim73\indent\ruby.vim	/^let s:continuation_regex2 =$/;"	v
s:continuation_rx	.\vim73\indent\make.vim	/^let s:continuation_rx = '\\\\$'$/;"	v
s:continued_rule_rx	.\vim73\indent\make.vim	/^let s:continued_rule_rx = '^[^#:]*:\\{1,2}\\%([^=:]\\|$\\)'$/;"	v
s:converter	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters\converter_abbr.vim	/^let s:converter = {$/;"	v
s:converter	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters\converter_case.vim	/^let s:converter = {$/;"	v
s:converter	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters\converter_delimiter.vim	/^let s:converter = {$/;"	v
s:converter	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters\converter_nothing.vim	/^let s:converter = {$/;"	v
s:converter	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters\converter_remove_next_keyword.vim	/^let s:converter = {$/;"	v
s:cpo_sav	.\vim73\autoload\tohtml.vim	/^let s:cpo_sav = &cpo$/;"	v
s:cpo_sav	.\vim73\syntax\2html.vim	/^let s:cpo_sav = &cpo$/;"	v
s:cpo_save	.\vim73\compiler\ant.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\compiler\bdf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\compiler\cucumber.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\compiler\eruby.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\compiler\fortran_g77.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\compiler\gcc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\compiler\mcs.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\compiler\onsgmls.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\compiler\php.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\compiler\rspec.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\compiler\rst.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\compiler\ruby.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\compiler\rubyunit.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\compiler\se.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\compiler\splint.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\compiler\tex.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\compiler\xmllint.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\compiler\xmlwf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\filetype.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\a2ps.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\abaqus.vim	/^let s:cpo_save = &cpoptions$/;"	v
s:cpo_save	.\vim73\ftplugin\alsaconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\arch.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\automake.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\bdf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\c.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\calendar.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\cdrdaoconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\changelog.vim	/^  let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\cobol.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\conf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\context.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\crm.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\css.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\cvsrc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\denyhosts.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\dictconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\dictdconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\dircolors.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\dosini.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\dtrace.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\elinks.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\eterm.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\fetchmail.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\framescript.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\gpg.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\group.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\grub.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\haskell.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\help.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\hostconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\hostsaccess.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\indent.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\javascript.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\kconfig.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\ld.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\lftp.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\libao.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\limits.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\loginaccess.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\logindefs.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\m4.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\mailaliases.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\mailcap.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\manconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\mf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\modconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\mp.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\mplayerconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\msmessages.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\muttrc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\nanorc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\netrc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\nsis.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\pamconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\passwd.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\pinfo.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\procmail.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\prolog.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\protocols.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\quake.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\racc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\readline.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\rnc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\rst.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\ruby.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\screen.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\sensors.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\services.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\setserial.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\sieve.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\slpconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\slpreg.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\slpspi.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\sshconfig.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\sudoers.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\sysctl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\tcl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\terminfo.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\udevconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\udevperm.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\udevrules.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\updatedb.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\vb.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\verilog.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\vim.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\xdefaults.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\xf86conf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\xinetd.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\xmodmap.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\yaml.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\ftplugin\zsh.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\indent\dtd.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\indent\html.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\indent\perl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\indent\perl6.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\indent\ruby.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\indent\sh.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\menu.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\optwin.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\plugin\matchparen.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\scripts.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\synmenu.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\a2ps.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\aap.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\alsaconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\arch.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\autohotkey.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\bdf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\calendar.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\cdrdaoconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\cdrtoc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\chordpro.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\cmusrc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\context.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\crm.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\cvsrc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\denyhosts.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\dictconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\dictdconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\dircolors.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\doxygen.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\elinks.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\eterm.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\fetchmail.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\framescript.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\gpg.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\group.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\grub.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\hostconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\indent.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\initex.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\kconfig.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\ld.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\ldapconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\lftp.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\libao.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\limits.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\litestep.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\loginaccess.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\logindefs.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\lynx.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\mailaliases.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\manconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\messages.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\modconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\mplayerconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\nanorc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\netrc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\pamconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\passwd.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\pinfo.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\plaintex.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\privoxy.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\protocols.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\quake.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\racc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\readline.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\rnc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\rst.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\screen.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\sensors.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\services.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\setserial.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\sieve.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\slpconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\slpreg.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\slpspi.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\sudoers.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\synload.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\sysctl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\terminfo.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\udevconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\udevperm.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\udevrules.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\updatedb.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\xbl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\xinetd.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\xmodmap.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\yaml.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\vim73\syntax\zsh.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpoptions	.\vim73\ftplugin\ada.vim	/^let s:cpoptions = &cpoptions$/;"	v
s:cposet	.\vim73\compiler\fortran_F.vim	/^let s:cposet=&cpoptions$/;"	v
s:cposet	.\vim73\compiler\fortran_cv.vim	/^let s:cposet = &cpoptions$/;"	v
s:cposet	.\vim73\compiler\fortran_elf90.vim	/^let s:cposet=&cpoptions$/;"	v
s:cposet	.\vim73\compiler\fortran_lf95.vim	/^let s:cposet=&cpoptions$/;"	v
s:cposet	.\vim73\ftplugin\fortran.vim	/^let s:cposet=&cpoptions$/;"	v
s:cposet	.\vim73\ftplugin\ocaml.vim	/^let s:cposet=&cpoptions$/;"	v
s:cposet	.\vim73\indent\fortran.vim	/^let s:cposet=&cpoptions$/;"	v
s:cppKeyword	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\tokenizer.vim	/^let s:cppKeyword = ['asm', 'auto', 'bool', 'break', 'case', 'catch', 'char', 'class', 'const', 'const_cast', 'continue', 'default', 'delete', 'do', 'double', 'dynamic_cast', 'else', 'enum', 'explicit', 'export', 'extern', 'false', 'float', 'for', 'friend', 'goto', 'if', 'inline', 'int', 'long', 'mutable', 'namespace', 'new', 'operator', 'private', 'protected', 'public', 'register', 'reinterpret_cast', 'return', 'short', 'signed', 'sizeof', 'static', 'static_cast', 'struct', 'switch', 'template', 'this', 'throw', 'true', 'try', 'typedef', 'typeid', 'typename', 'union', 'unsigned', 'using', 'virtual', 'void', 'volatile', 'wchar_t', 'while', 'and', 'and_eq', 'bitand', 'bitor', 'compl', 'not', 'not_eq', 'or', 'or_eq', 'xor', 'xor_eq']$/;"	v
s:cppOperatorPunctuator	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\tokenizer.vim	/^let s:cppOperatorPunctuator = ['->*', '->', '--', '-=', '-', '!=', '!', '##', '#', '%:%:', '%=', '%>', '%:', '%', '&&', '&=', '&', '(', ')', '*=', '*', ',', '...', '.*', '.', '\/=', '\/', '::', ':>', ':', ';', '?', '[', ']', '^=', '^', '{', '||', '|=', '|', '}', '~', '++', '+=', '+', '<<=', '<%', '<:', '<<', '<=', '<', '==', '=', '>>=', '>>', '>=', '>']$/;"	v
s:cs_cpo_save	.\vim73\syntax\cs.vim	/^let s:cs_cpo_save = &cpo$/;"	v
s:cterm_color	.\vim73\syntax\2html.vim	/^    let s:cterm_color = {0: "#000000", 1: "#c00000", 2: "#008000", 3: "#804000", 4: "#0000c0", 5: "#c000c0", 6: "#008080", 7: "#c0c0c0", 8: "#808080", 9: "#ff6060", 10: "#00ff00", 11: "#ffff00", 12: "#8080ff", 13: "#ff40ff", 14: "#00ffff", 15: "#ffffff"}$/;"	v
s:cterm_color	.\vim73\syntax\2html.vim	/^    let s:cterm_color = {0: "#808080", 1: "#ff6060", 2: "#00ff00", 3: "#ffff00", 4: "#8080ff", 5: "#ff40ff", 6: "#00ffff", 7: "#ffffff"}$/;"	v
s:cur_menu_char	.\vim73\makemenu.vim	/^let s:cur_menu_char = ""$/;"	v
s:cur_menu_item	.\vim73\makemenu.vim	/^let s:cur_menu_item = 0$/;"	v
s:cur_menu_name	.\vim73\makemenu.vim	/^let s:cur_menu_name = ""$/;"	v
s:cur_menu_nr	.\vim73\makemenu.vim	/^let s:cur_menu_nr = 0$/;"	v
s:current_syntax	.\vim73\syntax\2html.vim	/^  let s:current_syntax = 'none'$/;"	v
s:current_syntax	.\vim73\syntax\2html.vim	/^  let s:current_syntax = b:current_syntax$/;"	v
s:current_syntax	.\vim73\syntax\2html.vim	/^  let s:current_syntax = w:current_syntax$/;"	v
s:d	.\vimfiles\bundle\vim-snipmate\autoload\snipMate.vim	/^let s:d = '\\%([\\\\]\\@<!\\$\\)'$/;"	v
s:defaultORcase	.\vim73\indent\php.vim	/^let s:defaultORcase = '^\\s*\\%(default\\|case\\).*:'$/;"	v
s:define_cache_file	.\vimfiles\bundle\vim-addon-mw-utils\autoload\cached_file_contents.vim	/^let s:define_cache_file = "let this_dir = s:c['cache_dir'].'\/cached-file-contents' | let cache_file = expand(this_dir.'\/'.substitute(string([func_as_string, a:file]),'[[\\\\]{}:\/\\\\,''\\"# ]\\\\+','_','g'))"$/;"	v
s:delims	.\vim73\syntax\perl6.vim	/^let s:delims = [$/;"	v
s:dictionary_list	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\dictionary_complete.vim	/^  let s:dictionary_list = {}$/;"	v
s:did_ft	.\vim73\syntax\syntax.vim	/^  let s:did_ft = 0$/;"	v
s:did_ft	.\vim73\syntax\syntax.vim	/^  let s:did_ft = 1$/;"	v
s:did_snip_helper	.\vimfiles\bundle\vim-snipmate\ftplugin\html_snip_helper.vim	/^let s:did_snip_helper = 1$/;"	v
s:diff_id	.\vim73\syntax\2html.vim	/^	let s:diff_id = diff_hlID(s:lnum, s:col)$/;"	v
s:diff_id	.\vim73\syntax\2html.vim	/^    let s:diff_id = 0$/;"	v
s:diff_id_name	.\vim73\syntax\2html.vim	/^	  let s:diff_id_name = synIDattr(s:diff_id, "name", s:whatterm)$/;"	v
s:diff_id_name	.\vim73\syntax\2html.vim	/^    let s:diff_id_name = ""$/;"	v
s:diffattr	.\vim73\syntax\2html.vim	/^    let s:diffattr = diff_hlID(s:lnum, 1)$/;"	v
s:difffillchar	.\vim73\syntax\2html.vim	/^  let s:difffillchar = '-'$/;"	v
s:difffillchar	.\vim73\syntax\2html.vim	/^let s:difffillchar = &fillchars[matchend(&fillchars, 'diff:')]$/;"	v
s:dir_stack	.\vimfiles\bundle\tlib_vim\autoload\tlib\dir.vim	/^let s:dir_stack = []$/;"	v
s:doc_dict	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\include_complete.vim	/^let s:doc_dict = {$/;"	v
s:doc_dict	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^let s:doc_dict = {$/;"	v
s:dotvim	.\vim73\autoload\getscript.vim	/^  let s:dotvim= ".vim"$/;"	v
s:dotvim	.\vim73\autoload\getscript.vim	/^  let s:dotvim= "vimfiles"$/;"	v
s:dtd_cpo_save	.\vim73\syntax\dtd.vim	/^    let s:dtd_cpo_save = &cpo$/;"	v
s:encoding	.\vim73\keymap\croatian.vim	/^	let s:encoding = 'cp1250'$/;"	v
s:encoding	.\vim73\keymap\croatian.vim	/^	let s:encoding = 'iso-8859-2'$/;"	v
s:encoding	.\vim73\keymap\croatian.vim	/^let s:encoding = &enc$/;"	v
s:end	.\vim73\syntax\2html.vim	/^    let s:end = line("$")$/;"	v
s:end	.\vim73\syntax\2html.vim	/^  let s:end = html_end_line$/;"	v
s:end	.\vim73\syntax\2html.vim	/^  let s:end = line("$")$/;"	v
s:end	.\vim73\syntax\2html.vim	/^  let s:end = line('$')$/;"	v
s:end	.\vim73\syntax\2html.vim	/^let s:end=line('$')$/;"	v
s:end_conditional_directive_rx	.\vim73\indent\make.vim	/^let s:end_conditional_directive_rx = '^\\s*\\%(else\\|endif\\)\\>'$/;"	v
s:end_end_regex	.\vim73\indent\ruby.vim	/^let s:end_end_regex = '\\%(^\\|[^.:@$]\\)\\@<=\\<end\\>'$/;"	v
s:end_middle_regex	.\vim73\indent\ruby.vim	/^let s:end_middle_regex = '\\<\\%(ensure\\|else\\|\\%(\\%(^\\|;\\)\\s*\\)\\@<=\\<rescue\\>\\|when\\|elsif\\)\\>'$/;"	v
s:end_skip_expr	.\vim73\indent\ruby.vim	/^let s:end_skip_expr = s:skip_expr .$/;"	v
s:end_start_regex	.\vim73\indent\ruby.vim	/^let s:end_start_regex = '^\\s*\\zs\\<\\%(module\\|class\\|def\\|if\\|for' .$/;"	v
s:endline	.\vim73\indent\php.vim	/^let s:endline= '\\s*\\%(\/\/.*\\|#.*\\|\/\\*.*\\*\/\\s*\\)\\=$'$/;"	v
s:exists_md5	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\system\cache.vim	/^  let s:exists_md5 = 0$/;"	v
s:exists_md5	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\system\cache.vim	/^  let s:exists_md5 = 1$/;"	v
s:expandedtab	.\vim73\syntax\2html.vim	/^	  let s:expandedtab = substitute(s:expandedtab, '\\t', repeat(' ', s:i), '')$/;"	v
s:expandedtab	.\vim73\syntax\2html.vim	/^	let s:expandedtab = s:concealinfo[1]$/;"	v
s:expandedtab	.\vim73\syntax\2html.vim	/^	let s:expandedtab = strpart(s:line, s:startcol - 1, s:col - s:startcol)$/;"	v
s:ext	.\vim73\tutor\tutor.vim	/^      let s:ext = "." . strpart(s:lang, 0, 2)$/;"	v
s:ext	.\vim73\tutor\tutor.vim	/^      let s:ext = ".cs"$/;"	v
s:ext	.\vim73\tutor\tutor.vim	/^      let s:ext = ".de"$/;"	v
s:ext	.\vim73\tutor\tutor.vim	/^      let s:ext = ".nl"$/;"	v
s:ext	.\vim73\tutor\tutor.vim	/^      let s:ext = ".pl"$/;"	v
s:ext	.\vim73\tutor\tutor.vim	/^      let s:ext = ".sk"$/;"	v
s:ext	.\vim73\tutor\tutor.vim	/^    let s:ext = ".cs.cp1250"$/;"	v
s:ext	.\vim73\tutor\tutor.vim	/^    let s:ext = ".el"$/;"	v
s:ext	.\vim73\tutor\tutor.vim	/^    let s:ext = ".el.cp737"$/;"	v
s:ext	.\vim73\tutor\tutor.vim	/^    let s:ext = ".el.utf-8"$/;"	v
s:ext	.\vim73\tutor\tutor.vim	/^    let s:ext = ".hr.cp1250"$/;"	v
s:ext	.\vim73\tutor\tutor.vim	/^    let s:ext = ".hu.cp1250"$/;"	v
s:ext	.\vim73\tutor\tutor.vim	/^    let s:ext = ".ja.euc"$/;"	v
s:ext	.\vim73\tutor\tutor.vim	/^    let s:ext = ".ja.sjis"$/;"	v
s:ext	.\vim73\tutor\tutor.vim	/^    let s:ext = ".ko.euc"$/;"	v
s:ext	.\vim73\tutor\tutor.vim	/^    let s:ext = ".pl.cp1250"$/;"	v
s:ext	.\vim73\tutor\tutor.vim	/^    let s:ext = ".sk.cp1250"$/;"	v
s:ext	.\vim73\tutor\tutor.vim	/^    let s:ext = ".tr.iso9"$/;"	v
s:ext	.\vim73\tutor\tutor.vim	/^    let s:ext = ".zh.big5"$/;"	v
s:ext	.\vim73\tutor\tutor.vim	/^    let s:ext = ".zh.euc"$/;"	v
s:ext	.\vim73\tutor\tutor.vim	/^    let s:ext = '.hr'$/;"	v
s:ext	.\vim73\tutor\tutor.vim	/^    let s:ext = '.hu'$/;"	v
s:ext	.\vim73\tutor\tutor.vim	/^    let s:ext = '.ru'$/;"	v
s:ext	.\vim73\tutor\tutor.vim	/^    let s:ext = '.ru.cp1251'$/;"	v
s:ext	.\vim73\tutor\tutor.vim	/^  let s:ext .= '.utf-8'$/;"	v
s:ext	.\vim73\tutor\tutor.vim	/^  let s:ext = ""$/;"	v
s:ext	.\vim73\tutor\tutor.vim	/^  let s:ext = "." . $xx$/;"	v
s:ext	.\vim73\tutor\tutor.vim	/^  let s:ext = ".de"$/;"	v
s:ext	.\vim73\tutor\tutor.vim	/^  let s:ext = ".eo.utf-8"$/;"	v
s:ext	.\vim73\tutor\tutor.vim	/^  let s:ext = ".vi.utf-8"$/;"	v
s:ext	.\vim73\tutor\tutor.vim	/^let s:ext = ""$/;"	v
s:f	.\vim73\spell\cleanadd.vim	/^      let s:f = escape(s:fname, ' \\|<')$/;"	v
s:f	.\vim73\spell\cleanadd.vim	/^      let s:f = fnameescape(s:fname)$/;"	v
s:fgc	.\vim73\syntax\2html.vim	/^  let s:fgc = ( &background == "dark" ? "#ffffff" : "#000000" )$/;"	v
s:fgc	.\vim73\syntax\2html.vim	/^let s:fgc = s:HtmlColor(synIDattr(hlID("Normal"), "fg#", s:whatterm))$/;"	v
s:filler	.\vim73\syntax\2html.vim	/^  let s:filler = diff_filler(s:lnum)$/;"	v
s:firstfold	.\vim73\syntax\2html.vim	/^	  let s:firstfold = 0$/;"	v
s:firstfold	.\vim73\syntax\2html.vim	/^      let s:firstfold = 1$/;"	v
s:fname	.\vim73\syntax\colortest.vim	/^    let s:fname = escape(s:fname, ' \\|')$/;"	v
s:fname	.\vim73\syntax\colortest.vim	/^    let s:fname = fnameescape(s:fname)$/;"	v
s:fname	.\vim73\syntax\colortest.vim	/^  let s:fname = expand('<sfile>')$/;"	v
s:foldId	.\vim73\syntax\2html.vim	/^	let s:foldId = s:foldId + 1$/;"	v
s:foldId	.\vim73\syntax\2html.vim	/^let s:foldId = 0$/;"	v
s:foldcolumn	.\vim73\syntax\2html.vim	/^	let s:foldcolumn = s:level+1$/;"	v
s:foldcolumn	.\vim73\syntax\2html.vim	/^  let s:foldcolumn = &foldcolumn$/;"	v
s:folded_assignment_rx	.\vim73\indent\make.vim	/^let s:folded_assignment_rx = '^\\s*\\h\\w*\\s*[+?]\\=='$/;"	v
s:foldfillchar	.\vim73\syntax\2html.vim	/^    let s:foldfillchar = '-'$/;"	v
s:foldfillchar	.\vim73\syntax\2html.vim	/^  let s:foldfillchar = &fillchars[matchend(&fillchars, 'fold:')]$/;"	v
s:foldstack	.\vim73\syntax\2html.vim	/^	let s:foldstack[0].id = s:foldId$/;"	v
s:foldstack	.\vim73\syntax\2html.vim	/^let s:foldstack = []$/;"	v
s:foldtext_save	.\vim73\syntax\2html.vim	/^  let s:foldtext_save = &foldtext$/;"	v
s:format	.\vimfiles\bundle\tlib_vim\autoload\tlib\progressbar.vim	/^let s:format = []$/;"	v
s:ft_rules_udev_rules_pattern	.\vim73\filetype.vim	/^let s:ft_rules_udev_rules_pattern = '^\\s*\\cudev_rules\\s*=\\s*"\\([^"]\\{-1,}\\)\/*".*'$/;"	v
s:ftplugin_sql_objects	.\vim73\ftplugin\sql.vim	/^let s:ftplugin_sql_objects = $/;"	v
s:fullscreen	.\vimfiles\bundle\tlib_vim\autoload\tlib\vim.vim	/^let s:fullscreen = 0$/;"	v
s:function	.\vim73\ftplugin\php.vim	/^let s:function = '\\(abstract\\s\\+\\|final\\s\\+\\|private\\s\\+\\|protected\\s\\+\\|public\\s\\+\\|static\\s\\+\\)*function'$/;"	v
s:function_return_types	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^let s:function_return_types = {}$/;"	v
s:glob_cache	.\vimfiles\bundle\vim-addon-mw-utils\autoload\glob.vim	/^let s:glob_cache = s:c['glob_cache']$/;"	v
s:global_candidates_list	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^  let s:global_candidates_list = { 'dictionary_variables' : {} }$/;"	v
s:hasPreviewWindow	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\complete.vim	/^let s:hasPreviewWindow = match(&completeopt, 'preview')>=0$/;"	v
s:hasPreviewWindowOld	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\complete.vim	/^let s:hasPreviewWindowOld = s:hasPreviewWindow$/;"	v
s:hidden	.\vim73\syntax\hitest.vim	/^let s:hidden      = &hidden$/;"	v
s:htmlfont	.\vim73\syntax\2html.vim	/^  let s:htmlfont = "'". g:html_font . "', monospace"$/;"	v
s:htmlfont	.\vim73\syntax\2html.vim	/^  let s:htmlfont = "monospace"$/;"	v
s:i	.\vim73\ftplugin\ocaml.vim	/^  let s:i = g:omlet_indent_struct$/;"	v
s:i	.\vim73\ftplugin\ocaml.vim	/^  let s:i = matchstr(s:m,'\\d\\+')$/;"	v
s:i	.\vim73\ftplugin\ocaml.vim	/^  let s:i = s:idef$/;"	v
s:i	.\vim73\macros\less.vim	/^    let s:i = s:i + 1$/;"	v
s:i	.\vim73\macros\less.vim	/^  let s:i = 0$/;"	v
s:i	.\vim73\menu.vim	/^      let s:i = stridx(s:n, "\\n")$/;"	v
s:i	.\vim73\menu.vim	/^  let s:i = stridx(s:n, "\\n")$/;"	v
s:i	.\vim73\syntax\2html.vim	/^	      let s:i = &ts - (s:vcol % &ts)$/;"	v
s:i	.\vim73\syntax\2html.vim	/^	      let s:i = &ts$/;"	v
s:i	.\vim73\syntax\2html.vim	/^	    let s:i = &ts - ((s:idx + s:startcol - 1) % &ts)$/;"	v
s:i	.\vim73\syntax\help.vim	/^let s:i = match(expand("%"), '\\.\\a\\ax$')$/;"	v
s:id	.\vim73\syntax\2html.vim	/^	let s:id = synID(s:lnum, s:col, 1)$/;"	v
s:id	.\vim73\syntax\2html.vim	/^	let s:id = synIDtrans(s:id)$/;"	v
s:id	.\vim73\syntax\2html.vim	/^  let s:id = hlID('FoldColumn')$/;"	v
s:id	.\vim73\syntax\2html.vim	/^  let s:id = remove(s:idlist, 0)$/;"	v
s:id_counter	.\vimfiles\bundle\tlib_vim\autoload\tlib\Object.vim	/^let s:id_counter = 0$/;"	v
s:id_name	.\vim73\syntax\2html.vim	/^	let s:id_name = 'Conceal'$/;"	v
s:id_name	.\vim73\syntax\2html.vim	/^	let s:id_name = synIDattr(s:id, "name", s:whatterm)$/;"	v
s:id_name	.\vim73\syntax\2html.vim	/^  let s:id_name = synIDattr(s:id, "name", s:whatterm)$/;"	v
s:idef	.\vim73\ftplugin\ocaml.vim	/^  let s:idef = 2$/;"	v
s:idef	.\vim73\ftplugin\ocaml.vim	/^  let s:idef = g:omlet_indent$/;"	v
s:idef	.\vim73\ftplugin\ocaml.vim	/^  let s:idef = matchstr(s:m,'\\d\\+')$/;"	v
s:idlist	.\vim73\syntax\2html.vim	/^let s:idlist = []$/;"	v
s:idx	.\vim73\menu.vim	/^      let s:idx = s:idx + 10$/;"	v
s:idx	.\vim73\menu.vim	/^    let s:idx = 100$/;"	v
s:idx	.\vim73\menu.vim	/^  let s:idx = s:idx + 10$/;"	v
s:idx	.\vim73\menu.vim	/^let s:idx = 100$/;"	v
s:idx	.\vim73\optwin.vim	/^let s:idx = 1$/;"	v
s:idx	.\vim73\syntax\2html.vim	/^	  let s:idx = stridx(s:expandedtab, "\\t")$/;"	v
s:idx	.\vim73\syntax\2html.vim	/^	let s:idx = stridx(s:expandedtab, "\\t")$/;"	v
s:infix	.\vim73\syntax\perl6.vim	/^let s:infix = "!\\\\?\\\\%(" . s:infix . "\\\\)"$/;"	v
s:infix	.\vim73\syntax\perl6.vim	/^let s:infix = join(s:both, "\\\\|")$/;"	v
s:infix_a	.\vim73\syntax\perl6.vim	/^let s:infix_a = [$/;"	v
s:infix_a_long	.\vim73\syntax\perl6.vim	/^let s:infix_a_long = join(s:infix_a, " ")$/;"	v
s:infix_a_pattern	.\vim73\syntax\perl6.vim	/^let s:infix_a_pattern = join(s:infix_a_words, "\\\\|")$/;"	v
s:infix_a_words	.\vim73\syntax\perl6.vim	/^let s:infix_a_words = split(s:infix_a_long)$/;"	v
s:infix_assoc	.\vim73\syntax\perl6.vim	/^let s:infix_assoc = "!\\\\?\\\\%(" . s:infix_a_pattern . "\\\\)"$/;"	v
s:infix_n	.\vim73\syntax\perl6.vim	/^let s:infix_n = "but does <=> leg cmp \\\\.\\\\. \\\\.\\\\.\\\\^\\\\^ \\\\^\\\\.\\\\. \\\\^\\\\.\\\\.\\\\^"$/;"	v
s:infix_n_pattern	.\vim73\syntax\perl6.vim	/^let s:infix_n_pattern = join(s:infix_n_words, "\\\\|")$/;"	v
s:infix_n_words	.\vim73\syntax\perl6.vim	/^let s:infix_n_words = split(s:infix_n)$/;"	v
s:inheritance_dent	.\vim73\indent\eiffel.vim	/^let s:inheritance_dent = '\\s*\\(redefine\\|rename\\|export\\)\\>'$/;"	v
s:interface	.\vim73\ftplugin\php.vim	/^let s:interface = 'interface'$/;"	v
s:internal_candidates_list	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^  let s:internal_candidates_list = {}$/;"	v
s:is_cygwin	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\prelude.vim	/^let s:is_cygwin = has('win32unix')$/;"	v
s:is_cygwin	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\system\cache.vim	/^let s:is_cygwin = has('win32unix')$/;"	v
s:is_enabled	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\init.vim	/^  let s:is_enabled = 0$/;"	v
s:is_mac	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\prelude.vim	/^let s:is_mac = !s:is_windows$/;"	v
s:is_mac	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\system\cache.vim	/^let s:is_mac = !s:is_windows && !s:is_cygwin$/;"	v
s:is_windows	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\prelude.vim	/^let s:is_windows = has('win16') || has('win32') || has('win64')$/;"	v
s:is_windows	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\system\cache.vim	/^let s:is_windows = has('win16') || has('win32') || has('win64')$/;"	v
s:just_inserted_rule_rx	.\vim73\indent\make.vim	/^let s:just_inserted_rule_rx = '^\\s*[^#:]\\+:\\{1,2}$'$/;"	v
s:keepcpo	.\vim73\autoload\getscript.vim	/^let s:keepcpo = &cpo$/;"	v
s:keepcpo	.\vim73\autoload\netrw.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	.\vim73\autoload\netrwFileHandlers.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	.\vim73\autoload\tar.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	.\vim73\autoload\vimball.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	.\vim73\autoload\zip.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	.\vim73\plugin\getscriptPlugin.vim	/^let s:keepcpo                = &cpo$/;"	v
s:keepcpo	.\vim73\plugin\netrwPlugin.vim	/^let s:keepcpo = &cpo$/;"	v
s:keepcpo	.\vim73\plugin\tarPlugin.vim	/^let s:keepcpo          = &cpo$/;"	v
s:keepcpo	.\vim73\plugin\vimballPlugin.vim	/^let s:keepcpo              = &cpo$/;"	v
s:keepcpo	.\vim73\plugin\zipPlugin.vim	/^let s:keepcpo          = &cpo$/;"	v
s:keywords	.\vim73\syntax\perl6.vim	/^let s:keywords = {$/;"	v
s:lang	.\vim73\menu.vim	/^      let s:lang = ""$/;"	v
s:lang	.\vim73\menu.vim	/^      let s:lang = &langmenu$/;"	v
s:lang	.\vim73\menu.vim	/^      let s:lang = s:lang . '.' . &enc$/;"	v
s:lang	.\vim73\menu.vim	/^      let s:lang = substitute(s:lang, '\\.[^.]*', "", "")$/;"	v
s:lang	.\vim73\menu.vim	/^    let s:lang = substitute(s:lang, " ", "_", "g")$/;"	v
s:lang	.\vim73\menu.vim	/^    let s:lang = substitute(s:lang, "@euro", "", "")$/;"	v
s:lang	.\vim73\menu.vim	/^    let s:lang = substitute(s:lang, '\\.iso8859', ".iso_8859", "")$/;"	v
s:lang	.\vim73\menu.vim	/^    let s:lang = substitute(s:lang, 'iso_8859-15\\=$', "latin1", "")$/;"	v
s:lang	.\vim73\menu.vim	/^    let s:lang = substitute(tolower(s:lang), '\\.iso-', ".iso_", "")$/;"	v
s:lang	.\vim73\menu.vim	/^    let s:lang = v:lang$/;"	v
s:lang	.\vim73\tutor\tutor.vim	/^    let s:lang = $LANG$/;"	v
s:lang	.\vim73\tutor\tutor.vim	/^    let s:lang = $LC_ALL$/;"	v
s:lang	.\vim73\tutor\tutor.vim	/^    let s:lang = substitute(s:lang, '\\c@euro', '', '')$/;"	v
s:lang	.\vim73\tutor\tutor.vim	/^    let s:lang = v:lang$/;"	v
s:lang	.\vim73\tutor\tutor.vim	/^  let s:lang = ""$/;"	v
s:last_mps	.\vim73\macros\matchit.vim	/^let s:last_mps = ""$/;"	v
s:last_words	.\vim73\macros\matchit.vim	/^let s:last_words = ":"$/;"	v
s:laststatus	.\vimfiles\bundle\tlib_vim\autoload\tlib\progressbar.vim	/^let s:laststatus = []$/;"	v
s:lazyredraw	.\vim73\syntax\hitest.vim	/^let s:lazyredraw  = &lazyredraw$/;"	v
s:len	.\vim73\syntax\2html.vim	/^	  let s:len = &columns$/;"	v
s:len	.\vim73\syntax\2html.vim	/^    let s:len = strlen(s:line)$/;"	v
s:length_pattern	.\vim73\syntax\cdrtoc.vim	/^let s:length_pattern = '\\%(\\%([0-5]\\d\\|\\d\\):\\%([0-5]\\d\\|\\d\\):\\%([0-6]\\d\\|7[0-5]\\|\\d\\)\\|\\d\\+\\)\\>'$/;"	v
s:letlim	.\vim73\indent\ocaml.vim	/^let s:letlim = '\\(\\<\\(sig\\|struct\\)\\|;;\\)\\s*$'$/;"	v
s:letlim	.\vim73\indent\sml.vim	/^let s:letlim = '\\(\\<\\(sig\\|struct\\)\\|;;\\)\\s*$'$/;"	v
s:letpat	.\vim73\indent\ocaml.vim	/^let s:letpat = '^\\s*\\(let\\|type\\|module\\|class\\|open\\|exception\\|val\\|include\\|external\\)\\>'$/;"	v
s:letpat	.\vim73\indent\sml.vim	/^let s:letpat = '^\\s*\\(let\\|type\\|module\\|class\\|open\\|exception\\|val\\|include\\|external\\)\\>'$/;"	v
s:level	.\vim73\syntax\2html.vim	/^      let s:level = match(foldtextresult(s:lnum), '+-*\\zs[^-]') - 2$/;"	v
s:lim	.\vim73\indent\ocaml.vim	/^let s:lim = '^\\s*\\(exception\\|external\\|include\\|let\\|module\\|open\\|type\\|val\\)\\>'$/;"	v
s:lim	.\vim73\indent\sml.vim	/^let s:lim = '^\\s*\\(exception\\|external\\|include\\|let\\|module\\|open\\|type\\|val\\)\\>'$/;"	v
s:line	.\vim73\syntax\2html.vim	/^	  let s:line = s:line . repeat(' ', &columns - virtcol([s:lnum, s:len]) - s:margin)$/;"	v
s:line	.\vim73\syntax\2html.vim	/^    let s:line = getline(s:lnum)$/;"	v
s:line1	.\vim73\scripts.vim	/^    let s:line1 = substitute(s:line1, '\\<env\\s\\+', '', '')$/;"	v
s:line1	.\vim73\scripts.vim	/^    let s:line1 = substitute(s:line1, '\\S\\+=\\S\\+', '', 'g')$/;"	v
s:line1	.\vim73\scripts.vim	/^let s:line1 = getline(1)$/;"	v
s:line2	.\vim73\scripts.vim	/^  let s:line2 = getline(2)$/;"	v
s:line3	.\vim73\scripts.vim	/^  let s:line3 = getline(3)$/;"	v
s:line4	.\vim73\scripts.vim	/^  let s:line4 = getline(4)$/;"	v
s:line5	.\vim73\scripts.vim	/^  let s:line5 = getline(5)$/;"	v
s:lines	.\vim73\ftplugin\eruby.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."\\n".getline("$")$/;"	v
s:lines	.\vim73\ftplugin\liquid.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."\\n".getline("$")$/;"	v
s:lines	.\vim73\syntax\2html.vim	/^    let s:lines[-1].="<\/span><\/span>"$/;"	v
s:lines	.\vim73\syntax\2html.vim	/^let s:lines = []$/;"	v
s:lines	.\vim73\syntax\eruby.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."\\n".getline("$")$/;"	v
s:lines	.\vim73\syntax\liquid.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."\\n".getline("$")$/;"	v
s:lmax	.\vim73\ftplugin\fortran.vim	/^      let s:lmax = line("$")$/;"	v
s:lmax	.\vim73\ftplugin\fortran.vim	/^    let s:lmax = 500$/;"	v
s:lmax	.\vim73\indent\fortran.vim	/^      let s:lmax = line("$")$/;"	v
s:lmax	.\vim73\indent\fortran.vim	/^    let s:lmax = 500$/;"	v
s:lmax	.\vim73\syntax\fortran.vim	/^      let s:lmax = line("$")$/;"	v
s:lmax	.\vim73\syntax\fortran.vim	/^    let s:lmax = 500$/;"	v
s:ln	.\vim73\ftplugin\fortran.vim	/^      let s:ln = s:ln + 1$/;"	v
s:ln	.\vim73\ftplugin\fortran.vim	/^    let s:ln=1$/;"	v
s:ln	.\vim73\indent\fortran.vim	/^      let s:ln = s:ln + 1$/;"	v
s:ln	.\vim73\indent\fortran.vim	/^    let s:ln=1$/;"	v
s:ln	.\vim73\syntax\fortran.vim	/^      let s:ln = s:ln + 1$/;"	v
s:ln	.\vim73\syntax\fortran.vim	/^    let s:ln=1$/;"	v
s:lnum	.\vim73\makemenu.vim	/^let s:lnum = line(".") - 1$/;"	v
s:lnum	.\vim73\makemenu.vim	/^let s:lnum = s:lnum + 1$/;"	v
s:lnum	.\vim73\optwin.vim	/^let s:lnum = line("$")$/;"	v
s:lnum	.\vim73\scripts.vim	/^	let s:lnum += 1$/;"	v
s:lnum	.\vim73\scripts.vim	/^      let s:lnum += 1$/;"	v
s:lnum	.\vim73\scripts.vim	/^      let s:lnum = 1$/;"	v
s:lnum	.\vim73\scripts.vim	/^    let s:lnum = 1$/;"	v
s:lnum	.\vim73\syntax\2html.vim	/^      let s:lnum = s:lnum + 1$/;"	v
s:lnum	.\vim73\syntax\2html.vim	/^    let s:lnum = 1$/;"	v
s:lnum	.\vim73\syntax\2html.vim	/^    let s:lnum = s:new_lnum$/;"	v
s:lnum	.\vim73\syntax\2html.vim	/^  let s:lnum = 1$/;"	v
s:lnum	.\vim73\syntax\2html.vim	/^  let s:lnum = html_start_line$/;"	v
s:lnum	.\vim73\syntax\2html.vim	/^  let s:lnum = s:lnum + 1$/;"	v
s:loaded	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e.vim	/^let s:loaded = {}$/;"	v
s:local_candidates_list	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^  let s:local_candidates_list = {}$/;"	v
s:ls	.\vim73\syntax\2html.vim	/^let s:ls  = &ls$/;"	v
s:luapath	.\vim73\syntax\vim.vim	/^ let s:luapath= globpath(&rtp,"syntax\/lua.vim")$/;"	v
s:luapath	.\vim73\syntax\vim.vim	/^let s:luapath= expand("<sfile>:p:h")."\/lua.vim"$/;"	v
s:lz	.\vim73\macros\less.vim	/^let s:lz = &lz$/;"	v
s:m	.\vim73\ftplugin\ocaml.vim	/^let s:m = matchstr(s:modeline,'default\\s*=\\s*\\d\\+')$/;"	v
s:m	.\vim73\ftplugin\ocaml.vim	/^let s:m = matchstr(s:modeline,'struct\\s*=\\s*\\d\\+')$/;"	v
s:man_find_arg	.\vim73\ftplugin\man.vim	/^    let s:man_find_arg = "-l"$/;"	v
s:man_find_arg	.\vim73\ftplugin\man.vim	/^let s:man_find_arg = "-w"$/;"	v
s:man_sect_arg	.\vim73\ftplugin\man.vim	/^    let s:man_sect_arg = "-s"$/;"	v
s:man_sect_arg	.\vim73\ftplugin\man.vim	/^let s:man_sect_arg = ""$/;"	v
s:man_tag_depth	.\vim73\ftplugin\man.vim	/^let s:man_tag_depth = 0$/;"	v
s:margin	.\vim73\syntax\2html.vim	/^  let s:margin = 0$/;"	v
s:margin	.\vim73\syntax\2html.vim	/^  let s:margin = strlen(s:end) + 1$/;"	v
s:match_words	.\vim73\ftplugin\aspvbs.vim	/^    let s:match_words = b:match_words$/;"	v
s:match_words	.\vim73\ftplugin\aspvbs.vim	/^let s:match_words = ""$/;"	v
s:match_words	.\vim73\ftplugin\config.vim	/^let s:match_words = ""$/;"	v
s:match_words	.\vim73\ftplugin\eruby.vim	/^  let s:match_words = b:match_words . ',' . s:match_words$/;"	v
s:match_words	.\vim73\ftplugin\eruby.vim	/^  let s:match_words = b:match_words$/;"	v
s:match_words	.\vim73\ftplugin\eruby.vim	/^let s:match_words = ""$/;"	v
s:match_words	.\vim73\ftplugin\haml.vim	/^  let s:match_words = b:match_words . ',' . s:match_words$/;"	v
s:match_words	.\vim73\ftplugin\haml.vim	/^  let s:match_words = b:match_words$/;"	v
s:match_words	.\vim73\ftplugin\haml.vim	/^let s:match_words = ""$/;"	v
s:match_words	.\vim73\ftplugin\jsp.vim	/^    let s:match_words = b:match_words . ',' . s:match_words$/;"	v
s:match_words	.\vim73\ftplugin\jsp.vim	/^    let s:match_words = b:match_words$/;"	v
s:match_words	.\vim73\ftplugin\jsp.vim	/^let s:match_words = ""$/;"	v
s:match_words	.\vim73\ftplugin\php.vim	/^    let s:match_words = b:match_words$/;"	v
s:match_words	.\vim73\ftplugin\php.vim	/^let s:match_words = ""$/;"	v
s:match_words	.\vim73\ftplugin\xhtml.vim	/^    let s:match_words = b:match_words . "," . s:match_words$/;"	v
s:match_words	.\vim73\ftplugin\xhtml.vim	/^    let s:match_words = b:match_words$/;"	v
s:match_words	.\vim73\ftplugin\xhtml.vim	/^let s:match_words = ""$/;"	v
s:matcher	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters\matcher_fuzzy.vim	/^let s:matcher = {$/;"	v
s:matcher	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters\matcher_head.vim	/^let s:matcher = {$/;"	v
s:matcher	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters\matcher_old.vim	/^let s:matcher = {$/;"	v
s:max	.\vimfiles\bundle\tlib_vim\autoload\tlib\progressbar.vim	/^let s:max = []$/;"	v
s:maxoff	.\vim73\indent\python.vim	/^let s:maxoff = 50	" maximum number of lines to look backwards for ()$/;"	v
s:member_sources	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\member_complete.vim	/^  let s:member_sources = {}$/;"	v
s:mmssff_pattern	.\vim73\syntax\cdrtoc.vim	/^let s:mmssff_pattern = '\\%([0-5]\\d\\|\\d\\):\\%([0-5]\\d\\|\\d\\):\\%([0-6]\\d\\|7[0-5]\\|\\d\\)\\>'$/;"	v
s:modeline	.\vim73\ftplugin\ocaml.vim	/^  let s:modeline = ""$/;"	v
s:modeline	.\vim73\ftplugin\ocaml.vim	/^  let s:modeline = getline(".")$/;"	v
s:module	.\vim73\indent\ocaml.vim	/^let s:module = '\\<\\%(begin\\|sig\\|struct\\|object\\)\\>'$/;"	v
s:module	.\vim73\indent\sml.vim	/^let s:module = '\\<\\%(let\\|sig\\|struct\\)\\>'$/;"	v
s:more	.\vim73\syntax\hitest.vim	/^let s:more	  = &more$/;"	v
s:my_syncolor	.\vim73\syntax\doxygen.vim	/^    let s:my_syncolor=1$/;"	v
s:my_syncolor	.\vim73\syntax\doxygen.vim	/^  let s:my_syncolor=0$/;"	v
s:my_synlink	.\vim73\syntax\doxygen.vim	/^    let s:my_synlink=1$/;"	v
s:my_synlink	.\vim73\syntax\doxygen.vim	/^  let s:my_synlink=0$/;"	v
s:mzschemepath	.\vim73\syntax\vim.vim	/^ let s:mzschemepath= globpath(&rtp,"syntax\/scheme.vim")$/;"	v
s:mzschemepath	.\vim73\syntax\vim.vim	/^let s:mzschemepath= expand("<sfile>:p:h")."\/scheme.vim"$/;"	v
s:n	.\vim73\menu.vim	/^	let s:n = ""$/;"	v
s:n	.\vim73\menu.vim	/^	let s:n = strpart(s:n, s:i + 1, 19999)$/;"	v
s:n	.\vim73\menu.vim	/^    let s:n = ""$/;"	v
s:n	.\vim73\menu.vim	/^    let s:n = strpart(s:n, s:i + 1, 19999)$/;"	v
s:n	.\vim73\menu.vim	/^  let s:n = globpath(&runtimepath, "keymap\/*.vim")$/;"	v
s:n	.\vim73\menu.vim	/^let s:n = globpath(&runtimepath, "colors\/*.vim")$/;"	v
s:n	.\vim73\menu.vim	/^let s:n = globpath(&runtimepath, "compiler\/*.vim")$/;"	v
s:n	.\vim73\syntax\2html.vim	/^	let s:n = 2$/;"	v
s:n	.\vim73\syntax\2html.vim	/^      let s:n = s:n - 1$/;"	v
s:n	.\vim73\syntax\2html.vim	/^    let s:n = s:filler$/;"	v
s:name	.\vim73\menu.vim	/^	let s:name = s:n$/;"	v
s:name	.\vim73\menu.vim	/^	let s:name = strpart(s:n, 0, s:i)$/;"	v
s:name	.\vim73\menu.vim	/^      let s:name = substitute(s:name, '\\c.*[\/\\\\:\\]]\\([^\/\\\\:_]*\\)\\(_[0-9a-zA-Z-]*\\)\\=\\.vim', '\\1', '')$/;"	v
s:name	.\vim73\menu.vim	/^    let s:name = s:n$/;"	v
s:name	.\vim73\menu.vim	/^    let s:name = strpart(s:n, 0, s:i)$/;"	v
s:name	.\vim73\menu.vim	/^  let s:name = substitute(s:name, '\\c.*[\/\\\\:\\]]\\([^\/\\\\:]*\\)\\.vim', '\\1', '')$/;"	v
s:name	.\vim73\scripts.vim	/^    let s:name = 'wish'$/;"	v
s:name	.\vim73\scripts.vim	/^    let s:name = substitute(s:line1, '^#!.*[\/\\\\]\\(\\i\\+\\).*', '\\1', '')$/;"	v
s:name	.\vim73\scripts.vim	/^    let s:name = substitute(s:line1, '^#!.*\\<env\\>\\s\\+\\(\\i\\+\\).*', '\\1', '')$/;"	v
s:name	.\vim73\scripts.vim	/^    let s:name = substitute(s:line1, '^#!\\s*\\([^\/\\\\ ]*\\>\\).*', '\\1', '')$/;"	v
s:name	.\vim73\scripts.vim	/^    let s:name = substitute(s:line1, '^#!\\s*\\S*[\/\\\\]\\(\\i\\+\\).*', '\\1', '')$/;"	v
s:names	.\vim73\menu.vim	/^let s:names = sort(map(split(s:n, "\\n"), 'substitute(v:val, "\\\\c.*[\/\\\\\\\\:\\\\]]\\\\([^\/\\\\\\\\:]*\\\\)\\\\.vim", "\\\\1", "")'), 1)$/;"	v
s:neocomplcache_source	.\vimfiles\bundle\neocomplcache\autoload\unite\sources\neocomplcache.vim	/^let s:neocomplcache_source = {$/;"	v
s:netrw_has_nt_rcp	.\vim73\autoload\netrw.vim	/^ let s:netrw_has_nt_rcp = 0$/;"	v
s:netrw_has_nt_rcp	.\vim73\autoload\netrw.vim	/^ let s:netrw_has_nt_rcp = 1$/;"	v
s:netrw_rcpmode	.\vim73\autoload\netrw.vim	/^ let s:netrw_rcpmode    = ''$/;"	v
s:netrw_rcpmode	.\vim73\autoload\netrw.vim	/^ let s:netrw_rcpmode    = '-b'$/;"	v
s:netrw_usercuc	.\vim73\autoload\netrw.vim	/^ let s:netrw_usercuc   = &cursorcolumn$/;"	v
s:netrw_usercul	.\vim73\autoload\netrw.vim	/^ let s:netrw_usercul   = &cursorline$/;"	v
s:new	.\vim73\syntax\2html.vim	/^	    let s:new = s:new . "<a class='FoldColumn' href='javascript:toggleFold(\\"fold".s:foldstack[0].id."\\")'>"$/;"	v
s:new	.\vim73\syntax\2html.vim	/^	    let s:new = s:new . "<a class='toggle-open FoldColumn' href='javascript:toggleFold(\\"fold".s:foldstack[0].id."\\")'>"$/;"	v
s:new	.\vim73\syntax\2html.vim	/^	    let s:new = s:new . "toggle-filler "$/;"	v
s:new	.\vim73\syntax\2html.vim	/^	    let s:new = s:new . repeat(" ", s:foldcolumn - s:allfolds[0].level)$/;"	v
s:new	.\vim73\syntax\2html.vim	/^	    let s:new = s:new . repeat(' ', s:foldcolumn - s:foldstack[0].level) . "<\/a>"$/;"	v
s:new	.\vim73\syntax\2html.vim	/^	    let s:new = s:new . repeat('|', s:allfolds[0].level - 1) . "<\/a>"$/;"	v
s:new	.\vim73\syntax\2html.vim	/^	    let s:new = s:new . repeat('|', s:allfolds[0].level - 1)$/;"	v
s:new	.\vim73\syntax\2html.vim	/^	    let s:new = s:new . repeat('|', s:foldstack[0].level)$/;"	v
s:new	.\vim73\syntax\2html.vim	/^	    let s:new = s:new . s:HtmlFormat(repeat(' ', s:foldcolumn), "FoldColumn", "")$/;"	v
s:new	.\vim73\syntax\2html.vim	/^	  let s:new = s:new . "-"$/;"	v
s:new	.\vim73\syntax\2html.vim	/^	  let s:new = s:new . "<\/a>"$/;"	v
s:new	.\vim73\syntax\2html.vim	/^	  let s:new = s:new . "<a class='toggle-closed FoldColumn' href='javascript:toggleFold(\\"fold".s:foldId."\\")'>"$/;"	v
s:new	.\vim73\syntax\2html.vim	/^	  let s:new = s:new . "<a class='toggle-open "$/;"	v
s:new	.\vim73\syntax\2html.vim	/^	  let s:new = s:new . "<a class='toggle-open FoldColumn' href='javascript:toggleFold(\\"fold".s:foldId."\\")'>+<\/a>"$/;"	v
s:new	.\vim73\syntax\2html.vim	/^	  let s:new = s:new . "FoldColumn' href='javascript:toggleFold(\\"fold".s:foldId."\\")'>"$/;"	v
s:new	.\vim73\syntax\2html.vim	/^	  let s:new = s:new . repeat(" ", s:foldcolumn - s:allfolds[0].level) . "<\/a>"$/;"	v
s:new	.\vim73\syntax\2html.vim	/^	let s:new .= "<span id='"$/;"	v
s:new	.\vim73\syntax\2html.vim	/^	let s:new .= "fold".s:foldId."' class='".s:allfolds[0].type."'>"$/;"	v
s:new	.\vim73\syntax\2html.vim	/^	let s:new .= (exists('g:html_diff_win_num') ? "win".g:html_diff_win_num : "")$/;"	v
s:new	.\vim73\syntax\2html.vim	/^	let s:new = repeat(s:LeadingSpace, s:margin) . s:new$/;"	v
s:new	.\vim73\syntax\2html.vim	/^	let s:new = s:new . " " . s:filler . " inserted lines "$/;"	v
s:new	.\vim73\syntax\2html.vim	/^	let s:new = s:new . "<span class='fulltext'>"$/;"	v
s:new	.\vim73\syntax\2html.vim	/^	let s:new = s:new . repeat(s:difffillchar, &columns - strlen(s:new) - s:margin)$/;"	v
s:new	.\vim73\syntax\2html.vim	/^	let s:new = s:new . repeat(s:difffillchar, 3)$/;"	v
s:new	.\vim73\syntax\2html.vim	/^	let s:new = s:new . s:HtmlFormat(s:expandedtab,  s:id_name, s:diff_id_name)$/;"	v
s:new	.\vim73\syntax\2html.vim	/^	let s:new = s:new . substitute(s:HtmlFormat(s:numcol . foldtextresult(s:lnum), "Folded", ""), '<\/span>', s:HtmlEndline.'\\n\\0', '')$/;"	v
s:new	.\vim73\syntax\2html.vim	/^	let s:new = s:new."<\/span><\/span>"$/;"	v
s:new	.\vim73\syntax\2html.vim	/^      let s:new = repeat(s:difffillchar, 3)$/;"	v
s:new	.\vim73\syntax\2html.vim	/^      let s:new = s:HtmlFormat(s:new, "DiffDelete", "")$/;"	v
s:new	.\vim73\syntax\2html.vim	/^      let s:new = s:new . repeat(s:foldfillchar, &columns - strlen(s:new))$/;"	v
s:new	.\vim73\syntax\2html.vim	/^      let s:new = s:new . s:HtmlFormat(s:numcol, "lnr", "")$/;"	v
s:new	.\vim73\syntax\2html.vim	/^    let s:new = s:HtmlFormat(s:new, "Folded", "")$/;"	v
s:new	.\vim73\syntax\2html.vim	/^    let s:new = s:numcol . foldtextresult(s:lnum)$/;"	v
s:new	.\vim73\syntax\2html.vim	/^  let s:new = ""$/;"	v
s:new_lnum	.\vim73\syntax\2html.vim	/^    let s:new_lnum = foldclosedend(s:lnum)$/;"	v
s:newfold	.\vim73\syntax\2html.vim	/^	let s:newfold.type = "open-fold"$/;"	v
s:newfold	.\vim73\syntax\2html.vim	/^      let s:newfold = {'firstline': s:lnum, 'lastline': foldclosedend(s:lnum), 'level': s:level,'type': "closed-fold"}$/;"	v
s:newwin	.\vim73\syntax\2html.vim	/^let s:newwin = winnr()$/;"	v
s:newwin_stl	.\vim73\syntax\2html.vim	/^let s:newwin_stl = &l:stl$/;"	v
s:no_indent	.\vim73\indent\eiffel.vim	/^let s:no_indent = '^\\s*\\(class\\|feature\\|creation\\|inherit\\)\\>'$/;"	v
s:notPhpHereDoc	.\vim73\indent\php.vim	/^let s:notPhpHereDoc = '\\%(break\\|return\\|continue\\|exit\\|else\\)'$/;"	v
s:not_end	.\vim73\ftplugin\framescript.vim	/^  let s:not_end = '\\c\\%(\\<End\\)\\@<!'$/;"	v
s:notelse	.\vim73\ftplugin\fortran.vim	/^  let s:notelse = '\\%(\\<end\\s\\+\\|\\<else\\s\\+\\)\\@<!'$/;"	v
s:notend	.\vim73\ftplugin\ada.vim	/^   let s:notend      = '\\%(\\<end\\s\\+\\)\\@<!'$/;"	v
s:notend	.\vim73\ftplugin\aspvbs.vim	/^  let s:notend = '\\%(\\<end\\s\\+\\)\\@<!'$/;"	v
s:notend	.\vim73\ftplugin\fortran.vim	/^  let s:notend = '\\%(\\<end\\s\\+\\)\\@<!'$/;"	v
s:notend	.\vim73\ftplugin\sql.vim	/^let s:notend = '\\%(\\<end\\s\\+\\)\\@<!'$/;"	v
s:notend	.\vim73\ftplugin\vhdl.vim	/^  let s:notend = '\\%(\\<end\\s\\+\\)\\@<!'$/;"	v
s:notprocedure	.\vim73\ftplugin\fortran.vim	/^  let s:notprocedure = '\\%(\\s\\+procedure\\>\\)\\@!'$/;"	v
s:notselect	.\vim73\ftplugin\fortran.vim	/^  let s:notselect = '\\%(\\<select\\s\\+\\)\\@<!'$/;"	v
s:notslash	.\vim73\macros\matchit.vim	/^let s:notslash = '\\\\\\@<!\\%(\\\\\\\\\\)*'$/;"	v
s:numcol	.\vim73\syntax\2html.vim	/^    let s:numcol = ""$/;"	v
s:numcol	.\vim73\syntax\2html.vim	/^    let s:numcol = repeat(' ', s:margin - 1 - strlen(s:lnum)) . s:lnum . ' '$/;"	v
s:obj	.\vim73\indent\ocaml.vim	/^let s:obj = '^\\s*\\(constraint\\|inherit\\|initializer\\|method\\|val\\)\\>\\|\\<\\(object\\|object\\s*(.*)\\)\\s*$'$/;"	v
s:obj	.\vim73\indent\sml.vim	/^let s:obj = '^\\s*\\(constraint\\|inherit\\|initializer\\|method\\|val\\)\\>\\|\\<\\(object\\|object\\s*(.*)\\)\\s*$'$/;"	v
s:ocaml_word_char	.\vim73\ftplugin\ocaml.vim	/^    let s:ocaml_word_char = '\\w|[À-ÿ]|'''$/;"	v
s:offset	.\vim73\syntax\2html.vim	/^	    let s:offset -= s:i - 1$/;"	v
s:offset	.\vim73\syntax\2html.vim	/^	let s:offset = 0$/;"	v
s:old_bind	.\vim73\syntax\2html.vim	/^let s:old_bind = &l:scrollbind$/;"	v
s:old_et	.\vim73\syntax\2html.vim	/^let s:old_et = &l:et$/;"	v
s:old_fdm	.\vim73\syntax\2html.vim	/^let s:old_fdm = &foldmethod$/;"	v
s:old_fen	.\vim73\syntax\2html.vim	/^let s:old_fen = &foldenable$/;"	v
s:old_icon	.\vim73\optwin.vim	/^let s:old_icon = &icon$/;"	v
s:old_icon	.\vim73\syntax\2html.vim	/^let s:old_icon = &icon$/;"	v
s:old_magic	.\vim73\syntax\2html.vim	/^let s:old_magic = &magic$/;"	v
s:old_more	.\vim73\syntax\2html.vim	/^let s:old_more = &more$/;"	v
s:old_paste	.\vim73\syntax\2html.vim	/^let s:old_paste = &paste$/;"	v
s:old_report	.\vim73\syntax\2html.vim	/^let s:old_report = &report$/;"	v
s:old_ru	.\vim73\optwin.vim	/^let s:old_ru = &ru$/;"	v
s:old_sc	.\vim73\optwin.vim	/^let s:old_sc = &sc$/;"	v
s:old_search	.\vim73\syntax\2html.vim	/^let s:old_search = @\/$/;"	v
s:old_title	.\vim73\optwin.vim	/^let s:old_title = &title$/;"	v
s:old_title	.\vim73\syntax\2html.vim	/^let s:old_title = &title$/;"	v
s:old_winfixheight	.\vim73\syntax\2html.vim	/^let s:old_winfixheight = &l:winfixheight$/;"	v
s:old_winheight	.\vim73\syntax\2html.vim	/^let s:old_winheight = winheight(0)$/;"	v
s:oldcolumn	.\vim73\syntax\lhaskell.vim	/^let s:oldcolumn=col(".")$/;"	v
s:oldcpo	.\vim73\syntax\tcsh.vim	/^let s:oldcpo = &cpo$/;"	v
s:oldline	.\vim73\syntax\lhaskell.vim	/^let s:oldline=line(".")$/;"	v
s:oneProbe	.\vim73\syntax\dtrace.vim	/^let s:oneProbe = '\\%(BEGIN\\|END\\|ERROR\\|\\S\\{-}:\\S\\{-}:\\S\\{-}:\\S\\{-}\\)\\_s*'$/;"	v
s:or_replace	.\vim73\ftplugin\sql.vim	/^let s:or_replace = '\\%(or\\s\\+replace\\s\\+\\)\\?'$/;"	v
s:orders	.\vim73\syntax\hostconf.vim	/^let s:orders = ['bind', 'hosts', 'nis']$/;"	v
s:ordot	.\vim73\ftplugin\cobol.vim	/^    let s:ordot = '\\|\\ze\\.\\%( \\@=\\|$\\)'$/;"	v
s:orgbufnr	.\vim73\syntax\2html.vim	/^let s:orgbufnr = winbufnr(0)$/;"	v
s:orgwin	.\vim73\syntax\2html.vim	/^let s:orgwin = bufwinnr(s:orgbufnr)$/;"	v
s:origwin_stl	.\vim73\syntax\2html.vim	/^let s:origwin_stl = &l:stl$/;"	v
s:outdent	.\vim73\indent\eiffel.vim	/^let s:outdent = '^\\s*\\(else\\|invariant\\|variant\\|do\\|require\\|until\\|loop\\|local\\)\\>'$/;"	v
s:overwrite	.\vimfiles\bundle\vim-snipmate\after\plugin\snipMate.vim	/^		let s:overwrite = 0$/;"	v
s:overwrite	.\vimfiles\bundle\vim-snipmate\after\plugin\snipMate.vim	/^		let s:overwrite = maparg('<S-Tab>', 'i') ==? '<Plug>SuperTabBackward'$/;"	v
s:overwrite	.\vimfiles\bundle\vim-snipmate\after\plugin\snipMate.vim	/^		let s:overwrite = maparg('<Tab>', 'i') ==? '<Plug>SuperTabForward'$/;"	v
s:perlpath	.\vim73\syntax\vim.vim	/^ let s:perlpath= globpath(&rtp,"syntax\/perl.vim")$/;"	v
s:perlpath	.\vim73\syntax\vim.vim	/^let s:perlpath= expand("<sfile>:p:h")."\/perl.vim"$/;"	v
s:pgb	.\vim73\syntax\2html.vim	/^	  let s:pgb.needs_redraw = 0$/;"	v
s:pgb	.\vim73\syntax\2html.vim	/^      let s:pgb.needs_redraw = 0$/;"	v
s:pgb	.\vim73\syntax\2html.vim	/^    let s:pgb = s:ProgressBar("Processing folds:", line('$')*2, s:orgwin)$/;"	v
s:pgb	.\vim73\syntax\2html.vim	/^    let s:pgb.needs_redraw = 0$/;"	v
s:pgb	.\vim73\syntax\2html.vim	/^  let s:pgb = s:ProgressBar("Processing classes:", len(s:idlist),s:newwin)$/;"	v
s:pgb	.\vim73\syntax\2html.vim	/^  let s:pgb = s:ProgressBar("Processing lines:", s:end - s:lnum + 1, s:orgwin)$/;"	v
s:popupItemResultList	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\complete.vim	/^let s:popupItemResultList = []$/;"	v
s:prepended	.\vim73\autoload\syntaxcomplete.vim	/^let s:prepended  = ''$/;"	v
s:prevc	.\vim73\syntax\2html.vim	/^		let s:prevc = matchstr(s:expandedtab, '.\\%' . (s:idx + 1) . 'c')$/;"	v
s:prevc	.\vim73\syntax\2html.vim	/^		let s:prevc = matchstr(s:line, '.\\%' . (s:startcol + s:idx + s:offset) . 'c')$/;"	v
s:progressbar	.\vim73\syntax\2html.vim	/^  let s:progressbar={}$/;"	v
s:property	.\vim73\indent\sass.vim	/^let s:property = '^\\s*:\\|^\\s*[[:alnum:]-]\\+\\%(:\\|\\s*=\\)'$/;"	v
s:prototype	.\vimfiles\bundle\tlib_vim\autoload\tlib\Filter_cnf.vim	/^let s:prototype = tlib#Object#New({'_class': ['Filter_cnf'], 'name': 'cnf'}) "{{{2$/;"	v
s:prototype	.\vimfiles\bundle\tlib_vim\autoload\tlib\Filter_cnf.vim	/^let s:prototype.highlight = g:tlib#input#higroup$/;"	v
s:prototype	.\vimfiles\bundle\tlib_vim\autoload\tlib\Filter_cnfd.vim	/^let s:prototype = tlib#Filter_cnf#New({'_class': ['Filter_cnfd'], 'name': 'cnfd'}) "{{{2$/;"	v
s:prototype	.\vimfiles\bundle\tlib_vim\autoload\tlib\Filter_cnfd.vim	/^let s:prototype.highlight = g:tlib#input#higroup$/;"	v
s:prototype	.\vimfiles\bundle\tlib_vim\autoload\tlib\Filter_cnfx.vim	/^let s:prototype = tlib#Filter_cnfd#New({'_class': ['Filter_cnfx'], 'name': 'cnfx'}) "{{{2$/;"	v
s:prototype	.\vimfiles\bundle\tlib_vim\autoload\tlib\Filter_cnfx.vim	/^let s:prototype.highlight = g:tlib#input#higroup$/;"	v
s:prototype	.\vimfiles\bundle\tlib_vim\autoload\tlib\Filter_fuzzy.vim	/^let s:prototype = tlib#Filter_cnf#New({'_class': ['Filter_fuzzy'], 'name': 'fuzzy'}) "{{{2$/;"	v
s:prototype	.\vimfiles\bundle\tlib_vim\autoload\tlib\Filter_fuzzy.vim	/^let s:prototype.highlight = g:tlib#input#higroup$/;"	v
s:prototype	.\vimfiles\bundle\tlib_vim\autoload\tlib\Object.vim	/^let s:prototype  = {'_class': ['object'], '_super': [], '_id': 0} "{{{2$/;"	v
s:prototype	.\vimfiles\bundle\tlib_vim\autoload\tlib\Test.vim	/^let s:prototype = tlib#Object#New({'_class': ['Test']}) "{{{2$/;"	v
s:prototype	.\vimfiles\bundle\tlib_vim\autoload\tlib\TestChild.vim	/^let s:prototype = tlib#Test#New({'_class': ['TestChild']}) "{{{2$/;"	v
s:prototype	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^let s:prototype = tlib#Object#New({$/;"	v
s:pythonpath	.\vim73\syntax\vim.vim	/^ let s:pythonpath= globpath(&rtp,"syntax\/python.vim")$/;"	v
s:pythonpath	.\vim73\syntax\vim.vim	/^let s:pythonpath= expand("<sfile>:p:h")."\/python.vim"$/;"	v
s:q_adverbs	.\vim73\syntax\perl6.vim	/^    let s:q_adverbs = [$/;"	v
s:reCComment	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\tokenizer.vim	/^let s:reCComment = '\\\/\\*\\|\\*\\\/'$/;"	v
s:reComment	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\tokenizer.vim	/^let s:reComment = s:reCComment.'\\|'.s:reCppComment$/;"	v
s:reCppComment	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\tokenizer.vim	/^let s:reCppComment = '\\\/\\\/'$/;"	v
s:reCppKeyword	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\tokenizer.vim	/^let s:reCppKeyword = '\\C\\<'.join(s:cppKeyword, '\\>\\|\\<').'\\>'$/;"	v
s:reCppOperatorOrPunctuator	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\tokenizer.vim	/^let s:reCppOperatorOrPunctuator = escape(join(s:cppOperatorPunctuator, '\\|'), '*.\/^~[]')$/;"	v
s:reIncludeFilePart	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\includes.vim	/^let s:reIncludeFilePart = '\\(<\\|"\\)\\(\\f\\|\\s\\)\\+\\(>\\|"\\)'$/;"	v
s:rePreprocIncludeFile	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\includes.vim	/^let s:rePreprocIncludeFile = s:rePreprocIncludePart . s:reIncludeFilePart$/;"	v
s:rePreprocIncludePart	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\includes.vim	/^let s:rePreprocIncludePart = '\\C#\\s*include\\s*'$/;"	v
s:register	.\vimfiles\bundle\tlib_vim\autoload\tlib\signs.vim	/^let s:register = {}$/;"	v
s:register_a	.\vim73\syntax\hitest.vim	/^let s:register_a  = @a$/;"	v
s:register_se	.\vim73\syntax\hitest.vim	/^let s:register_se = @\/$/;"	v
s:relative_indent	.\vim73\indent\eiffel.vim	/^let s:relative_indent = '^\\s*\\(deferred\\|class\\|feature\\|creation\\|inherit\\|loop\\|from\\|until\\|if\\|else\\|elseif\\|ensure\\|require\\|check\\|do\\|local\\|invariant\\|variant\\|rename\\|redefine\\|do\\|export\\)\\>'$/;"	v
s:report	.\vim73\syntax\hitest.vim	/^let s:report      = &report$/;"	v
s:restoreframecmd	.\vimfiles\bundle\tlib_vim\autoload\tlib\vim.vim	/^let s:restoreframecmd = ''$/;"	v
s:routines	.\vim73\syntax\perl6.vim	/^let s:routines = [$/;"	v
s:ruby_deindent_keywords	.\vim73\indent\ruby.vim	/^let s:ruby_deindent_keywords =$/;"	v
s:ruby_indent_keywords	.\vim73\indent\ruby.vim	/^let s:ruby_indent_keywords = '^\\s*\\zs\\<\\%(module\\|class\\|def\\|if\\|for' .$/;"	v
s:ruby_path	.\vim73\ftplugin\ruby.vim	/^      let s:ruby_path = system("ruby -e '" . s:code . "'")$/;"	v
s:ruby_path	.\vim73\ftplugin\ruby.vim	/^      let s:ruby_path = system('ruby -e "' . s:code . '"')$/;"	v
s:ruby_path	.\vim73\ftplugin\ruby.vim	/^    let s:ruby_path = ".,,"$/;"	v
s:ruby_path	.\vim73\ftplugin\ruby.vim	/^    let s:ruby_path = '.,' . substitute(s:ruby_path, '\\%(^\\|,\\)\\.\\%(,\\|$\\)', ',,', '')$/;"	v
s:ruby_path	.\vim73\ftplugin\ruby.vim	/^    let s:ruby_path = g:ruby_path$/;"	v
s:rubycomplete_debug	.\vim73\autoload\rubycomplete.vim	/^let s:rubycomplete_debug = 0$/;"	v
s:rubycomplete_rails_loaded	.\vim73\autoload\rubycomplete.vim	/^let s:rubycomplete_rails_loaded = 0$/;"	v
s:rubypath	.\vim73\syntax\vim.vim	/^ let s:rubypath= globpath(&rtp,"syntax\/ruby.vim")$/;"	v
s:rubypath	.\vim73\syntax\vim.vim	/^let s:rubypath= expand("<sfile>:p:h")."\/ruby.vim"$/;"	v
s:rule_rx	.\vim73\indent\make.vim	/^let s:rule_rx = '^[^ \\t#:][^#:]*:\\{1,2}\\%([^=:]\\|$\\)'$/;"	v
s:s	.\vim73\ftplugin\ocaml.vim	/^let s:s = line2byte(line('.'))+col('.')-1$/;"	v
s:save_cpo	.\vim73\ftplugin\ant.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vim73\ftplugin\aspvbs.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vim73\ftplugin\config.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vim73\ftplugin\csc.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vim73\ftplugin\csh.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vim73\ftplugin\dtd.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vim73\ftplugin\eruby.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vim73\ftplugin\haml.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vim73\ftplugin\html.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vim73\ftplugin\initex.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vim73\ftplugin\java.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vim73\ftplugin\jsp.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vim73\ftplugin\matlab.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vim73\ftplugin\perl.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vim73\ftplugin\perl6.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vim73\ftplugin\php.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vim73\ftplugin\plaintex.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vim73\ftplugin\sgml.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vim73\ftplugin\sh.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vim73\ftplugin\sql.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vim73\ftplugin\svg.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vim73\ftplugin\tcsh.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vim73\ftplugin\tex.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vim73\ftplugin\xhtml.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vim73\ftplugin\xml.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vim73\ftplugin\xsd.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vim73\macros\matchit.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vim73\mswin.vim	/^  let s:save_cpo = &cpoptions$/;"	v
s:save_cpo	.\vim73\syntax\named.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\async_cache.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\cache.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\commands.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\complete.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\context_filetype.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters\converter_abbr.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters\converter_case.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters\converter_delimiter.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters\converter_nothing.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters\converter_remove_next_keyword.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters\matcher_fuzzy.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters\matcher_head.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters\matcher_old.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters\sorter_length.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters\sorter_nothing.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters\sorter_rank.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\handler.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\helper.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\init.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\mappings.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\buffer_complete.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\dictionary_complete.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\filename_complete.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\filename_include.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\include_complete.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\member_complete.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\omni_complete.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\syntax_complete.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\tags_complete.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\util.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\variables.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\neocomplcache\autoload\unite\sources\file_include.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\neocomplcache\autoload\unite\sources\neocomplcache.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\data\list.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\prelude.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\system\cache.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache\buffer_complete.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache\dictionary_complete.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache\include_complete.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache\syntax_complete.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\neocomplcache\plugin\neocomplcache\tags_complete.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\neocomplcache\vest\test-neocomplcache.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\tlib_vim\autoload\tlib\comments.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\tlib_vim\autoload\tlib\map.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\tlib_vim\autoload\tlib\normal.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\tlib_vim\autoload\tlib\notify.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\tlib_vim\autoload\tlib\paragraph.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\tlib_vim\autoload\tlib\signs.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\tlib_vim\autoload\tlib\syntax.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\tlib_vim\autoload\tlib\textobjects.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\tlib_vim\plugin\02tlib.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\tlib_vim\spec\tlib\arg.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\tlib_vim\spec\tlib\file.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\tlib_vim\spec\tlib\input.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\tlib_vim\spec\tlib\list.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\tlib_vim\spec\tlib\rx.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\tlib_vim\spec\tlib\string.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\tlib_vim\spec\tlib\url.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\tlib_vim\spec\tlib\var.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\vim-snipmate\after\plugin\snipMate.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vimfiles\bundle\vim-snipmate\plugin\snipMate.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_exc	.\vim73\autoload\sqlcomplete.vim	/^    let s:save_exc = g:omni_syntax_group_exclude_sql$/;"	v
s:save_exc	.\vim73\autoload\sqlcomplete.vim	/^let s:save_exc              = ""$/;"	v
s:save_inc	.\vim73\autoload\sqlcomplete.vim	/^    let s:save_inc = g:omni_syntax_group_include_sql$/;"	v
s:save_inc	.\vim73\autoload\sqlcomplete.vim	/^let s:save_inc              = ""$/;"	v
s:save_prev_table	.\vim73\autoload\sqlcomplete.vim	/^let s:save_prev_table       = ""$/;"	v
s:savecpo	.\vim73\compiler\perl.vim	/^let s:savecpo = &cpo$/;"	v
s:scanned_files	.\vimfiles\bundle\vim-addon-mw-utils\autoload\cached_file_contents.vim	/^let s:scanned_files = s:c['scanned_files']$/;"	v
s:script_candidates_list	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^  let s:script_candidates_list = {}$/;"	v
s:scriptfile	.\vimfiles\bundle\tlib_vim\spec\tlib\hash.vim	/^    let s:scriptfile = matchstr(s:script, '^\\s*\\d\\+:\\s\\+\\zs.*$')$/;"	v
s:scriptlines	.\vimfiles\bundle\tlib_vim\spec\tlib\hash.vim	/^        let s:scriptlines = readfile(s:scriptfile)$/;"	v
s:sdir	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\cache.vim	/^let s:sdir = neocomplcache#util#substitute_path_separator($/;"	v
s:searchpairflags	.\vim73\indent\php.vim	/^let s:searchpairflags = 'bWr'$/;"	v
s:section	.\vim73\ftplugin\php.vim	/^let s:section = '\\(.*\\%#\\)\\@!\\_^\\s*\\zs\\('.s:function.'\\|'.s:class.'\\|'.s:interface.'\\)'$/;"	v
s:self_version	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e.vim	/^let s:self_version = expand('<sfile>:t:r')$/;"	v
s:settings	.\vim73\syntax\2html.vim	/^let s:settings = tohtml#GetUserSettings()$/;"	v
s:sgml_cpo_save	.\vim73\syntax\sgml.vim	/^let s:sgml_cpo_save = &cpo$/;"	v
s:sh_fold_functions	.\vim73\syntax\sh.vim	/^ let s:sh_fold_functions = 1$/;"	v
s:sh_fold_heredoc	.\vim73\syntax\sh.vim	/^ let s:sh_fold_heredoc   = 2$/;"	v
s:sh_fold_ifdofor	.\vim73\syntax\sh.vim	/^ let s:sh_fold_ifdofor   = 4$/;"	v
s:sh_indent_defaults	.\vim73\indent\sh.vim	/^let s:sh_indent_defaults = {$/;"	v
s:shortmess	.\vim73\syntax\hitest.vim	/^let s:shortmess   = &shortmess$/;"	v
s:single_dent	.\vim73\indent\eiffel.vim	/^let s:single_dent = '^[^-]\\+[[:alnum:]]\\+ is\\(\\s*\\(--\\).*\\)\\=$'$/;"	v
s:skip	.\vim73\indent\cobol.vim	/^let s:skip = 'getline(".") =~ "^.\\\\{6\\\\}[*\/$-]\\\\|\\"[^\\"]*\\""'$/;"	v
s:skip_expr	.\vim73\indent\ruby.vim	/^let s:skip_expr =$/;"	v
s:snipMate	.\vimfiles\bundle\vim-snipmate\plugin\snipMate.vim	/^let s:snipMate = g:snipMate$/;"	v
s:snipMate	.\vimfiles\bundle\vim-snipmate\plugin\snipMate.vim	/^let s:snipMate['get_scopes'] = get(s:snipMate, 'get_scopes', funcref#Function('return split(&ft,"\\\\.")+[&syntax, "_"]'))$/;"	v
s:snipMate	.\vimfiles\bundle\vim-snipmate\plugin\snipMate.vim	/^let s:snipMate['get_snippets'] = get(s:snipMate, 'get_snippets', funcref#Function("snipMate#GetSnippets"))$/;"	v
s:snipMate	.\vimfiles\bundle\vim-snipmate\plugin\snipMate.vim	/^let s:snipMate['snippet_dirs'] = get(s:snipMate, 'snippet_dirs', funcref#Function('return split(&runtimepath,",")'))$/;"	v
s:sol	.\vim73\ftplugin\sh.vim	/^    let s:sol = '\\%(;\\s*\\|^\\s*\\)\\@<='  " start of line$/;"	v
s:sorter	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters\sorter_length.vim	/^let s:sorter = {$/;"	v
s:sorter	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters\sorter_nothing.vim	/^let s:sorter = {$/;"	v
s:sorter	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters\sorter_rank.vim	/^let s:sorter = {$/;"	v
s:source	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\buffer_complete.vim	/^let s:source = {$/;"	v
s:source	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\dictionary_complete.vim	/^let s:source = {$/;"	v
s:source	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\filename_complete.vim	/^let s:source = {$/;"	v
s:source	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\filename_include.vim	/^let s:source = {$/;"	v
s:source	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\include_complete.vim	/^let s:source = {$/;"	v
s:source	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\member_complete.vim	/^let s:source = {$/;"	v
s:source	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\omni_complete.vim	/^let s:source = {$/;"	v
s:source	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\syntax_complete.vim	/^let s:source = {$/;"	v
s:source	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\tags_complete.vim	/^let s:source = {$/;"	v
s:source	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete.vim	/^let s:source = {$/;"	v
s:source	.\vimfiles\bundle\neocomplcache\autoload\unite\sources\file_include.vim	/^let s:source = {$/;"	v
s:spacing_errors	.\vim73\syntax\changelog.vim	/^  let s:spacing_errors = 1$/;"	v
s:spacing_errors	.\vim73\syntax\changelog.vim	/^  let s:spacing_errors = b:changelog_spacing_errors$/;"	v
s:spacing_errors	.\vim73\syntax\changelog.vim	/^  let s:spacing_errors = g:changelog_spacing_errors$/;"	v
s:spc	.\vim73\spell\he.vim	/^let s:spc = &l:spc$/;"	v
s:spc	.\vim73\spell\yi.vim	/^let s:spc = &l:spc$/;"	v
s:spellfile_URL	.\vim73\autoload\spellfile.vim	/^let s:spellfile_URL = ''    " Start with nothing so that s:donedict is reset.$/;"	v
s:sql_file_procedure	.\vim73\autoload\sqlcomplete.vim	/^let s:sql_file_procedure    = ""$/;"	v
s:sql_file_table	.\vim73\autoload\sqlcomplete.vim	/^let s:sql_file_table        = ""$/;"	v
s:sql_file_view	.\vim73\autoload\sqlcomplete.vim	/^let s:sql_file_view         = ""$/;"	v
s:startcol	.\vim73\syntax\2html.vim	/^      let s:startcol = s:col " The start column for processing text$/;"	v
s:state	.\vimfiles\bundle\tlib_vim\samples\tlib\input\tlib_input_list.vim	/^let s:state = {$/;"	v
s:state_proto	.\vimfiles\bundle\vim-snipmate\autoload\snipMate.vim	/^let s:state_proto = {}$/;"	v
s:statusline	.\vimfiles\bundle\tlib_vim\autoload\tlib\progressbar.vim	/^let s:statusline = []$/;"	v
s:subtype	.\vim73\syntax\liquid.vim	/^  let s:subtype = exists('b:liquid_subtype') ? b:liquid_subtype : ''$/;"	v
s:syn_list	.\vim73\autoload\sqlcomplete.vim	/^let s:syn_list              = []$/;"	v
s:syn_remove_words	.\vim73\autoload\syntaxcomplete.vim	/^let s:syn_remove_words = 'match,matchgroup=,contains,'.$/;"	v
s:syn_value	.\vim73\autoload\sqlcomplete.vim	/^let s:syn_value             = []$/;"	v
s:syng_strcom	.\vim73\indent\ruby.vim	/^let s:syng_strcom = '\\<ruby\\%(String\\|StringEscape\\|ASCIICode' .$/;"	v
s:syng_string	.\vim73\indent\ruby.vim	/^let s:syng_string =$/;"	v
s:syng_stringdoc	.\vim73\indent\ruby.vim	/^let s:syng_stringdoc =$/;"	v
s:syntax_list	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\syntax_complete.vim	/^  let s:syntax_list = {}$/;"	v
s:szCurrentWorkingDir	.\vimfiles\bundle\OmniCppComplete\autoload\omni\cpp\complete.vim	/^let s:szCurrentWorkingDir = getcwd()$/;"	v
s:tag	.\vim73\indent\haml.vim	/^let s:tag = '\\%([%.#][[:alnum:]_-]\\+\\|'.s:attributes.'\\)*[<>]*'$/;"	v
s:tag_close	.\vim73\syntax\2html.vim	/^  let s:tag_close = ' \/>'$/;"	v
s:tag_close	.\vim73\syntax\2html.vim	/^  let s:tag_close = '>'$/;"	v
s:tags_list	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\tags_complete.vim	/^  let s:tags_list = {}$/;"	v
s:taintopt	.\vim73\compiler\perl.vim	/^	let s:taintopt = ''$/;"	v
s:taintopt	.\vim73\compiler\perl.vim	/^	let s:taintopt = 'T'$/;"	v
s:tbl_alias	.\vim73\autoload\sqlcomplete.vim	/^let s:tbl_alias             = []$/;"	v
s:tbl_cols	.\vim73\autoload\sqlcomplete.vim	/^let s:tbl_cols              = []$/;"	v
s:tbl_name	.\vim73\autoload\sqlcomplete.vim	/^let s:tbl_name              = []$/;"	v
s:tclpath	.\vim73\syntax\vim.vim	/^  let s:tclpath= globpath(&rtp,"syntax\/tcl.vim")$/;"	v
s:tclpath	.\vim73\syntax\vim.vim	/^ let s:tclpath= expand("<sfile>:p:h")."\/tcl.vim"$/;"	v
s:temp	.\vim73\syntax\perl6.vim	/^    let s:temp = split(s:words_space)$/;"	v
s:temp	.\vim73\syntax\perl6.vim	/^let s:temp = split(s:words_space)$/;"	v
s:test	.\vim73\ftplugin\fortran.vim	/^      let s:test = strpart(getline(s:ln),0,5)$/;"	v
s:test	.\vim73\indent\fortran.vim	/^      let s:test = strpart(getline(s:ln),0,5)$/;"	v
s:test	.\vim73\syntax\fortran.vim	/^      let s:test = strpart(getline(s:ln),0,5)$/;"	v
s:texMathList	.\vim73\syntax\tex.vim	/^  let s:texMathList=[$/;"	v
s:tex_conceal	.\vim73\syntax\tex.vim	/^ let s:tex_conceal= 'admgs'$/;"	v
s:tex_conceal	.\vim73\syntax\tex.vim	/^ let s:tex_conceal= g:tex_conceal$/;"	v
s:thiswin	.\vim73\optwin.vim	/^  let s:thiswin = winnr()$/;"	v
s:thiswin	.\vim73\optwin.vim	/^let s:thiswin = winnr()$/;"	v
s:timestamp	.\vimfiles\bundle\tlib_vim\autoload\tlib\progressbar.vim	/^let s:timestamp = -1$/;"	v
s:token_pattern	.\vim73\indent\dtd.vim	/^let s:token_pattern = '^[^[:space:]]\\+'$/;"	v
s:trust_user_indent	.\vim73\indent\eiffel.vim	/^let s:trust_user_indent = '\\(+\\)\\(\\s*\\(--\\).*\\)\\=$'$/;"	v
s:trytcl	.\vim73\syntax\vim.vim	/^ let s:trytcl= (&shell !~ '\\<\\%(bash\\>\\|4[nN][tT]\\|\\<zsh\\)\\>\\%(\\.exe\\)\\=$')$/;"	v
s:trytcl	.\vim73\syntax\vim.vim	/^ let s:trytcl= 1$/;"	v
s:tutorfile	.\vim73\tutor\tutor.vim	/^let s:tutorfile = "\/tutor\/tutor"$/;"	v
s:tutorxx	.\vim73\tutor\tutor.vim	/^let s:tutorxx = $VIMRUNTIME . s:tutorfile . s:ext$/;"	v
s:type	.\vim73\indent\ocaml.vim	/^let s:type = '^\\s*\\%(class\\|let\\|type\\)\\>.*='$/;"	v
s:type	.\vim73\indent\sml.vim	/^let s:type = '^\\s*\\%(let\\|type\\)\\>.*='$/;"	v
s:undo_ftplugin	.\vim73\ftplugin\ant.vim	/^    let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	.\vim73\ftplugin\ant.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	.\vim73\ftplugin\aspvbs.vim	/^    let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	.\vim73\ftplugin\aspvbs.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	.\vim73\ftplugin\config.vim	/^    let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	.\vim73\ftplugin\config.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	.\vim73\ftplugin\eruby.vim	/^  let s:undo_ftplugin = b:undo_ftplugin . " | " . s:undo_ftplugin$/;"	v
s:undo_ftplugin	.\vim73\ftplugin\eruby.vim	/^  let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	.\vim73\ftplugin\eruby.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	.\vim73\ftplugin\haml.vim	/^  let s:undo_ftplugin = b:undo_ftplugin . " | " . s:undo_ftplugin$/;"	v
s:undo_ftplugin	.\vim73\ftplugin\haml.vim	/^  let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	.\vim73\ftplugin\haml.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	.\vim73\ftplugin\jsp.vim	/^    let s:undo_ftplugin = b:undo_ftplugin . " | " . s:undo_ftplugin$/;"	v
s:undo_ftplugin	.\vim73\ftplugin\jsp.vim	/^    let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	.\vim73\ftplugin\jsp.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	.\vim73\ftplugin\php.vim	/^    let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	.\vim73\ftplugin\php.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	.\vim73\ftplugin\sgml.vim	/^    let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	.\vim73\ftplugin\sgml.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	.\vim73\ftplugin\svg.vim	/^    let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	.\vim73\ftplugin\svg.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	.\vim73\ftplugin\tcsh.vim	/^    let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	.\vim73\ftplugin\tcsh.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	.\vim73\ftplugin\xhtml.vim	/^    let s:undo_ftplugin = b:undo_ftplugin . " | " . s:undo_ftplugin$/;"	v
s:undo_ftplugin	.\vim73\ftplugin\xhtml.vim	/^    let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	.\vim73\ftplugin\xhtml.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	.\vim73\ftplugin\xsd.vim	/^    let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	.\vim73\ftplugin\xsd.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_spellang	.\vim73\menu.vim	/^  let s:undo_spellang = ['aun &Tools.&Spelling.&Find\\ More\\ Languages']$/;"	v
s:val	.\vim73\indent\sml.vim	/^let s:val = '^\\s*\\(val\\|external\\)\\>.*:'$/;"	v
s:value	.\vimfiles\bundle\tlib_vim\autoload\tlib\progressbar.vim	/^let s:value = []$/;"	v
s:values	.\vim73\autoload\csscomplete.vim	/^	let s:values = split("azimuth background background-attachment background-color background-image background-position background-repeat border bottom border-collapse border-color border-spacing border-style border-top border-right border-bottom border-left border-top-color border-right-color border-bottom-color border-left-color  border-top-style border-right-style border-bottom-style border-left-style border-top-width border-right-width border-bottom-width border-left-width border-width caption-side clear clip color content counter-increment counter-reset cue cue-after cue-before cursor display direction elevation empty-cells float font font-family font-size font-style font-variant font-weight height left letter-spacing line-height list-style list-style-image list-style-position list-style-type margin margin-right margin-left margin-top margin-bottom max-height max-width min-height min-width orphans outline outline-color outline-style outline-width overflow padding padding-top padding-right padding-bottom padding-left page-break-after page-break-before page-break-inside pause pause-after pause-before pitch pitch-range play-during position quotes right richness speak speak-header speak-numeral speak-punctuation speech-rate stress table-layout text-align text-decoration text-indent text-transform top unicode-bidi vertical-align visibility voice-family volume white-space width widows word-spacing z-index")$/;"	v
s:vcol	.\vim73\syntax\2html.vim	/^	      let s:vcol = virtcol([s:lnum, s:startcol + s:idx + s:offset - len(s:prevc)])$/;"	v
s:warnopt	.\vim73\compiler\perl.vim	/^	let s:warnopt = 'W'$/;"	v
s:warnopt	.\vim73\compiler\perl.vim	/^	let s:warnopt = 'w'$/;"	v
s:whatterm	.\vim73\syntax\2html.vim	/^  let s:whatterm = "cterm"$/;"	v
s:whatterm	.\vim73\syntax\2html.vim	/^  let s:whatterm = "gui"$/;"	v
s:when_no_matched_or_others	.\vim73\ftplugin\sql.vim	/^let s:when_no_matched_or_others = '\\%(\\<when\\>\\%(\\s\\+\\%(\\%(\\<not\\>\\s\\+\\)\\?<matched\\>\\)\\|\\<others\\>\\)\\@!\\)'$/;"	v
s:width	.\vimfiles\bundle\tlib_vim\autoload\tlib\progressbar.vim	/^let s:width = []$/;"	v
s:words	.\vim73\syntax\perl6.vim	/^    let s:words = join(s:temp, "\\\\|")$/;"	v
s:words	.\vim73\syntax\perl6.vim	/^let s:words = join(s:temp, "\\\\|")$/;"	v
s:words_space	.\vim73\syntax\perl6.vim	/^    let s:words_space = join(words, " ")$/;"	v
s:words_space	.\vim73\syntax\perl6.vim	/^let s:words_space = join(s:routines, " ")$/;"	v
s:wrapscan	.\vim73\syntax\hitest.vim	/^let s:wrapscan    = &wrapscan$/;"	v
s:wsh_cpo_save	.\vim73\syntax\wsh.vim	/^let s:wsh_cpo_save = &cpo$/;"	v
s:xml_cpo_save	.\vim73\syntax\xml.vim	/^let s:xml_cpo_save = &cpo$/;"	v
s:zipfile_escape	.\vim73\autoload\zip.vim	/^let s:zipfile_escape = ' ?&;\\'$/;"	v
s:zsh_syntax_variables	.\vim73\syntax\zsh.vim	/^  let s:zsh_syntax_variables = 'all'$/;"	v
s:zsh_syntax_variables	.\vim73\syntax\zsh.vim	/^  let s:zsh_syntax_variables = g:zsh_syntax_variables$/;"	v
sArgs	.\ctags58\args.h	/^typedef struct sArgs {$/;"	s
sArgs::__anon2::argvArgs	.\ctags58\args.h	/^		} argvArgs;$/;"	m	union:sArgs::__anon2	typeref:struct:sArgs::__anon2::sArgvArgs	access:public
sArgs::__anon2::fileArgs	.\ctags58\args.h	/^		} fileArgs;$/;"	m	union:sArgs::__anon2	typeref:struct:sArgs::__anon2::sFileArgs	access:public
sArgs::__anon2::sArgvArgs	.\ctags58\args.h	/^		struct sArgvArgs {$/;"	s	union:sArgs::__anon2	access:public
sArgs::__anon2::sArgvArgs::argv	.\ctags58\args.h	/^			char* const* argv;$/;"	m	struct:sArgs::__anon2::sArgvArgs	access:public
sArgs::__anon2::sArgvArgs::item	.\ctags58\args.h	/^			char* const* item;$/;"	m	struct:sArgs::__anon2::sArgvArgs	access:public
sArgs::__anon2::sFileArgs	.\ctags58\args.h	/^		struct sFileArgs {$/;"	s	union:sArgs::__anon2	access:public
sArgs::__anon2::sFileArgs::fp	.\ctags58\args.h	/^			FILE* fp;$/;"	m	struct:sArgs::__anon2::sFileArgs	access:public
sArgs::__anon2::sStringArgs	.\ctags58\args.h	/^		struct sStringArgs {$/;"	s	union:sArgs::__anon2	access:public
sArgs::__anon2::sStringArgs::item	.\ctags58\args.h	/^			const char* item;$/;"	m	struct:sArgs::__anon2::sStringArgs	access:public
sArgs::__anon2::sStringArgs::next	.\ctags58\args.h	/^			const char* next;$/;"	m	struct:sArgs::__anon2::sStringArgs	access:public
sArgs::__anon2::sStringArgs::string	.\ctags58\args.h	/^			const char* string;$/;"	m	struct:sArgs::__anon2::sStringArgs	access:public
sArgs::__anon2::stringArgs	.\ctags58\args.h	/^		} stringArgs;$/;"	m	union:sArgs::__anon2	typeref:struct:sArgs::__anon2::sStringArgs	access:public
sArgs::item	.\ctags58\args.h	/^	char* item;$/;"	m	struct:sArgs	access:public
sArgs::lineMode	.\ctags58\args.h	/^	boolean lineMode;$/;"	m	struct:sArgs	access:public
sArgs::type	.\ctags58\args.h	/^	argType type;$/;"	m	struct:sArgs	access:public
sArgs::u	.\ctags58\args.h	/^	} u;$/;"	m	struct:sArgs	typeref:union:sArgs::__anon2	access:public
sArgvArgs	.\ctags58\args.h	/^		struct sArgvArgs {$/;"	s	union:sArgs::__anon2	access:public
sConditionalInfo	.\ctags58\get.c	/^typedef struct sConditionalInfo {$/;"	s	file:
sConditionalInfo::branchChosen	.\ctags58\get.c	/^	boolean branchChosen;       \/* branch already selected *\/$/;"	m	struct:sConditionalInfo	file:	access:public
sConditionalInfo::ignoreAllBranches	.\ctags58\get.c	/^	boolean ignoreAllBranches;  \/* ignoring parent conditional branch *\/$/;"	m	struct:sConditionalInfo	file:	access:public
sConditionalInfo::ignoring	.\ctags58\get.c	/^	boolean ignoring;           \/* current ignore state *\/$/;"	m	struct:sConditionalInfo	file:	access:public
sConditionalInfo::singleBranch	.\ctags58\get.c	/^	boolean singleBranch;       \/* choose only one branch *\/$/;"	m	struct:sConditionalInfo	file:	access:public
sCookedArgs	.\ctags58\options.h	/^typedef struct sCookedArgs {$/;"	s
sCookedArgs::args	.\ctags58\options.h	/^	Arguments* args;$/;"	m	struct:sCookedArgs	access:public
sCookedArgs::isOption	.\ctags58\options.h	/^	boolean isOption;$/;"	m	struct:sCookedArgs	access:public
sCookedArgs::item	.\ctags58\options.h	/^	char* item;$/;"	m	struct:sCookedArgs	access:public
sCookedArgs::longOption	.\ctags58\options.h	/^	boolean longOption;$/;"	m	struct:sCookedArgs	access:public
sCookedArgs::parameter	.\ctags58\options.h	/^	const char* parameter;$/;"	m	struct:sCookedArgs	access:public
sCookedArgs::shortOptions	.\ctags58\options.h	/^	char *shortOptions;$/;"	m	struct:sCookedArgs	access:public
sCookedArgs::simple	.\ctags58\options.h	/^	char simple[2];$/;"	m	struct:sCookedArgs	access:public
sCppState	.\ctags58\get.c	/^typedef struct sCppState {$/;"	s	file:
sCppState::directive	.\ctags58\get.c	/^	} directive;$/;"	m	struct:sCppState	typeref:struct:sCppState::sDirective	file:	access:public
sCppState::hasAtLiteralStrings	.\ctags58\get.c	/^	boolean hasAtLiteralStrings; \/* supports @"c:\\" strings *\/$/;"	m	struct:sCppState	file:	access:public
sCppState::resolveRequired	.\ctags58\get.c	/^	boolean resolveRequired;     \/* must resolve if\/else\/elif\/endif branch *\/$/;"	m	struct:sCppState	file:	access:public
sCppState::sDirective	.\ctags58\get.c	/^	struct sDirective {$/;"	s	struct:sCppState	file:	access:public
sCppState::sDirective::accept	.\ctags58\get.c	/^		boolean	accept;          \/* is a directive syntactically permitted? *\/$/;"	m	struct:sCppState::sDirective	file:	access:public
sCppState::sDirective::ifdef	.\ctags58\get.c	/^		conditionalInfo ifdef [MaxCppNestingLevel];$/;"	m	struct:sCppState::sDirective	file:	access:public
sCppState::sDirective::name	.\ctags58\get.c	/^		vString * name;          \/* macro name *\/$/;"	m	struct:sCppState::sDirective	file:	access:public
sCppState::sDirective::nestLevel	.\ctags58\get.c	/^		unsigned int nestLevel;  \/* level 0 is not used *\/$/;"	m	struct:sCppState::sDirective	file:	access:public
sCppState::sDirective::state	.\ctags58\get.c	/^		enum eState state;       \/* current directive being processed *\/$/;"	m	struct:sCppState::sDirective	typeref:enum:sCppState::sDirective::eState	file:	access:public
sCppState::ungetch	.\ctags58\get.c	/^	int		ungetch, ungetch2;   \/* ungotten characters, if any *\/$/;"	m	struct:sCppState	file:	access:public
sCppState::ungetch2	.\ctags58\get.c	/^	int		ungetch, ungetch2;   \/* ungotten characters, if any *\/$/;"	m	struct:sCppState	file:	access:public
sDirective	.\ctags58\get.c	/^	struct sDirective {$/;"	s	struct:sCppState	file:	access:public
sEtags	.\ctags58\entry.h	/^	struct sEtags {$/;"	s	struct:eTagFile	access:public
sExtFields	.\ctags58\options.h	/^struct sExtFields {  \/* extension field content control *\/$/;"	s
sExtFields::access	.\ctags58\options.h	/^	boolean access;$/;"	m	struct:sExtFields	access:public
sExtFields::fileScope	.\ctags58\options.h	/^	boolean fileScope;$/;"	m	struct:sExtFields	access:public
sExtFields::implementation	.\ctags58\options.h	/^	boolean implementation;$/;"	m	struct:sExtFields	access:public
sExtFields::inheritance	.\ctags58\options.h	/^	boolean inheritance;$/;"	m	struct:sExtFields	access:public
sExtFields::kind	.\ctags58\options.h	/^	boolean kind;$/;"	m	struct:sExtFields	access:public
sExtFields::kindKey	.\ctags58\options.h	/^	boolean kindKey;$/;"	m	struct:sExtFields	access:public
sExtFields::kindLong	.\ctags58\options.h	/^	boolean kindLong;$/;"	m	struct:sExtFields	access:public
sExtFields::language	.\ctags58\options.h	/^	boolean language;$/;"	m	struct:sExtFields	access:public
sExtFields::lineNumber	.\ctags58\options.h	/^	boolean lineNumber;$/;"	m	struct:sExtFields	access:public
sExtFields::scope	.\ctags58\options.h	/^	boolean scope;$/;"	m	struct:sExtFields	access:public
sExtFields::signature	.\ctags58\options.h	/^	boolean signature;$/;"	m	struct:sExtFields	access:public
sExtFields::typeRef	.\ctags58\options.h	/^	boolean typeRef;$/;"	m	struct:sExtFields	access:public
sFileArgs	.\ctags58\args.h	/^		struct sFileArgs {$/;"	s	union:sArgs::__anon2	access:public
sHashEntry	.\ctags58\keyword.c	/^typedef struct sHashEntry {$/;"	s	file:
sHashEntry::language	.\ctags58\keyword.c	/^	langType language;$/;"	m	struct:sHashEntry	file:	access:public
sHashEntry::next	.\ctags58\keyword.c	/^	struct sHashEntry *next;$/;"	m	struct:sHashEntry	typeref:struct:sHashEntry::sHashEntry	file:	access:public
sHashEntry::string	.\ctags58\keyword.c	/^	const char *string;$/;"	m	struct:sHashEntry	file:	access:public
sHashEntry::value	.\ctags58\keyword.c	/^	int value;$/;"	m	struct:sHashEntry	file:	access:public
sInclude	.\ctags58\options.h	/^struct sInclude {$/;"	s
sInclude::fileNames	.\ctags58\options.h	/^	boolean fileNames;      \/* include tags for source file names *\/$/;"	m	struct:sInclude	access:public
sInclude::fileScope	.\ctags58\options.h	/^	boolean fileScope;      \/* include tags of file scope only *\/$/;"	m	struct:sInclude	access:public
sInclude::qualifiedTags	.\ctags58\options.h	/^	boolean qualifiedTags;  \/* include tags for qualified class members *\/$/;"	m	struct:sInclude	access:public
sInputFile	.\ctags58\read.h	/^typedef struct sInputFile {$/;"	s
sInputFile::currentLine	.\ctags58\read.h	/^	const unsigned char* currentLine;  \/* current line being worked on *\/$/;"	m	struct:sInputFile	access:public
sInputFile::eof	.\ctags58\read.h	/^	boolean     eof;           \/* have we reached the end of file? *\/$/;"	m	struct:sInputFile	access:public
sInputFile::filePosition	.\ctags58\read.h	/^	fpos_t      filePosition;  \/* file position of current line *\/$/;"	m	struct:sInputFile	access:public
sInputFile::fp	.\ctags58\read.h	/^	FILE       *fp;            \/* stream used for reading the file *\/$/;"	m	struct:sInputFile	access:public
sInputFile::language	.\ctags58\read.h	/^	langType    language;      \/* language of input file *\/$/;"	m	struct:sInputFile	access:public
sInputFile::line	.\ctags58\read.h	/^	vString    *line;          \/* last line read from file *\/$/;"	m	struct:sInputFile	access:public
sInputFile::lineNumber	.\ctags58\read.h	/^	unsigned long lineNumber;  \/* line number in the input file *\/$/;"	m	struct:sInputFile	access:public
sInputFile::name	.\ctags58\read.h	/^	vString    *name;          \/* name of input file *\/$/;"	m	struct:sInputFile	access:public
sInputFile::newLine	.\ctags58\read.h	/^	boolean     newLine;       \/* will the next character begin a new line? *\/$/;"	m	struct:sInputFile	access:public
sInputFile::path	.\ctags58\read.h	/^	vString    *path;          \/* path of input file (if any) *\/$/;"	m	struct:sInputFile	access:public
sInputFile::sSource	.\ctags58\read.h	/^	struct sSource {$/;"	s	struct:sInputFile	access:public
sInputFile::sSource::isHeader	.\ctags58\read.h	/^		boolean  isHeader;       \/* is source file a header file? *\/$/;"	m	struct:sInputFile::sSource	access:public
sInputFile::sSource::language	.\ctags58\read.h	/^		langType language;       \/* language of source file *\/$/;"	m	struct:sInputFile::sSource	access:public
sInputFile::sSource::lineNumber	.\ctags58\read.h	/^		unsigned long lineNumber;\/* line number in the source file *\/$/;"	m	struct:sInputFile::sSource	access:public
sInputFile::sSource::name	.\ctags58\read.h	/^		vString *name;           \/* name to report for source file *\/$/;"	m	struct:sInputFile::sSource	access:public
sInputFile::sSource::tagPath	.\ctags58\read.h	/^		char    *tagPath;        \/* path of source file relative to tag file *\/$/;"	m	struct:sInputFile::sSource	access:public
sInputFile::source	.\ctags58\read.h	/^	} source;$/;"	m	struct:sInputFile	typeref:struct:sInputFile::sSource	access:public
sInputFile::ungetch	.\ctags58\read.h	/^	int         ungetch;       \/* a single character that was ungotten *\/$/;"	m	struct:sInputFile	access:public
sKeywordDesc	.\ctags58\c.c	/^typedef struct sKeywordDesc {$/;"	s	file:
sKeywordDesc	.\ctags58\eiffel.c	/^typedef struct sKeywordDesc {$/;"	s	file:
sKeywordDesc	.\ctags58\flex.c	/^typedef struct sKeywordDesc {$/;"	s	file:
sKeywordDesc	.\ctags58\fortran.c	/^typedef struct sKeywordDesc {$/;"	s	file:
sKeywordDesc	.\ctags58\jscript.c	/^typedef struct sKeywordDesc {$/;"	s	file:
sKeywordDesc	.\ctags58\sql.c	/^typedef struct sKeywordDesc {$/;"	s	file:
sKeywordDesc	.\ctags58\tex.c	/^typedef struct sKeywordDesc {$/;"	s	file:
sKeywordDesc	.\ctags58\vhdl.c	/^typedef struct sKeywordDesc {$/;"	s	file:
sKeywordDesc::id	.\ctags58\c.c	/^	keywordId id;$/;"	m	struct:sKeywordDesc	file:	access:public
sKeywordDesc::id	.\ctags58\eiffel.c	/^	keywordId id;$/;"	m	struct:sKeywordDesc	file:	access:public
sKeywordDesc::id	.\ctags58\flex.c	/^	keywordId id;$/;"	m	struct:sKeywordDesc	file:	access:public
sKeywordDesc::id	.\ctags58\fortran.c	/^	keywordId id;$/;"	m	struct:sKeywordDesc	file:	access:public
sKeywordDesc::id	.\ctags58\jscript.c	/^	keywordId id;$/;"	m	struct:sKeywordDesc	file:	access:public
sKeywordDesc::id	.\ctags58\sql.c	/^	keywordId id;$/;"	m	struct:sKeywordDesc	file:	access:public
sKeywordDesc::id	.\ctags58\tex.c	/^	keywordId id;$/;"	m	struct:sKeywordDesc	file:	access:public
sKeywordDesc::id	.\ctags58\vhdl.c	/^	keywordId id;$/;"	m	struct:sKeywordDesc	file:	access:public
sKeywordDesc::isValid	.\ctags58\c.c	/^	short isValid [5]; \/* indicates languages for which kw is valid *\/$/;"	m	struct:sKeywordDesc	file:	access:public
sKeywordDesc::name	.\ctags58\c.c	/^	const char *name;$/;"	m	struct:sKeywordDesc	file:	access:public
sKeywordDesc::name	.\ctags58\eiffel.c	/^	const char *name;$/;"	m	struct:sKeywordDesc	file:	access:public
sKeywordDesc::name	.\ctags58\flex.c	/^	const char *name;$/;"	m	struct:sKeywordDesc	file:	access:public
sKeywordDesc::name	.\ctags58\fortran.c	/^	const char *name;$/;"	m	struct:sKeywordDesc	file:	access:public
sKeywordDesc::name	.\ctags58\jscript.c	/^	const char *name;$/;"	m	struct:sKeywordDesc	file:	access:public
sKeywordDesc::name	.\ctags58\sql.c	/^	const char *name;$/;"	m	struct:sKeywordDesc	file:	access:public
sKeywordDesc::name	.\ctags58\tex.c	/^	const char *name;$/;"	m	struct:sKeywordDesc	file:	access:public
sKeywordDesc::name	.\ctags58\vhdl.c	/^	const char *name;$/;"	m	struct:sKeywordDesc	file:	access:public
sKind	.\ctags58\lregex.c	/^struct sKind {$/;"	s	file:
sKind::description	.\ctags58\lregex.c	/^	char* description;$/;"	m	struct:sKind	file:	access:public
sKind::enabled	.\ctags58\lregex.c	/^	boolean enabled;$/;"	m	struct:sKind	file:	access:public
sKind::letter	.\ctags58\lregex.c	/^	char letter;$/;"	m	struct:sKind	file:	access:public
sKind::name	.\ctags58\lregex.c	/^	char* name;$/;"	m	struct:sKind	file:	access:public
sKindOption	.\ctags58\parse.h	/^typedef struct sKindOption {$/;"	s
sKindOption::description	.\ctags58\parse.h	/^	const char* description;  \/* displayed in --help output *\/$/;"	m	struct:sKindOption	access:public
sKindOption::enabled	.\ctags58\parse.h	/^	boolean enabled;          \/* are tags for kind enabled? *\/$/;"	m	struct:sKindOption	access:public
sKindOption::letter	.\ctags58\parse.h	/^	int letter;               \/* kind letter *\/$/;"	m	struct:sKindOption	access:public
sKindOption::name	.\ctags58\parse.h	/^	const char* name;         \/* kind name *\/$/;"	m	struct:sKindOption	access:public
sMax	.\ctags58\entry.h	/^	struct sMax { size_t line, tag, file; } max;$/;"	s	struct:eTagFile	access:public
sMemberInfo	.\ctags58\c.c	/^typedef struct sMemberInfo {$/;"	s	file:
sMemberInfo::access	.\ctags58\c.c	/^	accessType access;           \/* access of current statement *\/$/;"	m	struct:sMemberInfo	file:	access:public
sMemberInfo::accessDefault	.\ctags58\c.c	/^	accessType accessDefault;    \/* access default for current statement *\/$/;"	m	struct:sMemberInfo	file:	access:public
sNumTags	.\ctags58\entry.h	/^	struct sNumTags { unsigned long added, prev; } numTags;$/;"	s	struct:eTagFile	access:public
sOcaKeywordDesc	.\ctags58\ocaml.c	/^typedef struct sOcaKeywordDesc {$/;"	s	file:
sOcaKeywordDesc::id	.\ctags58\ocaml.c	/^	ocamlKeyword id;$/;"	m	struct:sOcaKeywordDesc	file:	access:public
sOcaKeywordDesc::name	.\ctags58\ocaml.c	/^	const char *name;$/;"	m	struct:sOcaKeywordDesc	file:	access:public
sOptionDescription	.\ctags58\options.c	/^typedef struct sOptionDescription {$/;"	s	file:
sOptionDescription::description	.\ctags58\options.c	/^	const char *description;$/;"	m	struct:sOptionDescription	file:	access:public
sOptionDescription::usedByEtags	.\ctags58\options.c	/^	int usedByEtags;$/;"	m	struct:sOptionDescription	file:	access:public
sOptionValues	.\ctags58\options.h	/^typedef struct sOptionValues {$/;"	s
sOptionValues::append	.\ctags58\options.h	/^	boolean append;         \/* -a  append to "tags" file *\/$/;"	m	struct:sOptionValues	access:public
sOptionValues::backward	.\ctags58\options.h	/^	boolean backward;       \/* -B  regexp patterns search backwards *\/$/;"	m	struct:sOptionValues	access:public
sOptionValues::breakLine	.\ctags58\options.h	/^	unsigned long breakLine;\/* -b  source line at which to call lineBreak() *\/$/;"	m	struct:sOptionValues	access:public
sOptionValues::debugLevel	.\ctags58\options.h	/^	long debugLevel;        \/* -D  debugging output *\/$/;"	m	struct:sOptionValues	access:public
sOptionValues::etags	.\ctags58\options.h	/^	boolean etags;          \/* -e  output Emacs style tags file *\/$/;"	m	struct:sOptionValues	access:public
sOptionValues::etagsInclude	.\ctags58\options.h	/^	stringList* etagsInclude;\/* --etags-include  list of TAGS files to include*\/$/;"	m	struct:sOptionValues	access:public
sOptionValues::extensionFields	.\ctags58\options.h	/^	struct sExtFields extensionFields;\/* --fields  extension field control *\/$/;"	m	struct:sOptionValues	typeref:struct:sOptionValues::sExtFields	access:public
sOptionValues::fileList	.\ctags58\options.h	/^	char *fileList;         \/* -L  name of file containing names of files *\/$/;"	m	struct:sOptionValues	access:public
sOptionValues::filter	.\ctags58\options.h	/^	boolean filter;         \/* --filter  behave as filter: files in, tags out *\/$/;"	m	struct:sOptionValues	access:public
sOptionValues::filterTerminator	.\ctags58\options.h	/^	char* filterTerminator; \/* --filter-terminator  string to output *\/$/;"	m	struct:sOptionValues	access:public
sOptionValues::followLinks	.\ctags58\options.h	/^	boolean followLinks;    \/* --link  follow symbolic links? *\/$/;"	m	struct:sOptionValues	access:public
sOptionValues::headerExt	.\ctags58\options.h	/^	stringList* headerExt;  \/* -h  header extensions *\/$/;"	m	struct:sOptionValues	access:public
sOptionValues::if0	.\ctags58\options.h	/^	boolean if0;            \/* --if0  examine code within "#if 0" branch *\/$/;"	m	struct:sOptionValues	access:public
sOptionValues::ignore	.\ctags58\options.h	/^	stringList* ignore;     \/* -I  name of file containing tokens to ignore *\/$/;"	m	struct:sOptionValues	access:public
sOptionValues::include	.\ctags58\options.h	/^	struct sInclude include;\/* --extra  extra tag inclusion *\/$/;"	m	struct:sOptionValues	typeref:struct:sOptionValues::sInclude	access:public
sOptionValues::kindLong	.\ctags58\options.h	/^	boolean kindLong;       \/* --kind-long *\/$/;"	m	struct:sOptionValues	access:public
sOptionValues::language	.\ctags58\options.h	/^	langType language;      \/* --lang specified language override *\/$/;"	m	struct:sOptionValues	access:public
sOptionValues::lineDirectives	.\ctags58\options.h	/^	boolean lineDirectives; \/* --linedirectives  process #line directives *\/$/;"	m	struct:sOptionValues	access:public
sOptionValues::locate	.\ctags58\options.h	/^	exCmd locate;           \/* --excmd  EX command used to locate tag *\/$/;"	m	struct:sOptionValues	access:public
sOptionValues::printTotals	.\ctags58\options.h	/^	boolean printTotals;    \/* --totals  print cumulative statistics *\/$/;"	m	struct:sOptionValues	access:public
sOptionValues::recurse	.\ctags58\options.h	/^	boolean recurse;        \/* -R  recurse into directories *\/$/;"	m	struct:sOptionValues	access:public
sOptionValues::sorted	.\ctags58\options.h	/^	sortType sorted;        \/* -u,--sort  sort tags *\/$/;"	m	struct:sOptionValues	access:public
sOptionValues::tagFileFormat	.\ctags58\options.h	/^	unsigned int tagFileFormat;\/* --format  tag file format (level) *\/$/;"	m	struct:sOptionValues	access:public
sOptionValues::tagFileName	.\ctags58\options.h	/^	char *tagFileName;      \/* -o  name of tags file *\/$/;"	m	struct:sOptionValues	access:public
sOptionValues::tagRelative	.\ctags58\options.h	/^	boolean tagRelative;    \/* --tag-relative file paths relative to tag file *\/$/;"	m	struct:sOptionValues	access:public
sOptionValues::verbose	.\ctags58\options.h	/^	boolean verbose;        \/* -V  verbose *\/$/;"	m	struct:sOptionValues	access:public
sOptionValues::xref	.\ctags58\options.h	/^	boolean xref;           \/* -x  generate xref output instead *\/$/;"	m	struct:sOptionValues	access:public
sParenInfo	.\ctags58\c.c	/^typedef struct sParenInfo {$/;"	s	file:
sParenInfo::invalidContents	.\ctags58\c.c	/^	boolean invalidContents;$/;"	m	struct:sParenInfo	file:	access:public
sParenInfo::isKnrParamList	.\ctags58\c.c	/^	boolean isKnrParamList;$/;"	m	struct:sParenInfo	file:	access:public
sParenInfo::isNameCandidate	.\ctags58\c.c	/^	boolean isNameCandidate;$/;"	m	struct:sParenInfo	file:	access:public
sParenInfo::isParamList	.\ctags58\c.c	/^	boolean isParamList;$/;"	m	struct:sParenInfo	file:	access:public
sParenInfo::isPointer	.\ctags58\c.c	/^	boolean isPointer;$/;"	m	struct:sParenInfo	file:	access:public
sParenInfo::nestedArgs	.\ctags58\c.c	/^	boolean nestedArgs;$/;"	m	struct:sParenInfo	file:	access:public
sParenInfo::parameterCount	.\ctags58\c.c	/^	unsigned int parameterCount;$/;"	m	struct:sParenInfo	file:	access:public
sSource	.\ctags58\read.h	/^	struct sSource {$/;"	s	struct:sInputFile	access:public
sStatementInfo	.\ctags58\c.c	/^typedef struct sStatementInfo {$/;"	s	file:
sStatementInfo::assignment	.\ctags58\c.c	/^	boolean		assignment;     \/* have we handled an '='? *\/$/;"	m	struct:sStatementInfo	file:	access:public
sStatementInfo::blockName	.\ctags58\c.c	/^	tokenInfo*	blockName;      \/* name of current block *\/$/;"	m	struct:sStatementInfo	file:	access:public
sStatementInfo::context	.\ctags58\c.c	/^	tokenInfo*	context;        \/* accumulated scope of current statement *\/$/;"	m	struct:sStatementInfo	file:	access:public
sStatementInfo::declaration	.\ctags58\c.c	/^	declType	declaration;    \/* specifier associated with TOKEN_SPEC *\/$/;"	m	struct:sStatementInfo	file:	access:public
sStatementInfo::gotArgs	.\ctags58\c.c	/^	boolean		gotArgs;        \/* was a list of parameters parsed yet? *\/$/;"	m	struct:sStatementInfo	file:	access:public
sStatementInfo::gotName	.\ctags58\c.c	/^	boolean		gotName;        \/* was a name parsed yet? *\/$/;"	m	struct:sStatementInfo	file:	access:public
sStatementInfo::gotParenName	.\ctags58\c.c	/^	boolean		gotParenName;   \/* was a name inside parentheses parsed yet? *\/$/;"	m	struct:sStatementInfo	file:	access:public
sStatementInfo::haveQualifyingName	.\ctags58\c.c	/^	boolean		haveQualifyingName;  \/* do we have a name we are considering? *\/$/;"	m	struct:sStatementInfo	file:	access:public
sStatementInfo::implementation	.\ctags58\c.c	/^	impType		implementation; \/* abstract or concrete implementation? *\/$/;"	m	struct:sStatementInfo	file:	access:public
sStatementInfo::inFunction	.\ctags58\c.c	/^	boolean     inFunction;     \/* are we inside of a function? *\/$/;"	m	struct:sStatementInfo	file:	access:public
sStatementInfo::isPointer	.\ctags58\c.c	/^	boolean		isPointer;      \/* is 'name' a pointer? *\/$/;"	m	struct:sStatementInfo	file:	access:public
sStatementInfo::member	.\ctags58\c.c	/^	memberInfo	member;         \/* information regarding parent class\/struct *\/$/;"	m	struct:sStatementInfo	file:	access:public
sStatementInfo::notVariable	.\ctags58\c.c	/^	boolean		notVariable;    \/* has a variable declaration been disqualified ? *\/$/;"	m	struct:sStatementInfo	file:	access:public
sStatementInfo::parent	.\ctags58\c.c	/^	struct sStatementInfo *parent;  \/* statement we are nested within *\/$/;"	m	struct:sStatementInfo	typeref:struct:sStatementInfo::sStatementInfo	file:	access:public
sStatementInfo::parentClasses	.\ctags58\c.c	/^	vString*	parentClasses;  \/* parent classes *\/$/;"	m	struct:sStatementInfo	file:	access:public
sStatementInfo::scope	.\ctags58\c.c	/^	tagScope	scope;$/;"	m	struct:sStatementInfo	file:	access:public
sStatementInfo::token	.\ctags58\c.c	/^	tokenInfo*	token [(int) NumTokens];$/;"	m	struct:sStatementInfo	file:	access:public
sStatementInfo::tokenIndex	.\ctags58\c.c	/^	unsigned int tokenIndex;    \/* currently active token *\/$/;"	m	struct:sStatementInfo	file:	access:public
sStringArgs	.\ctags58\args.h	/^		struct sStringArgs {$/;"	s	union:sArgs::__anon2	access:public
sStringList	.\ctags58\strlist.h	/^typedef struct sStringList {$/;"	s
sStringList::count	.\ctags58\strlist.h	/^	unsigned int count;$/;"	m	struct:sStringList	access:public
sStringList::list	.\ctags58\strlist.h	/^	vString    **list;$/;"	m	struct:sStringList	access:public
sStringList::max	.\ctags58\strlist.h	/^	unsigned int max;$/;"	m	struct:sStringList	access:public
sTagEntryInfo	.\ctags58\entry.h	/^typedef struct sTagEntryInfo {$/;"	s
sTagEntryInfo::__anon17::access	.\ctags58\entry.h	/^		const char* access;$/;"	m	struct:sTagEntryInfo::__anon17	access:public
sTagEntryInfo::__anon17::fileScope	.\ctags58\entry.h	/^		const char* fileScope;$/;"	m	struct:sTagEntryInfo::__anon17	access:public
sTagEntryInfo::__anon17::implementation	.\ctags58\entry.h	/^		const char* implementation;$/;"	m	struct:sTagEntryInfo::__anon17	access:public
sTagEntryInfo::__anon17::inheritance	.\ctags58\entry.h	/^		const char* inheritance;$/;"	m	struct:sTagEntryInfo::__anon17	access:public
sTagEntryInfo::__anon17::scope	.\ctags58\entry.h	/^		const char* scope [2];    \/* value and key *\/$/;"	m	struct:sTagEntryInfo::__anon17	access:public
sTagEntryInfo::__anon17::signature	.\ctags58\entry.h	/^		const char* signature;$/;"	m	struct:sTagEntryInfo::__anon17	access:public
sTagEntryInfo::__anon17::typeRef	.\ctags58\entry.h	/^		const char* typeRef [2];  \/* e.g., "struct" and struct name *\/$/;"	m	struct:sTagEntryInfo::__anon17	access:public
sTagEntryInfo::extensionFields	.\ctags58\entry.h	/^	} extensionFields;  \/* list of extension fields*\/$/;"	m	struct:sTagEntryInfo	typeref:struct:sTagEntryInfo::__anon17	access:public
sTagEntryInfo::filePosition	.\ctags58\entry.h	/^	fpos_t      filePosition;     \/* file position of line containing tag *\/$/;"	m	struct:sTagEntryInfo	access:public
sTagEntryInfo::isFileEntry	.\ctags58\entry.h	/^	boolean     isFileEntry;      \/* is this just an entry for a file name? *\/$/;"	m	struct:sTagEntryInfo	access:public
sTagEntryInfo::isFileScope	.\ctags58\entry.h	/^	boolean     isFileScope;      \/* is tag visibile only within source file? *\/$/;"	m	struct:sTagEntryInfo	access:public
sTagEntryInfo::kind	.\ctags58\entry.h	/^	char        kind;             \/* single character representation of kind *\/$/;"	m	struct:sTagEntryInfo	access:public
sTagEntryInfo::kindName	.\ctags58\entry.h	/^	const char *kindName;         \/* kind of tag *\/$/;"	m	struct:sTagEntryInfo	access:public
sTagEntryInfo::language	.\ctags58\entry.h	/^	const char* language;         \/* language of source file *\/$/;"	m	struct:sTagEntryInfo	access:public
sTagEntryInfo::lineNumber	.\ctags58\entry.h	/^	unsigned long lineNumber;     \/* line number of tag *\/$/;"	m	struct:sTagEntryInfo	access:public
sTagEntryInfo::lineNumberEntry	.\ctags58\entry.h	/^	boolean     lineNumberEntry;  \/* pattern or line number entry *\/$/;"	m	struct:sTagEntryInfo	access:public
sTagEntryInfo::name	.\ctags58\entry.h	/^	const char *name;             \/* name of the tag *\/$/;"	m	struct:sTagEntryInfo	access:public
sTagEntryInfo::sourceFileName	.\ctags58\entry.h	/^	const char *sourceFileName;   \/* name of source file *\/$/;"	m	struct:sTagEntryInfo	access:public
sTagEntryInfo::truncateLine	.\ctags58\entry.h	/^	boolean     truncateLine;     \/* truncate tag line at end of tag name? *\/$/;"	m	struct:sTagEntryInfo	access:public
sTagFields	.\ctags58\entry.h	/^typedef struct sTagFields {$/;"	s
sTagFields::count	.\ctags58\entry.h	/^	unsigned int count;        \/* number of additional extension flags *\/$/;"	m	struct:sTagFields	access:public
sTagFields::label	.\ctags58\entry.h	/^	const char *const *label;  \/* list of labels for extension flags *\/$/;"	m	struct:sTagFields	access:public
sTagFields::value	.\ctags58\entry.h	/^	const char *const *value;  \/* list of values for extension flags *\/$/;"	m	struct:sTagFields	access:public
sTagFile	.\ctags58\readtags.c	/^struct sTagFile {$/;"	s	file:
sTagFile::__anon63::ignorecase	.\ctags58\readtags.c	/^			short ignorecase;$/;"	m	struct:sTagFile::__anon63	file:	access:public
sTagFile::__anon63::name	.\ctags58\readtags.c	/^			char *name;$/;"	m	struct:sTagFile::__anon63	file:	access:public
sTagFile::__anon63::nameLength	.\ctags58\readtags.c	/^			size_t nameLength;$/;"	m	struct:sTagFile::__anon63	file:	access:public
sTagFile::__anon63::partial	.\ctags58\readtags.c	/^			short partial;$/;"	m	struct:sTagFile::__anon63	file:	access:public
sTagFile::__anon63::pos	.\ctags58\readtags.c	/^			off_t pos; $/;"	m	struct:sTagFile::__anon63	file:	access:public
sTagFile::__anon64::list	.\ctags58\readtags.c	/^			tagExtensionField *list;$/;"	m	struct:sTagFile::__anon64	file:	access:public
sTagFile::__anon64::max	.\ctags58\readtags.c	/^			unsigned short max;$/;"	m	struct:sTagFile::__anon64	file:	access:public
sTagFile::__anon65::author	.\ctags58\readtags.c	/^		char *author;$/;"	m	struct:sTagFile::__anon65	file:	access:public
sTagFile::__anon65::name	.\ctags58\readtags.c	/^		char *name;$/;"	m	struct:sTagFile::__anon65	file:	access:public
sTagFile::__anon65::url	.\ctags58\readtags.c	/^		char *url;$/;"	m	struct:sTagFile::__anon65	file:	access:public
sTagFile::__anon65::version	.\ctags58\readtags.c	/^		char *version;$/;"	m	struct:sTagFile::__anon65	file:	access:public
sTagFile::fields	.\ctags58\readtags.c	/^	} fields;$/;"	m	struct:sTagFile	typeref:struct:sTagFile::__anon64	file:	access:public
sTagFile::format	.\ctags58\readtags.c	/^	short format;$/;"	m	struct:sTagFile	file:	access:public
sTagFile::fp	.\ctags58\readtags.c	/^	FILE* fp;$/;"	m	struct:sTagFile	file:	access:public
sTagFile::initialized	.\ctags58\readtags.c	/^	short initialized;$/;"	m	struct:sTagFile	file:	access:public
sTagFile::line	.\ctags58\readtags.c	/^	vstring line;$/;"	m	struct:sTagFile	file:	access:public
sTagFile::name	.\ctags58\readtags.c	/^	vstring name;$/;"	m	struct:sTagFile	file:	access:public
sTagFile::pos	.\ctags58\readtags.c	/^	off_t pos;$/;"	m	struct:sTagFile	file:	access:public
sTagFile::program	.\ctags58\readtags.c	/^	} program;$/;"	m	struct:sTagFile	typeref:struct:sTagFile::__anon65	file:	access:public
sTagFile::search	.\ctags58\readtags.c	/^	} search;$/;"	m	struct:sTagFile	typeref:struct:sTagFile::__anon63	file:	access:public
sTagFile::size	.\ctags58\readtags.c	/^	off_t size;$/;"	m	struct:sTagFile	file:	access:public
sTagFile::sortMethod	.\ctags58\readtags.c	/^	sortType sortMethod;$/;"	m	struct:sTagFile	file:	access:public
sTokenInfo	.\ctags58\c.c	/^typedef struct sTokenInfo {$/;"	s	file:
sTokenInfo	.\ctags58\eiffel.c	/^typedef struct sTokenInfo {$/;"	s	file:
sTokenInfo	.\ctags58\flex.c	/^typedef struct sTokenInfo {$/;"	s	file:
sTokenInfo	.\ctags58\fortran.c	/^typedef struct sTokenInfo {$/;"	s	file:
sTokenInfo	.\ctags58\jscript.c	/^typedef struct sTokenInfo {$/;"	s	file:
sTokenInfo	.\ctags58\tex.c	/^typedef struct sTokenInfo {$/;"	s	file:
sTokenInfo	.\ctags58\vhdl.c	/^typedef struct sTokenInfo {$/;"	s	file:
sTokenInfo::className	.\ctags58\eiffel.c	/^	vString*  className;$/;"	m	struct:sTokenInfo	file:	access:public
sTokenInfo::featureName	.\ctags58\eiffel.c	/^	vString*  featureName;$/;"	m	struct:sTokenInfo	file:	access:public
sTokenInfo::filePosition	.\ctags58\c.c	/^	fpos_t        filePosition;  \/* file position of line containing name *\/$/;"	m	struct:sTokenInfo	file:	access:public
sTokenInfo::filePosition	.\ctags58\flex.c	/^	fpos_t 			filePosition;$/;"	m	struct:sTokenInfo	file:	access:public
sTokenInfo::filePosition	.\ctags58\fortran.c	/^	fpos_t filePosition;$/;"	m	struct:sTokenInfo	file:	access:public
sTokenInfo::filePosition	.\ctags58\jscript.c	/^	fpos_t 			filePosition;$/;"	m	struct:sTokenInfo	file:	access:public
sTokenInfo::filePosition	.\ctags58\tex.c	/^	fpos_t 			filePosition;$/;"	m	struct:sTokenInfo	file:	access:public
sTokenInfo::filePosition	.\ctags58\vhdl.c	/^	fpos_t filePosition;		\/* file position of line containing name *\/$/;"	m	struct:sTokenInfo	file:	access:public
sTokenInfo::ignoreTag	.\ctags58\flex.c	/^	boolean			ignoreTag;$/;"	m	struct:sTokenInfo	file:	access:public
sTokenInfo::ignoreTag	.\ctags58\jscript.c	/^	boolean			ignoreTag;$/;"	m	struct:sTokenInfo	file:	access:public
sTokenInfo::isClass	.\ctags58\flex.c	/^	boolean			isClass;$/;"	m	struct:sTokenInfo	file:	access:public
sTokenInfo::isExported	.\ctags58\eiffel.c	/^	boolean   isExported;$/;"	m	struct:sTokenInfo	file:	access:public
sTokenInfo::keyword	.\ctags58\c.c	/^	keywordId     keyword;$/;"	m	struct:sTokenInfo	file:	access:public
sTokenInfo::keyword	.\ctags58\eiffel.c	/^	keywordId keyword;$/;"	m	struct:sTokenInfo	file:	access:public
sTokenInfo::keyword	.\ctags58\flex.c	/^	keywordId		keyword;$/;"	m	struct:sTokenInfo	file:	access:public
sTokenInfo::keyword	.\ctags58\fortran.c	/^	keywordId keyword;$/;"	m	struct:sTokenInfo	file:	access:public
sTokenInfo::keyword	.\ctags58\jscript.c	/^	keywordId		keyword;$/;"	m	struct:sTokenInfo	file:	access:public
sTokenInfo::keyword	.\ctags58\tex.c	/^	keywordId		keyword;$/;"	m	struct:sTokenInfo	file:	access:public
sTokenInfo::keyword	.\ctags58\vhdl.c	/^	keywordId keyword;$/;"	m	struct:sTokenInfo	file:	access:public
sTokenInfo::lineNumber	.\ctags58\c.c	/^	unsigned long lineNumber;    \/* line number of tag *\/$/;"	m	struct:sTokenInfo	file:	access:public
sTokenInfo::lineNumber	.\ctags58\flex.c	/^	unsigned long 	lineNumber;$/;"	m	struct:sTokenInfo	file:	access:public
sTokenInfo::lineNumber	.\ctags58\fortran.c	/^	unsigned long lineNumber;$/;"	m	struct:sTokenInfo	file:	access:public
sTokenInfo::lineNumber	.\ctags58\jscript.c	/^	unsigned long 	lineNumber;$/;"	m	struct:sTokenInfo	file:	access:public
sTokenInfo::lineNumber	.\ctags58\tex.c	/^	unsigned long 	lineNumber;$/;"	m	struct:sTokenInfo	file:	access:public
sTokenInfo::lineNumber	.\ctags58\vhdl.c	/^	unsigned long lineNumber;	\/* line number of tag *\/$/;"	m	struct:sTokenInfo	file:	access:public
sTokenInfo::name	.\ctags58\c.c	/^	vString*      name;          \/* the name of the token *\/$/;"	m	struct:sTokenInfo	file:	access:public
sTokenInfo::nestLevel	.\ctags58\flex.c	/^	int				nestLevel;$/;"	m	struct:sTokenInfo	file:	access:public
sTokenInfo::nestLevel	.\ctags58\jscript.c	/^	int				nestLevel;$/;"	m	struct:sTokenInfo	file:	access:public
sTokenInfo::scope	.\ctags58\flex.c	/^	vString *		scope;$/;"	m	struct:sTokenInfo	file:	access:public
sTokenInfo::scope	.\ctags58\jscript.c	/^	vString *		scope;$/;"	m	struct:sTokenInfo	file:	access:public
sTokenInfo::scope	.\ctags58\tex.c	/^	vString *		scope;$/;"	m	struct:sTokenInfo	file:	access:public
sTokenInfo::scope	.\ctags58\vhdl.c	/^	vString *scope;$/;"	m	struct:sTokenInfo	file:	access:public
sTokenInfo::secondary	.\ctags58\fortran.c	/^	struct sTokenInfo *secondary;$/;"	m	struct:sTokenInfo	typeref:struct:sTokenInfo::sTokenInfo	file:	access:public
sTokenInfo::string	.\ctags58\eiffel.c	/^	vString*  string;$/;"	m	struct:sTokenInfo	file:	access:public
sTokenInfo::string	.\ctags58\flex.c	/^	vString *		string;$/;"	m	struct:sTokenInfo	file:	access:public
sTokenInfo::string	.\ctags58\fortran.c	/^	vString* string;$/;"	m	struct:sTokenInfo	file:	access:public
sTokenInfo::string	.\ctags58\jscript.c	/^	vString *		string;$/;"	m	struct:sTokenInfo	file:	access:public
sTokenInfo::string	.\ctags58\tex.c	/^	vString *		string;$/;"	m	struct:sTokenInfo	file:	access:public
sTokenInfo::string	.\ctags58\vhdl.c	/^	vString *string;		\/* the name of the token *\/$/;"	m	struct:sTokenInfo	file:	access:public
sTokenInfo::tag	.\ctags58\fortran.c	/^	tagType tag;$/;"	m	struct:sTokenInfo	file:	access:public
sTokenInfo::type	.\ctags58\c.c	/^	tokenType     type;$/;"	m	struct:sTokenInfo	file:	access:public
sTokenInfo::type	.\ctags58\eiffel.c	/^	tokenType type;$/;"	m	struct:sTokenInfo	file:	access:public
sTokenInfo::type	.\ctags58\flex.c	/^	tokenType		type;$/;"	m	struct:sTokenInfo	file:	access:public
sTokenInfo::type	.\ctags58\fortran.c	/^	tokenType type;$/;"	m	struct:sTokenInfo	file:	access:public
sTokenInfo::type	.\ctags58\jscript.c	/^	tokenType		type;$/;"	m	struct:sTokenInfo	file:	access:public
sTokenInfo::type	.\ctags58\tex.c	/^	tokenType		type;$/;"	m	struct:sTokenInfo	file:	access:public
sTokenInfo::type	.\ctags58\vhdl.c	/^	tokenType type;$/;"	m	struct:sTokenInfo	file:	access:public
sTokenInfoSQL	.\ctags58\sql.c	/^typedef struct sTokenInfoSQL {$/;"	s	file:
sTokenInfoSQL::begin_end_nest_lvl	.\ctags58\sql.c	/^	int         begin_end_nest_lvl;$/;"	m	struct:sTokenInfoSQL	file:	access:public
sTokenInfoSQL::filePosition	.\ctags58\sql.c	/^	fpos_t filePosition;$/;"	m	struct:sTokenInfoSQL	file:	access:public
sTokenInfoSQL::keyword	.\ctags58\sql.c	/^	keywordId	keyword;$/;"	m	struct:sTokenInfoSQL	file:	access:public
sTokenInfoSQL::lineNumber	.\ctags58\sql.c	/^	unsigned long lineNumber;$/;"	m	struct:sTokenInfoSQL	file:	access:public
sTokenInfoSQL::scope	.\ctags58\sql.c	/^	vString *	scope;$/;"	m	struct:sTokenInfoSQL	file:	access:public
sTokenInfoSQL::string	.\ctags58\sql.c	/^	vString *	string;$/;"	m	struct:sTokenInfoSQL	file:	access:public
sTokenInfoSQL::type	.\ctags58\sql.c	/^	tokenType	type;$/;"	m	struct:sTokenInfoSQL	file:	access:public
sVString	.\ctags58\vstring.h	/^typedef struct sVString {$/;"	s
sVString::buffer	.\ctags58\vstring.h	/^	char   *buffer;  \/* location of buffer *\/$/;"	m	struct:sVString	access:public
sVString::length	.\ctags58\vstring.h	/^	size_t  length;  \/* size of buffer used *\/$/;"	m	struct:sVString	access:public
sVString::size	.\ctags58\vstring.h	/^	size_t  size;    \/* allocated size of buffer *\/$/;"	m	struct:sVString	access:public
s_reg_t	.\ctags58\gnu_regex\regex.h	/^typedef long int s_reg_t;$/;"	t
sanitize_path_string	.\vimfiles\bundle\command-t\ruby\command-t\controller.rb	/^    def sanitize_path_string str$/;"	f	class:CommandT.Controller.quickfix
save	.\vimfiles\bundle\command-t\ruby\command-t\settings.rb	/^    def save$/;"	f	class:CommandT.Settings
saveIgnoreToken	.\ctags58\options.c	/^static void saveIgnoreToken (vString *const ignoreToken)$/;"	f	file:	signature:(vString *const ignoreToken)
save_foldinfo	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\handler.vim	/^function! s:save_foldinfo() "{{{$/;"	f
sb_char	.\ctags58\gnu_regex\regex_internal.h	/^  re_bitset_ptr_t sb_char;$/;"	m	struct:re_dfa_t	access:public
sbcset	.\ctags58\gnu_regex\regex_internal.h	/^    re_bitset_ptr_t sbcset;	\/* for SIMPLE_BRACKET *\/$/;"	m	union:__anon31::__anon32	access:public
scanSeparators	.\ctags58\lregex.c	/^static char* scanSeparators (char* name)$/;"	f	file:	signature:(char* name)
schemeKind	.\ctags58\scheme.c	/^} schemeKind;$/;"	t	typeref:enum:__anon78	file:
scope	.\ctags58\c.c	/^	tagScope	scope;$/;"	m	struct:sStatementInfo	file:	access:public
scope	.\ctags58\entry.h	/^		const char* scope [2];    \/* value and key *\/$/;"	m	struct:sTagEntryInfo::__anon17	access:public
scope	.\ctags58\flex.c	/^	vString *		scope;$/;"	m	struct:sTokenInfo	file:	access:public
scope	.\ctags58\jscript.c	/^	vString *		scope;$/;"	m	struct:sTokenInfo	file:	access:public
scope	.\ctags58\options.h	/^	boolean scope;$/;"	m	struct:sExtFields	access:public
scope	.\ctags58\sql.c	/^	vString *	scope;$/;"	m	struct:sTokenInfoSQL	file:	access:public
scope	.\ctags58\tex.c	/^	vString *		scope;$/;"	m	struct:sTokenInfo	file:	access:public
scope	.\ctags58\vhdl.c	/^	vString *scope;$/;"	m	struct:sTokenInfo	file:	access:public
scopeString	.\ctags58\c.c	/^static const char *scopeString (const tagScope scope)$/;"	f	file:	signature:(const tagScope scope)
search	.\ctags58\readtags.c	/^	} search;$/;"	m	struct:sTagFile	typeref:struct:sTagFile::__anon63	file:	access:public
search_cur_bkref_entry	.\ctags58\gnu_regex\regexec.c	/^search_cur_bkref_entry (const re_match_context_t *mctx, int str_idx)$/;"	f	file:	signature:(const re_match_context_t *mctx, int str_idx)
search_duplicated_node	.\ctags58\gnu_regex\regcomp.c	/^search_duplicated_node (const re_dfa_t *dfa, int org_node,$/;"	f	file:	signature:(const re_dfa_t *dfa, int org_node, unsigned int constraint)
search_duplicated_node	.\ctags58\gnu_regex\regcomp.c	/^static int search_duplicated_node (const re_dfa_t *dfa, int org_node,$/;"	p	file:	signature:(const re_dfa_t *dfa, int org_node, unsigned int constraint)
searchsyn	.\vim73\ftplugin\ruby.vim	/^function! s:searchsyn(pattern,syn,flags,mode)$/;"	f
secondary	.\ctags58\fortran.c	/^	struct sTokenInfo *secondary;$/;"	m	struct:sTokenInfo	typeref:struct:sTokenInfo::sTokenInfo	file:	access:public
sed_delimiter	.\vim73\syntax\sed.vim	/^    let __sed_delimiter = escape(nr2char(__sed_i), __sed_metacharacters)$/;"	v
sed_i	.\vim73\syntax\sed.vim	/^	let __sed_i = __sed_i + 1$/;"	v
sed_i	.\vim73\syntax\sed.vim	/^    let __sed_i = __sed_i + 1$/;"	v
sed_i	.\vim73\syntax\sed.vim	/^    let __sed_i = char2nr(" ") " ASCII: 32, EBCDIC: 64$/;"	v
sed_i	.\vim73\syntax\sed.vim	/^let __sed_i = char2nr(" ") " ASCII: 32, EBCDIC: 64$/;"	v
sed_last	.\vim73\syntax\sed.vim	/^    let __sed_last = 126$/;"	v
sed_last	.\vim73\syntax\sed.vim	/^    let __sed_last = 255$/;"	v
sed_metacharacters	.\vim73\syntax\sed.vim	/^let __sed_metacharacters = '$*.\\^[~'$/;"	v
select	.\vimfiles\bundle\command-t\ruby\command-t\vim\window.rb	/^      def self.select window$/;"	F	class:CommandT.VIM.Window
select_next	.\vimfiles\bundle\command-t\ruby\command-t\controller.rb	/^    def select_next$/;"	f	class:CommandT.Controller.quickfix
select_next	.\vimfiles\bundle\command-t\ruby\command-t\match_window.rb	/^    def select_next$/;"	f	class:CommandT.MatchWindow
select_prev	.\vimfiles\bundle\command-t\ruby\command-t\controller.rb	/^    def select_prev$/;"	f	class:CommandT.Controller.quickfix
select_prev	.\vimfiles\bundle\command-t\ruby\command-t\match_window.rb	/^    def select_prev$/;"	f	class:CommandT.MatchWindow
selected	.\ctags58\routines.c	148;"	d	file:
selection	.\vimfiles\bundle\command-t\ruby\command-t\match_window.rb	/^    def selection$/;"	f	class:CommandT.MatchWindow
sendToVim	.\vim73\tools\xcmdsrv_client.c	/^char * sendToVim __ARGS((Display *dpy, char *name, char *cmd, int asKeys, int *code));$/;"	p	file:	signature:(Display *dpy, char *name, char *cmd, int asKeys, int *code)
sendToVim	.\vim73\tools\xcmdsrv_client.c	/^sendToVim(dpy, name, cmd, asKeys, code)$/;"	f
sep	.\ctags58\entry.c	713;"	d	file:
sep	.\ctags58\entry.c	765;"	d	file:
sep	.\ctags58\readtags.c	802;"	d	file:
sep	.\ctags58\readtags.c	820;"	d	file:
setAccess	.\ctags58\c.c	/^static void setAccess (statementInfo *const st, const accessType access)$/;"	f	file:	signature:(statementInfo *const st, const accessType access)
setCurrentDirectory	.\ctags58\routines.c	/^extern void setCurrentDirectory (void)$/;"	f	signature:(void)
setCurrentDirectory	.\ctags58\routines.h	/^extern void setCurrentDirectory (void);$/;"	p	signature:(void)
setDefaultTagFileName	.\ctags58\options.c	/^extern void setDefaultTagFileName (void)$/;"	f	signature:(void)
setDefaultTagFileName	.\ctags58\options.h	/^extern void setDefaultTagFileName (void);$/;"	p	signature:(void)
setEtagsMode	.\ctags58\options.c	/^static void setEtagsMode (void)$/;"	f	file:	signature:(void)
setExecutableName	.\ctags58\routines.c	/^extern void setExecutableName (const char *const path)$/;"	f	signature:(const char *const path)
setExecutableName	.\ctags58\routines.h	/^extern void setExecutableName (const char *const path);$/;"	p	signature:(const char *const path)
setIgnore	.\ctags58\get.c	/^static boolean setIgnore (const boolean ignore)$/;"	f	file:	signature:(const boolean ignore)
setInputFileName	.\ctags58\read.c	/^static void setInputFileName (const char *const fileName)$/;"	f	file:	signature:(const char *const fileName)
setSourceFileName	.\ctags58\read.c	/^static boolean setSourceFileName (vString *const fileName)$/;"	f	file:	signature:(vString *const fileName)
setSourceFileParameters	.\ctags58\read.c	/^static void setSourceFileParameters (vString *const fileName)$/;"	f	file:	signature:(vString *const fileName)
setToken	.\ctags58\c.c	/^static void setToken (statementInfo *const st, const tokenType type)$/;"	f	file:	signature:(statementInfo *const st, const tokenType type)
set_auto_completion_length	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\commands.vim	/^function! s:set_auto_completion_length(len) "{{{$/;"	f
set_bool	.\vimfiles\bundle\command-t\ruby\command-t\settings.rb	/^    def set_bool setting, value$/;"	f	class:CommandT.Settings
set_complete_results_pos	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\omni_complete.vim	/^function! s:set_complete_results_pos(funcs, cur_text) "{{{$/;"	f
set_complete_results_words	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\omni_complete.vim	/^function! s:set_complete_results_words(complete_results) "{{{$/;"	f
set_compression	.\vim73\autoload\gzip.vim	/^fun s:set_compression(line)$/;"	f
set_default	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\prelude.vim	/^function! s:set_default(var, val)$/;"	f
set_default_custom	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\init.vim	/^function! s:set_default_custom() "{{{$/;"	f
set_dictionary_helper	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! s:set_dictionary_helper(variable, keys, value) "{{{$/;"	f
set_dictionary_helper	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\prelude.vim	/^function! s:set_dictionary_helper(variable, keys, pattern)$/;"	f
set_level	.\vimfiles\bundle\command-t\vendor\vimball\vimball.rb	/^        def self.set_level$/;"	F	class:Vimball.AppLog
set_level	.\vimfiles\bundle\command-t\vendor\vimscriptuploader\vimscriptdef.rb	/^        def self.set_level$/;"	F	class:VimScriptDef.AppLog
set_level	.\vimfiles\bundle\command-t\vendor\vimscriptuploader\vimscriptuploader.rb	/^        def self.set_level$/;"	F	class:VimScriptUploader.AppLog
set_number	.\vimfiles\bundle\command-t\ruby\command-t\settings.rb	/^    def set_number setting, value$/;"	f	class:CommandT.Settings
set_regs	.\ctags58\gnu_regex\regexec.c	/^set_regs (const regex_t *preg, const re_match_context_t *mctx, size_t nmatch,$/;"	f	file:	signature:(const regex_t *preg, const re_match_context_t *mctx, size_t nmatch, regmatch_t *pmatch, int fl_backtrack)
set_status	.\vimfiles\bundle\command-t\ruby\command-t\prompt.rb	/^    def set_status *args$/;"	f	class:CommandT.Prompt
set_wild_ignore	.\vimfiles\bundle\command-t\ruby\command-t\scanner\file_scanner.rb	/^    def set_wild_ignore(ignore)$/;"	f	class:CommandT.FileScanner
shKind	.\ctags58\make.c	/^} shKind;$/;"	t	typeref:enum:__anon50	file:
shKind	.\ctags58\sh.c	/^} shKind;$/;"	t	typeref:enum:__anon79	file:
sh_maxlines	.\vim73\syntax\sh.vim	/^  let sh_maxlines = 2 * sh_minlines$/;"	v
sh_minlines	.\vim73\syntax\sh.vim	/^  let sh_minlines = 200$/;"	v
shift	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\data\list.vim	/^function! s:shift(list)$/;"	f
shortOptions	.\ctags58\options.h	/^	char *shortOptions;$/;"	m	struct:sCookedArgs	access:public
show	.\vimfiles\bundle\command-t\ruby\command-t\controller.rb	/^    def show$/;"	f	class:CommandT.Controller.quickfix
show_buffer_finder	.\vimfiles\bundle\command-t\ruby\command-t\controller.rb	/^    def show_buffer_finder$/;"	f	class:CommandT.Controller
show_cursor	.\vimfiles\bundle\command-t\ruby\command-t\match_window.rb	/^    def show_cursor$/;"	f	class:CommandT.MatchWindow.match_with_syntax_highlight
show_file_finder	.\vimfiles\bundle\command-t\ruby\command-t\controller.rb	/^    def show_file_finder$/;"	f	class:CommandT.Controller
show_jump_finder	.\vimfiles\bundle\command-t\ruby\command-t\controller.rb	/^    def show_jump_finder$/;"	f	class:CommandT.Controller
show_tag_finder	.\vimfiles\bundle\command-t\ruby\command-t\controller.rb	/^    def show_tag_finder$/;"	f	class:CommandT.Controller
sift_ctx_init	.\ctags58\gnu_regex\regexec.c	/^sift_ctx_init (re_sift_context_t *sctx, re_dfastate_t **sifted_sts,$/;"	f	file:	signature:(re_sift_context_t *sctx, re_dfastate_t **sifted_sts, re_dfastate_t **limited_sts, int last_node, int last_str_idx)
sift_states_backward	.\ctags58\gnu_regex\regexec.c	/^sift_states_backward (const re_match_context_t *mctx, re_sift_context_t *sctx)$/;"	f	file:	signature:(const re_match_context_t *mctx, re_sift_context_t *sctx)
sift_states_bkref	.\ctags58\gnu_regex\regexec.c	/^sift_states_bkref (const re_match_context_t *mctx, re_sift_context_t *sctx,$/;"	f	file:	signature:(const re_match_context_t *mctx, re_sift_context_t *sctx, int str_idx, const re_node_set *candidates)
sift_states_iter_mb	.\ctags58\gnu_regex\regexec.c	/^sift_states_iter_mb (const re_match_context_t *mctx, re_sift_context_t *sctx,$/;"	f	file:	signature:(const re_match_context_t *mctx, re_sift_context_t *sctx, int node_idx, int str_idx, int max_str_idx)
sifted_states	.\ctags58\gnu_regex\regex_internal.h	/^  re_dfastate_t **sifted_states;$/;"	m	struct:__anon37	access:public
sig_child	.\ctags58\argproc.c	/^static sig_child (chan)$/;"	f	file:
sign	.\vimfiles\bundle\vundle\autoload\vundle\installer.vim	/^func! s:sign(status) $/;"	f
signature	.\ctags58\entry.h	/^		const char* signature;$/;"	m	struct:sTagEntryInfo::__anon17	access:public
signature	.\ctags58\options.h	/^	boolean signature;$/;"	m	struct:sExtFields	access:public
simple	.\ctags58\options.h	/^	char simple[2];$/;"	m	struct:sCookedArgs	access:public
simpleParser	.\ctags58\parse.h	/^typedef void (*simpleParser) (void);$/;"	t
singleBranch	.\ctags58\get.c	/^	boolean singleBranch;       \/* choose only one branch *\/$/;"	m	struct:sConditionalInfo	file:	access:public
singletriple	.\ctags58\python.c	/^static char const * const singletriple = "'''";$/;"	v	file:
size	.\ctags58\readtags.c	/^	off_t size;$/;"	m	struct:sTagFile	file:	access:public
size	.\ctags58\readtags.c	/^	size_t size;$/;"	m	struct:__anon62	file:	access:public
size	.\ctags58\routines.h	/^	unsigned long size;$/;"	m	struct:__anon76	access:public
size	.\ctags58\vstring.h	/^	size_t  size;    \/* allocated size of buffer *\/$/;"	m	struct:sVString	access:public
skip	.\ctags58\basic.c	/^	int skip;$/;"	m	struct:__anon9	file:	access:public
skipArgumentList	.\ctags58\flex.c	/^static void skipArgumentList (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
skipArgumentList	.\ctags58\jscript.c	/^static void skipArgumentList (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
skipArgumentList	.\ctags58\sql.c	/^static void skipArgumentList (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
skipArrayList	.\ctags58\flex.c	/^static void skipArrayList (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
skipArrayList	.\ctags58\jscript.c	/^static void skipArrayList (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
skipBraces	.\ctags58\c.c	/^static void skipBraces (void)$/;"	f	file:	signature:(void)
skipEverything	.\ctags58\python.c	/^static const char *skipEverything (const char *cp)$/;"	f	file:	signature:(const char *cp)
skipIdentifier	.\ctags58\python.c	/^static const char *skipIdentifier (const char *cp)$/;"	f	file:	signature:(const char *cp)
skipInitializer	.\ctags58\c.c	/^static int skipInitializer (statementInfo *const st)$/;"	f	file:	signature:(statementInfo *const st)
skipJavaThrows	.\ctags58\c.c	/^static void skipJavaThrows (statementInfo *const st)$/;"	f	file:	signature:(statementInfo *const st)
skipLine	.\ctags58\fortran.c	/^static int skipLine (void)$/;"	f	file:	signature:(void)
skipLine	.\ctags58\make.c	/^static void skipLine (void)$/;"	f	file:	signature:(void)
skipMacro	.\ctags58\c.c	/^static void skipMacro (statementInfo *const st)$/;"	f	file:	signature:(statementInfo *const st)
skipMemIntializerList	.\ctags58\c.c	/^static void skipMemIntializerList (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
skipOverCComment	.\ctags58\get.c	/^int skipOverCComment (void)$/;"	f	signature:(void)
skipOverCComment	.\ctags58\get.h	/^extern int skipOverCComment (void);$/;"	p	signature:(void)
skipOverCplusComment	.\ctags58\get.c	/^static int skipOverCplusComment (void)$/;"	f	file:	signature:(void)
skipOverParens	.\ctags58\fortran.c	/^static void skipOverParens (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
skipParens	.\ctags58\c.c	/^static void skipParens (void)$/;"	f	file:	signature:(void)
skipPast	.\ctags58\fortran.c	/^static void skipPast (tokenInfo *const token, tokenType type)$/;"	f	file:	signature:(tokenInfo *const token, tokenType type)
skipPastMap	.\ctags58\options.c	/^static char* skipPastMap (char* p)$/;"	f	file:	signature:(char* p)
skipPastMatch	.\ctags58\verilog.c	/^static int skipPastMatch (const char *const pair)$/;"	f	file:	signature:(const char *const pair)
skipPostArgumentStuff	.\ctags58\c.c	/^static boolean skipPostArgumentStuff ($/;"	f	file:	signature:( statementInfo *const st, parenInfo *const info)
skipPrefix	.\ctags58\vim.c	/^static const unsigned char* skipPrefix (const unsigned char* name, int *scope)$/;"	f	file:	signature:(const unsigned char* name, int *scope)
skipSpace	.\ctags58\erlang.c	/^static const unsigned char *skipSpace (const unsigned char *cp)$/;"	f	file:	signature:(const unsigned char *cp)
skipSpace	.\ctags58\python.c	/^static const char *skipSpace (const char *cp)$/;"	f	file:	signature:(const char *cp)
skipSpace	.\ctags58\sml.c	/^static const unsigned char *skipSpace (const unsigned char *cp)$/;"	f	file:	signature:(const unsigned char *cp)
skipStatement	.\ctags58\c.c	/^static void skipStatement (statementInfo *const st)$/;"	f	file:	signature:(statementInfo *const st)
skipStatementIfKeyword	.\ctags58\fortran.c	/^static boolean skipStatementIfKeyword (tokenInfo *const token, keywordId keyword)$/;"	f	file:	signature:(tokenInfo *const token, keywordId keyword)
skipString	.\ctags58\python.c	/^static const char *skipString (const char *cp)$/;"	f	file:	signature:(const char *cp)
skipToCharacter	.\ctags58\eiffel.c	/^static int skipToCharacter (const int c)$/;"	f	file:	signature:(const int c)
skipToEndOfChar	.\ctags58\get.c	/^static int skipToEndOfChar (void)$/;"	f	file:	signature:(void)
skipToEndOfString	.\ctags58\get.c	/^static int skipToEndOfString (boolean ignoreBackslash)$/;"	f	file:	signature:(boolean ignoreBackslash)
skipToFormattedBraceMatch	.\ctags58\c.c	/^static void skipToFormattedBraceMatch (void)$/;"	f	file:	signature:(void)
skipToKeyword	.\ctags58\vhdl.c	/^static void skipToKeyword (const keywordId keyword)$/;"	f	file:	signature:(const keywordId keyword)
skipToMatch	.\ctags58\c.c	/^static void skipToMatch (const char *const pair)$/;"	f	file:	signature:(const char *const pair)
skipToMatch	.\ctags58\make.c	/^static void skipToMatch (const char *const pair)$/;"	f	file:	signature:(const char *const pair)
skipToMatched	.\ctags58\sql.c	/^static void skipToMatched(tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
skipToMatched	.\ctags58\vhdl.c	/^static void skipToMatched (tokenInfo * const token)$/;"	f	file:	signature:(tokenInfo * const token)
skipToNextLine	.\ctags58\fortran.c	/^static int skipToNextLine (void)$/;"	f	file:	signature:(void)
skipToNextStatement	.\ctags58\fortran.c	/^static void skipToNextStatement (tokenInfo *const token)$/;"	f	file:	signature:(tokenInfo *const token)
skipToNonWhite	.\ctags58\c.c	/^static int skipToNonWhite (void)$/;"	f	file:	signature:(void)
skipToNonWhite	.\ctags58\make.c	/^static int skipToNonWhite (void)$/;"	f	file:	signature:(void)
skipToOneOf	.\ctags58\c.c	/^static int skipToOneOf (const char *const chars)$/;"	f	file:	signature:(const char *const chars)
skipToToken	.\ctags58\fortran.c	/^static void skipToToken (tokenInfo *const token, tokenType type)$/;"	f	file:	signature:(tokenInfo *const token, tokenType type)
skipTypeDecl	.\ctags58\python.c	/^static const char *skipTypeDecl (const char *cp, boolean *is_class)$/;"	f	file:	signature:(const char *cp, boolean *is_class)
skipWhite	.\ctags58\read.c	/^static int skipWhite (void)$/;"	f	file:	signature:(void)
skipWhite	.\ctags58\verilog.c	/^static int skipWhite (int c)$/;"	f	file:	signature:(int c)
skipWhitespace	.\ctags58\ruby.c	/^static void skipWhitespace (const unsigned char** cp)$/;"	f	file:	signature:(const unsigned char** cp)
smart_execute_command	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\prelude.vim	/^function! s:smart_execute_command(action, word)$/;"	f
smlKind	.\ctags58\sml.c	/^} smlKind;$/;"	t	typeref:enum:__anon80	file:
snipMate#BackwardsSnippet	.\vimfiles\bundle\vim-snipmate\autoload\snipMate.vim	/^fun! snipMate#BackwardsSnippet()$/;"	f
snipMate#DefaultPool	.\vimfiles\bundle\vim-snipmate\autoload\snipMate.vim	/^fun! snipMate#DefaultPool(scopes, trigger, result)$/;"	f
snipMate#EvalGuard	.\vimfiles\bundle\vim-snipmate\autoload\snipMate.vim	/^fun! snipMate#EvalGuard(guard)$/;"	f
snipMate#GetSnippetFiles	.\vimfiles\bundle\vim-snipmate\autoload\snipMate.vim	/^function! snipMate#GetSnippetFiles(mustExist, scopes, trigger)$/;"	f
snipMate#GetSnippets	.\vimfiles\bundle\vim-snipmate\autoload\snipMate.vim	/^fun! snipMate#GetSnippets(scopes, trigger)$/;"	f
snipMate#GetSnippetsForWordBelowCursor	.\vimfiles\bundle\vim-snipmate\autoload\snipMate.vim	/^fun! snipMate#GetSnippetsForWordBelowCursor(word, suffix, break_on_first_match)$/;"	f
snipMate#OpenSnippetFiles	.\vimfiles\bundle\vim-snipmate\autoload\snipMate.vim	/^fun! snipMate#OpenSnippetFiles()$/;"	f
snipMate#ReadSnippetsFile	.\vimfiles\bundle\vim-snipmate\autoload\snipMate.vim	/^fun! snipMate#ReadSnippetsFile(file)$/;"	f
snipMate#RetabSnip	.\vimfiles\bundle\vim-snipmate\autoload\snipMate.vim	/^fun! snipMate#RetabSnip() range$/;"	f
snipMate#ScopesByFile	.\vimfiles\bundle\vim-snipmate\autoload\snipMate.vim	/^fun! snipMate#ScopesByFile()$/;"	f
snipMate#SetByPath	.\vimfiles\bundle\vim-snipmate\autoload\snipMate.vim	/^fun! snipMate#SetByPath(dict, path, value)$/;"	f
snipMate#ShowAvailableSnips	.\vimfiles\bundle\vim-snipmate\autoload\snipMate.vim	/^fun! snipMate#ShowAvailableSnips()$/;"	f
snipMate#TriggerSnippet	.\vimfiles\bundle\vim-snipmate\autoload\snipMate.vim	/^fun! snipMate#TriggerSnippet()$/;"	f
snipMate#expandSnip	.\vimfiles\bundle\vim-snipmate\autoload\snipMate.vim	/^fun! snipMate#expandSnip(snip, col)$/;"	f
snipMate_python_demo#Activate	.\vimfiles\bundle\vim-snipmate\autoload\snipMate_python_demo.vim	/^fun! snipMate_python_demo#Activate()$/;"	f
snipMate_python_demo#FunctionsFromCurrentFileAndTags	.\vimfiles\bundle\vim-snipmate\autoload\snipMate_python_demo.vim	/^fun! snipMate_python_demo#FunctionsFromCurrentFileAndTags(scopes, trigger, result)$/;"	f
sort	.\ctags58\readtags.h	/^			sortType sort;$/;"	m	struct:__anon68::__anon70	access:public
sort	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\data\list.vim	/^function! s:sort(list, expr)$/;"	f
sortMethod	.\ctags58\readtags.c	/^	sortType sortMethod;$/;"	m	struct:sTagFile	file:	access:public
sortTagFile	.\ctags58\entry.c	/^static void sortTagFile (void)$/;"	f	file:	signature:(void)
sortType	.\ctags58\options.h	/^typedef enum sortType {$/;"	g
sortType	.\ctags58\options.h	/^} sortType;$/;"	t	typeref:enum:sortType
sortType	.\ctags58\readtags.h	/^} sortType ;$/;"	t	typeref:enum:__anon66
sort_by	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\data\list.vim	/^function! s:sort_by(list, expr)$/;"	f
sorted	.\ctags58\options.h	/^	sortType sorted;        \/* -u,--sort  sort tags *\/$/;"	m	struct:sOptionValues	access:public
sorted_matches_for	.\vimfiles\bundle\command-t\ruby\command-t\finder.rb	/^    def sorted_matches_for str, options = {}$/;"	f	class:CommandT.Finder
sorter.filter	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters\sorter_length.vim	/^function! s:sorter.filter(context) "{{{$/;"	f
sorter.filter	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters\sorter_nothing.vim	/^function! s:sorter.filter(context) "{{{$/;"	f
sorter.filter	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\filters\sorter_rank.vim	/^function! s:sorter.filter(context) "{{{$/;"	f
source	.\ctags58\read.h	/^	} source;$/;"	m	struct:sInputFile	typeref:struct:sInputFile::sSource	access:public
source.finalize	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\dictionary_complete.vim	/^function! s:source.finalize() "{{{$/;"	f
source.finalize	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\filename_complete.vim	/^function! s:source.finalize() "{{{$/;"	f
source.finalize	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\filename_include.vim	/^function! s:source.finalize() "{{{$/;"	f
source.finalize	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\include_complete.vim	/^function! s:source.finalize() "{{{$/;"	f
source.finalize	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\omni_complete.vim	/^function! s:source.finalize() "{{{$/;"	f
source.finalize	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\syntax_complete.vim	/^function! s:source.finalize() "{{{$/;"	f
source.finalize	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\tags_complete.vim	/^function! s:source.finalize() "{{{$/;"	f
source.finalize	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete.vim	/^function! s:source.finalize() "{{{$/;"	f
source.gather_candidates	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\buffer_complete.vim	/^function! s:source.gather_candidates(context) "{{{$/;"	f
source.gather_candidates	.\vimfiles\bundle\neocomplcache\autoload\unite\sources\file_include.vim	/^function! s:source.gather_candidates(args, context) "{{{$/;"	f
source.get_complete_words	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\filename_complete.vim	/^function! s:source.get_complete_words(complete_pos, complete_str) "{{{$/;"	f
source.get_complete_words	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\filename_include.vim	/^function! s:source.get_complete_words(complete_pos, complete_str) "{{{$/;"	f
source.get_complete_words	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\member_complete.vim	/^function! s:source.get_complete_words(complete_pos, complete_str) "{{{$/;"	f
source.get_complete_words	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\omni_complete.vim	/^function! s:source.get_complete_words(complete_pos, complete_str) "{{{$/;"	f
source.get_complete_words	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete.vim	/^function! s:source.get_complete_words(complete_pos, complete_str) "{{{$/;"	f
source.get_keyword_list	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\dictionary_complete.vim	/^function! s:source.get_keyword_list(complete_str) "{{{$/;"	f
source.get_keyword_list	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\include_complete.vim	/^function! s:source.get_keyword_list(complete_str) "{{{$/;"	f
source.get_keyword_list	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\syntax_complete.vim	/^function! s:source.get_keyword_list(complete_str) "{{{$/;"	f
source.get_keyword_list	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\tags_complete.vim	/^function! s:source.get_keyword_list(complete_str) "{{{$/;"	f
source.get_keyword_pos	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\filename_complete.vim	/^function! s:source.get_keyword_pos(cur_text) "{{{$/;"	f
source.get_keyword_pos	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\filename_include.vim	/^function! s:source.get_keyword_pos(cur_text) "{{{$/;"	f
source.get_keyword_pos	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\member_complete.vim	/^function! s:source.get_keyword_pos(cur_text) "{{{$/;"	f
source.get_keyword_pos	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\omni_complete.vim	/^function! s:source.get_keyword_pos(cur_text) "{{{$/;"	f
source.get_keyword_pos	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete.vim	/^function! s:source.get_keyword_pos(cur_text) "{{{$/;"	f
source.hooks.on_final	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\buffer_complete.vim	/^function! s:source.hooks.on_final(context) "{{{$/;"	f
source.hooks.on_init	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\buffer_complete.vim	/^function! s:source.hooks.on_init(context) "{{{$/;"	f
source.hooks.on_init	.\vimfiles\bundle\neocomplcache\autoload\unite\sources\file_include.vim	/^function! s:source.hooks.on_init(args, context) "{{{$/;"	f
source.initialize	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\dictionary_complete.vim	/^function! s:source.initialize() "{{{$/;"	f
source.initialize	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\filename_complete.vim	/^function! s:source.initialize() "{{{$/;"	f
source.initialize	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\filename_include.vim	/^function! s:source.initialize() "{{{$/;"	f
source.initialize	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\include_complete.vim	/^function! s:source.initialize() "{{{$/;"	f
source.initialize	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\member_complete.vim	/^function! s:source.initialize() "{{{$/;"	f
source.initialize	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\omni_complete.vim	/^function! s:source.initialize() "{{{$/;"	f
source.initialize	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\syntax_complete.vim	/^function! s:source.initialize() "{{{$/;"	f
source.initialize	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\tags_complete.vim	/^function! s:source.initialize() "{{{$/;"	f
source.initialize	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete.vim	/^function! s:source.initialize() "{{{$/;"	f
sourceFileName	.\ctags58\entry.h	/^	const char *sourceFileName;   \/* name of source file *\/$/;"	m	struct:sTagEntryInfo	access:public
span	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\data\list.vim	/^function! s:span(f, xs)$/;"	f
spellfile#GetDirChoices	.\vim73\autoload\spellfile.vim	/^function! spellfile#GetDirChoices()$/;"	f
spellfile#LoadFile	.\vim73\autoload\spellfile.vim	/^function! spellfile#LoadFile(lang)$/;"	f
spellfile#Nread	.\vim73\autoload\spellfile.vim	/^function! spellfile#Nread(fname)$/;"	f
spellfile#WritableSpellDir	.\vim73\autoload\spellfile.vim	/^function! spellfile#WritableSpellDir()$/;"	f
split_args	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\vim_complete\helper.vim	/^function! s:split_args(cur_text, complete_str) "{{{$/;"	f
split_pattern	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\syntax_complete.vim	/^function! s:split_pattern(keyword_pattern) "{{{$/;"	f
sqlKind	.\ctags58\sql.c	/^} sqlKind;$/;"	t	typeref:enum:__anon82	file:
sqlcomplete#Complete	.\vim73\autoload\sqlcomplete.vim	/^function! sqlcomplete#Complete(findstart, base)$/;"	f
sqlcomplete#DrillIntoTable	.\vim73\autoload\sqlcomplete.vim	/^function! sqlcomplete#DrillIntoTable()$/;"	f
sqlcomplete#DrillOutOfColumns	.\vim73\autoload\sqlcomplete.vim	/^function! sqlcomplete#DrillOutOfColumns()$/;"	f
sqlcomplete#Map	.\vim73\autoload\sqlcomplete.vim	/^function! sqlcomplete#Map(type)$/;"	f
sqlcomplete#PreCacheSyntax	.\vim73\autoload\sqlcomplete.vim	/^function! sqlcomplete#PreCacheSyntax(...)$/;"	f
sqlcomplete#ResetCacheSyntax	.\vim73\autoload\sqlcomplete.vim	/^function! sqlcomplete#ResetCacheSyntax(...)$/;"	f
st_atime	.\ctags58\e_mac.h	/^	time_t             st_atime;    \/* Time of last access.  *\/$/;"	m	struct:stat	access:public
st_blksize	.\ctags58\e_mac.h	/^	unsigned long int  st_blksize;  \/* Optimal block size for I\/O.  *\/$/;"	m	struct:stat	access:public
st_blocks	.\ctags58\e_mac.h	/^	long               st_blocks;   \/* Number 512-byte blocks allocated. *\/$/;"	m	struct:stat	access:public
st_ctime	.\ctags58\e_mac.h	/^	time_t             st_ctime;    \/* Time of last status change.  *\/$/;"	m	struct:stat	access:public
st_dev	.\ctags58\e_mac.h	/^	dev_t              st_dev;      \/* Device.  *\/$/;"	m	struct:stat	access:public
st_gid	.\ctags58\e_mac.h	/^	gid_t              st_gid;      \/* Group ID of the file's group.*\/$/;"	m	struct:stat	access:public
st_ino	.\ctags58\e_mac.h	/^	ino_t              st_ino;      \/* File serial number.	*\/$/;"	m	struct:stat	access:public
st_mode	.\ctags58\e_mac.h	/^	mode_t             st_mode;     \/* File mode.  *\/$/;"	m	struct:stat	access:public
st_mtime	.\ctags58\e_mac.h	/^	time_t             st_mtime;    \/* Time of last modification.  *\/$/;"	m	struct:stat	access:public
st_nlink	.\ctags58\e_mac.h	/^	nlink_t            st_nlink;    \/* Link count.  *\/$/;"	m	struct:stat	access:public
st_size	.\ctags58\e_mac.h	/^	off_t              st_size;     \/* Size of file, in bytes.  *\/$/;"	m	struct:stat	access:public
st_uid	.\ctags58\e_mac.h	/^	uid_t              st_uid;      \/* User ID of the file's owner.	*\/$/;"	m	struct:stat	access:public
stack	.\ctags58\gnu_regex\regex_internal.h	/^  struct re_fail_stack_ent_t *stack;$/;"	m	struct:re_fail_stack_t	typeref:struct:re_fail_stack_t::re_fail_stack_ent_t	access:public
stack	.\ctags58\ocaml.c	/^ocamlContext stack[OCAML_MAX_STACK_SIZE];$/;"	v
stackIndex	.\ctags58\ocaml.c	/^int stackIndex;$/;"	v
start	.\ctags58\gnu_regex\regex.h	/^  regoff_t *start;$/;"	m	struct:re_registers	access:public
start	.\ctags58\gnu_regex\regexec.c	/^    int length, start, range;$/;"	v
start	.\ctags58\gnu_regex\regexec.c	/^    int length1, length2, start, range, stop;$/;"	v
start	.\ctags58\gnu_regex\regexec.c	/^    int length1, length2, start, stop;$/;"	v
start	.\ctags58\parse.h	/^	size_t start;   \/* character index in line where match starts *\/$/;"	m	struct:__anon57	access:public
start_complete	.\vimfiles\bundle\neocomplcache\autoload\unite\sources\neocomplcache.vim	/^function! s:start_complete(is_quick_match) "{{{$/;"	f
starttoken	.\ctags58\pascal.c	62;"	d	file:
stat	.\ctags58\e_mac.h	/^struct stat {$/;"	s
stat	.\ctags58\e_mac.h	138;"	d
stat	.\ctags58\routines.c	/^extern int stat (const char *, struct stat *);$/;"	p	file:	signature:(const char *, struct stat *)
stat	.\ctags58\routines.c	127;"	d	file:
stat::__pad1	.\ctags58\e_mac.h	/^	unsigned short int __pad1;$/;"	m	struct:stat	access:public
stat::st_atime	.\ctags58\e_mac.h	/^	time_t             st_atime;    \/* Time of last access.  *\/$/;"	m	struct:stat	access:public
stat::st_blksize	.\ctags58\e_mac.h	/^	unsigned long int  st_blksize;  \/* Optimal block size for I\/O.  *\/$/;"	m	struct:stat	access:public
stat::st_blocks	.\ctags58\e_mac.h	/^	long               st_blocks;   \/* Number 512-byte blocks allocated. *\/$/;"	m	struct:stat	access:public
stat::st_ctime	.\ctags58\e_mac.h	/^	time_t             st_ctime;    \/* Time of last status change.  *\/$/;"	m	struct:stat	access:public
stat::st_dev	.\ctags58\e_mac.h	/^	dev_t              st_dev;      \/* Device.  *\/$/;"	m	struct:stat	access:public
stat::st_gid	.\ctags58\e_mac.h	/^	gid_t              st_gid;      \/* Group ID of the file's group.*\/$/;"	m	struct:stat	access:public
stat::st_ino	.\ctags58\e_mac.h	/^	ino_t              st_ino;      \/* File serial number.	*\/$/;"	m	struct:stat	access:public
stat::st_mode	.\ctags58\e_mac.h	/^	mode_t             st_mode;     \/* File mode.  *\/$/;"	m	struct:stat	access:public
stat::st_mtime	.\ctags58\e_mac.h	/^	time_t             st_mtime;    \/* Time of last modification.  *\/$/;"	m	struct:stat	access:public
stat::st_nlink	.\ctags58\e_mac.h	/^	nlink_t            st_nlink;    \/* Link count.  *\/$/;"	m	struct:stat	access:public
stat::st_size	.\ctags58\e_mac.h	/^	off_t              st_size;     \/* Size of file, in bytes.  *\/$/;"	m	struct:stat	access:public
stat::st_uid	.\ctags58\e_mac.h	/^	uid_t              st_uid;      \/* User ID of the file's owner.	*\/$/;"	m	struct:stat	access:public
state	.\ctags58\get.c	/^		enum eState state;       \/* current directive being processed *\/$/;"	m	struct:sCppState::sDirective	typeref:enum:sCppState::sDirective::eState	file:	access:public
state_array_t	.\ctags58\gnu_regex\regex_internal.h	/^} state_array_t;$/;"	t	typeref:struct:__anon33
state_hash_mask	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned int state_hash_mask;$/;"	m	struct:re_dfa_t	access:public
state_log	.\ctags58\gnu_regex\regex_internal.h	/^  re_dfastate_t **state_log;$/;"	m	struct:__anon36	access:public
state_log_top	.\ctags58\gnu_regex\regex_internal.h	/^  int state_log_top;$/;"	m	struct:__anon36	access:public
state_proto.jump_stop	.\vimfiles\bundle\vim-snipmate\autoload\snipMate.vim	/^function! s:state_proto.jump_stop(backwards)$/;"	f
state_proto.remove	.\vimfiles\bundle\vim-snipmate\autoload\snipMate.vim	/^fun! s:state_proto.remove()$/;"	f
state_proto.select_word	.\vimfiles\bundle\vim-snipmate\autoload\snipMate.vim	/^function! s:state_proto.select_word()$/;"	f
state_proto.set_stop	.\vimfiles\bundle\vim-snipmate\autoload\snipMate.vim	/^function! s:state_proto.set_stop(stop)$/;"	f
state_proto.update_changes	.\vimfiles\bundle\vim-snipmate\autoload\snipMate.vim	/^function! s:state_proto.update_changes()$/;"	f
state_proto.update_stops	.\vimfiles\bundle\vim-snipmate\autoload\snipMate.vim	/^function! s:state_proto.update_stops()$/;"	f
state_proto.update_vars	.\vimfiles\bundle\vim-snipmate\autoload\snipMate.vim	/^function! s:state_proto.update_vars(change)$/;"	f
state_table	.\ctags58\gnu_regex\regex_internal.h	/^  struct re_state_table_entry *state_table;$/;"	m	struct:re_dfa_t	typeref:struct:re_dfa_t::re_state_table_entry	access:public
statementInfo	.\ctags58\c.c	/^} statementInfo;$/;"	t	typeref:struct:sStatementInfo	file:
status	.\ctags58\readtags.h	/^	} status;$/;"	m	struct:__anon68	typeref:struct:__anon68::__anon69	access:public
status_address	.\ctags58\argproc.c	/^	int *status_address;$/;"	m	struct:exit_control_block	file:	access:public
stepmatch	.\vim73\ftplugin\cucumber.vim	/^function! s:stepmatch(receiver,target)$/;"	f
steps	.\vim73\ftplugin\cucumber.vim	/^function! s:steps(lnum)$/;"	f
stop	.\ctags58\gnu_regex\regex_internal.h	/^  int stop;$/;"	m	struct:re_string_t	access:public
stop	.\ctags58\gnu_regex\regexec.c	/^    int length1, length2, start, range, stop;$/;"	v
stop	.\ctags58\gnu_regex\regexec.c	/^    int length1, length2, start, stop;$/;"	v
str_idx	.\ctags58\gnu_regex\regex_internal.h	/^  int str_idx; \/* The position NODE match at.  *\/$/;"	m	struct:__anon34	access:public
str_idx	.\ctags58\gnu_regex\regex_internal.h	/^  int str_idx;$/;"	m	struct:__anon35	access:public
str_idx	.\ctags58\gnu_regex\regex_internal.h	/^  int str_idx;$/;"	m	struct:re_backref_cache_entry	access:public
str_tree	.\ctags58\gnu_regex\regex_internal.h	/^  bin_tree_t *str_tree;$/;"	m	struct:re_dfa_t	access:public
str_tree_storage	.\ctags58\gnu_regex\regex_internal.h	/^  bin_tree_storage_t *str_tree_storage;$/;"	m	struct:re_dfa_t	access:public
str_tree_storage_idx	.\ctags58\gnu_regex\regex_internal.h	/^  int str_tree_storage_idx;$/;"	m	struct:re_dfa_t	access:public
strcasecmp	.\ctags58\general.h	72;"	d
strcasecmp	.\ctags58\general.h	74;"	d
strchars	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\prelude.vim	/^function! s:strchars(str)$/;"	f
string	.\ctags58\args.h	/^			const char* string;$/;"	m	struct:sArgs::__anon2::sStringArgs	access:public
string	.\ctags58\eiffel.c	/^	vString*  string;$/;"	m	struct:sTokenInfo	file:	access:public
string	.\ctags58\flex.c	/^	vString *		string;$/;"	m	struct:sTokenInfo	file:	access:public
string	.\ctags58\fortran.c	/^	vString* string;$/;"	m	struct:sTokenInfo	file:	access:public
string	.\ctags58\jscript.c	/^	vString *		string;$/;"	m	struct:sTokenInfo	file:	access:public
string	.\ctags58\keyword.c	/^	const char *string;$/;"	m	struct:sHashEntry	file:	access:public
string	.\ctags58\sql.c	/^	vString *	string;$/;"	m	struct:sTokenInfoSQL	file:	access:public
string	.\ctags58\tex.c	/^	vString *		string;$/;"	m	struct:sTokenInfo	file:	access:public
string	.\ctags58\vhdl.c	/^	vString *string;		\/* the name of the token *\/$/;"	m	struct:sTokenInfo	file:	access:public
stringArgs	.\ctags58\args.h	/^		} stringArgs;$/;"	m	union:sArgs::__anon2	typeref:struct:sArgs::__anon2::sStringArgs	access:public
stringCopy	.\ctags58\options.c	/^static char *stringCopy (const char *const string)$/;"	f	file:	signature:(const char *const string)
stringList	.\ctags58\strlist.h	/^} stringList;$/;"	t	typeref:struct:sStringList
stringListAdd	.\ctags58\strlist.c	/^extern void stringListAdd (stringList *const current, vString *string)$/;"	f	signature:(stringList *const current, vString *string)
stringListAdd	.\ctags58\strlist.h	/^extern void stringListAdd (stringList *const current, vString *string);$/;"	p	signature:(stringList *const current, vString *string)
stringListClear	.\ctags58\strlist.c	/^extern void stringListClear (stringList *const current)$/;"	f	signature:(stringList *const current)
stringListClear	.\ctags58\strlist.h	/^extern void stringListClear (stringList *const current);$/;"	p	signature:(stringList *const current)
stringListCombine	.\ctags58\strlist.c	/^extern void stringListCombine ($/;"	f	signature:( stringList *const current, stringList *const from)
stringListCombine	.\ctags58\strlist.h	/^extern void stringListCombine (stringList *const current, stringList *const from);$/;"	p	signature:(stringList *const current, stringList *const from)
stringListCount	.\ctags58\strlist.c	/^extern unsigned int stringListCount (const stringList *const current)$/;"	f	signature:(const stringList *const current)
stringListCount	.\ctags58\strlist.h	/^extern unsigned int stringListCount (const stringList *const current);$/;"	p	signature:(const stringList *const current)
stringListDelete	.\ctags58\strlist.c	/^extern void stringListDelete (stringList *const current)$/;"	f	signature:(stringList *const current)
stringListDelete	.\ctags58\strlist.h	/^extern void stringListDelete (stringList *const current);$/;"	p	signature:(stringList *const current)
stringListExtensionMatched	.\ctags58\strlist.c	/^extern boolean stringListExtensionMatched ($/;"	f	signature:( const stringList* const current, const char* const extension)
stringListExtensionMatched	.\ctags58\strlist.h	/^extern boolean stringListExtensionMatched (const stringList* const list, const char* const extension);$/;"	p	signature:(const stringList* const list, const char* const extension)
stringListFileMatched	.\ctags58\strlist.c	/^extern boolean stringListFileMatched ($/;"	f	signature:( const stringList* const current, const char* const fileName)
stringListFileMatched	.\ctags58\strlist.h	/^extern boolean stringListFileMatched (const stringList* const list, const char* const str);$/;"	p	signature:(const stringList* const list, const char* const str)
stringListHas	.\ctags58\strlist.c	/^extern boolean stringListHas ($/;"	f	signature:( const stringList *const current, const char *const string)
stringListHas	.\ctags58\strlist.h	/^extern boolean stringListHas (const stringList *const current, const char *const string);$/;"	p	signature:(const stringList *const current, const char *const string)
stringListHasInsensitive	.\ctags58\strlist.c	/^extern boolean stringListHasInsensitive ($/;"	f	signature:( const stringList *const current, const char *const string)
stringListHasInsensitive	.\ctags58\strlist.h	/^extern boolean stringListHasInsensitive (const stringList *const current, const char *const string);$/;"	p	signature:(const stringList *const current, const char *const string)
stringListHasTest	.\ctags58\strlist.c	/^extern boolean stringListHasTest ($/;"	f	signature:( const stringList *const current, boolean (*test)(const char *s))
stringListHasTest	.\ctags58\strlist.h	/^extern boolean stringListHasTest (const stringList *const current, boolean (*test)(const char *s));$/;"	p	signature:(const stringList *const current, boolean (*test)(const char *s))
stringListIndex	.\ctags58\strlist.c	/^static int stringListIndex ($/;"	f	file:	signature:( const stringList *const current, const char *const string, boolean (*test)(const char *s, vString *const vs))
stringListItem	.\ctags58\strlist.c	/^extern vString* stringListItem ($/;"	f	signature:( const stringList *const current, const unsigned int indx)
stringListItem	.\ctags58\strlist.h	/^extern vString* stringListItem (const stringList *const current, const unsigned int indx);$/;"	p	signature:(const stringList *const current, const unsigned int indx)
stringListLast	.\ctags58\strlist.c	/^extern vString* stringListLast (const stringList *const current)$/;"	f	signature:(const stringList *const current)
stringListLast	.\ctags58\strlist.h	/^extern vString* stringListLast (const stringList *const current);$/;"	p	signature:(const stringList *const current)
stringListNew	.\ctags58\strlist.c	/^extern stringList *stringListNew (void)$/;"	f	signature:(void)
stringListNew	.\ctags58\strlist.h	/^extern stringList *stringListNew (void);$/;"	p	signature:(void)
stringListNewFromArgv	.\ctags58\strlist.c	/^extern stringList* stringListNewFromArgv (const char* const* const argv)$/;"	f	signature:(const char* const* const argv)
stringListNewFromArgv	.\ctags58\strlist.h	/^extern stringList* stringListNewFromArgv (const char* const* const list);$/;"	p	signature:(const char* const* const list)
stringListNewFromFile	.\ctags58\strlist.c	/^extern stringList* stringListNewFromFile (const char* const fileName)$/;"	f	signature:(const char* const fileName)
stringListNewFromFile	.\ctags58\strlist.h	/^extern stringList* stringListNewFromFile (const char* const fileName);$/;"	p	signature:(const char* const fileName)
stringListPrint	.\ctags58\strlist.c	/^extern void stringListPrint (const stringList *const current)$/;"	f	signature:(const stringList *const current)
stringListPrint	.\ctags58\strlist.h	/^extern void stringListPrint (const stringList *const current);$/;"	p	signature:(const stringList *const current)
stringListRemoveExtension	.\ctags58\strlist.c	/^extern boolean stringListRemoveExtension ($/;"	f	signature:( stringList* const current, const char* const extension)
stringListRemoveExtension	.\ctags58\strlist.h	/^extern boolean stringListRemoveExtension (stringList* const current, const char* const extension);$/;"	p	signature:(stringList* const current, const char* const extension)
stringListRemoveLast	.\ctags58\strlist.c	/^extern void stringListRemoveLast (stringList *const current)$/;"	f	signature:(stringList *const current)
stringListRemoveLast	.\ctags58\strlist.h	/^extern void stringListRemoveLast (stringList *const current);$/;"	p	signature:(stringList *const current)
stringListToScope	.\ctags58\ruby.c	/^static vString* stringListToScope (const stringList* list)$/;"	f	file:	signature:(const stringList* list)
stringMatch	.\ctags58\get.c	30;"	d	file:
strip	.\vim73\indent\bst.vim	/^function! s:strip(lnum)$/;"	f
stripped	.\vim73\indent\cobol.vim	/^function! s:stripped(lnum)$/;"	f
strncasecmp	.\ctags58\general.h	80;"	d
strncasecmp	.\ctags58\general.h	82;"	d
strnuppercmp	.\ctags58\readtags.c	/^static int strnuppercmp (const char *s1, const char *s2, size_t n)$/;"	f	file:	signature:(const char *s1, const char *s2, size_t n)
strnuppercmp	.\ctags58\routines.c	/^extern int strnuppercmp (const char *s1, const char *s2, size_t n)$/;"	f	signature:(const char *s1, const char *s2, size_t n)
strnuppercmp	.\ctags58\routines.h	/^extern int strnuppercmp (const char *s1, const char *s2, size_t n);$/;"	p	signature:(const char *s1, const char *s2, size_t n)
strstr	.\ctags58\routines.c	/^extern char* strstr (const char *str, const char *substr)$/;"	f	signature:(const char *str, const char *substr)
strstr	.\ctags58\routines.h	/^extern char* strstr (const char *str, const char *substr);$/;"	p	signature:(const char *str, const char *substr)
struppercmp	.\ctags58\readtags.c	/^static int struppercmp (const char *s1, const char *s2)$/;"	f	file:	signature:(const char *s1, const char *s2)
struppercmp	.\ctags58\routines.c	/^extern int struppercmp (const char *s1, const char *s2)$/;"	f	signature:(const char *s1, const char *s2)
struppercmp	.\ctags58\routines.h	/^extern int struppercmp (const char *s1, const char *s2);$/;"	p	signature:(const char *s1, const char *s2)
strwidthpart	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\async_cache.vim	/^function! s:strwidthpart(str, width) "{{{$/;"	f
strwidthpart	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\prelude.vim	/^function! s:strwidthpart(str, width)$/;"	f
strwidthpart_reverse	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\prelude.vim	/^function! s:strwidthpart_reverse(str, width)$/;"	f
stub_finder	.\vimfiles\bundle\command-t\spec\command-t\controller_spec.rb	/^  def stub_finder(sorted_matches=[])$/;"	f
stub_match_window	.\vimfiles\bundle\command-t\spec\command-t\controller_spec.rb	/^  def stub_match_window(selection)$/;"	f
stub_prompt	.\vimfiles\bundle\command-t\spec\command-t\controller_spec.rb	/^  def stub_prompt(abbrev='')$/;"	f
stub_vim	.\vimfiles\bundle\command-t\spec\command-t\controller_spec.rb	/^  def stub_vim(working_directory)$/;"	f
sub_epsilon_src_nodes	.\ctags58\gnu_regex\regexec.c	/^sub_epsilon_src_nodes (const re_dfa_t *dfa, int node, re_node_set *dest_nodes,$/;"	f	file:	signature:(const re_dfa_t *dfa, int node, re_node_set *dest_nodes, const re_node_set *candidates)
sub_tops	.\ctags58\gnu_regex\regex_internal.h	/^  re_sub_match_top_t **sub_tops;$/;"	m	struct:__anon36	access:public
subexp_from	.\ctags58\gnu_regex\regex_internal.h	/^  int subexp_from;$/;"	m	struct:re_backref_cache_entry	access:public
subexp_map	.\ctags58\gnu_regex\regex_internal.h	/^  int *subexp_map;$/;"	m	struct:re_dfa_t	access:public
subexp_to	.\ctags58\gnu_regex\regex_internal.h	/^  int subexp_to;$/;"	m	struct:re_backref_cache_entry	access:public
substitute	.\ctags58\lregex.c	/^static vString* substitute ($/;"	f	file:	signature:( const char* const in, const char* out, const int nmatch, const regmatch_t* const pmatch)
substitute_candidate	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\syntax_complete.vim	/^function! s:substitute_candidate(candidate) "{{{$/;"	f
substitute_items	.\vim73\ftplugin\changelog.vim	/^  function! s:substitute_items(str, date, user)$/;"	f
substitute_path_separator	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\prelude.vim	/^function! s:substitute_path_separator(path)$/;"	f
support_jisx0213	.\vim73\lang\menu_ja_jp.euc-jp.vim	/^  let support_jisx0213 = (iconv("\\x87\\x64\\x87\\x6a", 'cp932', 'euc-jisx0213') ==# "\\xad\\xc5\\xad\\xcb") ? 1 : 0$/;"	v
support_jisx0213	.\vim73\lang\menu_ja_jp.utf-8.vim	/^  let support_jisx0213 = (iconv("\\x87\\x64\\x87\\x6a", 'cp932', 'euc-jisx0213') ==# "\\xad\\xc5\\xad\\xcb") ? 1 : 0$/;"	v
support_jisx0213	.\vim73\lang\menu_japanese_japan.932.vim	/^  let support_jisx0213 = (iconv("\\x87\\x64\\x87\\x6a", 'cp932', 'euc-jisx0213') ==# "\\xad\\xc5\\xad\\xcb") ? 1 : 0$/;"	v
syn	.\vim73\indent\cucumber.vim	/^function! s:syn(lnum)$/;"	f
sync	.\vimfiles\bundle\vundle\autoload\vundle\installer.vim	/^func! s:sync(bang, bundle) abort$/;"	f
synname	.\vim73\ftplugin\ruby.vim	/^function! s:synname()$/;"	f
syntax	.\ctags58\gnu_regex\regex_internal.h	/^  reg_syntax_t syntax;$/;"	m	struct:re_dfa_t	access:public
syntax_manual	.\vim73\syntax\manual.vim	/^let syntax_manual = 1$/;"	v
syntax_on	.\vim73\syntax\synload.vim	/^let syntax_on = 1$/;"	v
syntaxcomplete#Complete	.\vim73\autoload\syntaxcomplete.vim	/^function! syntaxcomplete#Complete(findstart, base)$/;"	f
syntaxcomplete#OmniSyntaxList	.\vim73\autoload\syntaxcomplete.vim	/^function! syntaxcomplete#OmniSyntaxList(...)$/;"	f
syntaxset	.\vim73\syntax\nosyntax.vim	/^augroup syntaxset$/;"	a
syntaxset	.\vim73\syntax\syntax.vim	/^augroup syntaxset$/;"	a
system	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\prelude.vim	/^function! s:system(str, ...)$/;"	f
system	.\vimfiles\bundle\vundle\autoload\vundle\installer.vim	/^func! s:system(cmd) abort$/;"	f
system_with_default	.\vim73\ftplugin\changelog.vim	/^  function! s:system_with_default(command, default)$/;"	f
t	.\vim73\macros\hanoi\hanoi.vim	/^map t 7$/;"	m
t	.\vim73\macros\hanoi\hanoi.vim	/^map! t 7$/;"	m
tads_minlines	.\vim73\syntax\tads.vim	/^  let tads_minlines = 15$/;"	v
tads_sync_dist	.\vim73\syntax\tads.vim	/^  let tads_sync_dist = 100$/;"	v
tag	.\ctags58\entry.h	/^	struct sMax { size_t line, tag, file; } max;$/;"	m	struct:eTagFile::sMax	access:public
tag	.\ctags58\fortran.c	/^	tagType tag;$/;"	m	struct:sTokenInfo	file:	access:public
tag	.\ctags58\lregex.c	/^		} tag;$/;"	m	union:__anon43::__anon44	typeref:struct:__anon43::__anon44::__anon45	file:	access:public
tagCheck	.\ctags58\c.c	/^static void tagCheck (statementInfo *const st)$/;"	f	file:	signature:(statementInfo *const st)
tagEntry	.\ctags58\readtags.h	/^} tagEntry;$/;"	t	typeref:struct:__anon73
tagEntryInfo	.\ctags58\entry.h	/^} tagEntryInfo;$/;"	t	typeref:struct:sTagEntryInfo
tagExtensionField	.\ctags58\readtags.h	/^} tagExtensionField;$/;"	t	typeref:struct:__anon72
tagFields	.\ctags58\entry.h	/^} tagFields;$/;"	t	typeref:struct:sTagFields
tagFile	.\ctags58\entry.h	/^} tagFile;$/;"	t	typeref:struct:eTagFile
tagFile	.\ctags58\readtags.h	/^typedef struct sTagFile tagFile;$/;"	t	typeref:struct:sTagFile
tagFileFormat	.\ctags58\options.h	/^	unsigned int tagFileFormat;\/* --format  tag file format (level) *\/$/;"	m	struct:sOptionValues	access:public
tagFileInfo	.\ctags58\readtags.h	/^} tagFileInfo;$/;"	t	typeref:struct:__anon68
tagFileName	.\ctags58\entry.c	/^extern const char *tagFileName (void)$/;"	f	signature:(void)
tagFileName	.\ctags58\entry.h	/^extern const char *tagFileName (void);$/;"	p	signature:(void)
tagFileName	.\ctags58\options.h	/^	char *tagFileName;      \/* -o  name of tags file *\/$/;"	m	struct:sOptionValues	access:public
tagLetter	.\ctags58\c.c	/^static int tagLetter (const tagType type)$/;"	f	file:	signature:(const tagType type)
tagName	.\ctags58\c.c	/^static const char *tagName (const tagType type)$/;"	f	file:	signature:(const tagType type)
tagNameList	.\ctags58\verilog.c	/^static void tagNameList (const verilogKind kind, int c)$/;"	f	file:	signature:(const verilogKind kind, int c)
tagPath	.\ctags58\read.h	/^		char    *tagPath;        \/* path of source file relative to tag file *\/$/;"	m	struct:sInputFile::sSource	access:public
tagRelative	.\ctags58\options.h	/^	boolean tagRelative;    \/* --tag-relative file paths relative to tag file *\/$/;"	m	struct:sOptionValues	access:public
tagResult	.\ctags58\readtags.h	/^typedef enum { TagFailure = 0, TagSuccess = 1 } tagResult;$/;"	t	typeref:enum:__anon67
tagScope	.\ctags58\c.c	/^} tagScope;$/;"	t	typeref:enum:eTagScope	file:
tagType	.\ctags58\c.c	/^} tagType;$/;"	t	typeref:enum:eTagType	file:
tagType	.\ctags58\fortran.c	/^} tagType;$/;"	t	typeref:enum:eTagType	file:
tag_finder	.\vimfiles\bundle\command-t\ruby\command-t\controller.rb	/^    def tag_finder$/;"	f	class:CommandT.Controller.quickfix.ensure_appropriate_window_selection
taglist	.\vimfiles\bundle\command-t\ruby\command-t\scanner\tag_scanner.rb	/^    def taglist$/;"	f	class:CommandT.TagScanner.paths
tagsClose	.\ctags58\readtags.c	/^extern tagResult tagsClose (tagFile *const file)$/;"	f	signature:(tagFile *const file)
tagsClose	.\ctags58\readtags.h	/^extern tagResult tagsClose (tagFile *const file);$/;"	p	signature:(tagFile *const file)
tagsField	.\ctags58\readtags.c	/^extern const char *tagsField (const tagEntry *const entry, const char *const key)$/;"	f	signature:(const tagEntry *const entry, const char *const key)
tagsField	.\ctags58\readtags.h	/^extern const char *tagsField (const tagEntry *const entry, const char *const key);$/;"	p	signature:(const tagEntry *const entry, const char *const key)
tagsFind	.\ctags58\readtags.c	/^extern tagResult tagsFind (tagFile *const file, tagEntry *const entry,$/;"	f	signature:(tagFile *const file, tagEntry *const entry, const char *const name, const int options)
tagsFind	.\ctags58\readtags.h	/^extern tagResult tagsFind (tagFile *const file, tagEntry *const entry, const char *const name, const int options);$/;"	p	signature:(tagFile *const file, tagEntry *const entry, const char *const name, const int options)
tagsFindNext	.\ctags58\readtags.c	/^extern tagResult tagsFindNext (tagFile *const file, tagEntry *const entry)$/;"	f	signature:(tagFile *const file, tagEntry *const entry)
tagsFindNext	.\ctags58\readtags.h	/^extern tagResult tagsFindNext (tagFile *const file, tagEntry *const entry);$/;"	p	signature:(tagFile *const file, tagEntry *const entry)
tagsFirst	.\ctags58\readtags.c	/^extern tagResult tagsFirst (tagFile *const file, tagEntry *const entry)$/;"	f	signature:(tagFile *const file, tagEntry *const entry)
tagsFirst	.\ctags58\readtags.h	/^extern tagResult tagsFirst (tagFile *const file, tagEntry *const entry);$/;"	p	signature:(tagFile *const file, tagEntry *const entry)
tagsNext	.\ctags58\readtags.c	/^extern tagResult tagsNext (tagFile *const file, tagEntry *const entry)$/;"	f	signature:(tagFile *const file, tagEntry *const entry)
tagsNext	.\ctags58\readtags.h	/^extern tagResult tagsNext (tagFile *const file, tagEntry *const entry);$/;"	p	signature:(tagFile *const file, tagEntry *const entry)
tagsOpen	.\ctags58\readtags.c	/^extern tagFile *tagsOpen (const char *const filePath, tagFileInfo *const info)$/;"	f	signature:(const char *const filePath, tagFileInfo *const info)
tagsOpen	.\ctags58\readtags.h	/^extern tagFile *tagsOpen (const char *const filePath, tagFileInfo *const info);$/;"	p	signature:(const char *const filePath, tagFileInfo *const info)
tagsSetSortType	.\ctags58\readtags.c	/^extern tagResult tagsSetSortType (tagFile *const file, const sortType type)$/;"	f	signature:(tagFile *const file, const sortType type)
tagsSetSortType	.\ctags58\readtags.h	/^extern tagResult tagsSetSortType (tagFile *const file, const sortType type);$/;"	p	signature:(tagFile *const file, const sortType type)
tail	.\ctags58\pascal.c	/^static boolean tail (const char *cp)$/;"	f	file:	signature:(const char *cp)
tar	.\vim73\plugin\tarPlugin.vim	/^augroup tar$/;"	a
tar#Browse	.\vim73\autoload\tar.vim	/^fun! tar#Browse(tarfile)$/;"	f
tar#Read	.\vim73\autoload\tar.vim	/^fun! tar#Read(fname,mode)$/;"	f
tar#Vimuntar	.\vim73\autoload\tar.vim	/^fun! tar#Vimuntar(...)$/;"	f
tar#Write	.\vim73\autoload\tar.vim	/^fun! tar#Write(fname)$/;"	f
tclKind	.\ctags58\tcl.c	/^} tclKind;$/;"	t	typeref:enum:__anon83	file:
tempFile	.\ctags58\routines.c	/^extern FILE *tempFile (const char *const mode, char **const pName)$/;"	f	signature:(const char *const mode, char **const pName)
tempFile	.\ctags58\routines.h	/^extern FILE *tempFile (const char *const mode, char **const pName);$/;"	p	signature:(const char *const mode, char **const pName)
tempIdent	.\ctags58\ocaml.c	/^vString *tempIdent;$/;"	v
tempTag	.\ctags58\ocaml.c	/^tagEntryInfo tempTag;$/;"	v
tempnam	.\ctags58\e_msoft.h	38;"	d
tempname	.\vim73\autoload\gzip.vim	/^fun s:tempname(name)$/;"	f
term	.\vimfiles\bundle\command-t\ruby\command-t\controller.rb	/^    def term$/;"	f	class:CommandT.Controller.quickfix.ensure_appropriate_window_selection
terminate	.\ctags58\readtags.c	/^static void terminate (tagFile *const file)$/;"	f	file:	signature:(tagFile *const file)
terminatingToken	.\ctags58\ocaml.c	/^ocaToken terminatingToken;$/;"	v
test	.\vimfiles\bundle\tlib_vim\test\tlib.vim	/^let test = tlib#Test#New()$/;"	v
test1	.\vimfiles\bundle\tlib_vim\test\tlib.vim	/^let test1 = tlib#Test#New()$/;"	v
testEtagsInvocation	.\ctags58\options.c	/^extern void testEtagsInvocation (void)$/;"	f	signature:(void)
testEtagsInvocation	.\ctags58\options.h	/^extern void testEtagsInvocation (void);$/;"	p	signature:(void)
testc	.\vimfiles\bundle\tlib_vim\test\tlib.vim	/^let testc = tlib#TestChild#New()$/;"	v
testworld	.\vimfiles\bundle\tlib_vim\test\tlib.vim	/^let testworld = tlib#World#New()$/;"	v
texKind	.\ctags58\tex.c	/^} texKind;$/;"	t	typeref:enum:__anon84	file:
tillTokenOrFallback	.\ctags58\ocaml.c	/^static void tillTokenOrFallback (vString * const ident, ocaToken what)$/;"	f	file:	signature:(vString * const ident, ocaToken what)
tillTokenOrTerminatingOrFallback	.\ctags58\ocaml.c	/^static void tillTokenOrTerminatingOrFallback (vString * const ident,$/;"	f	file:	signature:(vString * const ident, ocaToken what)
timeStamp	.\ctags58\main.c	485;"	d	file:
timeStamp	.\ctags58\main.c	518;"	d	file:
tiny_cmd#Get	.\vimfiles\bundle\vim-addon-mw-utils\autoload\tiny_cmd.vim	/^fun! tiny_cmd#Get(nr)$/;"	f
tiny_cmd#Pop	.\vimfiles\bundle\vim-addon-mw-utils\autoload\tiny_cmd.vim	/^fun! tiny_cmd#Pop(nr)$/;"	f
tiny_cmd#Put	.\vimfiles\bundle\vim-addon-mw-utils\autoload\tiny_cmd.vim	/^fun! tiny_cmd#Put(a)$/;"	f
tip_context	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned int tip_context;$/;"	m	struct:re_string_t	access:public
tlib#Filter_cnf#New	.\vimfiles\bundle\tlib_vim\autoload\tlib\Filter_cnf.vim	/^function! tlib#Filter_cnf#New(...) "{{{3$/;"	f
tlib#Filter_cnfd#New	.\vimfiles\bundle\tlib_vim\autoload\tlib\Filter_cnfd.vim	/^function! tlib#Filter_cnfd#New(...) "{{{3$/;"	f
tlib#Filter_cnfx#New	.\vimfiles\bundle\tlib_vim\autoload\tlib\Filter_cnfx.vim	/^function! tlib#Filter_cnfx#New(...) "{{{3$/;"	f
tlib#Filter_fuzzy#New	.\vimfiles\bundle\tlib_vim\autoload\tlib\Filter_fuzzy.vim	/^function! tlib#Filter_fuzzy#New(...) "{{{3$/;"	f
tlib#Object#Methods	.\vimfiles\bundle\tlib_vim\autoload\tlib\Object.vim	/^function! tlib#Object#Methods(object, ...) "{{{3$/;"	f
tlib#Object#New	.\vimfiles\bundle\tlib_vim\autoload\tlib\Object.vim	/^function! tlib#Object#New(...) "{{{3$/;"	f
tlib#Test#New	.\vimfiles\bundle\tlib_vim\autoload\tlib\Test.vim	/^function! tlib#Test#New(...) "{{{3$/;"	f
tlib#TestChild#New	.\vimfiles\bundle\tlib_vim\autoload\tlib\TestChild.vim	/^function! tlib#TestChild#New(...) "{{{3$/;"	f
tlib#World#New	.\vimfiles\bundle\tlib_vim\autoload\tlib\World.vim	/^function! tlib#World#New(...)$/;"	f
tlib#agent#AND	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#AND(world, selected) "{{{3$/;"	f
tlib#agent#CompleteAgentNames	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#CompleteAgentNames(ArgLead, CmdLine, CursorPos)$/;"	f
tlib#agent#Copy	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#Copy(world, selected) "{{{3$/;"	f
tlib#agent#CopyItems	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#CopyItems(world, selected) "{{{3$/;"	f
tlib#agent#Cut	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#Cut(world, selected) "{{{3$/;"	f
tlib#agent#Debug	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#Debug(world, selected) "{{{3$/;"	f
tlib#agent#DeleteItems	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#DeleteItems(world, selected) "{{{3$/;"	f
tlib#agent#DoAtLine	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#DoAtLine(world, selected) "{{{3$/;"	f
tlib#agent#Down	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#Down(world, selected, ...) "{{{3$/;"	f
tlib#agent#DownN	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#DownN(world, selected) "{{{3$/;"	f
tlib#agent#EditFile	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#EditFile(world, selected) "{{{3$/;"	f
tlib#agent#EditFileInSplit	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#EditFileInSplit(world, selected) "{{{3$/;"	f
tlib#agent#EditFileInTab	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#EditFileInTab(world, selected) "{{{3$/;"	f
tlib#agent#EditFileInVSplit	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#EditFileInVSplit(world, selected) "{{{3$/;"	f
tlib#agent#EditItem	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#EditItem(world, selected) "{{{3$/;"	f
tlib#agent#EditReturnValue	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#EditReturnValue(world, rv) "{{{3$/;"	f
tlib#agent#ExecAgentByName	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#ExecAgentByName(world, selected) "{{{3$/;"	f
tlib#agent#Exit	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#Exit(world, selected) "{{{3$/;"	f
tlib#agent#GotoLine	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#GotoLine(world, selected) "{{{3$/;"	f
tlib#agent#Help	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#Help(world, selected) "{{{3$/;"	f
tlib#agent#Input	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#Input(world, selected) "{{{3$/;"	f
tlib#agent#NewItem	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#NewItem(world, selected) "{{{3$/;"	f
tlib#agent#Null	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#Null(world, selected) "{{{3$/;"	f
tlib#agent#OR	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#OR(world, selected) "{{{3$/;"	f
tlib#agent#PageDown	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#PageDown(world, selected) "{{{3$/;"	f
tlib#agent#PageUp	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#PageUp(world, selected) "{{{3$/;"	f
tlib#agent#Paste	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#Paste(world, selected) "{{{3$/;"	f
tlib#agent#PopFilter	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#PopFilter(world, selected) "{{{3$/;"	f
tlib#agent#PreviewLine	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#PreviewLine(world, selected) "{{{3$/;"	f
tlib#agent#ReduceFilter	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#ReduceFilter(world, selected) "{{{3$/;"	f
tlib#agent#Reset	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#Reset(world, selected) "{{{3$/;"	f
tlib#agent#RestrictView	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#RestrictView(world, selected) "{{{3$/;"	f
tlib#agent#Select	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#Select(world, selected) "{{{3$/;"	f
tlib#agent#SelectAll	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#SelectAll(world, selected) "{{{3$/;"	f
tlib#agent#SelectDown	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#SelectDown(world, selected) "{{{3$/;"	f
tlib#agent#SelectUp	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#SelectUp(world, selected) "{{{3$/;"	f
tlib#agent#ShiftLeft	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#ShiftLeft(world, selected) "{{{3$/;"	f
tlib#agent#ShiftRight	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#ShiftRight(world, selected) "{{{3$/;"	f
tlib#agent#ShowInfo	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#ShowInfo(world, selected)$/;"	f
tlib#agent#Suspend	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#Suspend(world, selected) "{{{3$/;"	f
tlib#agent#SuspendToParentWindow	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#SuspendToParentWindow(world, selected) "{{{3$/;"	f
tlib#agent#ToggleRestrictView	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#ToggleRestrictView(world, selected) "{{{3$/;"	f
tlib#agent#ToggleScrollbind	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#ToggleScrollbind(world, selected) "{{{3$/;"	f
tlib#agent#ToggleStickyList	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#ToggleStickyList(world, selected) "{{{3$/;"	f
tlib#agent#UnrestrictView	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#UnrestrictView(world, selected) "{{{3$/;"	f
tlib#agent#Up	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#Up(world, selected, ...) "{{{3$/;"	f
tlib#agent#UpN	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#UpN(world, selected) "{{{3$/;"	f
tlib#agent#ViewFile	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#ViewFile(world, selected) "{{{3$/;"	f
tlib#agent#Wildcard	.\vimfiles\bundle\tlib_vim\autoload\tlib\agent.vim	/^function! tlib#agent#Wildcard(world, selected) "{{{3$/;"	f
tlib#arg#Ex	.\vimfiles\bundle\tlib_vim\autoload\tlib\arg.vim	/^function! tlib#arg#Ex(arg, ...) "{{{3$/;"	f
tlib#arg#Get	.\vimfiles\bundle\tlib_vim\autoload\tlib\arg.vim	/^function! tlib#arg#Get(n, var, ...) "{{{3$/;"	f
tlib#arg#Key	.\vimfiles\bundle\tlib_vim\autoload\tlib\arg.vim	/^function! tlib#arg#Key(list, ...) "{{{3$/;"	f
tlib#arg#Let	.\vimfiles\bundle\tlib_vim\autoload\tlib\arg.vim	/^function! tlib#arg#Let(list, ...) "{{{3$/;"	f
tlib#arg#StringAsKeyArgs	.\vimfiles\bundle\tlib_vim\autoload\tlib\arg.vim	/^function! tlib#arg#StringAsKeyArgs(string, ...) "{{{1$/;"	f
tlib#autocmdgroup#Init	.\vimfiles\bundle\tlib_vim\autoload\tlib\autocmdgroup.vim	/^function! tlib#autocmdgroup#Init() "{{{3$/;"	f
tlib#balloon#Expr	.\vimfiles\bundle\tlib_vim\autoload\tlib\balloon.vim	/^function! tlib#balloon#Expr() "{{{3$/;"	f
tlib#balloon#Register	.\vimfiles\bundle\tlib_vim\autoload\tlib\balloon.vim	/^function! tlib#balloon#Register(expr) "{{{3$/;"	f
tlib#balloon#Remove	.\vimfiles\bundle\tlib_vim\autoload\tlib\balloon.vim	/^function! tlib#balloon#Remove(expr) "{{{3$/;"	f
tlib#bitwise#AND	.\vimfiles\bundle\tlib_vim\autoload\tlib\bitwise.vim	/^function! tlib#bitwise#AND(num1, num2, ...) "{{{3$/;"	f
tlib#bitwise#Add	.\vimfiles\bundle\tlib_vim\autoload\tlib\bitwise.vim	/^function! tlib#bitwise#Add(num1, num2, ...) "{{{3$/;"	f
tlib#bitwise#Bits2Num	.\vimfiles\bundle\tlib_vim\autoload\tlib\bitwise.vim	/^function! tlib#bitwise#Bits2Num(bits, ...) "{{{3$/;"	f
tlib#bitwise#Num2Bits	.\vimfiles\bundle\tlib_vim\autoload\tlib\bitwise.vim	/^function! tlib#bitwise#Num2Bits(num) "{{{3$/;"	f
tlib#bitwise#OR	.\vimfiles\bundle\tlib_vim\autoload\tlib\bitwise.vim	/^function! tlib#bitwise#OR(num1, num2, ...) "{{{3$/;"	f
tlib#bitwise#ShiftLeft	.\vimfiles\bundle\tlib_vim\autoload\tlib\bitwise.vim	/^function! tlib#bitwise#ShiftLeft(bits, n) "{{{3$/;"	f
tlib#bitwise#ShiftRight	.\vimfiles\bundle\tlib_vim\autoload\tlib\bitwise.vim	/^function! tlib#bitwise#ShiftRight(bits, n) "{{{3$/;"	f
tlib#bitwise#Sub	.\vimfiles\bundle\tlib_vim\autoload\tlib\bitwise.vim	/^function! tlib#bitwise#Sub(num1, num2, ...) "{{{3$/;"	f
tlib#bitwise#XOR	.\vimfiles\bundle\tlib_vim\autoload\tlib\bitwise.vim	/^function! tlib#bitwise#XOR(num1, num2, ...) "{{{3$/;"	f
tlib#buffer#BufDo	.\vimfiles\bundle\tlib_vim\autoload\tlib\buffer.vim	/^function! tlib#buffer#BufDo(exec) "{{{3$/;"	f
tlib#buffer#CurrentByte	.\vimfiles\bundle\tlib_vim\autoload\tlib\buffer.vim	/^function! tlib#buffer#CurrentByte() "{{{3$/;"	f
tlib#buffer#DeleteRange	.\vimfiles\bundle\tlib_vim\autoload\tlib\buffer.vim	/^function! tlib#buffer#DeleteRange(line1, line2) "{{{3$/;"	f
tlib#buffer#DisableMRU	.\vimfiles\bundle\tlib_vim\autoload\tlib\buffer.vim	/^function! tlib#buffer#DisableMRU() "{{{3$/;"	f
tlib#buffer#EnableMRU	.\vimfiles\bundle\tlib_vim\autoload\tlib\buffer.vim	/^function! tlib#buffer#EnableMRU() "{{{3$/;"	f
tlib#buffer#Eval	.\vimfiles\bundle\tlib_vim\autoload\tlib\buffer.vim	/^function! tlib#buffer#Eval(buffer, code) "{{{3$/;"	f
tlib#buffer#GetList	.\vimfiles\bundle\tlib_vim\autoload\tlib\buffer.vim	/^function! tlib#buffer#GetList(...)$/;"	f
tlib#buffer#HighlightLine	.\vimfiles\bundle\tlib_vim\autoload\tlib\buffer.vim	/^function! tlib#buffer#HighlightLine(...) "{{{3$/;"	f
tlib#buffer#InsertText	.\vimfiles\bundle\tlib_vim\autoload\tlib\buffer.vim	/^function! tlib#buffer#InsertText(text, ...) "{{{3$/;"	f
tlib#buffer#InsertText0	.\vimfiles\bundle\tlib_vim\autoload\tlib\buffer.vim	/^function! tlib#buffer#InsertText0(text, ...) "{{{3$/;"	f
tlib#buffer#KeepCursorPosition	.\vimfiles\bundle\tlib_vim\autoload\tlib\buffer.vim	/^function! tlib#buffer#KeepCursorPosition(cmd) "{{{3$/;"	f
tlib#buffer#ReplaceRange	.\vimfiles\bundle\tlib_vim\autoload\tlib\buffer.vim	/^function! tlib#buffer#ReplaceRange(line1, line2, lines)$/;"	f
tlib#buffer#ScratchEnd	.\vimfiles\bundle\tlib_vim\autoload\tlib\buffer.vim	/^function! tlib#buffer#ScratchEnd() "{{{3$/;"	f
tlib#buffer#ScratchStart	.\vimfiles\bundle\tlib_vim\autoload\tlib\buffer.vim	/^function! tlib#buffer#ScratchStart() "{{{3$/;"	f
tlib#buffer#Set	.\vimfiles\bundle\tlib_vim\autoload\tlib\buffer.vim	/^function! tlib#buffer#Set(buffer) "{{{3$/;"	f
tlib#buffer#ViewLine	.\vimfiles\bundle\tlib_vim\autoload\tlib\buffer.vim	/^function! tlib#buffer#ViewLine(line, ...) "{{{3$/;"	f
tlib#cache#Dir	.\vimfiles\bundle\tlib_vim\autoload\tlib\cache.vim	/^function! tlib#cache#Dir(...) "{{{3$/;"	f
tlib#cache#Filename	.\vimfiles\bundle\tlib_vim\autoload\tlib\cache.vim	/^function! tlib#cache#Filename(type, ...) "{{{3$/;"	f
tlib#cache#Get	.\vimfiles\bundle\tlib_vim\autoload\tlib\cache.vim	/^function! tlib#cache#Get(cfile) "{{{3$/;"	f
tlib#cache#ListFilesInCache	.\vimfiles\bundle\tlib_vim\autoload\tlib\cache.vim	/^function! tlib#cache#ListFilesInCache(...) "{{{3$/;"	f
tlib#cache#MaybePurge	.\vimfiles\bundle\tlib_vim\autoload\tlib\cache.vim	/^function! tlib#cache#MaybePurge() "{{{3$/;"	f
tlib#cache#Purge	.\vimfiles\bundle\tlib_vim\autoload\tlib\cache.vim	/^function! tlib#cache#Purge() "{{{3$/;"	f
tlib#cache#Save	.\vimfiles\bundle\tlib_vim\autoload\tlib\cache.vim	/^function! tlib#cache#Save(cfile, dictionary) "{{{3$/;"	f
tlib#cache#Value	.\vimfiles\bundle\tlib_vim\autoload\tlib\cache.vim	/^function! tlib#cache#Value(cfile, generator, ftime, ...) "{{{3$/;"	f
tlib#char#Get	.\vimfiles\bundle\tlib_vim\autoload\tlib\char.vim	/^function! tlib#char#Get(...) "{{{3$/;"	f
tlib#char#GetWithTimeout	.\vimfiles\bundle\tlib_vim\autoload\tlib\char.vim	/^function! tlib#char#GetWithTimeout(timeout, ...) "{{{3$/;"	f
tlib#char#IsAvailable	.\vimfiles\bundle\tlib_vim\autoload\tlib\char.vim	/^function! tlib#char#IsAvailable() "{{{3$/;"	f
tlib#cmd#BrowseOutput	.\vimfiles\bundle\tlib_vim\autoload\tlib\cmd.vim	/^function! tlib#cmd#BrowseOutput(command) "{{{3$/;"	f
tlib#cmd#BrowseOutputWithCallback	.\vimfiles\bundle\tlib_vim\autoload\tlib\cmd.vim	/^function! tlib#cmd#BrowseOutputWithCallback(callback, command) "{{{3$/;"	f
tlib#cmd#DefaultBrowseOutput	.\vimfiles\bundle\tlib_vim\autoload\tlib\cmd.vim	/^function! tlib#cmd#DefaultBrowseOutput(cmd) "{{{3$/;"	f
tlib#cmd#OutputAsList	.\vimfiles\bundle\tlib_vim\autoload\tlib\cmd.vim	/^function! tlib#cmd#OutputAsList(command) "{{{3$/;"	f
tlib#cmd#ParseScriptname	.\vimfiles\bundle\tlib_vim\autoload\tlib\cmd.vim	/^function! tlib#cmd#ParseScriptname(line) "{{{3$/;"	f
tlib#cmd#Time	.\vimfiles\bundle\tlib_vim\autoload\tlib\cmd.vim	/^function! tlib#cmd#Time(cmd) "{{{3$/;"	f
tlib#cmd#UseVertical	.\vimfiles\bundle\tlib_vim\autoload\tlib\cmd.vim	/^function! tlib#cmd#UseVertical(...) "{{{3$/;"	f
tlib#comments#Comments	.\vimfiles\bundle\tlib_vim\autoload\tlib\comments.vim	/^function! tlib#comments#Comments(...)$/;"	f
tlib#date#DiffInDays	.\vimfiles\bundle\tlib_vim\autoload\tlib\date.vim	/^function! tlib#date#DiffInDays(date, ...)$/;"	f
tlib#date#Parse	.\vimfiles\bundle\tlib_vim\autoload\tlib\date.vim	/^function! tlib#date#Parse(date, ...) "{{{3$/;"	f
tlib#date#SecondsSince1970	.\vimfiles\bundle\tlib_vim\autoload\tlib\date.vim	/^function! tlib#date#SecondsSince1970(date, ...) "{{{3$/;"	f
tlib#dir#CD	.\vimfiles\bundle\tlib_vim\autoload\tlib\dir.vim	/^function! tlib#dir#CD(dir, ...) "{{{3$/;"	f
tlib#dir#CanonicName	.\vimfiles\bundle\tlib_vim\autoload\tlib\dir.vim	/^function! tlib#dir#CanonicName(dirname) "{{{3$/;"	f
tlib#dir#Ensure	.\vimfiles\bundle\tlib_vim\autoload\tlib\dir.vim	/^function! tlib#dir#Ensure(dir) "{{{3$/;"	f
tlib#dir#MyRuntime	.\vimfiles\bundle\tlib_vim\autoload\tlib\dir.vim	/^function! tlib#dir#MyRuntime() "{{{3$/;"	f
tlib#dir#NativeName	.\vimfiles\bundle\tlib_vim\autoload\tlib\dir.vim	/^function! tlib#dir#NativeName(dirname) "{{{3$/;"	f
tlib#dir#PlainName	.\vimfiles\bundle\tlib_vim\autoload\tlib\dir.vim	/^function! tlib#dir#PlainName(dirname) "{{{3$/;"	f
tlib#dir#Pop	.\vimfiles\bundle\tlib_vim\autoload\tlib\dir.vim	/^function! tlib#dir#Pop() "{{{3$/;"	f
tlib#dir#Push	.\vimfiles\bundle\tlib_vim\autoload\tlib\dir.vim	/^function! tlib#dir#Push(dir, ...) "{{{3$/;"	f
tlib#eval#FormatValue	.\vimfiles\bundle\tlib_vim\autoload\tlib\eval.vim	/^function! tlib#eval#FormatValue(value, ...) "{{{3$/;"	f
tlib#file#Absolute	.\vimfiles\bundle\tlib_vim\autoload\tlib\file.vim	/^function! tlib#file#Absolute(filename, ...) "{{{3$/;"	f
tlib#file#Join	.\vimfiles\bundle\tlib_vim\autoload\tlib\file.vim	/^function! tlib#file#Join(filename_parts, ...) "{{{3$/;"	f
tlib#file#Relative	.\vimfiles\bundle\tlib_vim\autoload\tlib\file.vim	/^function! tlib#file#Relative(filename, basedir) "{{{3$/;"	f
tlib#file#Split	.\vimfiles\bundle\tlib_vim\autoload\tlib\file.vim	/^function! tlib#file#Split(filename) "{{{3$/;"	f
tlib#file#With	.\vimfiles\bundle\tlib_vim\autoload\tlib\file.vim	/^function! tlib#file#With(fcmd, bcmd, files, ...) "{{{3$/;"	f
tlib#fixes#Winpos	.\vimfiles\bundle\tlib_vim\autoload\tlib\fixes.vim	/^function! tlib#fixes#Winpos() "{{{3$/;"	f
tlib#hash#Adler32	.\vimfiles\bundle\tlib_vim\autoload\tlib\hash.vim	/^function! tlib#hash#Adler32(chars) "{{{3$/;"	f
tlib#hash#Adler32_tlib	.\vimfiles\bundle\tlib_vim\autoload\tlib\hash.vim	/^function! tlib#hash#Adler32_tlib(chars) "{{{3$/;"	f
tlib#hash#Adler32_vim	.\vimfiles\bundle\tlib_vim\autoload\tlib\hash.vim	/^function! tlib#hash#Adler32_vim(chars) "{{{3$/;"	f
tlib#hash#CRC32B	.\vimfiles\bundle\tlib_vim\autoload\tlib\hash.vim	/^function! tlib#hash#CRC32B(chars) "{{{3$/;"	f
tlib#hash#CRC32B_ruby	.\vimfiles\bundle\tlib_vim\autoload\tlib\hash.vim	/^function! tlib#hash#CRC32B_ruby(chars) "{{{3$/;"	f
tlib#hash#CRC32B_vim	.\vimfiles\bundle\tlib_vim\autoload\tlib\hash.vim	/^function! tlib#hash#CRC32B_vim(chars) "{{{3$/;"	f
tlib#hash#CreateCrcTable	.\vimfiles\bundle\tlib_vim\autoload\tlib\hash.vim	/^function! tlib#hash#CreateCrcTable() "{{{3$/;"	f
tlib#hook#Run	.\vimfiles\bundle\tlib_vim\autoload\tlib\hook.vim	/^function! tlib#hook#Run(hook, ...) "{{{3$/;"	f
tlib#input#CommandSelect	.\vimfiles\bundle\tlib_vim\autoload\tlib\input.vim	/^function! tlib#input#CommandSelect(command, ...) "{{{3$/;"	f
tlib#input#Dialog	.\vimfiles\bundle\tlib_vim\autoload\tlib\input.vim	/^function! tlib#input#Dialog(text, options, default) "{{{3$/;"	f
tlib#input#Edit	.\vimfiles\bundle\tlib_vim\autoload\tlib\input.vim	/^function! tlib#input#Edit(name, value, callback, ...) "{{{3$/;"	f
tlib#input#EditList	.\vimfiles\bundle\tlib_vim\autoload\tlib\input.vim	/^function! tlib#input#EditList(query, list, ...) "{{{3$/;"	f
tlib#input#List	.\vimfiles\bundle\tlib_vim\autoload\tlib\input.vim	/^function! tlib#input#List(type, ...) "{{{3$/;"	f
tlib#input#ListD	.\vimfiles\bundle\tlib_vim\autoload\tlib\input.vim	/^function! tlib#input#ListD(dict) "{{{3$/;"	f
tlib#input#ListW	.\vimfiles\bundle\tlib_vim\autoload\tlib\input.vim	/^function! tlib#input#ListW(world, ...) "{{{3$/;"	f
tlib#input#Resume	.\vimfiles\bundle\tlib_vim\autoload\tlib\input.vim	/^function! tlib#input#Resume(name, pick, bufnr) "{{{3$/;"	f
tlib#list#All	.\vimfiles\bundle\tlib_vim\autoload\tlib\list.vim	/^function! tlib#list#All(list, expr) "{{{3$/;"	f
tlib#list#Any	.\vimfiles\bundle\tlib_vim\autoload\tlib\list.vim	/^function! tlib#list#Any(list, expr) "{{{3$/;"	f
tlib#list#Compact	.\vimfiles\bundle\tlib_vim\autoload\tlib\list.vim	/^function! tlib#list#Compact(list) "{{{3$/;"	f
tlib#list#Find	.\vimfiles\bundle\tlib_vim\autoload\tlib\list.vim	/^function! tlib#list#Find(list, filter, ...) "{{{3$/;"	f
tlib#list#FindAll	.\vimfiles\bundle\tlib_vim\autoload\tlib\list.vim	/^function! tlib#list#FindAll(list, filter, ...) "{{{3$/;"	f
tlib#list#Flatten	.\vimfiles\bundle\tlib_vim\autoload\tlib\list.vim	/^function! tlib#list#Flatten(list) "{{{3$/;"	f
tlib#list#Inject	.\vimfiles\bundle\tlib_vim\autoload\tlib\list.vim	/^function! tlib#list#Inject(list, value, Function) "{{{3$/;"	f
tlib#list#Remove	.\vimfiles\bundle\tlib_vim\autoload\tlib\list.vim	/^function! tlib#list#Remove(list, element) "{{{3$/;"	f
tlib#list#RemoveAll	.\vimfiles\bundle\tlib_vim\autoload\tlib\list.vim	/^function! tlib#list#RemoveAll(list, element) "{{{3$/;"	f
tlib#list#Uniq	.\vimfiles\bundle\tlib_vim\autoload\tlib\list.vim	/^function! tlib#list#Uniq(list, ...) "{{{3$/;"	f
tlib#list#Zip	.\vimfiles\bundle\tlib_vim\autoload\tlib\list.vim	/^function! tlib#list#Zip(lists, ...) "{{{3$/;"	f
tlib#map#PumAccept	.\vimfiles\bundle\tlib_vim\autoload\tlib\map.vim	/^function! tlib#map#PumAccept(key) "{{{3$/;"	f
tlib#normal#WithRegister	.\vimfiles\bundle\tlib_vim\autoload\tlib\normal.vim	/^function! tlib#normal#WithRegister(cmd, ...) "{{{3$/;"	f
tlib#notify#Echo	.\vimfiles\bundle\tlib_vim\autoload\tlib\notify.vim	/^function! tlib#notify#Echo(text, ...)$/;"	f
tlib#notify#TrimMessage	.\vimfiles\bundle\tlib_vim\autoload\tlib\notify.vim	/^function! tlib#notify#TrimMessage(message) "{{{3$/;"	f
tlib#number#ConvertBase	.\vimfiles\bundle\tlib_vim\autoload\tlib\number.vim	/^function! tlib#number#ConvertBase(num, base, ...) "{{{3$/;"	f
tlib#paragraph#GetMetric	.\vimfiles\bundle\tlib_vim\autoload\tlib\paragraph.vim	/^function! tlib#paragraph#GetMetric() "{{{3$/;"	f
tlib#paragraph#Move	.\vimfiles\bundle\tlib_vim\autoload\tlib\paragraph.vim	/^function! tlib#paragraph#Move(direction, count)$/;"	f
tlib#persistent#Dir	.\vimfiles\bundle\tlib_vim\autoload\tlib\persistent.vim	/^function! tlib#persistent#Dir() "{{{3$/;"	f
tlib#persistent#Filename	.\vimfiles\bundle\tlib_vim\autoload\tlib\persistent.vim	/^function! tlib#persistent#Filename(type, ...) "{{{3$/;"	f
tlib#persistent#Get	.\vimfiles\bundle\tlib_vim\autoload\tlib\persistent.vim	/^function! tlib#persistent#Get(cfile) "{{{3$/;"	f
tlib#persistent#Save	.\vimfiles\bundle\tlib_vim\autoload\tlib\persistent.vim	/^function! tlib#persistent#Save(cfile, dictionary) "{{{3$/;"	f
tlib#persistent#Value	.\vimfiles\bundle\tlib_vim\autoload\tlib\persistent.vim	/^function! tlib#persistent#Value(...) "{{{3$/;"	f
tlib#progressbar#Display	.\vimfiles\bundle\tlib_vim\autoload\tlib\progressbar.vim	/^function! tlib#progressbar#Display(value, ...) "{{{3$/;"	f
tlib#progressbar#Init	.\vimfiles\bundle\tlib_vim\autoload\tlib\progressbar.vim	/^function! tlib#progressbar#Init(max, ...) "{{{3$/;"	f
tlib#progressbar#Restore	.\vimfiles\bundle\tlib_vim\autoload\tlib\progressbar.vim	/^function! tlib#progressbar#Restore() "{{{3$/;"	f
tlib#rx#Escape	.\vimfiles\bundle\tlib_vim\autoload\tlib\rx.vim	/^function! tlib#rx#Escape(text, ...) "{{{3$/;"	f
tlib#rx#EscapeReplace	.\vimfiles\bundle\tlib_vim\autoload\tlib\rx.vim	/^function! tlib#rx#EscapeReplace(text, ...) "{{{3$/;"	f
tlib#rx#Suffixes	.\vimfiles\bundle\tlib_vim\autoload\tlib\rx.vim	/^function! tlib#rx#Suffixes(...) "{{{3$/;"	f
tlib#scratch#CloseScratch	.\vimfiles\bundle\tlib_vim\autoload\tlib\scratch.vim	/^function! tlib#scratch#CloseScratch(keyargs, ...) "{{{3$/;"	f
tlib#scratch#UseScratch	.\vimfiles\bundle\tlib_vim\autoload\tlib\scratch.vim	/^function! tlib#scratch#UseScratch(...) "{{{3$/;"	f
tlib#signs#ClearAll	.\vimfiles\bundle\tlib_vim\autoload\tlib\signs.vim	/^function! tlib#signs#ClearAll(sign) "{{{3$/;"	f
tlib#signs#ClearBuffer	.\vimfiles\bundle\tlib_vim\autoload\tlib\signs.vim	/^function! tlib#signs#ClearBuffer(sign, bufnr) "{{{3$/;"	f
tlib#signs#Mark	.\vimfiles\bundle\tlib_vim\autoload\tlib\signs.vim	/^function! tlib#signs#Mark(sign, list) "{{{3$/;"	f
tlib#string#Chomp	.\vimfiles\bundle\tlib_vim\autoload\tlib\string.vim	/^function! tlib#string#Chomp(string) "{{{3$/;"	f
tlib#string#Count	.\vimfiles\bundle\tlib_vim\autoload\tlib\string.vim	/^function! tlib#string#Count(string, rx) "{{{3$/;"	f
tlib#string#Format	.\vimfiles\bundle\tlib_vim\autoload\tlib\string.vim	/^function! tlib#string#Format(template, dict) "{{{3$/;"	f
tlib#string#Printf1	.\vimfiles\bundle\tlib_vim\autoload\tlib\string.vim	/^function! tlib#string#Printf1(format, string) "{{{3$/;"	f
tlib#string#RemoveBackslashes	.\vimfiles\bundle\tlib_vim\autoload\tlib\string.vim	/^function! tlib#string#RemoveBackslashes(text, ...) "{{{3$/;"	f
tlib#string#Strip	.\vimfiles\bundle\tlib_vim\autoload\tlib\string.vim	/^function! tlib#string#Strip(string) "{{{3$/;"	f
tlib#string#TrimLeft	.\vimfiles\bundle\tlib_vim\autoload\tlib\string.vim	/^function! tlib#string#TrimLeft(string) "{{{3$/;"	f
tlib#string#TrimRight	.\vimfiles\bundle\tlib_vim\autoload\tlib\string.vim	/^function! tlib#string#TrimRight(string) "{{{3$/;"	f
tlib#syntax#Collect	.\vimfiles\bundle\tlib_vim\autoload\tlib\syntax.vim	/^function! tlib#syntax#Collect() "{{{3$/;"	f
tlib#syntax#Names	.\vimfiles\bundle\tlib_vim\autoload\tlib\syntax.vim	/^function! tlib#syntax#Names(...) "{{{3$/;"	f
tlib#tab#BufMap	.\vimfiles\bundle\tlib_vim\autoload\tlib\tab.vim	/^function! tlib#tab#BufMap() "{{{3$/;"	f
tlib#tab#Set	.\vimfiles\bundle\tlib_vim\autoload\tlib\tab.vim	/^function! tlib#tab#Set(tabnr) "{{{3$/;"	f
tlib#tab#TabWinNr	.\vimfiles\bundle\tlib_vim\autoload\tlib\tab.vim	/^function! tlib#tab#TabWinNr(buffer) "{{{3$/;"	f
tlib#tag#Collect	.\vimfiles\bundle\tlib_vim\autoload\tlib\tag.vim	/^function! tlib#tag#Collect(constraints, ...) "{{{3$/;"	f
tlib#tag#Format	.\vimfiles\bundle\tlib_vim\autoload\tlib\tag.vim	/^function! tlib#tag#Format(tag) "{{{3$/;"	f
tlib#tag#Retrieve	.\vimfiles\bundle\tlib_vim\autoload\tlib\tag.vim	/^function! tlib#tag#Retrieve(rx, ...) "{{{3$/;"	f
tlib#textobjects#Init	.\vimfiles\bundle\tlib_vim\autoload\tlib\textobjects.vim	/^function! tlib#textobjects#Init() "{{{3$/;"	f
tlib#textobjects#StandardParagraph	.\vimfiles\bundle\tlib_vim\autoload\tlib\textobjects.vim	/^function! tlib#textobjects#StandardParagraph() "{{{3$/;"	f
tlib#time#Diff	.\vimfiles\bundle\tlib_vim\autoload\tlib\time.vim	/^function! tlib#time#Diff(a, b, ...) "{{{3$/;"	f
tlib#time#DiffMSecs	.\vimfiles\bundle\tlib_vim\autoload\tlib\time.vim	/^function! tlib#time#DiffMSecs(a, b, ...) "{{{3$/;"	f
tlib#time#MSecs	.\vimfiles\bundle\tlib_vim\autoload\tlib\time.vim	/^function! tlib#time#MSecs() "{{{3$/;"	f
tlib#time#Now	.\vimfiles\bundle\tlib_vim\autoload\tlib\time.vim	/^function! tlib#time#Now() "{{{3$/;"	f
tlib#type#IsDictionary	.\vimfiles\bundle\tlib_vim\autoload\tlib\type.vim	/^function! tlib#type#IsDictionary(expr)$/;"	f
tlib#type#IsFuncref	.\vimfiles\bundle\tlib_vim\autoload\tlib\type.vim	/^function! tlib#type#IsFuncref(expr)$/;"	f
tlib#type#IsList	.\vimfiles\bundle\tlib_vim\autoload\tlib\type.vim	/^function! tlib#type#IsList(expr)$/;"	f
tlib#type#IsNumber	.\vimfiles\bundle\tlib_vim\autoload\tlib\type.vim	/^function! tlib#type#IsNumber(expr)$/;"	f
tlib#type#IsString	.\vimfiles\bundle\tlib_vim\autoload\tlib\type.vim	/^function! tlib#type#IsString(expr)$/;"	f
tlib#url#Decode	.\vimfiles\bundle\tlib_vim\autoload\tlib\url.vim	/^function! tlib#url#Decode(url) "{{{3$/;"	f
tlib#url#DecodeChar	.\vimfiles\bundle\tlib_vim\autoload\tlib\url.vim	/^function! tlib#url#DecodeChar(char) "{{{3$/;"	f
tlib#url#Encode	.\vimfiles\bundle\tlib_vim\autoload\tlib\url.vim	/^function! tlib#url#Encode(url, ...) "{{{3$/;"	f
tlib#url#EncodeChar	.\vimfiles\bundle\tlib_vim\autoload\tlib\url.vim	/^function! tlib#url#EncodeChar(char) "{{{3$/;"	f
tlib#var#EGet	.\vimfiles\bundle\tlib_vim\autoload\tlib\var.vim	/^function! tlib#var#EGet(var, namespace, ...) "{{{3$/;"	f
tlib#var#Get	.\vimfiles\bundle\tlib_vim\autoload\tlib\var.vim	/^function! tlib#var#Get(var, namespace, ...) "{{{3$/;"	f
tlib#var#Let	.\vimfiles\bundle\tlib_vim\autoload\tlib\var.vim	/^function! tlib#var#Let(name, val) "{{{3$/;"	f
tlib#var#List	.\vimfiles\bundle\tlib_vim\autoload\tlib\var.vim	/^function! tlib#var#List(rx, ...) "{{{3$/;"	f
tlib#vcs#Diff	.\vimfiles\bundle\tlib_vim\autoload\tlib\vcs.vim	/^function! tlib#vcs#Diff(filename, ...) "{{{3$/;"	f
tlib#vcs#FindVCS	.\vimfiles\bundle\tlib_vim\autoload\tlib\vcs.vim	/^function! tlib#vcs#FindVCS(filename) "{{{3$/;"	f
tlib#vcs#Ls	.\vimfiles\bundle\tlib_vim\autoload\tlib\vcs.vim	/^function! tlib#vcs#Ls(...) "{{{3$/;"	f
tlib#vim#Maximize	.\vimfiles\bundle\tlib_vim\autoload\tlib\vim.vim	/^    fun! tlib#vim#Maximize(fullscreen) "{{{3$/;"	f
tlib#vim#RestoreWindow	.\vimfiles\bundle\tlib_vim\autoload\tlib\vim.vim	/^    function! tlib#vim#RestoreWindow() "{{{3$/;"	f
tlib#win#GetLayout	.\vimfiles\bundle\tlib_vim\autoload\tlib\win.vim	/^function! tlib#win#GetLayout(...) "{{{3$/;"	f
tlib#win#List	.\vimfiles\bundle\tlib_vim\autoload\tlib\win.vim	/^function! tlib#win#List() "{{{3$/;"	f
tlib#win#Set	.\vimfiles\bundle\tlib_vim\autoload\tlib\win.vim	/^function! tlib#win#Set(winnr) "{{{3$/;"	f
tlib#win#SetLayout	.\vimfiles\bundle\tlib_vim\autoload\tlib\win.vim	/^function! tlib#win#SetLayout(layout) "{{{3$/;"	f
tlib#win#Width	.\vimfiles\bundle\tlib_vim\autoload\tlib\win.vim	/^function! tlib#win#Width(wnr) "{{{3$/;"	f
tlib#win#WinDo	.\vimfiles\bundle\tlib_vim\autoload\tlib\win.vim	/^function! tlib#win#WinDo(ex) "{{{3$/;"	f
toDoNext	.\ctags58\ocaml.c	/^parseNext toDoNext;$/;"	v
toLowerString	.\ctags58\routines.c	/^extern void toLowerString (char* str)$/;"	f	signature:(char* str)
toLowerString	.\ctags58\routines.h	/^extern void toLowerString (char* str);$/;"	p	signature:(char* str)
toUpperString	.\ctags58\routines.c	/^extern void toUpperString (char* str)$/;"	f	signature:(char* str)
toUpperString	.\ctags58\routines.h	/^extern void toUpperString (char* str);$/;"	p	signature:(char* str)
toend	.\vim73\ftplugin\cobol.vim	/^function! s:toend(direction)$/;"	f
toggle_focus	.\vimfiles\bundle\command-t\ruby\command-t\controller.rb	/^    def toggle_focus$/;"	f	class:CommandT.Controller.quickfix
tohtml#Convert2HTML	.\vim73\autoload\tohtml.vim	/^func! tohtml#Convert2HTML(line1, line2)$/;"	f
tohtml#Diff2HTML	.\vim73\autoload\tohtml.vim	/^func! tohtml#Diff2HTML(win_list, buf_list)$/;"	f
tohtml#GetOption	.\vim73\autoload\tohtml.vim	/^func! tohtml#GetOption(settings, option, default)$/;"	f
tohtml#GetUserSettings	.\vim73\autoload\tohtml.vim	/^func! tohtml#GetUserSettings()$/;"	f
token	.\ctags58\basic.c	/^	char const *token;$/;"	m	struct:__anon9	file:	access:public
token	.\ctags58\c.c	/^	tokenInfo*	token [(int) NumTokens];$/;"	m	struct:sStatementInfo	file:	access:public
token	.\ctags58\gnu_regex\regex_internal.h	/^  re_token_t token;$/;"	m	struct:bin_tree_t	access:public
tokenIndex	.\ctags58\c.c	/^	unsigned int tokenIndex;    \/* currently active token *\/$/;"	m	struct:sStatementInfo	file:	access:public
tokenInfo	.\ctags58\c.c	/^} tokenInfo;$/;"	t	typeref:struct:sTokenInfo	file:
tokenInfo	.\ctags58\eiffel.c	/^} tokenInfo;$/;"	t	typeref:struct:sTokenInfo	file:
tokenInfo	.\ctags58\flex.c	/^} tokenInfo;$/;"	t	typeref:struct:sTokenInfo	file:
tokenInfo	.\ctags58\fortran.c	/^} tokenInfo;$/;"	t	typeref:struct:sTokenInfo	file:
tokenInfo	.\ctags58\jscript.c	/^} tokenInfo;$/;"	t	typeref:struct:sTokenInfo	file:
tokenInfo	.\ctags58\sql.c	/^} tokenInfo;$/;"	t	typeref:struct:sTokenInfoSQL	file:
tokenInfo	.\ctags58\tex.c	/^} tokenInfo;$/;"	t	typeref:struct:sTokenInfo	file:
tokenInfo	.\ctags58\vhdl.c	/^} tokenInfo;$/;"	t	typeref:struct:sTokenInfo	file:
tokenString	.\ctags58\c.c	/^static const char *tokenString (const tokenType type)$/;"	f	file:	signature:(const tokenType type)
tokenType	.\ctags58\c.c	/^} tokenType;$/;"	t	typeref:enum:eTokenType	file:
tokenType	.\ctags58\eiffel.c	/^} tokenType;$/;"	t	typeref:enum:eTokenType	file:
tokenType	.\ctags58\flex.c	/^} tokenType;$/;"	t	typeref:enum:eTokenType	file:
tokenType	.\ctags58\fortran.c	/^} tokenType;$/;"	t	typeref:enum:eTokenType	file:
tokenType	.\ctags58\jscript.c	/^} tokenType;$/;"	t	typeref:enum:eTokenType	file:
tokenType	.\ctags58\sql.c	/^} tokenType;$/;"	t	typeref:enum:eTokenType	file:
tokenType	.\ctags58\tex.c	/^} tokenType;$/;"	t	typeref:enum:eTokenType	file:
tokenType	.\ctags58\vhdl.c	/^} tokenType;$/;"	t	typeref:enum:eTokenType	file:
topindent	.\vim73\ftplugin\ocaml.vim	/^function s:topindent(lnum)$/;"	f
tovl#scratch_buffer#GetContents	.\vimfiles\bundle\vim-addon-mw-utils\autoload\tovl\scratch_buffer.vim	/^function! tovl#scratch_buffer#GetContents()$/;"	f
tovl#scratch_buffer#Help	.\vimfiles\bundle\vim-addon-mw-utils\autoload\tovl\scratch_buffer.vim	/^function! tovl#scratch_buffer#Help()$/;"	f
tovl#scratch_buffer#KeepIntactLineNr	.\vimfiles\bundle\vim-addon-mw-utils\autoload\tovl\scratch_buffer.vim	/^function! tovl#scratch_buffer#KeepIntactLineNr()$/;"	f
tovl#scratch_buffer#ScratchBuffer	.\vimfiles\bundle\vim-addon-mw-utils\autoload\tovl\scratch_buffer.vim	/^function! tovl#scratch_buffer#ScratchBuffer(opts)$/;"	f
tovl#scratch_buffer#Write	.\vimfiles\bundle\vim-addon-mw-utils\autoload\tovl\scratch_buffer.vim	/^function! tovl#scratch_buffer#Write()$/;"	f
tovl#ui#filter_list#ListTest	.\vimfiles\bundle\vim-addon-mw-utils\autoload\tovl\ui\filter_list.vim	/^fun! tovl#ui#filter_list#ListTest()$/;"	f
tovl#ui#filter_list#ListTestGotoLineCurrentBuf	.\vimfiles\bundle\vim-addon-mw-utils\autoload\tovl\ui\filter_list.vim	/^fun! tovl#ui#filter_list#ListTestGotoLineCurrentBuf()$/;"	f
tovl#ui#filter_list#ListView	.\vimfiles\bundle\vim-addon-mw-utils\autoload\tovl\ui\filter_list.vim	/^fun! tovl#ui#filter_list#ListView(opts)$/;"	f
trans	.\ctags58\gnu_regex\regex_internal.h	/^  RE_TRANSLATE_TYPE trans;$/;"	m	struct:re_string_t	access:public
transit_state	.\ctags58\gnu_regex\regexec.c	/^transit_state (reg_errcode_t *err, re_match_context_t *mctx,$/;"	f	file:	signature:(reg_errcode_t *err, re_match_context_t *mctx, re_dfastate_t *state)
transit_state_bkref	.\ctags58\gnu_regex\regexec.c	/^transit_state_bkref (re_match_context_t *mctx, const re_node_set *nodes)$/;"	f	file:	signature:(re_match_context_t *mctx, const re_node_set *nodes)
transit_state_mb	.\ctags58\gnu_regex\regexec.c	/^transit_state_mb (re_match_context_t *mctx, re_dfastate_t *pstate)$/;"	f	file:	signature:(re_match_context_t *mctx, re_dfastate_t *pstate)
trimmed_system_with_default	.\vim73\ftplugin\changelog.vim	/^  function! s:trimmed_system_with_default(command, default)$/;"	f
trtable	.\ctags58\gnu_regex\regex_internal.h	/^  struct re_dfastate_t **trtable, **word_trtable;$/;"	m	struct:re_dfastate_t	typeref:struct:re_dfastate_t::re_dfastate_t	access:public
truncate	.\ctags58\entry.c	/^extern int truncate (const char *path, off_t length);$/;"	p	file:	signature:(const char *path, off_t length)
truncate	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\async_cache.vim	/^function! s:truncate(str, width) "{{{$/;"	f
truncate	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\prelude.vim	/^function! s:truncate(str, width)$/;"	f
truncateLine	.\ctags58\entry.h	/^	boolean     truncateLine;     \/* truncate tag line at end of tag name? *\/$/;"	m	struct:sTagEntryInfo	access:public
truncateTagLine	.\ctags58\entry.c	/^static void truncateTagLine ($/;"	f	file:	signature:( char *const line, const char *const token, const boolean discardNewline)
truncate_smart	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\prelude.vim	/^function! s:truncate_smart(str, max, footer_width, separator)$/;"	f
truncated_match	.\vimfiles\bundle\command-t\ruby\command-t\match_window.rb	/^    def truncated_match str$/;"	f	class:CommandT.MatchWindow.match_with_syntax_highlight
try_reading_file	.\vim73\ftplugin\changelog.vim	/^  function! s:try_reading_file(path)$/;"	f
type	.\ctags58\args.h	/^	argType type;$/;"	m	struct:sArgs	access:public
type	.\ctags58\c.c	/^	tokenType     type;$/;"	m	struct:sTokenInfo	file:	access:public
type	.\ctags58\eiffel.c	/^	tokenType type;$/;"	m	struct:sTokenInfo	file:	access:public
type	.\ctags58\flex.c	/^	tokenType		type;$/;"	m	struct:sTokenInfo	file:	access:public
type	.\ctags58\fortran.c	/^	tokenType type;$/;"	m	struct:sTokenInfo	file:	access:public
type	.\ctags58\gnu_regex\regex_internal.h	/^  bracket_elem_type type;$/;"	m	struct:__anon39	access:public
type	.\ctags58\gnu_regex\regex_internal.h	/^  re_token_type_t type : 8;$/;"	m	struct:__anon31	access:public
type	.\ctags58\gnu_regex\regex_internal.h	/^  re_token_type_t type;$/;"	m	struct:__anon31	access:public
type	.\ctags58\jscript.c	/^	tokenType		type;$/;"	m	struct:sTokenInfo	file:	access:public
type	.\ctags58\lregex.c	/^	enum pType type;$/;"	m	struct:__anon43	typeref:enum:__anon43::pType	file:	access:public
type	.\ctags58\ocaml.c	/^	contextType type;$/;"	m	struct:_sOcamlContext	file:	access:public
type	.\ctags58\python.c	/^	int type;$/;"	m	struct:NestingLevel	file:	access:public
type	.\ctags58\sql.c	/^	tokenType	type;$/;"	m	struct:sTokenInfoSQL	file:	access:public
type	.\ctags58\tex.c	/^	tokenType		type;$/;"	m	struct:sTokenInfo	file:	access:public
type	.\ctags58\vhdl.c	/^	tokenType type;$/;"	m	struct:sTokenInfo	file:	access:public
typeDecl	.\ctags58\ocaml.c	/^static void typeDecl (vString * const ident, ocaToken what)$/;"	f	file:	signature:(vString * const ident, ocaToken what)
typeRecord	.\ctags58\ocaml.c	/^static void typeRecord (vString * const ident, ocaToken what)$/;"	f	file:	signature:(vString * const ident, ocaToken what)
typeRef	.\ctags58\entry.h	/^		const char* typeRef [2];  \/* e.g., "struct" and struct name *\/$/;"	m	struct:sTagEntryInfo::__anon17	access:public
typeRef	.\ctags58\options.h	/^	boolean typeRef;$/;"	m	struct:sExtFields	access:public
typeSpecification	.\ctags58\ocaml.c	/^static void typeSpecification (vString * const ident, ocaToken what)$/;"	f	file:	signature:(vString * const ident, ocaToken what)
typeSpecification	.\ctags58\ocaml.c	/^static void typeSpecification (vString * const ident, ocaToken what);$/;"	p	file:	signature:(vString * const ident, ocaToken what)
u	.\ctags58\args.h	/^	} u;$/;"	m	struct:sArgs	typeref:union:sArgs::__anon2	access:public
u	.\ctags58\lregex.c	/^	} u;$/;"	m	struct:__anon43	typeref:union:__anon43::__anon44	file:	access:public
u	.\vim73\macros\less.vim	/^noremap <script> u <C-U><SID>L$/;"	m
uc_minlines	.\vim73\syntax\uc.vim	/^  let uc_minlines = 10$/;"	v
uid_t	.\ctags58\e_mac.h	/^typedef unsigned long  uid_t;$/;"	t
unfocus	.\vimfiles\bundle\command-t\ruby\command-t\match_window.rb	/^    def unfocus$/;"	f	class:CommandT.MatchWindow
unfocus	.\vimfiles\bundle\command-t\ruby\command-t\prompt.rb	/^    def unfocus$/;"	f	class:CommandT.Prompt
ungetChar	.\ctags58\fortran.c	/^static void ungetChar (const int c)$/;"	f	file:	signature:(const int c)
ungetch	.\ctags58\get.c	/^	int		ungetch, ungetch2;   \/* ungotten characters, if any *\/$/;"	m	struct:sCppState	file:	access:public
ungetch	.\ctags58\read.h	/^	int         ungetch;       \/* a single character that was ungotten *\/$/;"	m	struct:sInputFile	access:public
ungetch2	.\ctags58\get.c	/^	int		ungetch, ungetch2;   \/* ungotten characters, if any *\/$/;"	m	struct:sCppState	file:	access:public
uniq	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\data\list.vim	/^function! s:uniq(list, ...)$/;"	f
unite#sources#file_include#define	.\vimfiles\bundle\neocomplcache\autoload\unite\sources\file_include.vim	/^function! unite#sources#file_include#define()$/;"	f
unite#sources#neocomplcache#define	.\vimfiles\bundle\neocomplcache\autoload\unite\sources\neocomplcache.vim	/^function! unite#sources#neocomplcache#define() "{{{$/;"	f
unite#sources#neocomplcache#start_complete	.\vimfiles\bundle\neocomplcache\autoload\unite\sources\neocomplcache.vim	/^function! unite#sources#neocomplcache#start_complete() "{{{$/;"	f
unite#sources#neocomplcache#start_quick_match	.\vimfiles\bundle\neocomplcache\autoload\unite\sources\neocomplcache.vim	/^function! unite#sources#neocomplcache#start_quick_match() "{{{$/;"	f
unlink	.\ctags58\general.h	/^extern void *unlink (const char *);$/;"	p	signature:(const char *)
unload	.\vim73\optwin.vim	/^fun! <SID>unload()$/;"	f
unload	.\vimfiles\bundle\command-t\ruby\command-t\controller.rb	/^    def unload$/;"	f	class:CommandT.Controller.quickfix
unload	.\vimfiles\bundle\command-t\ruby\command-t\match_window.rb	/^    def unload$/;"	f	class:CommandT.MatchWindow
unload	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e.vim	/^function! s:unload()$/;"	f
unlock	.\vimfiles\bundle\command-t\ruby\command-t\match_window.rb	/^    def unlock$/;"	f	class:CommandT.MatchWindow.match_with_syntax_highlight
unshift	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\data\list.vim	/^function! s:unshift(list, val)$/;"	f
unused	.\ctags58\gnu_regex\regex_internal.h	/^  char unused;$/;"	m	struct:re_backref_cache_entry	access:public
updatePseudoTags	.\ctags58\entry.c	/^static long unsigned int updatePseudoTags (FILE *const fp)$/;"	f	file:	signature:(FILE *const fp)
updateSortedFlag	.\ctags58\entry.c	/^static void updateSortedFlag ($/;"	f	file:	signature:( const char *const line, FILE *const fp, fpos_t startOfLine)
update_cur_sifted_state	.\ctags58\gnu_regex\regexec.c	/^update_cur_sifted_state (const re_match_context_t *mctx,$/;"	f	file:	signature:(const re_match_context_t *mctx, re_sift_context_t *sctx, int str_idx, re_node_set *dest_nodes)
update_regs	.\ctags58\gnu_regex\regexec.c	/^update_regs (const re_dfa_t *dfa, regmatch_t *pmatch,$/;"	f	file:	signature:(const re_dfa_t *dfa, regmatch_t *pmatch, regmatch_t *prev_idx_match, int cur_node, int cur_idx, int nmatch)
upload	.\vimfiles\bundle\command-t\vendor\vimscriptuploader\vimscriptuploader.rb	/^    def upload(script_def)$/;"	f	class:login
url	.\ctags58\readtags.c	/^		char *url;$/;"	m	struct:sTagFile::__anon65	file:	access:public
url	.\ctags58\readtags.h	/^		const char *url;$/;"	m	struct:__anon68::__anon71	access:public
usage	.\vim73\tools\efm_perl.pl	/^sub usage {$/;"	s
usage	.\vim73\tools\shtags.pl	/^sub usage$/;"	s
use_gui	.\vim73\vimtutor.bat	/^:use_gui$/;"	l
use_vim	.\vim73\vimtutor.bat	/^:use_vim$/;"	l
usedByEtags	.\ctags58\options.c	/^	int usedByEtags;$/;"	m	struct:sOptionDescription	file:	access:public
used_bkref_map	.\ctags58\gnu_regex\regex_internal.h	/^  bitset_word_t used_bkref_map;$/;"	m	struct:re_dfa_t	access:public
username	.\vim73\ftplugin\changelog.vim	/^  function! s:username()$/;"	f
utf8_sb_map	.\ctags58\gnu_regex\regcomp.c	/^static const bitset_t utf8_sb_map =$/;"	v	file:
v	.\vim73\macros\less.vim	/^map v :silent call <SID>End()<CR>$/;"	m
vGetc	.\ctags58\verilog.c	/^static int vGetc (void)$/;"	f	file:	signature:(void)
vLine	.\ctags58\entry.h	/^	vString *vLine;$/;"	m	struct:eTagFile	access:public
vString	.\ctags58\vstring.h	/^} vString;$/;"	t	typeref:struct:sVString
vStringAutoResize	.\ctags58\vstring.c	/^extern boolean vStringAutoResize (vString *const string)$/;"	f	signature:(vString *const string)
vStringAutoResize	.\ctags58\vstring.h	/^extern boolean vStringAutoResize (vString *const string);$/;"	p	signature:(vString *const string)
vStringCat	.\ctags58\vstring.h	41;"	d
vStringCatS	.\ctags58\vstring.c	/^extern void vStringCatS (vString *const string, const char *const s)$/;"	f	signature:(vString *const string, const char *const s)
vStringCatS	.\ctags58\vstring.h	/^extern void vStringCatS (vString *const string, const char *const s);$/;"	p	signature:(vString *const string, const char *const s)
vStringChar	.\ctags58\vstring.h	45;"	d
vStringChop	.\ctags58\vstring.c	/^extern void vStringChop (vString *const string)$/;"	f	signature:(vString *const string)
vStringChop	.\ctags58\vstring.h	/^extern void vStringChop (vString *const string);$/;"	p	signature:(vString *const string)
vStringClear	.\ctags58\vstring.c	/^extern void vStringClear (vString *const string)$/;"	f	signature:(vString *const string)
vStringClear	.\ctags58\vstring.h	/^extern void vStringClear (vString *const string);$/;"	p	signature:(vString *const string)
vStringCopy	.\ctags58\vstring.h	43;"	d
vStringCopyS	.\ctags58\vstring.c	/^extern void vStringCopyS (vString *const string, const char *const s)$/;"	f	signature:(vString *const string, const char *const s)
vStringCopyS	.\ctags58\vstring.h	/^extern void vStringCopyS (vString *const string, const char *const s);$/;"	p	signature:(vString *const string, const char *const s)
vStringCopyToLower	.\ctags58\vstring.c	/^extern void vStringCopyToLower (vString *const dest, const vString *const src)$/;"	f	signature:(vString *const dest, const vString *const src)
vStringCopyToLower	.\ctags58\vstring.h	/^extern void vStringCopyToLower (vString *const dest, const vString *const src);$/;"	p	signature:(vString *const dest, const vString *const src)
vStringDelete	.\ctags58\vstring.c	/^extern void vStringDelete (vString *const string)$/;"	f	signature:(vString *const string)
vStringDelete	.\ctags58\vstring.h	/^extern void vStringDelete (vString *const string);$/;"	p	signature:(vString *const string)
vStringInitialSize	.\ctags58\vstring.c	/^static const size_t vStringInitialSize = 32;$/;"	v	file:
vStringItem	.\ctags58\vstring.h	37;"	d
vStringLast	.\ctags58\vstring.h	38;"	d
vStringLength	.\ctags58\vstring.h	39;"	d
vStringLower	.\ctags58\vstring.h	47;"	d
vStringNCat	.\ctags58\vstring.h	42;"	d
vStringNCatS	.\ctags58\vstring.c	/^extern void vStringNCatS ($/;"	f	signature:( vString *const string, const char *const s, const size_t length)
vStringNCatS	.\ctags58\vstring.h	/^extern void vStringNCatS (vString *const string, const char *const s, const size_t length);$/;"	p	signature:(vString *const string, const char *const s, const size_t length)
vStringNCopy	.\ctags58\vstring.h	44;"	d
vStringNCopyS	.\ctags58\vstring.c	/^extern void vStringNCopyS ($/;"	f	signature:( vString *const string, const char *const s, const size_t length)
vStringNCopyS	.\ctags58\vstring.h	/^extern void vStringNCopyS (vString *const string, const char *const s, const size_t length);$/;"	p	signature:(vString *const string, const char *const s, const size_t length)
vStringNew	.\ctags58\vstring.c	/^extern vString *vStringNew (void)$/;"	f	signature:(void)
vStringNew	.\ctags58\vstring.h	/^extern vString *vStringNew (void);$/;"	p	signature:(void)
vStringNewCopy	.\ctags58\vstring.c	/^extern vString *vStringNewCopy (const vString *const string)$/;"	f	signature:(const vString *const string)
vStringNewCopy	.\ctags58\vstring.h	/^extern vString *vStringNewCopy (const vString *const string);$/;"	p	signature:(const vString *const string)
vStringNewInit	.\ctags58\vstring.c	/^extern vString *vStringNewInit (const char *const s)$/;"	f	signature:(const char *const s)
vStringNewInit	.\ctags58\vstring.h	/^extern vString *vStringNewInit (const char *const s);$/;"	p	signature:(const char *const s)
vStringPut	.\ctags58\vstring.c	/^extern void vStringPut (vString *const string, const int c)$/;"	f	signature:(vString *const string, const int c)
vStringPut	.\ctags58\vstring.h	/^extern void vStringPut (vString *const string, const int c);$/;"	p	signature:(vString *const string, const int c)
vStringPut	.\ctags58\vstring.h	30;"	d
vStringResize	.\ctags58\vstring.c	/^static void vStringResize (vString *const string, const size_t newSize)$/;"	f	file:	signature:(vString *const string, const size_t newSize)
vStringSetLength	.\ctags58\vstring.c	/^extern void vStringSetLength (vString *const string)$/;"	f	signature:(vString *const string)
vStringSetLength	.\ctags58\vstring.h	/^extern void vStringSetLength (vString *const string);$/;"	p	signature:(vString *const string)
vStringSize	.\ctags58\vstring.h	40;"	d
vStringStripLeading	.\ctags58\vstring.c	/^extern void vStringStripLeading (vString *const string)$/;"	f	signature:(vString *const string)
vStringStripLeading	.\ctags58\vstring.h	/^extern void vStringStripLeading (vString *const string);$/;"	p	signature:(vString *const string)
vStringStripNewline	.\ctags58\vstring.c	/^extern void vStringStripNewline (vString *const string)$/;"	f	signature:(vString *const string)
vStringStripNewline	.\ctags58\vstring.h	/^extern void vStringStripNewline (vString *const string);$/;"	p	signature:(vString *const string)
vStringStripTrailing	.\ctags58\vstring.c	/^extern void vStringStripTrailing (vString *const string)$/;"	f	signature:(vString *const string)
vStringStripTrailing	.\ctags58\vstring.h	/^extern void vStringStripTrailing (vString *const string);$/;"	p	signature:(vString *const string)
vStringTerminate	.\ctags58\vstring.h	46;"	d
vStringUpper	.\ctags58\vstring.h	48;"	d
vStringValue	.\ctags58\vstring.h	36;"	d
vUngetc	.\ctags58\verilog.c	/^static void vUngetc (int c)$/;"	f	file:	signature:(int c)
valid_len	.\ctags58\gnu_regex\regex_internal.h	/^  int valid_len;$/;"	m	struct:re_string_t	access:public
valid_raw_len	.\ctags58\gnu_regex\regex_internal.h	/^  int valid_raw_len;$/;"	m	struct:re_string_t	access:public
value	.\ctags58\argproc.c	/^	char *value;$/;"	m	struct:list_item	file:	access:public
value	.\ctags58\entry.h	/^	const char *const *value;  \/* list of values for extension flags *\/$/;"	m	struct:sTagFields	access:public
value	.\ctags58\keyword.c	/^	int value;$/;"	m	struct:sHashEntry	file:	access:public
value	.\ctags58\readtags.h	/^	const char *value;$/;"	m	struct:__anon72	access:public
variableTagType	.\ctags58\fortran.c	/^static tagType variableTagType (void)$/;"	f	file:	signature:(void)
veraKind	.\ctags58\c.c	/^} veraKind;$/;"	t	typeref:enum:__anon15	file:
veraTagKind	.\ctags58\c.c	/^static veraKind veraTagKind (const tagType type) {$/;"	f	file:	signature:(const tagType type)
vera_comment_strings	.\vim73\syntax\vera.vim	/^let vera_comment_strings = 1$/;"	v
verbose	.\ctags58\options.c	/^extern void verbose (const char *const format, ...)$/;"	f	signature:(const char *const format, ...)
verbose	.\ctags58\options.h	/^	boolean verbose;        \/* -V  verbose *\/$/;"	m	struct:sOptionValues	access:public
verilogKind	.\ctags58\verilog.c	/^} verilogKind;$/;"	t	typeref:enum:__anon85	file:
version	.\ctags58\readtags.c	/^		char *version;$/;"	m	struct:sTagFile::__anon65	file:	access:public
version	.\ctags58\readtags.h	/^		const char *version;$/;"	m	struct:__anon68::__anon71	access:public
version	.\vim73\tools\shtags.pl	/^sub version$/;"	s
vhdlKind	.\ctags58\vhdl.c	/^} vhdlKind;$/;"	t	typeref:enum:__anon87	file:
view_changelog	.\vimfiles\bundle\vundle\autoload\vundle\scripts.vim	/^func! s:view_changelog()$/;"	f
view_log	.\vimfiles\bundle\vundle\autoload\vundle\scripts.vim	/^func! s:view_log()$/;"	f
vimKind	.\ctags58\vim.c	/^} vimKind;$/;"	t	typeref:enum:__anon88	file:
vimball#Decompress	.\vim73\autoload\vimball.vim	/^fun! vimball#Decompress(fname,...)$/;"	f
vimball#MkVimball	.\vim73\autoload\vimball.vim	/^fun! vimball#MkVimball(line1,line2,writelevel,...) range$/;"	f
vimball#RestoreSettings	.\vim73\autoload\vimball.vim	/^fun! vimball#RestoreSettings()$/;"	f
vimball#RmVimball	.\vim73\autoload\vimball.vim	/^fun! vimball#RmVimball(...)$/;"	f
vimball#SaveSettings	.\vim73\autoload\vimball.vim	/^fun! vimball#SaveSettings()$/;"	f
vimball#ShowMesg	.\vim73\autoload\vimball.vim	/^fun! vimball#ShowMesg(level,msg)$/;"	f
vimball#Vimball	.\vim73\autoload\vimball.vim	/^fun! vimball#Vimball(really,...)$/;"	f
vimball#VimballHome	.\vim73\autoload\vimball.vim	/^fun! vimball#VimballHome()$/;"	f
vimrcEx	.\vim73\vimrc_example.vim	/^  augroup vimrcEx$/;"	a
vital#	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e.vim	/^function! vital#{s:self_version}#new()$/;"	f
vital#of	.\vimfiles\bundle\neocomplcache\autoload\vital.vim	/^function! vital#of(name)$/;"	f
voidName	.\ctags58\ocaml.c	/^vString *voidName;$/;"	v
vstring	.\ctags58\readtags.c	/^} vstring;$/;"	t	typeref:struct:__anon62	file:
vundle#config#bundle	.\vimfiles\bundle\vundle\autoload\vundle\config.vim	/^func! vundle#config#bundle(arg, ...)$/;"	f
vundle#config#init	.\vimfiles\bundle\vundle\autoload\vundle\config.vim	/^func! vundle#config#init()$/;"	f
vundle#config#init_bundle	.\vimfiles\bundle\vundle\autoload\vundle\config.vim	/^func! vundle#config#init_bundle(name, opts)$/;"	f
vundle#config#require	.\vimfiles\bundle\vundle\autoload\vundle\config.vim	/^func! vundle#config#require(bundles) abort$/;"	f
vundle#installer#clean	.\vimfiles\bundle\vundle\autoload\vundle\installer.vim	/^func! vundle#installer#clean(bang) abort$/;"	f
vundle#installer#delete	.\vimfiles\bundle\vundle\autoload\vundle\installer.vim	/^func! vundle#installer#delete(bang, dir_name) abort$/;"	f
vundle#installer#docs	.\vimfiles\bundle\vundle\autoload\vundle\installer.vim	/^func! vundle#installer#docs() abort$/;"	f
vundle#installer#helptags	.\vimfiles\bundle\vundle\autoload\vundle\installer.vim	/^func! vundle#installer#helptags(bundles) abort$/;"	f
vundle#installer#install	.\vimfiles\bundle\vundle\autoload\vundle\installer.vim	/^func! vundle#installer#install(bang, name) abort$/;"	f
vundle#installer#install_and_require	.\vimfiles\bundle\vundle\autoload\vundle\installer.vim	/^func! vundle#installer#install_and_require(bang, name) abort$/;"	f
vundle#installer#list	.\vimfiles\bundle\vundle\autoload\vundle\installer.vim	/^func! vundle#installer#list(bang) abort$/;"	f
vundle#installer#new	.\vimfiles\bundle\vundle\autoload\vundle\installer.vim	/^func! vundle#installer#new(bang, ...) abort$/;"	f
vundle#installer#run	.\vimfiles\bundle\vundle\autoload\vundle\installer.vim	/^func! vundle#installer#run(func_name, name, ...) abort$/;"	f
vundle#rc	.\vimfiles\bundle\vundle\autoload\vundle.vim	/^func! vundle#rc(...) abort$/;"	f
vundle#scripts#all	.\vimfiles\bundle\vundle\autoload\vundle\scripts.vim	/^func! vundle#scripts#all(bang, ...)$/;"	f
vundle#scripts#bundle_names	.\vimfiles\bundle\vundle\autoload\vundle\scripts.vim	/^func! vundle#scripts#bundle_names(names)$/;"	f
vundle#scripts#complete	.\vimfiles\bundle\vundle\autoload\vundle\scripts.vim	/^func! vundle#scripts#complete(a,c,d)$/;"	f
vundle#scripts#reload	.\vimfiles\bundle\vundle\autoload\vundle\scripts.vim	/^func! vundle#scripts#reload() abort$/;"	f
vundle#scripts#view	.\vimfiles\bundle\vundle\autoload\vundle\scripts.vim	/^func! vundle#scripts#view(title, headers, results)$/;"	f
w	.\vim73\macros\less.vim	/^map w b$/;"	m
w	.\vim73\tutor\tutor.cs	/^       objekt - udává rozsah pøíkazu, napøíklad  w  (slovo),$/;"	m	signature:(slovo)
w	.\vim73\tutor\tutor.cs	/^  2. Objekty jsou také shodné, jako napø.: w (slovo), $ (konec øádku), atd.$/;"	m	signature:(slovo)
waitedToken	.\ctags58\ocaml.c	/^ocaToken waitedToken;$/;"	v
warn	.\vimfiles\bundle\command-t\ruby\command-t\stub.rb	/^    def warn *msg$/;"	f	class:CommandT.Stub
wch	.\ctags58\gnu_regex\regex_internal.h	/^    wchar_t wch;$/;"	m	union:__anon39::__anon40	access:public
wcs	.\ctags58\gnu_regex\regex_internal.h	/^  wint_t *wcs;$/;"	m	struct:re_string_t	access:public
wcswidth	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\async_cache.vim	/^  function! s:wcswidth(str) "{{{$/;"	f
wcswidth	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\prelude.vim	/^  function! s:wcswidth(str)$/;"	f
wcwidth	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\async_cache.vim	/^  function! s:wcwidth(str) "{{{$/;"	f
wcwidth	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\async_cache.vim	/^  function! s:wcwidth(ucs) "{{{$/;"	f
weak_alias	.\ctags58\gnu_regex\regcomp.c	/^weak_alias (__re_compile_pattern, re_compile_pattern)$/;"	f
weak_alias	.\ctags58\gnu_regex\regcomp.c	/^weak_alias (__re_set_syntax, re_set_syntax)$/;"	f
weak_alias	.\ctags58\gnu_regex\regcomp.c	/^weak_alias (__regcomp, regcomp)$/;"	f
weak_alias	.\ctags58\gnu_regex\regexec.c	/^weak_alias (__re_set_registers, re_set_registers)$/;"	f
wild_ignore	.\vimfiles\bundle\command-t\ruby\command-t\vim.rb	/^    def self.wild_ignore$/;"	F	class:CommandT.VIM
with_args	.\vimfiles\bundle\command-t\vendor\vimball\vimball.rb	/^        def with_args(args)$/;"	f	class:Vimball
with_args	.\vimfiles\bundle\command-t\vendor\vimscriptuploader\vimscriptdef.rb	/^        def with_args(args)$/;"	f	class:VimScriptDef
with_args	.\vimfiles\bundle\command-t\vendor\vimscriptuploader\vimscriptuploader.rb	/^        def with_args(args)$/;"	f	class:VimScriptUploader
with_vimball	.\vimfiles\bundle\command-t\vendor\vimball\vimball.rb	/^    def with_vimball(vimball)$/;"	f
word	.\vim73\spell\fixdup.vim	/^  let word = getline(lnum)$/;"	v
word_caching	.\vimfiles\bundle\neocomplcache\autoload\neocomplcache\sources\buffer_complete.vim	/^function! s:word_caching(srcname) "{{{$/;"	f
word_char	.\ctags58\gnu_regex\regex_internal.h	/^  bitset_t word_char;$/;"	m	struct:re_dfa_t	access:public
word_char	.\ctags58\gnu_regex\regex_internal.h	/^  re_const_bitset_ptr_t word_char;$/;"	m	struct:re_string_t	access:public
word_char	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned int word_char : 1;$/;"	m	struct:__anon31	access:public
word_ops_used	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned char word_ops_used;$/;"	m	struct:re_string_t	access:public
word_ops_used	.\ctags58\gnu_regex\regex_internal.h	/^  unsigned int word_ops_used : 1;$/;"	m	struct:re_dfa_t	access:public
word_trtable	.\ctags58\gnu_regex\regex_internal.h	/^  struct re_dfastate_t **trtable, **word_trtable;$/;"	m	struct:re_dfastate_t	typeref:struct:re_dfastate_t::	access:public
wpisanie	.\vim73\tutor\tutor.pl	/^     wpisanie:		:set ic$/;"	l
wpisz	.\vim73\tutor\tutor.pl	/^     wpisz  :%s\/stare\/nowe\/g   by zmieniæ wszystkie wyst±pienia w ca³ym pliku.$/;"	l
wpisz	.\vim73\tutor\tutor.pl	/^     wpisz  :%s\/stare\/nowe\/gc  by zmieniæ wszystkie wyst±pienia w ca³ym$/;"	l
wpisz	.\vim73\tutor\tutor.pl	/^     wpisz:			:wq<ENTER>$/;"	l
wpisz	.\vim73\tutor\tutor.pl	/^     wpisz: :#,#s\/stare\/nowe\/g gdzie #,# s± numerami linii ograniczaj±cych$/;"	l
wpisz	.\vim73\tutor\tutor.pl	/^  wpisz :q<ENTER>        aby zamkn±æ okno pomocy.$/;"	l
writeCompactSourceLine	.\ctags58\entry.c	/^static size_t writeCompactSourceLine (FILE *const fp, const char *const line)$/;"	f	file:	signature:(FILE *const fp, const char *const line)
writeCtagsEntry	.\ctags58\entry.c	/^static int writeCtagsEntry (const tagEntryInfo *const tag)$/;"	f	file:	signature:(const tagEntryInfo *const tag)
writeEtagsEntry	.\ctags58\entry.c	/^static int writeEtagsEntry (const tagEntryInfo *const tag)$/;"	f	file:	signature:(const tagEntryInfo *const tag)
writeEtagsIncludes	.\ctags58\entry.c	/^static void writeEtagsIncludes (FILE *const fp)$/;"	f	file:	signature:(FILE *const fp)
writeLineNumberEntry	.\ctags58\entry.c	/^static int writeLineNumberEntry (const tagEntryInfo *const tag)$/;"	f	file:	signature:(const tagEntryInfo *const tag)
writePatternEntry	.\ctags58\entry.c	/^static int writePatternEntry (const tagEntryInfo *const tag)$/;"	f	file:	signature:(const tagEntryInfo *const tag)
writePseudoTag	.\ctags58\entry.c	/^static void writePseudoTag ($/;"	f	file:	signature:( const char *const tagName, const char *const fileName, const char *const pattern)
writeSortedTags	.\ctags58\sort.c	/^static void writeSortedTags ($/;"	f	file:	signature:( char **const table, const size_t numTags, const boolean toStdout)
writeSourceLine	.\ctags58\entry.c	/^static size_t writeSourceLine (FILE *const fp, const char *const line)$/;"	f	file:	signature:(FILE *const fp, const char *const line)
writeXrefEntry	.\ctags58\entry.c	/^static int writeXrefEntry (const tagEntryInfo *const tag)$/;"	f	file:	signature:(const tagEntryInfo *const tag)
writefile	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\system\cache.vim	/^function! s:writefile(cache_dir, filename, list)$/;"	f
xCalloc	.\ctags58\routines.h	23;"	d
xMalloc	.\ctags58\routines.h	22;"	d
xRealloc	.\ctags58\routines.h	24;"	d
x_error_check	.\vim73\tools\xcmdsrv_client.c	/^static int	x_error_check __ARGS((Display *dpy, XErrorEvent *error_event));$/;"	p	file:	signature:(Display *dpy, XErrorEvent *error_event)
x_error_check	.\vim73\tools\xcmdsrv_client.c	/^x_error_check(dpy, error_event)$/;"	f	file:
xmlcomplete#CompleteTags	.\vim73\autoload\xmlcomplete.vim	/^function! xmlcomplete#CompleteTags(findstart, base)$/;"	f
xmlcomplete#CreateConnection	.\vim73\autoload\xmlcomplete.vim	/^function! xmlcomplete#CreateConnection(canonical, ...) " {{{$/;"	f
xmlcomplete#CreateEntConnection	.\vim73\autoload\xmlcomplete.vim	/^function! xmlcomplete#CreateEntConnection(...) " {{{$/;"	f
xmlcomplete#GetLastOpenTag	.\vim73\autoload\xmlcomplete.vim	/^function! xmlcomplete#GetLastOpenTag(unaryTagsStack)$/;"	f
xref	.\ctags58\options.h	/^	boolean xref;           \/* -x  generate xref output instead *\/$/;"	m	struct:sOptionValues	access:public
y	.\vim73\macros\less.vim	/^map y k$/;"	m
z	.\vim73\macros\less.vim	/^map z <Space>$/;"	m
z	.\vim73\macros\life\life.vim	/^map z ,^,&,*,&<1,*<2$/;"	m
zip	.\vim73\plugin\zipPlugin.vim	/^augroup zip$/;"	a
zip	.\vimfiles\bundle\neocomplcache\autoload\vital\_08a462e\data\list.vim	/^function! s:zip(...)$/;"	f
zip#Browse	.\vim73\autoload\zip.vim	/^fun! zip#Browse(zipfile)$/;"	f
zip#Read	.\vim73\autoload\zip.vim	/^fun! zip#Read(fname,mode)$/;"	f
zip#Write	.\vim73\autoload\zip.vim	/^fun! zip#Write(fname)$/;"	f
zt	.\vim73\syntax\2html.vim	/^  norm! zt$/;"	m
ã®	.\vim73\keymap\kana.vim	/^no ã®$/;"	m
